
CanSat-basestation-v1.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a8c  080001b4  080001b4  000101b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00099f28  08007c40  08007c40  00017c40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080a1b68  080a1b68  000b1b68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080a1b70  080a1b70  000b1b70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080a1b74  080a1b74  000b1b74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000098  20000000  080a1b78  000c0000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  000c0098  2**0
                  CONTENTS
  8 .bss          000004e0  20000098  20000098  000c0098  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20000578  20000578  000c0098  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  000c0098  2**0
                  CONTENTS, READONLY
 11 .debug_info   0001a223  00000000  00000000  000c00c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 0000365f  00000000  00000000  000da2eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000013f0  00000000  00000000  000dd950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00001278  00000000  00000000  000ded40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00007599  00000000  00000000  000dffb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001f5e5  00000000  00000000  000e7551  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00125efb  00000000  00000000  00106b36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  0022ca31  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00005364  00000000  00000000  0022ca84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b4 <__do_global_dtors_aux>:
 80001b4:	b510      	push	{r4, lr}
 80001b6:	4c05      	ldr	r4, [pc, #20]	; (80001cc <__do_global_dtors_aux+0x18>)
 80001b8:	7823      	ldrb	r3, [r4, #0]
 80001ba:	b933      	cbnz	r3, 80001ca <__do_global_dtors_aux+0x16>
 80001bc:	4b04      	ldr	r3, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x1c>)
 80001be:	b113      	cbz	r3, 80001c6 <__do_global_dtors_aux+0x12>
 80001c0:	4804      	ldr	r0, [pc, #16]	; (80001d4 <__do_global_dtors_aux+0x20>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	2301      	movs	r3, #1
 80001c8:	7023      	strb	r3, [r4, #0]
 80001ca:	bd10      	pop	{r4, pc}
 80001cc:	20000098 	.word	0x20000098
 80001d0:	00000000 	.word	0x00000000
 80001d4:	08007c28 	.word	0x08007c28

080001d8 <frame_dummy>:
 80001d8:	b508      	push	{r3, lr}
 80001da:	4b03      	ldr	r3, [pc, #12]	; (80001e8 <frame_dummy+0x10>)
 80001dc:	b11b      	cbz	r3, 80001e6 <frame_dummy+0xe>
 80001de:	4903      	ldr	r1, [pc, #12]	; (80001ec <frame_dummy+0x14>)
 80001e0:	4803      	ldr	r0, [pc, #12]	; (80001f0 <frame_dummy+0x18>)
 80001e2:	f3af 8000 	nop.w
 80001e6:	bd08      	pop	{r3, pc}
 80001e8:	00000000 	.word	0x00000000
 80001ec:	2000009c 	.word	0x2000009c
 80001f0:	08007c28 	.word	0x08007c28

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96e 	b.w	80004f8 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468c      	mov	ip, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	f040 8083 	bne.w	800034a <__udivmoddi4+0x116>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d947      	bls.n	80002da <__udivmoddi4+0xa6>
 800024a:	fab2 f282 	clz	r2, r2
 800024e:	b142      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 8000250:	f1c2 0020 	rsb	r0, r2, #32
 8000254:	fa24 f000 	lsr.w	r0, r4, r0
 8000258:	4091      	lsls	r1, r2
 800025a:	4097      	lsls	r7, r2
 800025c:	ea40 0c01 	orr.w	ip, r0, r1
 8000260:	4094      	lsls	r4, r2
 8000262:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000266:	0c23      	lsrs	r3, r4, #16
 8000268:	fbbc f6f8 	udiv	r6, ip, r8
 800026c:	fa1f fe87 	uxth.w	lr, r7
 8000270:	fb08 c116 	mls	r1, r8, r6, ip
 8000274:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000278:	fb06 f10e 	mul.w	r1, r6, lr
 800027c:	4299      	cmp	r1, r3
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x60>
 8000280:	18fb      	adds	r3, r7, r3
 8000282:	f106 30ff 	add.w	r0, r6, #4294967295
 8000286:	f080 8119 	bcs.w	80004bc <__udivmoddi4+0x288>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 8116 	bls.w	80004bc <__udivmoddi4+0x288>
 8000290:	3e02      	subs	r6, #2
 8000292:	443b      	add	r3, r7
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0f8 	udiv	r0, r3, r8
 800029c:	fb08 3310 	mls	r3, r8, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 fe0e 	mul.w	lr, r0, lr
 80002a8:	45a6      	cmp	lr, r4
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x8c>
 80002ac:	193c      	adds	r4, r7, r4
 80002ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b2:	f080 8105 	bcs.w	80004c0 <__udivmoddi4+0x28c>
 80002b6:	45a6      	cmp	lr, r4
 80002b8:	f240 8102 	bls.w	80004c0 <__udivmoddi4+0x28c>
 80002bc:	3802      	subs	r0, #2
 80002be:	443c      	add	r4, r7
 80002c0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c4:	eba4 040e 	sub.w	r4, r4, lr
 80002c8:	2600      	movs	r6, #0
 80002ca:	b11d      	cbz	r5, 80002d4 <__udivmoddi4+0xa0>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c5 4300 	strd	r4, r3, [r5]
 80002d4:	4631      	mov	r1, r6
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xaa>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f282 	clz	r2, r2
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	d150      	bne.n	8000388 <__udivmoddi4+0x154>
 80002e6:	1bcb      	subs	r3, r1, r7
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	fa1f f887 	uxth.w	r8, r7
 80002f0:	2601      	movs	r6, #1
 80002f2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002f6:	0c21      	lsrs	r1, r4, #16
 80002f8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002fc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000300:	fb08 f30c 	mul.w	r3, r8, ip
 8000304:	428b      	cmp	r3, r1
 8000306:	d907      	bls.n	8000318 <__udivmoddi4+0xe4>
 8000308:	1879      	adds	r1, r7, r1
 800030a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800030e:	d202      	bcs.n	8000316 <__udivmoddi4+0xe2>
 8000310:	428b      	cmp	r3, r1
 8000312:	f200 80e9 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 8000316:	4684      	mov	ip, r0
 8000318:	1ac9      	subs	r1, r1, r3
 800031a:	b2a3      	uxth	r3, r4
 800031c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000320:	fb0e 1110 	mls	r1, lr, r0, r1
 8000324:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000328:	fb08 f800 	mul.w	r8, r8, r0
 800032c:	45a0      	cmp	r8, r4
 800032e:	d907      	bls.n	8000340 <__udivmoddi4+0x10c>
 8000330:	193c      	adds	r4, r7, r4
 8000332:	f100 33ff 	add.w	r3, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x10a>
 8000338:	45a0      	cmp	r8, r4
 800033a:	f200 80d9 	bhi.w	80004f0 <__udivmoddi4+0x2bc>
 800033e:	4618      	mov	r0, r3
 8000340:	eba4 0408 	sub.w	r4, r4, r8
 8000344:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000348:	e7bf      	b.n	80002ca <__udivmoddi4+0x96>
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0x12e>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80b1 	beq.w	80004b6 <__udivmoddi4+0x282>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x1cc>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0x140>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80b8 	bhi.w	80004e4 <__udivmoddi4+0x2b0>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0103 	sbc.w	r1, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	468c      	mov	ip, r1
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0a8      	beq.n	80002d4 <__udivmoddi4+0xa0>
 8000382:	e9c5 4c00 	strd	r4, ip, [r5]
 8000386:	e7a5      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000388:	f1c2 0320 	rsb	r3, r2, #32
 800038c:	fa20 f603 	lsr.w	r6, r0, r3
 8000390:	4097      	lsls	r7, r2
 8000392:	fa01 f002 	lsl.w	r0, r1, r2
 8000396:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800039a:	40d9      	lsrs	r1, r3
 800039c:	4330      	orrs	r0, r6
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	fbb1 f6fe 	udiv	r6, r1, lr
 80003a4:	fa1f f887 	uxth.w	r8, r7
 80003a8:	fb0e 1116 	mls	r1, lr, r6, r1
 80003ac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b0:	fb06 f108 	mul.w	r1, r6, r8
 80003b4:	4299      	cmp	r1, r3
 80003b6:	fa04 f402 	lsl.w	r4, r4, r2
 80003ba:	d909      	bls.n	80003d0 <__udivmoddi4+0x19c>
 80003bc:	18fb      	adds	r3, r7, r3
 80003be:	f106 3cff 	add.w	ip, r6, #4294967295
 80003c2:	f080 808d 	bcs.w	80004e0 <__udivmoddi4+0x2ac>
 80003c6:	4299      	cmp	r1, r3
 80003c8:	f240 808a 	bls.w	80004e0 <__udivmoddi4+0x2ac>
 80003cc:	3e02      	subs	r6, #2
 80003ce:	443b      	add	r3, r7
 80003d0:	1a5b      	subs	r3, r3, r1
 80003d2:	b281      	uxth	r1, r0
 80003d4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003d8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003e0:	fb00 f308 	mul.w	r3, r0, r8
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d907      	bls.n	80003f8 <__udivmoddi4+0x1c4>
 80003e8:	1879      	adds	r1, r7, r1
 80003ea:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ee:	d273      	bcs.n	80004d8 <__udivmoddi4+0x2a4>
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d971      	bls.n	80004d8 <__udivmoddi4+0x2a4>
 80003f4:	3802      	subs	r0, #2
 80003f6:	4439      	add	r1, r7
 80003f8:	1acb      	subs	r3, r1, r3
 80003fa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003fe:	e778      	b.n	80002f2 <__udivmoddi4+0xbe>
 8000400:	f1c6 0c20 	rsb	ip, r6, #32
 8000404:	fa03 f406 	lsl.w	r4, r3, r6
 8000408:	fa22 f30c 	lsr.w	r3, r2, ip
 800040c:	431c      	orrs	r4, r3
 800040e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800041a:	fa21 f10c 	lsr.w	r1, r1, ip
 800041e:	431f      	orrs	r7, r3
 8000420:	0c3b      	lsrs	r3, r7, #16
 8000422:	fbb1 f9fe 	udiv	r9, r1, lr
 8000426:	fa1f f884 	uxth.w	r8, r4
 800042a:	fb0e 1119 	mls	r1, lr, r9, r1
 800042e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000432:	fb09 fa08 	mul.w	sl, r9, r8
 8000436:	458a      	cmp	sl, r1
 8000438:	fa02 f206 	lsl.w	r2, r2, r6
 800043c:	fa00 f306 	lsl.w	r3, r0, r6
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x220>
 8000442:	1861      	adds	r1, r4, r1
 8000444:	f109 30ff 	add.w	r0, r9, #4294967295
 8000448:	d248      	bcs.n	80004dc <__udivmoddi4+0x2a8>
 800044a:	458a      	cmp	sl, r1
 800044c:	d946      	bls.n	80004dc <__udivmoddi4+0x2a8>
 800044e:	f1a9 0902 	sub.w	r9, r9, #2
 8000452:	4421      	add	r1, r4
 8000454:	eba1 010a 	sub.w	r1, r1, sl
 8000458:	b2bf      	uxth	r7, r7
 800045a:	fbb1 f0fe 	udiv	r0, r1, lr
 800045e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000462:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000466:	fb00 f808 	mul.w	r8, r0, r8
 800046a:	45b8      	cmp	r8, r7
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x24a>
 800046e:	19e7      	adds	r7, r4, r7
 8000470:	f100 31ff 	add.w	r1, r0, #4294967295
 8000474:	d22e      	bcs.n	80004d4 <__udivmoddi4+0x2a0>
 8000476:	45b8      	cmp	r8, r7
 8000478:	d92c      	bls.n	80004d4 <__udivmoddi4+0x2a0>
 800047a:	3802      	subs	r0, #2
 800047c:	4427      	add	r7, r4
 800047e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000482:	eba7 0708 	sub.w	r7, r7, r8
 8000486:	fba0 8902 	umull	r8, r9, r0, r2
 800048a:	454f      	cmp	r7, r9
 800048c:	46c6      	mov	lr, r8
 800048e:	4649      	mov	r1, r9
 8000490:	d31a      	bcc.n	80004c8 <__udivmoddi4+0x294>
 8000492:	d017      	beq.n	80004c4 <__udivmoddi4+0x290>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x27a>
 8000496:	ebb3 020e 	subs.w	r2, r3, lr
 800049a:	eb67 0701 	sbc.w	r7, r7, r1
 800049e:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004a2:	40f2      	lsrs	r2, r6
 80004a4:	ea4c 0202 	orr.w	r2, ip, r2
 80004a8:	40f7      	lsrs	r7, r6
 80004aa:	e9c5 2700 	strd	r2, r7, [r5]
 80004ae:	2600      	movs	r6, #0
 80004b0:	4631      	mov	r1, r6
 80004b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b6:	462e      	mov	r6, r5
 80004b8:	4628      	mov	r0, r5
 80004ba:	e70b      	b.n	80002d4 <__udivmoddi4+0xa0>
 80004bc:	4606      	mov	r6, r0
 80004be:	e6e9      	b.n	8000294 <__udivmoddi4+0x60>
 80004c0:	4618      	mov	r0, r3
 80004c2:	e6fd      	b.n	80002c0 <__udivmoddi4+0x8c>
 80004c4:	4543      	cmp	r3, r8
 80004c6:	d2e5      	bcs.n	8000494 <__udivmoddi4+0x260>
 80004c8:	ebb8 0e02 	subs.w	lr, r8, r2
 80004cc:	eb69 0104 	sbc.w	r1, r9, r4
 80004d0:	3801      	subs	r0, #1
 80004d2:	e7df      	b.n	8000494 <__udivmoddi4+0x260>
 80004d4:	4608      	mov	r0, r1
 80004d6:	e7d2      	b.n	800047e <__udivmoddi4+0x24a>
 80004d8:	4660      	mov	r0, ip
 80004da:	e78d      	b.n	80003f8 <__udivmoddi4+0x1c4>
 80004dc:	4681      	mov	r9, r0
 80004de:	e7b9      	b.n	8000454 <__udivmoddi4+0x220>
 80004e0:	4666      	mov	r6, ip
 80004e2:	e775      	b.n	80003d0 <__udivmoddi4+0x19c>
 80004e4:	4630      	mov	r0, r6
 80004e6:	e74a      	b.n	800037e <__udivmoddi4+0x14a>
 80004e8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004ec:	4439      	add	r1, r7
 80004ee:	e713      	b.n	8000318 <__udivmoddi4+0xe4>
 80004f0:	3802      	subs	r0, #2
 80004f2:	443c      	add	r4, r7
 80004f4:	e724      	b.n	8000340 <__udivmoddi4+0x10c>
 80004f6:	bf00      	nop

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000500:	4b0e      	ldr	r3, [pc, #56]	; (800053c <HAL_Init+0x40>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	4a0d      	ldr	r2, [pc, #52]	; (800053c <HAL_Init+0x40>)
 8000506:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800050a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800050c:	4b0b      	ldr	r3, [pc, #44]	; (800053c <HAL_Init+0x40>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	4a0a      	ldr	r2, [pc, #40]	; (800053c <HAL_Init+0x40>)
 8000512:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000516:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000518:	4b08      	ldr	r3, [pc, #32]	; (800053c <HAL_Init+0x40>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	4a07      	ldr	r2, [pc, #28]	; (800053c <HAL_Init+0x40>)
 800051e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000522:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000524:	2003      	movs	r0, #3
 8000526:	f000 f94f 	bl	80007c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800052a:	200f      	movs	r0, #15
 800052c:	f000 f808 	bl	8000540 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000530:	f007 fa2a 	bl	8007988 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000534:	2300      	movs	r3, #0
}
 8000536:	4618      	mov	r0, r3
 8000538:	bd80      	pop	{r7, pc}
 800053a:	bf00      	nop
 800053c:	40023c00 	.word	0x40023c00

08000540 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b082      	sub	sp, #8
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000548:	4b12      	ldr	r3, [pc, #72]	; (8000594 <HAL_InitTick+0x54>)
 800054a:	681a      	ldr	r2, [r3, #0]
 800054c:	4b12      	ldr	r3, [pc, #72]	; (8000598 <HAL_InitTick+0x58>)
 800054e:	781b      	ldrb	r3, [r3, #0]
 8000550:	4619      	mov	r1, r3
 8000552:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000556:	fbb3 f3f1 	udiv	r3, r3, r1
 800055a:	fbb2 f3f3 	udiv	r3, r2, r3
 800055e:	4618      	mov	r0, r3
 8000560:	f000 f967 	bl	8000832 <HAL_SYSTICK_Config>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d001      	beq.n	800056e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800056a:	2301      	movs	r3, #1
 800056c:	e00e      	b.n	800058c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	2b0f      	cmp	r3, #15
 8000572:	d80a      	bhi.n	800058a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000574:	2200      	movs	r2, #0
 8000576:	6879      	ldr	r1, [r7, #4]
 8000578:	f04f 30ff 	mov.w	r0, #4294967295
 800057c:	f000 f92f 	bl	80007de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000580:	4a06      	ldr	r2, [pc, #24]	; (800059c <HAL_InitTick+0x5c>)
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000586:	2300      	movs	r3, #0
 8000588:	e000      	b.n	800058c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800058a:	2301      	movs	r3, #1
}
 800058c:	4618      	mov	r0, r3
 800058e:	3708      	adds	r7, #8
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}
 8000594:	20000094 	.word	0x20000094
 8000598:	20000004 	.word	0x20000004
 800059c:	20000000 	.word	0x20000000

080005a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005a4:	4b06      	ldr	r3, [pc, #24]	; (80005c0 <HAL_IncTick+0x20>)
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	461a      	mov	r2, r3
 80005aa:	4b06      	ldr	r3, [pc, #24]	; (80005c4 <HAL_IncTick+0x24>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	4413      	add	r3, r2
 80005b0:	4a04      	ldr	r2, [pc, #16]	; (80005c4 <HAL_IncTick+0x24>)
 80005b2:	6013      	str	r3, [r2, #0]
}
 80005b4:	bf00      	nop
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop
 80005c0:	20000004 	.word	0x20000004
 80005c4:	200003f0 	.word	0x200003f0

080005c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  return uwTick;
 80005cc:	4b03      	ldr	r3, [pc, #12]	; (80005dc <HAL_GetTick+0x14>)
 80005ce:	681b      	ldr	r3, [r3, #0]
}
 80005d0:	4618      	mov	r0, r3
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop
 80005dc:	200003f0 	.word	0x200003f0

080005e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b084      	sub	sp, #16
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005e8:	f7ff ffee 	bl	80005c8 <HAL_GetTick>
 80005ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005f8:	d005      	beq.n	8000606 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80005fa:	4b0a      	ldr	r3, [pc, #40]	; (8000624 <HAL_Delay+0x44>)
 80005fc:	781b      	ldrb	r3, [r3, #0]
 80005fe:	461a      	mov	r2, r3
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	4413      	add	r3, r2
 8000604:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000606:	bf00      	nop
 8000608:	f7ff ffde 	bl	80005c8 <HAL_GetTick>
 800060c:	4602      	mov	r2, r0
 800060e:	68bb      	ldr	r3, [r7, #8]
 8000610:	1ad3      	subs	r3, r2, r3
 8000612:	68fa      	ldr	r2, [r7, #12]
 8000614:	429a      	cmp	r2, r3
 8000616:	d8f7      	bhi.n	8000608 <HAL_Delay+0x28>
  {
  }
}
 8000618:	bf00      	nop
 800061a:	bf00      	nop
 800061c:	3710      	adds	r7, #16
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	20000004 	.word	0x20000004

08000628 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000628:	b480      	push	{r7}
 800062a:	b085      	sub	sp, #20
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	f003 0307 	and.w	r3, r3, #7
 8000636:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000638:	4b0c      	ldr	r3, [pc, #48]	; (800066c <__NVIC_SetPriorityGrouping+0x44>)
 800063a:	68db      	ldr	r3, [r3, #12]
 800063c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800063e:	68ba      	ldr	r2, [r7, #8]
 8000640:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000644:	4013      	ands	r3, r2
 8000646:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000648:	68fb      	ldr	r3, [r7, #12]
 800064a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800064c:	68bb      	ldr	r3, [r7, #8]
 800064e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000650:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000654:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000658:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800065a:	4a04      	ldr	r2, [pc, #16]	; (800066c <__NVIC_SetPriorityGrouping+0x44>)
 800065c:	68bb      	ldr	r3, [r7, #8]
 800065e:	60d3      	str	r3, [r2, #12]
}
 8000660:	bf00      	nop
 8000662:	3714      	adds	r7, #20
 8000664:	46bd      	mov	sp, r7
 8000666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066a:	4770      	bx	lr
 800066c:	e000ed00 	.word	0xe000ed00

08000670 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000674:	4b04      	ldr	r3, [pc, #16]	; (8000688 <__NVIC_GetPriorityGrouping+0x18>)
 8000676:	68db      	ldr	r3, [r3, #12]
 8000678:	0a1b      	lsrs	r3, r3, #8
 800067a:	f003 0307 	and.w	r3, r3, #7
}
 800067e:	4618      	mov	r0, r3
 8000680:	46bd      	mov	sp, r7
 8000682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000686:	4770      	bx	lr
 8000688:	e000ed00 	.word	0xe000ed00

0800068c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800068c:	b480      	push	{r7}
 800068e:	b083      	sub	sp, #12
 8000690:	af00      	add	r7, sp, #0
 8000692:	4603      	mov	r3, r0
 8000694:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800069a:	2b00      	cmp	r3, #0
 800069c:	db0b      	blt.n	80006b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800069e:	79fb      	ldrb	r3, [r7, #7]
 80006a0:	f003 021f 	and.w	r2, r3, #31
 80006a4:	4907      	ldr	r1, [pc, #28]	; (80006c4 <__NVIC_EnableIRQ+0x38>)
 80006a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006aa:	095b      	lsrs	r3, r3, #5
 80006ac:	2001      	movs	r0, #1
 80006ae:	fa00 f202 	lsl.w	r2, r0, r2
 80006b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80006b6:	bf00      	nop
 80006b8:	370c      	adds	r7, #12
 80006ba:	46bd      	mov	sp, r7
 80006bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c0:	4770      	bx	lr
 80006c2:	bf00      	nop
 80006c4:	e000e100 	.word	0xe000e100

080006c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006c8:	b480      	push	{r7}
 80006ca:	b083      	sub	sp, #12
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	4603      	mov	r3, r0
 80006d0:	6039      	str	r1, [r7, #0]
 80006d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	db0a      	blt.n	80006f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006dc:	683b      	ldr	r3, [r7, #0]
 80006de:	b2da      	uxtb	r2, r3
 80006e0:	490c      	ldr	r1, [pc, #48]	; (8000714 <__NVIC_SetPriority+0x4c>)
 80006e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006e6:	0112      	lsls	r2, r2, #4
 80006e8:	b2d2      	uxtb	r2, r2
 80006ea:	440b      	add	r3, r1
 80006ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006f0:	e00a      	b.n	8000708 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006f2:	683b      	ldr	r3, [r7, #0]
 80006f4:	b2da      	uxtb	r2, r3
 80006f6:	4908      	ldr	r1, [pc, #32]	; (8000718 <__NVIC_SetPriority+0x50>)
 80006f8:	79fb      	ldrb	r3, [r7, #7]
 80006fa:	f003 030f 	and.w	r3, r3, #15
 80006fe:	3b04      	subs	r3, #4
 8000700:	0112      	lsls	r2, r2, #4
 8000702:	b2d2      	uxtb	r2, r2
 8000704:	440b      	add	r3, r1
 8000706:	761a      	strb	r2, [r3, #24]
}
 8000708:	bf00      	nop
 800070a:	370c      	adds	r7, #12
 800070c:	46bd      	mov	sp, r7
 800070e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000712:	4770      	bx	lr
 8000714:	e000e100 	.word	0xe000e100
 8000718:	e000ed00 	.word	0xe000ed00

0800071c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800071c:	b480      	push	{r7}
 800071e:	b089      	sub	sp, #36	; 0x24
 8000720:	af00      	add	r7, sp, #0
 8000722:	60f8      	str	r0, [r7, #12]
 8000724:	60b9      	str	r1, [r7, #8]
 8000726:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	f003 0307 	and.w	r3, r3, #7
 800072e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000730:	69fb      	ldr	r3, [r7, #28]
 8000732:	f1c3 0307 	rsb	r3, r3, #7
 8000736:	2b04      	cmp	r3, #4
 8000738:	bf28      	it	cs
 800073a:	2304      	movcs	r3, #4
 800073c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800073e:	69fb      	ldr	r3, [r7, #28]
 8000740:	3304      	adds	r3, #4
 8000742:	2b06      	cmp	r3, #6
 8000744:	d902      	bls.n	800074c <NVIC_EncodePriority+0x30>
 8000746:	69fb      	ldr	r3, [r7, #28]
 8000748:	3b03      	subs	r3, #3
 800074a:	e000      	b.n	800074e <NVIC_EncodePriority+0x32>
 800074c:	2300      	movs	r3, #0
 800074e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000750:	f04f 32ff 	mov.w	r2, #4294967295
 8000754:	69bb      	ldr	r3, [r7, #24]
 8000756:	fa02 f303 	lsl.w	r3, r2, r3
 800075a:	43da      	mvns	r2, r3
 800075c:	68bb      	ldr	r3, [r7, #8]
 800075e:	401a      	ands	r2, r3
 8000760:	697b      	ldr	r3, [r7, #20]
 8000762:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000764:	f04f 31ff 	mov.w	r1, #4294967295
 8000768:	697b      	ldr	r3, [r7, #20]
 800076a:	fa01 f303 	lsl.w	r3, r1, r3
 800076e:	43d9      	mvns	r1, r3
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000774:	4313      	orrs	r3, r2
         );
}
 8000776:	4618      	mov	r0, r3
 8000778:	3724      	adds	r7, #36	; 0x24
 800077a:	46bd      	mov	sp, r7
 800077c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000780:	4770      	bx	lr
	...

08000784 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	3b01      	subs	r3, #1
 8000790:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000794:	d301      	bcc.n	800079a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000796:	2301      	movs	r3, #1
 8000798:	e00f      	b.n	80007ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800079a:	4a0a      	ldr	r2, [pc, #40]	; (80007c4 <SysTick_Config+0x40>)
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	3b01      	subs	r3, #1
 80007a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007a2:	210f      	movs	r1, #15
 80007a4:	f04f 30ff 	mov.w	r0, #4294967295
 80007a8:	f7ff ff8e 	bl	80006c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007ac:	4b05      	ldr	r3, [pc, #20]	; (80007c4 <SysTick_Config+0x40>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007b2:	4b04      	ldr	r3, [pc, #16]	; (80007c4 <SysTick_Config+0x40>)
 80007b4:	2207      	movs	r2, #7
 80007b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007b8:	2300      	movs	r3, #0
}
 80007ba:	4618      	mov	r0, r3
 80007bc:	3708      	adds	r7, #8
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	e000e010 	.word	0xe000e010

080007c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007d0:	6878      	ldr	r0, [r7, #4]
 80007d2:	f7ff ff29 	bl	8000628 <__NVIC_SetPriorityGrouping>
}
 80007d6:	bf00      	nop
 80007d8:	3708      	adds	r7, #8
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}

080007de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007de:	b580      	push	{r7, lr}
 80007e0:	b086      	sub	sp, #24
 80007e2:	af00      	add	r7, sp, #0
 80007e4:	4603      	mov	r3, r0
 80007e6:	60b9      	str	r1, [r7, #8]
 80007e8:	607a      	str	r2, [r7, #4]
 80007ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007ec:	2300      	movs	r3, #0
 80007ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007f0:	f7ff ff3e 	bl	8000670 <__NVIC_GetPriorityGrouping>
 80007f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007f6:	687a      	ldr	r2, [r7, #4]
 80007f8:	68b9      	ldr	r1, [r7, #8]
 80007fa:	6978      	ldr	r0, [r7, #20]
 80007fc:	f7ff ff8e 	bl	800071c <NVIC_EncodePriority>
 8000800:	4602      	mov	r2, r0
 8000802:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000806:	4611      	mov	r1, r2
 8000808:	4618      	mov	r0, r3
 800080a:	f7ff ff5d 	bl	80006c8 <__NVIC_SetPriority>
}
 800080e:	bf00      	nop
 8000810:	3718      	adds	r7, #24
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}

08000816 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000816:	b580      	push	{r7, lr}
 8000818:	b082      	sub	sp, #8
 800081a:	af00      	add	r7, sp, #0
 800081c:	4603      	mov	r3, r0
 800081e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000820:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000824:	4618      	mov	r0, r3
 8000826:	f7ff ff31 	bl	800068c <__NVIC_EnableIRQ>
}
 800082a:	bf00      	nop
 800082c:	3708      	adds	r7, #8
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}

08000832 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000832:	b580      	push	{r7, lr}
 8000834:	b082      	sub	sp, #8
 8000836:	af00      	add	r7, sp, #0
 8000838:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800083a:	6878      	ldr	r0, [r7, #4]
 800083c:	f7ff ffa2 	bl	8000784 <SysTick_Config>
 8000840:	4603      	mov	r3, r0
}
 8000842:	4618      	mov	r0, r3
 8000844:	3708      	adds	r7, #8
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}

0800084a <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 800084a:	b580      	push	{r7, lr}
 800084c:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 800084e:	f000 f802 	bl	8000856 <HAL_SYSTICK_Callback>
}
 8000852:	bf00      	nop
 8000854:	bd80      	pop	{r7, pc}

08000856 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000856:	b480      	push	{r7}
 8000858:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 800085a:	bf00      	nop
 800085c:	46bd      	mov	sp, r7
 800085e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000862:	4770      	bx	lr

08000864 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b086      	sub	sp, #24
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800086c:	2300      	movs	r3, #0
 800086e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000870:	f7ff feaa 	bl	80005c8 <HAL_GetTick>
 8000874:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	2b00      	cmp	r3, #0
 800087a:	d101      	bne.n	8000880 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800087c:	2301      	movs	r3, #1
 800087e:	e099      	b.n	80009b4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	2200      	movs	r2, #0
 8000884:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	2202      	movs	r2, #2
 800088c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	681a      	ldr	r2, [r3, #0]
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	f022 0201 	bic.w	r2, r2, #1
 800089e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80008a0:	e00f      	b.n	80008c2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80008a2:	f7ff fe91 	bl	80005c8 <HAL_GetTick>
 80008a6:	4602      	mov	r2, r0
 80008a8:	693b      	ldr	r3, [r7, #16]
 80008aa:	1ad3      	subs	r3, r2, r3
 80008ac:	2b05      	cmp	r3, #5
 80008ae:	d908      	bls.n	80008c2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	2220      	movs	r2, #32
 80008b4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	2203      	movs	r2, #3
 80008ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80008be:	2303      	movs	r3, #3
 80008c0:	e078      	b.n	80009b4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	f003 0301 	and.w	r3, r3, #1
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d1e8      	bne.n	80008a2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80008d8:	697a      	ldr	r2, [r7, #20]
 80008da:	4b38      	ldr	r3, [pc, #224]	; (80009bc <HAL_DMA_Init+0x158>)
 80008dc:	4013      	ands	r3, r2
 80008de:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	685a      	ldr	r2, [r3, #4]
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	689b      	ldr	r3, [r3, #8]
 80008e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80008ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	691b      	ldr	r3, [r3, #16]
 80008f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80008fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	699b      	ldr	r3, [r3, #24]
 8000900:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000906:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	6a1b      	ldr	r3, [r3, #32]
 800090c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800090e:	697a      	ldr	r2, [r7, #20]
 8000910:	4313      	orrs	r3, r2
 8000912:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000918:	2b04      	cmp	r3, #4
 800091a:	d107      	bne.n	800092c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000924:	4313      	orrs	r3, r2
 8000926:	697a      	ldr	r2, [r7, #20]
 8000928:	4313      	orrs	r3, r2
 800092a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	697a      	ldr	r2, [r7, #20]
 8000932:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	695b      	ldr	r3, [r3, #20]
 800093a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800093c:	697b      	ldr	r3, [r7, #20]
 800093e:	f023 0307 	bic.w	r3, r3, #7
 8000942:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000948:	697a      	ldr	r2, [r7, #20]
 800094a:	4313      	orrs	r3, r2
 800094c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000952:	2b04      	cmp	r3, #4
 8000954:	d117      	bne.n	8000986 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800095a:	697a      	ldr	r2, [r7, #20]
 800095c:	4313      	orrs	r3, r2
 800095e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000964:	2b00      	cmp	r3, #0
 8000966:	d00e      	beq.n	8000986 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000968:	6878      	ldr	r0, [r7, #4]
 800096a:	f000 f8df 	bl	8000b2c <DMA_CheckFifoParam>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d008      	beq.n	8000986 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	2240      	movs	r2, #64	; 0x40
 8000978:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	2201      	movs	r2, #1
 800097e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8000982:	2301      	movs	r3, #1
 8000984:	e016      	b.n	80009b4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	697a      	ldr	r2, [r7, #20]
 800098c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800098e:	6878      	ldr	r0, [r7, #4]
 8000990:	f000 f896 	bl	8000ac0 <DMA_CalcBaseAndBitshift>
 8000994:	4603      	mov	r3, r0
 8000996:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800099c:	223f      	movs	r2, #63	; 0x3f
 800099e:	409a      	lsls	r2, r3
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	2200      	movs	r2, #0
 80009a8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	2201      	movs	r2, #1
 80009ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80009b2:	2300      	movs	r3, #0
}
 80009b4:	4618      	mov	r0, r3
 80009b6:	3718      	adds	r7, #24
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	f010803f 	.word	0xf010803f

080009c0 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b084      	sub	sp, #16
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d101      	bne.n	80009d2 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80009ce:	2301      	movs	r3, #1
 80009d0:	e050      	b.n	8000a74 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80009d8:	b2db      	uxtb	r3, r3
 80009da:	2b02      	cmp	r3, #2
 80009dc:	d101      	bne.n	80009e2 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80009de:	2302      	movs	r3, #2
 80009e0:	e048      	b.n	8000a74 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	681a      	ldr	r2, [r3, #0]
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	f022 0201 	bic.w	r2, r2, #1
 80009f0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	2200      	movs	r2, #0
 80009f8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	2200      	movs	r2, #0
 8000a00:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	2200      	movs	r2, #0
 8000a08:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	2200      	movs	r2, #0
 8000a10:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	2200      	movs	r2, #0
 8000a18:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	2221      	movs	r2, #33	; 0x21
 8000a20:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000a22:	6878      	ldr	r0, [r7, #4]
 8000a24:	f000 f84c 	bl	8000ac0 <DMA_CalcBaseAndBitshift>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	2200      	movs	r2, #0
 8000a30:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	2200      	movs	r2, #0
 8000a36:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	2200      	movs	r2, #0
 8000a42:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	2200      	movs	r2, #0
 8000a48:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a54:	223f      	movs	r2, #63	; 0x3f
 8000a56:	409a      	lsls	r2, r3
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	2200      	movs	r2, #0
 8000a60:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	2200      	movs	r2, #0
 8000a66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8000a72:	2300      	movs	r3, #0
}
 8000a74:	4618      	mov	r0, r3
 8000a76:	3710      	adds	r7, #16
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}

08000a7c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000a8a:	b2db      	uxtb	r3, r3
 8000a8c:	2b02      	cmp	r3, #2
 8000a8e:	d004      	beq.n	8000a9a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	2280      	movs	r2, #128	; 0x80
 8000a94:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000a96:	2301      	movs	r3, #1
 8000a98:	e00c      	b.n	8000ab4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	2205      	movs	r2, #5
 8000a9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	681a      	ldr	r2, [r3, #0]
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	f022 0201 	bic.w	r2, r2, #1
 8000ab0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000ab2:	2300      	movs	r3, #0
}
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	370c      	adds	r7, #12
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr

08000ac0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b085      	sub	sp, #20
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	b2db      	uxtb	r3, r3
 8000ace:	3b10      	subs	r3, #16
 8000ad0:	4a14      	ldr	r2, [pc, #80]	; (8000b24 <DMA_CalcBaseAndBitshift+0x64>)
 8000ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ad6:	091b      	lsrs	r3, r3, #4
 8000ad8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000ada:	4a13      	ldr	r2, [pc, #76]	; (8000b28 <DMA_CalcBaseAndBitshift+0x68>)
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	4413      	add	r3, r2
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	461a      	mov	r2, r3
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	2b03      	cmp	r3, #3
 8000aec:	d909      	bls.n	8000b02 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000af6:	f023 0303 	bic.w	r3, r3, #3
 8000afa:	1d1a      	adds	r2, r3, #4
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	659a      	str	r2, [r3, #88]	; 0x58
 8000b00:	e007      	b.n	8000b12 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000b0a:	f023 0303 	bic.w	r3, r3, #3
 8000b0e:	687a      	ldr	r2, [r7, #4]
 8000b10:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	3714      	adds	r7, #20
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	aaaaaaab 	.word	0xaaaaaaab
 8000b28:	08007c40 	.word	0x08007c40

08000b2c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b085      	sub	sp, #20
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000b34:	2300      	movs	r3, #0
 8000b36:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b3c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	699b      	ldr	r3, [r3, #24]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d11f      	bne.n	8000b86 <DMA_CheckFifoParam+0x5a>
 8000b46:	68bb      	ldr	r3, [r7, #8]
 8000b48:	2b03      	cmp	r3, #3
 8000b4a:	d856      	bhi.n	8000bfa <DMA_CheckFifoParam+0xce>
 8000b4c:	a201      	add	r2, pc, #4	; (adr r2, 8000b54 <DMA_CheckFifoParam+0x28>)
 8000b4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b52:	bf00      	nop
 8000b54:	08000b65 	.word	0x08000b65
 8000b58:	08000b77 	.word	0x08000b77
 8000b5c:	08000b65 	.word	0x08000b65
 8000b60:	08000bfb 	.word	0x08000bfb
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d046      	beq.n	8000bfe <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8000b70:	2301      	movs	r3, #1
 8000b72:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000b74:	e043      	b.n	8000bfe <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b7a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000b7e:	d140      	bne.n	8000c02 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8000b80:	2301      	movs	r3, #1
 8000b82:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000b84:	e03d      	b.n	8000c02 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	699b      	ldr	r3, [r3, #24]
 8000b8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000b8e:	d121      	bne.n	8000bd4 <DMA_CheckFifoParam+0xa8>
 8000b90:	68bb      	ldr	r3, [r7, #8]
 8000b92:	2b03      	cmp	r3, #3
 8000b94:	d837      	bhi.n	8000c06 <DMA_CheckFifoParam+0xda>
 8000b96:	a201      	add	r2, pc, #4	; (adr r2, 8000b9c <DMA_CheckFifoParam+0x70>)
 8000b98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b9c:	08000bad 	.word	0x08000bad
 8000ba0:	08000bb3 	.word	0x08000bb3
 8000ba4:	08000bad 	.word	0x08000bad
 8000ba8:	08000bc5 	.word	0x08000bc5
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8000bac:	2301      	movs	r3, #1
 8000bae:	73fb      	strb	r3, [r7, #15]
      break;
 8000bb0:	e030      	b.n	8000c14 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bb6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d025      	beq.n	8000c0a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000bc2:	e022      	b.n	8000c0a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bc8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000bcc:	d11f      	bne.n	8000c0e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8000bce:	2301      	movs	r3, #1
 8000bd0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8000bd2:	e01c      	b.n	8000c0e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8000bd4:	68bb      	ldr	r3, [r7, #8]
 8000bd6:	2b02      	cmp	r3, #2
 8000bd8:	d903      	bls.n	8000be2 <DMA_CheckFifoParam+0xb6>
 8000bda:	68bb      	ldr	r3, [r7, #8]
 8000bdc:	2b03      	cmp	r3, #3
 8000bde:	d003      	beq.n	8000be8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8000be0:	e018      	b.n	8000c14 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8000be2:	2301      	movs	r3, #1
 8000be4:	73fb      	strb	r3, [r7, #15]
      break;
 8000be6:	e015      	b.n	8000c14 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d00e      	beq.n	8000c12 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	73fb      	strb	r3, [r7, #15]
      break;
 8000bf8:	e00b      	b.n	8000c12 <DMA_CheckFifoParam+0xe6>
      break;
 8000bfa:	bf00      	nop
 8000bfc:	e00a      	b.n	8000c14 <DMA_CheckFifoParam+0xe8>
      break;
 8000bfe:	bf00      	nop
 8000c00:	e008      	b.n	8000c14 <DMA_CheckFifoParam+0xe8>
      break;
 8000c02:	bf00      	nop
 8000c04:	e006      	b.n	8000c14 <DMA_CheckFifoParam+0xe8>
      break;
 8000c06:	bf00      	nop
 8000c08:	e004      	b.n	8000c14 <DMA_CheckFifoParam+0xe8>
      break;
 8000c0a:	bf00      	nop
 8000c0c:	e002      	b.n	8000c14 <DMA_CheckFifoParam+0xe8>
      break;   
 8000c0e:	bf00      	nop
 8000c10:	e000      	b.n	8000c14 <DMA_CheckFifoParam+0xe8>
      break;
 8000c12:	bf00      	nop
    }
  } 
  
  return status; 
 8000c14:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	3714      	adds	r7, #20
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop

08000c24 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d101      	bne.n	8000c36 <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8000c32:	2301      	movs	r3, #1
 8000c34:	e03b      	b.n	8000cae <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000c3c:	b2db      	uxtb	r3, r3
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d106      	bne.n	8000c50 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	2200      	movs	r2, #0
 8000c46:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8000c4a:	6878      	ldr	r0, [r7, #4]
 8000c4c:	f000 f833 	bl	8000cb6 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	2202      	movs	r2, #2
 8000c54:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	685a      	ldr	r2, [r3, #4]
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	430a      	orrs	r2, r1
 8000c6c:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c74:	f023 0107 	bic.w	r1, r3, #7
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	689a      	ldr	r2, [r3, #8]
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	430a      	orrs	r2, r1
 8000c82:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c8a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000c8e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000c92:	687a      	ldr	r2, [r7, #4]
 8000c94:	68d1      	ldr	r1, [r2, #12]
 8000c96:	687a      	ldr	r2, [r7, #4]
 8000c98:	6812      	ldr	r2, [r2, #0]
 8000c9a:	430b      	orrs	r3, r1
 8000c9c:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8000cac:	2300      	movs	r3, #0
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	3708      	adds	r7, #8
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}

08000cb6 <HAL_DMA2D_MspInit>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8000cb6:	b480      	push	{r7}
 8000cb8:	b083      	sub	sp, #12
 8000cba:	af00      	add	r7, sp, #0
 8000cbc:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
 8000cbe:	bf00      	nop
 8000cc0:	370c      	adds	r7, #12
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr

08000cca <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8000cca:	b580      	push	{r7, lr}
 8000ccc:	b086      	sub	sp, #24
 8000cce:	af02      	add	r7, sp, #8
 8000cd0:	60f8      	str	r0, [r7, #12]
 8000cd2:	60b9      	str	r1, [r7, #8]
 8000cd4:	607a      	str	r2, [r7, #4]
 8000cd6:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000cde:	2b01      	cmp	r3, #1
 8000ce0:	d101      	bne.n	8000ce6 <HAL_DMA2D_Start+0x1c>
 8000ce2:	2302      	movs	r3, #2
 8000ce4:	e018      	b.n	8000d18 <HAL_DMA2D_Start+0x4e>
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	2201      	movs	r2, #1
 8000cea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	2202      	movs	r2, #2
 8000cf2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8000cf6:	69bb      	ldr	r3, [r7, #24]
 8000cf8:	9300      	str	r3, [sp, #0]
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	687a      	ldr	r2, [r7, #4]
 8000cfe:	68b9      	ldr	r1, [r7, #8]
 8000d00:	68f8      	ldr	r0, [r7, #12]
 8000d02:	f000 f989 	bl	8001018 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	681a      	ldr	r2, [r3, #0]
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	f042 0201 	orr.w	r2, r2, #1
 8000d14:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8000d16:	2300      	movs	r3, #0
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	3710      	adds	r7, #16
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}

08000d20 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b086      	sub	sp, #24
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
 8000d28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	f003 0301 	and.w	r3, r3, #1
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d056      	beq.n	8000dea <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 8000d3c:	f7ff fc44 	bl	80005c8 <HAL_GetTick>
 8000d40:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8000d42:	e04b      	b.n	8000ddc <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	685b      	ldr	r3, [r3, #4]
 8000d4a:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d023      	beq.n	8000d9e <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	f003 0320 	and.w	r3, r3, #32
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d005      	beq.n	8000d6c <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d64:	f043 0202 	orr.w	r2, r3, #2
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	f003 0301 	and.w	r3, r3, #1
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d005      	beq.n	8000d82 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d7a:	f043 0201 	orr.w	r2, r3, #1
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	2221      	movs	r2, #33	; 0x21
 8000d88:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	2204      	movs	r2, #4
 8000d8e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	2200      	movs	r2, #0
 8000d96:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	e0a5      	b.n	8000eea <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000da4:	d01a      	beq.n	8000ddc <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8000da6:	f7ff fc0f 	bl	80005c8 <HAL_GetTick>
 8000daa:	4602      	mov	r2, r0
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	1ad3      	subs	r3, r2, r3
 8000db0:	683a      	ldr	r2, [r7, #0]
 8000db2:	429a      	cmp	r2, r3
 8000db4:	d302      	bcc.n	8000dbc <HAL_DMA2D_PollForTransfer+0x9c>
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d10f      	bne.n	8000ddc <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000dc0:	f043 0220 	orr.w	r2, r3, #32
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	2203      	movs	r2, #3
 8000dcc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8000dd8:	2303      	movs	r3, #3
 8000dda:	e086      	b.n	8000eea <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	f003 0302 	and.w	r3, r3, #2
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d0ac      	beq.n	8000d44 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	69db      	ldr	r3, [r3, #28]
 8000df0:	f003 0320 	and.w	r3, r3, #32
 8000df4:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dfc:	f003 0320 	and.w	r3, r3, #32
 8000e00:	693a      	ldr	r2, [r7, #16]
 8000e02:	4313      	orrs	r3, r2
 8000e04:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8000e06:	693b      	ldr	r3, [r7, #16]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d061      	beq.n	8000ed0 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8000e0c:	f7ff fbdc 	bl	80005c8 <HAL_GetTick>
 8000e10:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8000e12:	e056      	b.n	8000ec2 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d02e      	beq.n	8000e84 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	f003 0308 	and.w	r3, r3, #8
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d005      	beq.n	8000e3c <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e34:	f043 0204 	orr.w	r2, r3, #4
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	f003 0320 	and.w	r3, r3, #32
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d005      	beq.n	8000e52 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e4a:	f043 0202 	orr.w	r2, r3, #2
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	f003 0301 	and.w	r3, r3, #1
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d005      	beq.n	8000e68 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e60:	f043 0201 	orr.w	r2, r3, #1
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	2229      	movs	r2, #41	; 0x29
 8000e6e:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	2204      	movs	r2, #4
 8000e74:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8000e80:	2301      	movs	r3, #1
 8000e82:	e032      	b.n	8000eea <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e8a:	d01a      	beq.n	8000ec2 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8000e8c:	f7ff fb9c 	bl	80005c8 <HAL_GetTick>
 8000e90:	4602      	mov	r2, r0
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	1ad3      	subs	r3, r2, r3
 8000e96:	683a      	ldr	r2, [r7, #0]
 8000e98:	429a      	cmp	r2, r3
 8000e9a:	d302      	bcc.n	8000ea2 <HAL_DMA2D_PollForTransfer+0x182>
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d10f      	bne.n	8000ec2 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ea6:	f043 0220 	orr.w	r2, r3, #32
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	2203      	movs	r2, #3
 8000eb2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	2200      	movs	r2, #0
 8000eba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8000ebe:	2303      	movs	r3, #3
 8000ec0:	e013      	b.n	8000eea <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	f003 0310 	and.w	r3, r3, #16
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d0a1      	beq.n	8000e14 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	2212      	movs	r2, #18
 8000ed6:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	2201      	movs	r2, #1
 8000edc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8000ee8:	2300      	movs	r3, #0
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	3718      	adds	r7, #24
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
	...

08000ef4 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b087      	sub	sp, #28
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
 8000efc:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000f0c:	2b01      	cmp	r3, #1
 8000f0e:	d101      	bne.n	8000f14 <HAL_DMA2D_ConfigLayer+0x20>
 8000f10:	2302      	movs	r3, #2
 8000f12:	e079      	b.n	8001008 <HAL_DMA2D_ConfigLayer+0x114>
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	2201      	movs	r2, #1
 8000f18:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	2202      	movs	r2, #2
 8000f20:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	3318      	adds	r3, #24
 8000f2a:	687a      	ldr	r2, [r7, #4]
 8000f2c:	4413      	add	r3, r2
 8000f2e:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8000f30:	693b      	ldr	r3, [r7, #16]
 8000f32:	685a      	ldr	r2, [r3, #4]
 8000f34:	693b      	ldr	r3, [r7, #16]
 8000f36:	689b      	ldr	r3, [r3, #8]
 8000f38:	041b      	lsls	r3, r3, #16
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8000f3e:	4b35      	ldr	r3, [pc, #212]	; (8001014 <HAL_DMA2D_ConfigLayer+0x120>)
 8000f40:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8000f42:	693b      	ldr	r3, [r7, #16]
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	2b0a      	cmp	r3, #10
 8000f48:	d003      	beq.n	8000f52 <HAL_DMA2D_ConfigLayer+0x5e>
 8000f4a:	693b      	ldr	r3, [r7, #16]
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	2b09      	cmp	r3, #9
 8000f50:	d107      	bne.n	8000f62 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8000f52:	693b      	ldr	r3, [r7, #16]
 8000f54:	68db      	ldr	r3, [r3, #12]
 8000f56:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8000f5a:	697a      	ldr	r2, [r7, #20]
 8000f5c:	4313      	orrs	r3, r2
 8000f5e:	617b      	str	r3, [r7, #20]
 8000f60:	e005      	b.n	8000f6e <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8000f62:	693b      	ldr	r3, [r7, #16]
 8000f64:	68db      	ldr	r3, [r3, #12]
 8000f66:	061b      	lsls	r3, r3, #24
 8000f68:	697a      	ldr	r2, [r7, #20]
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d120      	bne.n	8000fb6 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	43db      	mvns	r3, r3
 8000f7e:	ea02 0103 	and.w	r1, r2, r3
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	697a      	ldr	r2, [r7, #20]
 8000f88:	430a      	orrs	r2, r1
 8000f8a:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	693a      	ldr	r2, [r7, #16]
 8000f92:	6812      	ldr	r2, [r2, #0]
 8000f94:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8000f96:	693b      	ldr	r3, [r7, #16]
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	2b0a      	cmp	r3, #10
 8000f9c:	d003      	beq.n	8000fa6 <HAL_DMA2D_ConfigLayer+0xb2>
 8000f9e:	693b      	ldr	r3, [r7, #16]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	2b09      	cmp	r3, #9
 8000fa4:	d127      	bne.n	8000ff6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8000fa6:	693b      	ldr	r3, [r7, #16]
 8000fa8:	68da      	ldr	r2, [r3, #12]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8000fb2:	629a      	str	r2, [r3, #40]	; 0x28
 8000fb4:	e01f      	b.n	8000ff6 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	69da      	ldr	r2, [r3, #28]
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	43db      	mvns	r3, r3
 8000fc0:	ea02 0103 	and.w	r1, r2, r3
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	697a      	ldr	r2, [r7, #20]
 8000fca:	430a      	orrs	r2, r1
 8000fcc:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	693a      	ldr	r2, [r7, #16]
 8000fd4:	6812      	ldr	r2, [r2, #0]
 8000fd6:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8000fd8:	693b      	ldr	r3, [r7, #16]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	2b0a      	cmp	r3, #10
 8000fde:	d003      	beq.n	8000fe8 <HAL_DMA2D_ConfigLayer+0xf4>
 8000fe0:	693b      	ldr	r3, [r7, #16]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	2b09      	cmp	r3, #9
 8000fe6:	d106      	bne.n	8000ff6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8000fe8:	693b      	ldr	r3, [r7, #16]
 8000fea:	68da      	ldr	r2, [r3, #12]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8000ff4:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	2200      	movs	r2, #0
 8001002:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8001006:	2300      	movs	r3, #0
}
 8001008:	4618      	mov	r0, r3
 800100a:	371c      	adds	r7, #28
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr
 8001014:	ff03000f 	.word	0xff03000f

08001018 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8001018:	b480      	push	{r7}
 800101a:	b08b      	sub	sp, #44	; 0x2c
 800101c:	af00      	add	r7, sp, #0
 800101e:	60f8      	str	r0, [r7, #12]
 8001020:	60b9      	str	r1, [r7, #8]
 8001022:	607a      	str	r2, [r7, #4]
 8001024:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800102c:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	041a      	lsls	r2, r3, #16
 8001034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001036:	431a      	orrs	r2, r3
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	430a      	orrs	r2, r1
 800103e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	687a      	ldr	r2, [r7, #4]
 8001046:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001050:	d174      	bne.n	800113c <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8001052:	68bb      	ldr	r3, [r7, #8]
 8001054:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8001058:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800105a:	68bb      	ldr	r3, [r7, #8]
 800105c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001060:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8001062:	68bb      	ldr	r3, [r7, #8]
 8001064:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8001068:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 800106a:	68bb      	ldr	r3, [r7, #8]
 800106c:	b2db      	uxtb	r3, r3
 800106e:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	689b      	ldr	r3, [r3, #8]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d108      	bne.n	800108a <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8001078:	69ba      	ldr	r2, [r7, #24]
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	431a      	orrs	r2, r3
 800107e:	6a3b      	ldr	r3, [r7, #32]
 8001080:	4313      	orrs	r3, r2
 8001082:	697a      	ldr	r2, [r7, #20]
 8001084:	4313      	orrs	r3, r2
 8001086:	627b      	str	r3, [r7, #36]	; 0x24
 8001088:	e053      	b.n	8001132 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	689b      	ldr	r3, [r3, #8]
 800108e:	2b01      	cmp	r3, #1
 8001090:	d106      	bne.n	80010a0 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8001092:	69ba      	ldr	r2, [r7, #24]
 8001094:	69fb      	ldr	r3, [r7, #28]
 8001096:	4313      	orrs	r3, r2
 8001098:	697a      	ldr	r2, [r7, #20]
 800109a:	4313      	orrs	r3, r2
 800109c:	627b      	str	r3, [r7, #36]	; 0x24
 800109e:	e048      	b.n	8001132 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	689b      	ldr	r3, [r3, #8]
 80010a4:	2b02      	cmp	r3, #2
 80010a6:	d111      	bne.n	80010cc <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	0cdb      	lsrs	r3, r3, #19
 80010ac:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 80010ae:	69bb      	ldr	r3, [r7, #24]
 80010b0:	0a9b      	lsrs	r3, r3, #10
 80010b2:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	08db      	lsrs	r3, r3, #3
 80010b8:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80010ba:	69bb      	ldr	r3, [r7, #24]
 80010bc:	015a      	lsls	r2, r3, #5
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	02db      	lsls	r3, r3, #11
 80010c2:	4313      	orrs	r3, r2
 80010c4:	697a      	ldr	r2, [r7, #20]
 80010c6:	4313      	orrs	r3, r2
 80010c8:	627b      	str	r3, [r7, #36]	; 0x24
 80010ca:	e032      	b.n	8001132 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	689b      	ldr	r3, [r3, #8]
 80010d0:	2b03      	cmp	r3, #3
 80010d2:	d117      	bne.n	8001104 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 80010d4:	6a3b      	ldr	r3, [r7, #32]
 80010d6:	0fdb      	lsrs	r3, r3, #31
 80010d8:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	0cdb      	lsrs	r3, r3, #19
 80010de:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 80010e0:	69bb      	ldr	r3, [r7, #24]
 80010e2:	0adb      	lsrs	r3, r3, #11
 80010e4:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	08db      	lsrs	r3, r3, #3
 80010ea:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80010ec:	69bb      	ldr	r3, [r7, #24]
 80010ee:	015a      	lsls	r2, r3, #5
 80010f0:	69fb      	ldr	r3, [r7, #28]
 80010f2:	029b      	lsls	r3, r3, #10
 80010f4:	431a      	orrs	r2, r3
 80010f6:	6a3b      	ldr	r3, [r7, #32]
 80010f8:	03db      	lsls	r3, r3, #15
 80010fa:	4313      	orrs	r3, r2
 80010fc:	697a      	ldr	r2, [r7, #20]
 80010fe:	4313      	orrs	r3, r2
 8001100:	627b      	str	r3, [r7, #36]	; 0x24
 8001102:	e016      	b.n	8001132 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8001104:	6a3b      	ldr	r3, [r7, #32]
 8001106:	0f1b      	lsrs	r3, r3, #28
 8001108:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	0d1b      	lsrs	r3, r3, #20
 800110e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8001110:	69bb      	ldr	r3, [r7, #24]
 8001112:	0b1b      	lsrs	r3, r3, #12
 8001114:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	091b      	lsrs	r3, r3, #4
 800111a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 800111c:	69bb      	ldr	r3, [r7, #24]
 800111e:	011a      	lsls	r2, r3, #4
 8001120:	69fb      	ldr	r3, [r7, #28]
 8001122:	021b      	lsls	r3, r3, #8
 8001124:	431a      	orrs	r2, r3
 8001126:	6a3b      	ldr	r3, [r7, #32]
 8001128:	031b      	lsls	r3, r3, #12
 800112a:	4313      	orrs	r3, r2
 800112c:	697a      	ldr	r2, [r7, #20]
 800112e:	4313      	orrs	r3, r2
 8001130:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001138:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 800113a:	e003      	b.n	8001144 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	68ba      	ldr	r2, [r7, #8]
 8001142:	60da      	str	r2, [r3, #12]
}
 8001144:	bf00      	nop
 8001146:	372c      	adds	r7, #44	; 0x2c
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr

08001150 <DSI_ConfigPacketHeader>:
static void DSI_ConfigPacketHeader(DSI_TypeDef *DSIx,
                                   uint32_t ChannelID,
                                   uint32_t DataType,
                                   uint32_t Data0,
                                   uint32_t Data1)
{
 8001150:	b480      	push	{r7}
 8001152:	b085      	sub	sp, #20
 8001154:	af00      	add	r7, sp, #0
 8001156:	60f8      	str	r0, [r7, #12]
 8001158:	60b9      	str	r1, [r7, #8]
 800115a:	607a      	str	r2, [r7, #4]
 800115c:	603b      	str	r3, [r7, #0]
  /* Update the DSI packet header with new information */
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800115e:	68bb      	ldr	r3, [r7, #8]
 8001160:	019a      	lsls	r2, r3, #6
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	431a      	orrs	r2, r3
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	021b      	lsls	r3, r3, #8
 800116a:	431a      	orrs	r2, r3
 800116c:	69bb      	ldr	r3, [r7, #24]
 800116e:	041b      	lsls	r3, r3, #16
 8001170:	431a      	orrs	r2, r3
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8001176:	bf00      	nop
 8001178:	3714      	adds	r7, #20
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr

08001182 <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 8001182:	b580      	push	{r7, lr}
 8001184:	b086      	sub	sp, #24
 8001186:	af00      	add	r7, sp, #0
 8001188:	60f8      	str	r0, [r7, #12]
 800118a:	60b9      	str	r1, [r7, #8]
 800118c:	607a      	str	r2, [r7, #4]
 800118e:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8001190:	f7ff fa1a 	bl	80005c8 <HAL_GetTick>
 8001194:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8001196:	e009      	b.n	80011ac <DSI_ShortWrite+0x2a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > DSI_TIMEOUT_VALUE)
 8001198:	f7ff fa16 	bl	80005c8 <HAL_GetTick>
 800119c:	4602      	mov	r2, r0
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	1ad3      	subs	r3, r2, r3
 80011a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80011a6:	d901      	bls.n	80011ac <DSI_ShortWrite+0x2a>
    {
      return HAL_TIMEOUT;
 80011a8:	2303      	movs	r3, #3
 80011aa:	e015      	b.n	80011d8 <DSI_ShortWrite+0x56>
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80011b2:	f003 0301 	and.w	r3, r3, #1
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d0ee      	beq.n	8001198 <DSI_ShortWrite+0x16>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 80011ba:	68bb      	ldr	r3, [r7, #8]
 80011bc:	019a      	lsls	r2, r3, #6
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	431a      	orrs	r2, r3
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	021b      	lsls	r3, r3, #8
 80011c6:	ea42 0103 	orr.w	r1, r2, r3
 80011ca:	6a3b      	ldr	r3, [r7, #32]
 80011cc:	041a      	lsls	r2, r3, #16
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	430a      	orrs	r2, r1
 80011d4:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 80011d6:	2300      	movs	r3, #0
}
 80011d8:	4618      	mov	r0, r3
 80011da:	3718      	adds	r7, #24
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}

080011e0 <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b088      	sub	sp, #32
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
 80011e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t unitIntervalx4;
  uint32_t tempIDF;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d101      	bne.n	80011f4 <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 80011f0:	2301      	movs	r3, #1
 80011f2:	e108      	b.n	8001406 <HAL_DSI_Init+0x226>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	7c5b      	ldrb	r3, [r3, #17]
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d102      	bne.n	8001204 <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 80011fe:	6878      	ldr	r0, [r7, #4]
 8001200:	f006 fbea 	bl	80079d8 <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2203      	movs	r2, #3
 8001208:	745a      	strb	r2, [r3, #17]

  /**************** Turn on the regulator and enable the DSI PLL ****************/

  /* Enable the regulator */
  __HAL_DSI_REG_ENABLE(hdsi);
 800120a:	2300      	movs	r3, #0
 800120c:	613b      	str	r3, [r7, #16]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800121e:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 800122a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800122e:	613b      	str	r3, [r7, #16]
 8001230:	693b      	ldr	r3, [r7, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001232:	f7ff f9c9 	bl	80005c8 <HAL_GetTick>
 8001236:	61f8      	str	r0, [r7, #28]

  /* Wait until the regulator is ready */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8001238:	e009      	b.n	800124e <HAL_DSI_Init+0x6e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800123a:	f7ff f9c5 	bl	80005c8 <HAL_GetTick>
 800123e:	4602      	mov	r2, r0
 8001240:	69fb      	ldr	r3, [r7, #28]
 8001242:	1ad3      	subs	r3, r2, r3
 8001244:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001248:	d901      	bls.n	800124e <HAL_DSI_Init+0x6e>
    {
      return HAL_TIMEOUT;
 800124a:	2303      	movs	r3, #3
 800124c:	e0db      	b.n	8001406 <HAL_DSI_Init+0x226>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001256:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800125a:	2b00      	cmp	r3, #0
 800125c:	d0ed      	beq.n	800123a <HAL_DSI_Init+0x5a>
    }
  }

  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8001266:	687a      	ldr	r2, [r7, #4]
 8001268:	6812      	ldr	r2, [r2, #0]
 800126a:	f423 335e 	bic.w	r3, r3, #227328	; 0x37800
 800126e:	f423 73fe 	bic.w	r3, r3, #508	; 0x1fc
 8001272:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	009a      	lsls	r2, r3, #2
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	02db      	lsls	r3, r3, #11
 800128a:	431a      	orrs	r2, r3
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	689b      	ldr	r3, [r3, #8]
 8001290:	041b      	lsls	r3, r3, #16
 8001292:	431a      	orrs	r2, r3
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	430a      	orrs	r2, r1
 800129a:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 800129e:	2300      	movs	r3, #0
 80012a0:	60fb      	str	r3, [r7, #12]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f042 0201 	orr.w	r2, r2, #1
 80012b2:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 80012be:	f003 0301 	and.w	r3, r3, #1
 80012c2:	60fb      	str	r3, [r7, #12]
 80012c4:	68fb      	ldr	r3, [r7, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80012c6:	f7ff f97f 	bl	80005c8 <HAL_GetTick>
 80012ca:	61f8      	str	r0, [r7, #28]

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 80012cc:	e009      	b.n	80012e2 <HAL_DSI_Init+0x102>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80012ce:	f7ff f97b 	bl	80005c8 <HAL_GetTick>
 80012d2:	4602      	mov	r2, r0
 80012d4:	69fb      	ldr	r3, [r7, #28]
 80012d6:	1ad3      	subs	r3, r2, r3
 80012d8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80012dc:	d901      	bls.n	80012e2 <HAL_DSI_Init+0x102>
    {
      return HAL_TIMEOUT;
 80012de:	2303      	movs	r3, #3
 80012e0:	e091      	b.n	8001406 <HAL_DSI_Init+0x226>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80012ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d0ed      	beq.n	80012ce <HAL_DSI_Init+0xee>
  }

  /*************************** Set the PHY parameters ***************************/

  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f042 0206 	orr.w	r2, r2, #6
 8001302:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f022 0203 	bic.w	r2, r2, #3
 8001316:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	431a      	orrs	r2, r3
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f042 0201 	orr.w	r2, r2, #1
 8001330:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f022 0203 	bic.w	r2, r2, #3
 8001344:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	68da      	ldr	r2, [r3, #12]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	430a      	orrs	r2, r1
 800135a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /************************ Set the DSI clock parameters ************************/

  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	689a      	ldr	r2, [r3, #8]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800136c:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	6899      	ldr	r1, [r3, #8]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	689a      	ldr	r2, [r3, #8]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	430a      	orrs	r2, r1
 800137e:	609a      	str	r2, [r3, #8]

  /* Calculate the bit period in high-speed mode in unit of 0.25 ns (UIX4) */
  /* The equation is : UIX4 = IntegerPart( (1000/F_PHY_Mhz) * 4 )          */
  /* Where : F_PHY_Mhz = (NDIV * HSE_Mhz) / (IDF * ODF)                    */
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d002      	beq.n	800138e <HAL_DSI_Init+0x1ae>
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	e000      	b.n	8001390 <HAL_DSI_Init+0x1b0>
 800138e:	2301      	movs	r3, #1
 8001390:	61bb      	str	r3, [r7, #24]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8001392:	69bb      	ldr	r3, [r7, #24]
 8001394:	4a1e      	ldr	r2, [pc, #120]	; (8001410 <HAL_DSI_Init+0x230>)
 8001396:	fb02 f203 	mul.w	r2, r2, r3
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	689b      	ldr	r3, [r3, #8]
 800139e:	f003 0303 	and.w	r3, r3, #3
 80013a2:	409a      	lsls	r2, r3
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 80013ac:	fb01 f303 	mul.w	r3, r1, r3
 80013b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80013b4:	617b      	str	r3, [r7, #20]

  /* Set the bit period in high-speed mode */
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80013c6:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	697a      	ldr	r2, [r7, #20]
 80013d8:	430a      	orrs	r2, r1
 80013da:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	2200      	movs	r2, #0
 80013e4:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	2200      	movs	r2, #0
 80013ee:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hdsi->ErrorMsk = 0U;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2200      	movs	r2, #0
 80013f6:	619a      	str	r2, [r3, #24]

  /* Initialise the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2200      	movs	r2, #0
 80013fc:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2201      	movs	r2, #1
 8001402:	745a      	strb	r2, [r3, #17]

  return HAL_OK;
 8001404:	2300      	movs	r3, #0
}
 8001406:	4618      	mov	r0, r3
 8001408:	3720      	adds	r7, #32
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	003d0900 	.word	0x003d0900

08001414 <HAL_DSI_DeInit>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_DeInit(DSI_HandleTypeDef *hdsi)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b086      	sub	sp, #24
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d101      	bne.n	8001426 <HAL_DSI_DeInit+0x12>
  {
    return HAL_ERROR;
 8001422:	2301      	movs	r3, #1
 8001424:	e066      	b.n	80014f4 <HAL_DSI_DeInit+0xe0>
  }

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2203      	movs	r2, #3
 800142a:	745a      	strb	r2, [r3, #17]

  /* Disable the DSI wrapper */
  __HAL_DSI_WRAPPER_DISABLE(hdsi);
 800142c:	2300      	movs	r3, #0
 800142e:	617b      	str	r3, [r7, #20]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f022 0208 	bic.w	r2, r2, #8
 8001440:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800144c:	f003 0308 	and.w	r3, r3, #8
 8001450:	617b      	str	r3, [r7, #20]
 8001452:	697b      	ldr	r3, [r7, #20]

  /* Disable the DSI host */
  __HAL_DSI_DISABLE(hdsi);
 8001454:	2300      	movs	r3, #0
 8001456:	613b      	str	r3, [r7, #16]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	685a      	ldr	r2, [r3, #4]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f022 0201 	bic.w	r2, r2, #1
 8001466:	605a      	str	r2, [r3, #4]
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	f003 0301 	and.w	r3, r3, #1
 8001472:	613b      	str	r3, [r7, #16]
 8001474:	693b      	ldr	r3, [r7, #16]

  /* D-PHY clock and digital disable */
  hdsi->Instance->PCTLR &= ~(DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f022 0206 	bic.w	r2, r2, #6
 8001486:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Turn off the DSI PLL */
  __HAL_DSI_PLL_DISABLE(hdsi);
 800148a:	2300      	movs	r3, #0
 800148c:	60fb      	str	r3, [r7, #12]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f022 0201 	bic.w	r2, r2, #1
 800149e:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 80014aa:	f003 0301 	and.w	r3, r3, #1
 80014ae:	60fb      	str	r3, [r7, #12]
 80014b0:	68fb      	ldr	r3, [r7, #12]

  /* Disable the regulator */
  __HAL_DSI_REG_DISABLE(hdsi);
 80014b2:	2300      	movs	r3, #0
 80014b4:	60bb      	str	r3, [r7, #8]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80014c6:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 80014d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80014d6:	60bb      	str	r3, [r7, #8]
 80014d8:	68bb      	ldr	r3, [r7, #8]
  }
  /* DeInit the low level hardware */
  hdsi->MspDeInitCallback(hdsi);
#else
  /* DeInit the low level hardware */
  HAL_DSI_MspDeInit(hdsi);
 80014da:	6878      	ldr	r0, [r7, #4]
 80014dc:	f006 fac4 	bl	8007a68 <HAL_DSI_MspDeInit>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Initialise the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2200      	movs	r2, #0
 80014e4:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_RESET;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2200      	movs	r2, #0
 80014ea:	745a      	strb	r2, [r3, #17]

  /* Release Lock */
  __HAL_UNLOCK(hdsi);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2200      	movs	r2, #0
 80014f0:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80014f2:	2300      	movs	r3, #0
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	3718      	adds	r7, #24
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}

080014fc <HAL_DSI_ConfigVideoMode>:
  * @param  VidCfg pointer to a DSI_VidCfgTypeDef structure that contains
  *                the DSI video mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigVideoMode(DSI_HandleTypeDef *hdsi, DSI_VidCfgTypeDef *VidCfg)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
 8001504:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	7c1b      	ldrb	r3, [r3, #16]
 800150a:	2b01      	cmp	r3, #1
 800150c:	d101      	bne.n	8001512 <HAL_DSI_ConfigVideoMode+0x16>
 800150e:	2302      	movs	r3, #2
 8001510:	e1f6      	b.n	8001900 <HAL_DSI_ConfigVideoMode+0x404>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2201      	movs	r2, #1
 8001516:	741a      	strb	r2, [r3, #16]
  {
    assert_param(IS_DSI_LOOSELY_PACKED(VidCfg->LooselyPacked));
  }

  /* Select video mode by resetting CMDM and DSIM bits */
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f022 0201 	bic.w	r2, r2, #1
 8001526:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f022 0201 	bic.w	r2, r2, #1
 8001538:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the video mode transmission type */
  hdsi->Instance->VMCR &= ~DSI_VMCR_VMT;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f022 0203 	bic.w	r2, r2, #3
 800154a:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->Mode;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	68da      	ldr	r2, [r3, #12]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	430a      	orrs	r2, r1
 800155c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Configure the video packet size */
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001564:	687a      	ldr	r2, [r7, #4]
 8001566:	6812      	ldr	r2, [r2, #0]
 8001568:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800156c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001570:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	691a      	ldr	r2, [r3, #16]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	430a      	orrs	r2, r1
 8001582:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the chunks number to be transmitted through the DSI link */
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158a:	687a      	ldr	r2, [r7, #4]
 800158c:	6812      	ldr	r2, [r2, #0]
 800158e:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8001592:	f023 031f 	bic.w	r3, r3, #31
 8001596:	6413      	str	r3, [r2, #64]	; 0x40
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	695a      	ldr	r2, [r3, #20]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	430a      	orrs	r2, r1
 80015a8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the size of the null packet */
  hdsi->Instance->VNPCR &= ~DSI_VNPCR_NPSIZE;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015b0:	687a      	ldr	r2, [r7, #4]
 80015b2:	6812      	ldr	r2, [r2, #0]
 80015b4:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 80015b8:	f023 031f 	bic.w	r3, r3, #31
 80015bc:	6453      	str	r3, [r2, #68]	; 0x44
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	699a      	ldr	r2, [r3, #24]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	430a      	orrs	r2, r1
 80015ce:	645a      	str	r2, [r3, #68]	; 0x44

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	68da      	ldr	r2, [r3, #12]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f022 0203 	bic.w	r2, r2, #3
 80015de:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	68d9      	ldr	r1, [r3, #12]
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	430a      	orrs	r2, r1
 80015f0:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	695a      	ldr	r2, [r3, #20]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f022 0207 	bic.w	r2, r2, #7
 8001600:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	6959      	ldr	r1, [r3, #20]
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	6a1b      	ldr	r3, [r3, #32]
 8001610:	431a      	orrs	r2, r3
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	69db      	ldr	r3, [r3, #28]
 8001616:	431a      	orrs	r2, r3
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	430a      	orrs	r2, r1
 800161e:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	691a      	ldr	r2, [r3, #16]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f022 020f 	bic.w	r2, r2, #15
 800162e:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= VidCfg->ColorCoding;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	6919      	ldr	r1, [r3, #16]
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	685a      	ldr	r2, [r3, #4]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	430a      	orrs	r2, r1
 8001640:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f022 020e 	bic.w	r2, r2, #14
 8001652:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	005a      	lsls	r2, r3, #1
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	430a      	orrs	r2, r1
 800166a:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Enable/disable the loosely packed variant to 18-bit configuration */
  if (VidCfg->ColorCoding == DSI_RGB666)
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	2b03      	cmp	r3, #3
 8001674:	d110      	bne.n	8001698 <HAL_DSI_ConfigVideoMode+0x19c>
  {
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	691a      	ldr	r2, [r3, #16]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001684:	611a      	str	r2, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	6919      	ldr	r1, [r3, #16]
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	689a      	ldr	r2, [r3, #8]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	430a      	orrs	r2, r1
 8001696:	611a      	str	r2, [r3, #16]
  }

  /* Set the Horizontal Synchronization Active (HSA) in lane byte clock cycles */
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800169e:	687a      	ldr	r2, [r7, #4]
 80016a0:	6812      	ldr	r2, [r2, #0]
 80016a2:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80016a6:	f023 030f 	bic.w	r3, r3, #15
 80016aa:	6493      	str	r3, [r2, #72]	; 0x48
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	6c99      	ldr	r1, [r3, #72]	; 0x48
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	430a      	orrs	r2, r1
 80016bc:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set the Horizontal Back Porch (HBP) in lane byte clock cycles */
  hdsi->Instance->VHBPCR &= ~DSI_VHBPCR_HBP;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016c4:	687a      	ldr	r2, [r7, #4]
 80016c6:	6812      	ldr	r2, [r2, #0]
 80016c8:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80016cc:	f023 030f 	bic.w	r3, r3, #15
 80016d0:	64d3      	str	r3, [r2, #76]	; 0x4c
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	430a      	orrs	r2, r1
 80016e2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the total line time (HLINE=HSA+HBP+HACT+HFP) in lane byte clock cycles */
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80016ea:	687a      	ldr	r2, [r7, #4]
 80016ec:	6812      	ldr	r2, [r2, #0]
 80016ee:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80016f2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80016f6:	6513      	str	r3, [r2, #80]	; 0x50
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	430a      	orrs	r2, r1
 8001708:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Vertical Synchronization Active (VSA) */
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001710:	687a      	ldr	r2, [r7, #4]
 8001712:	6812      	ldr	r2, [r2, #0]
 8001714:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001718:	f023 0303 	bic.w	r3, r3, #3
 800171c:	6553      	str	r3, [r2, #84]	; 0x54
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	430a      	orrs	r2, r1
 800172e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Vertical Back Porch (VBP)*/
  hdsi->Instance->VVBPCR &= ~DSI_VVBPCR_VBP;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001736:	687a      	ldr	r2, [r7, #4]
 8001738:	6812      	ldr	r2, [r2, #0]
 800173a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800173e:	f023 0303 	bic.w	r3, r3, #3
 8001742:	6593      	str	r3, [r2, #88]	; 0x58
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	430a      	orrs	r2, r1
 8001754:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the Vertical Front Porch (VFP)*/
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800175c:	687a      	ldr	r2, [r7, #4]
 800175e:	6812      	ldr	r2, [r2, #0]
 8001760:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001764:	f023 0303 	bic.w	r3, r3, #3
 8001768:	65d3      	str	r3, [r2, #92]	; 0x5c
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	430a      	orrs	r2, r1
 800177a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set the Vertical Active period*/
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001782:	687a      	ldr	r2, [r7, #4]
 8001784:	6812      	ldr	r2, [r2, #0]
 8001786:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800178a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800178e:	6613      	str	r3, [r2, #96]	; 0x60
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	430a      	orrs	r2, r1
 80017a0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Configure the command transmission mode */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPCE;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80017b0:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	430a      	orrs	r2, r1
 80017c2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Low power largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_LPSIZE;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	699a      	ldr	r2, [r3, #24]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 80017d2:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	6999      	ldr	r1, [r3, #24]
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017de:	041a      	lsls	r2, r3, #16
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	430a      	orrs	r2, r1
 80017e6:	619a      	str	r2, [r3, #24]

  /* Low power VACT largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_VLPSIZE;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	699a      	ldr	r2, [r3, #24]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80017f6:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	6999      	ldr	r1, [r3, #24]
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	430a      	orrs	r2, r1
 8001808:	619a      	str	r2, [r3, #24]

  /* Enable LP transition in HFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHFPE;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001818:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	430a      	orrs	r2, r1
 800182a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in HBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHBPE;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800183a:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	430a      	orrs	r2, r1
 800184c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VACT period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVAE;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800185c:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	430a      	orrs	r2, r1
 800186e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800187e:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	430a      	orrs	r2, r1
 8001890:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVBPE;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80018a0:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	430a      	orrs	r2, r1
 80018b2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in vertical sync period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVSAE;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80018c2:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalSyncActiveEnable;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	430a      	orrs	r2, r1
 80018d4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the request for an acknowledge response at the end of a frame */
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80018e4:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	430a      	orrs	r2, r1
 80018f6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2200      	movs	r2, #0
 80018fc:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80018fe:	2300      	movs	r3, #0
}
 8001900:	4618      	mov	r0, r3
 8001902:	370c      	adds	r7, #12
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr

0800190c <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 800190c:	b480      	push	{r7}
 800190e:	b085      	sub	sp, #20
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
 8001914:	6039      	str	r1, [r7, #0]
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	7c1b      	ldrb	r3, [r3, #16]
 800191a:	2b01      	cmp	r3, #1
 800191c:	d101      	bne.n	8001922 <HAL_DSI_ConfigPhyTimer+0x16>
 800191e:	2302      	movs	r3, #2
 8001920:	e058      	b.n	80019d4 <HAL_DSI_ConfigPhyTimer+0xc8>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2201      	movs	r2, #1
 8001926:	741a      	strb	r2, [r3, #16]

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	4293      	cmp	r3, r2
 8001932:	bf38      	it	cc
 8001934:	4613      	movcc	r3, r2
 8001936:	60fb      	str	r3, [r7, #12]
     This timings are configured by the HS2LP_TIME and LP2HS_TIME in the DSI Host Clock Lane Timer Configuration Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f002 22fc 	and.w	r2, r2, #4227922944	; 0xfc00fc00
 8001948:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	041a      	lsls	r2, r3, #16
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	431a      	orrs	r2, r3
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	430a      	orrs	r2, r1
 8001962:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8001976:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	691a      	ldr	r2, [r3, #16]
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	68db      	ldr	r3, [r3, #12]
 800198a:	041b      	lsls	r3, r3, #16
 800198c:	431a      	orrs	r2, r3
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	689b      	ldr	r3, [r3, #8]
 8001992:	061b      	lsls	r3, r3, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8001994:	431a      	orrs	r2, r3
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	430a      	orrs	r2, r1
 800199c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80019b0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	695b      	ldr	r3, [r3, #20]
 80019c0:	021a      	lsls	r2, r3, #8
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	430a      	orrs	r2, r1
 80019c8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2200      	movs	r2, #0
 80019d0:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80019d2:	2300      	movs	r3, #0
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	3714      	adds	r7, #20
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr

080019e0 <HAL_DSI_Start>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b085      	sub	sp, #20
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	7c1b      	ldrb	r3, [r3, #16]
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d101      	bne.n	80019f4 <HAL_DSI_Start+0x14>
 80019f0:	2302      	movs	r3, #2
 80019f2:	e02b      	b.n	8001a4c <HAL_DSI_Start+0x6c>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2201      	movs	r2, #1
 80019f8:	741a      	strb	r2, [r3, #16]

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 80019fa:	2300      	movs	r3, #0
 80019fc:	60fb      	str	r3, [r7, #12]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	685a      	ldr	r2, [r3, #4]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f042 0201 	orr.w	r2, r2, #1
 8001a0c:	605a      	str	r2, [r3, #4]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	f003 0301 	and.w	r3, r3, #1
 8001a18:	60fb      	str	r3, [r7, #12]
 8001a1a:	68fb      	ldr	r3, [r7, #12]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	60bb      	str	r3, [r7, #8]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f042 0208 	orr.w	r2, r2, #8
 8001a30:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8001a3c:	f003 0308 	and.w	r3, r3, #8
 8001a40:	60bb      	str	r3, [r7, #8]
 8001a42:	68bb      	ldr	r3, [r7, #8]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2200      	movs	r2, #0
 8001a48:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8001a4a:	2300      	movs	r3, #0
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	3714      	adds	r7, #20
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr

08001a58 <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b088      	sub	sp, #32
 8001a5c:	af02      	add	r7, sp, #8
 8001a5e:	60f8      	str	r0, [r7, #12]
 8001a60:	60b9      	str	r1, [r7, #8]
 8001a62:	607a      	str	r2, [r7, #4]
 8001a64:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	7c1b      	ldrb	r3, [r3, #16]
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d101      	bne.n	8001a72 <HAL_DSI_ShortWrite+0x1a>
 8001a6e:	2302      	movs	r3, #2
 8001a70:	e010      	b.n	8001a94 <HAL_DSI_ShortWrite+0x3c>
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	2201      	movs	r2, #1
 8001a76:	741a      	strb	r2, [r3, #16]

   status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 8001a78:	6a3b      	ldr	r3, [r7, #32]
 8001a7a:	9300      	str	r3, [sp, #0]
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	687a      	ldr	r2, [r7, #4]
 8001a80:	68b9      	ldr	r1, [r7, #8]
 8001a82:	68f8      	ldr	r0, [r7, #12]
 8001a84:	f7ff fb7d 	bl	8001182 <DSI_ShortWrite>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	75fb      	strb	r3, [r7, #23]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	2200      	movs	r2, #0
 8001a90:	741a      	strb	r2, [r3, #16]

  return status;
 8001a92:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3718      	adds	r7, #24
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}

08001a9c <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b08c      	sub	sp, #48	; 0x30
 8001aa0:	af02      	add	r7, sp, #8
 8001aa2:	60f8      	str	r0, [r7, #12]
 8001aa4:	60b9      	str	r1, [r7, #8]
 8001aa6:	607a      	str	r2, [r7, #4]
 8001aa8:	603b      	str	r3, [r7, #0]
  uint32_t uicounter, nbBytes, count;
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;
 8001aaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001aac:	61bb      	str	r3, [r7, #24]

  /* Process locked */
  __HAL_LOCK(hdsi);
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	7c1b      	ldrb	r3, [r3, #16]
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	d101      	bne.n	8001aba <HAL_DSI_LongWrite+0x1e>
 8001ab6:	2302      	movs	r3, #2
 8001ab8:	e084      	b.n	8001bc4 <HAL_DSI_LongWrite+0x128>
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	2201      	movs	r2, #1
 8001abe:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ac0:	f7fe fd82 	bl	80005c8 <HAL_GetTick>
 8001ac4:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8001ac6:	e00c      	b.n	8001ae2 <HAL_DSI_LongWrite+0x46>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8001ac8:	f7fe fd7e 	bl	80005c8 <HAL_GetTick>
 8001acc:	4602      	mov	r2, r0
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001ad6:	d904      	bls.n	8001ae2 <HAL_DSI_LongWrite+0x46>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	2200      	movs	r2, #0
 8001adc:	741a      	strb	r2, [r3, #16]

      return HAL_TIMEOUT;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	e070      	b.n	8001bc4 <HAL_DSI_LongWrite+0x128>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ae8:	f003 0301 	and.w	r3, r3, #1
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d0eb      	beq.n	8001ac8 <HAL_DSI_LongWrite+0x2c>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
 8001af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001af2:	61fb      	str	r3, [r7, #28]
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	2b03      	cmp	r3, #3
 8001af8:	bf28      	it	cs
 8001afa:	2303      	movcs	r3, #3
 8001afc:	613b      	str	r3, [r7, #16]

  for (count = 0U; count < nbBytes; count++)
 8001afe:	2300      	movs	r3, #0
 8001b00:	623b      	str	r3, [r7, #32]
 8001b02:	e00f      	b.n	8001b24 <HAL_DSI_LongWrite+0x88>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 8001b04:	69ba      	ldr	r2, [r7, #24]
 8001b06:	6a3b      	ldr	r3, [r7, #32]
 8001b08:	4413      	add	r3, r2
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	461a      	mov	r2, r3
 8001b0e:	6a3b      	ldr	r3, [r7, #32]
 8001b10:	3301      	adds	r3, #1
 8001b12:	00db      	lsls	r3, r3, #3
 8001b14:	fa02 f303 	lsl.w	r3, r2, r3
 8001b18:	69fa      	ldr	r2, [r7, #28]
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	61fb      	str	r3, [r7, #28]
  for (count = 0U; count < nbBytes; count++)
 8001b1e:	6a3b      	ldr	r3, [r7, #32]
 8001b20:	3301      	adds	r3, #1
 8001b22:	623b      	str	r3, [r7, #32]
 8001b24:	6a3a      	ldr	r2, [r7, #32]
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d3eb      	bcc.n	8001b04 <HAL_DSI_LongWrite+0x68>
  }
  hdsi->Instance->GPDR = fifoword;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	69fa      	ldr	r2, [r7, #28]
 8001b32:	671a      	str	r2, [r3, #112]	; 0x70

  uicounter = NbParams - nbBytes;
 8001b34:	683a      	ldr	r2, [r7, #0]
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	627b      	str	r3, [r7, #36]	; 0x24
  pparams += nbBytes;
 8001b3c:	69ba      	ldr	r2, [r7, #24]
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	4413      	add	r3, r2
 8001b42:	61bb      	str	r3, [r7, #24]
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 8001b44:	e028      	b.n	8001b98 <HAL_DSI_LongWrite+0xfc>
  {
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8001b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b48:	2b04      	cmp	r3, #4
 8001b4a:	bf28      	it	cs
 8001b4c:	2304      	movcs	r3, #4
 8001b4e:	613b      	str	r3, [r7, #16]
    fifoword = 0U;
 8001b50:	2300      	movs	r3, #0
 8001b52:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 8001b54:	2300      	movs	r3, #0
 8001b56:	623b      	str	r3, [r7, #32]
 8001b58:	e00e      	b.n	8001b78 <HAL_DSI_LongWrite+0xdc>
    {
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8001b5a:	69ba      	ldr	r2, [r7, #24]
 8001b5c:	6a3b      	ldr	r3, [r7, #32]
 8001b5e:	4413      	add	r3, r2
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	461a      	mov	r2, r3
 8001b64:	6a3b      	ldr	r3, [r7, #32]
 8001b66:	00db      	lsls	r3, r3, #3
 8001b68:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6c:	69fa      	ldr	r2, [r7, #28]
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 8001b72:	6a3b      	ldr	r3, [r7, #32]
 8001b74:	3301      	adds	r3, #1
 8001b76:	623b      	str	r3, [r7, #32]
 8001b78:	6a3a      	ldr	r2, [r7, #32]
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d3ec      	bcc.n	8001b5a <HAL_DSI_LongWrite+0xbe>
    }
    hdsi->Instance->GPDR = fifoword;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	69fa      	ldr	r2, [r7, #28]
 8001b86:	671a      	str	r2, [r3, #112]	; 0x70

    uicounter -= nbBytes;
 8001b88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	627b      	str	r3, [r7, #36]	; 0x24
    pparams += nbBytes;
 8001b90:	69ba      	ldr	r2, [r7, #24]
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	4413      	add	r3, r2
 8001b96:	61bb      	str	r3, [r7, #24]
  while (uicounter != 0U)
 8001b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d1d3      	bne.n	8001b46 <HAL_DSI_LongWrite+0xaa>
  }

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	6818      	ldr	r0, [r3, #0]
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	3301      	adds	r3, #1
  DSI_ConfigPacketHeader(hdsi->Instance,
 8001ba6:	b2da      	uxtb	r2, r3
                         (((NbParams + 1U) & 0xFF00U) >> 8U));
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	3301      	adds	r3, #1
 8001bac:	0a1b      	lsrs	r3, r3, #8
  DSI_ConfigPacketHeader(hdsi->Instance,
 8001bae:	b2db      	uxtb	r3, r3
 8001bb0:	9300      	str	r3, [sp, #0]
 8001bb2:	4613      	mov	r3, r2
 8001bb4:	687a      	ldr	r2, [r7, #4]
 8001bb6:	68b9      	ldr	r1, [r7, #8]
 8001bb8:	f7ff faca 	bl	8001150 <DSI_ConfigPacketHeader>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8001bc2:	2300      	movs	r3, #0
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3728      	adds	r7, #40	; 0x28
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}

08001bcc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b089      	sub	sp, #36	; 0x24
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
 8001bd4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001bde:	2300      	movs	r3, #0
 8001be0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001be2:	2300      	movs	r3, #0
 8001be4:	61fb      	str	r3, [r7, #28]
 8001be6:	e177      	b.n	8001ed8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001be8:	2201      	movs	r2, #1
 8001bea:	69fb      	ldr	r3, [r7, #28]
 8001bec:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	697a      	ldr	r2, [r7, #20]
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001bfc:	693a      	ldr	r2, [r7, #16]
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	429a      	cmp	r2, r3
 8001c02:	f040 8166 	bne.w	8001ed2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	2b02      	cmp	r3, #2
 8001c0c:	d003      	beq.n	8001c16 <HAL_GPIO_Init+0x4a>
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	2b12      	cmp	r3, #18
 8001c14:	d123      	bne.n	8001c5e <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	08da      	lsrs	r2, r3, #3
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	3208      	adds	r2, #8
 8001c1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c24:	69fb      	ldr	r3, [r7, #28]
 8001c26:	f003 0307 	and.w	r3, r3, #7
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	220f      	movs	r2, #15
 8001c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c32:	43db      	mvns	r3, r3
 8001c34:	69ba      	ldr	r2, [r7, #24]
 8001c36:	4013      	ands	r3, r2
 8001c38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	691a      	ldr	r2, [r3, #16]
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	f003 0307 	and.w	r3, r3, #7
 8001c44:	009b      	lsls	r3, r3, #2
 8001c46:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4a:	69ba      	ldr	r2, [r7, #24]
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c50:	69fb      	ldr	r3, [r7, #28]
 8001c52:	08da      	lsrs	r2, r3, #3
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	3208      	adds	r2, #8
 8001c58:	69b9      	ldr	r1, [r7, #24]
 8001c5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c64:	69fb      	ldr	r3, [r7, #28]
 8001c66:	005b      	lsls	r3, r3, #1
 8001c68:	2203      	movs	r2, #3
 8001c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6e:	43db      	mvns	r3, r3
 8001c70:	69ba      	ldr	r2, [r7, #24]
 8001c72:	4013      	ands	r3, r2
 8001c74:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	f003 0203 	and.w	r2, r3, #3
 8001c7e:	69fb      	ldr	r3, [r7, #28]
 8001c80:	005b      	lsls	r3, r3, #1
 8001c82:	fa02 f303 	lsl.w	r3, r2, r3
 8001c86:	69ba      	ldr	r2, [r7, #24]
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	69ba      	ldr	r2, [r7, #24]
 8001c90:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	d00b      	beq.n	8001cb2 <HAL_GPIO_Init+0xe6>
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	2b02      	cmp	r3, #2
 8001ca0:	d007      	beq.n	8001cb2 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ca6:	2b11      	cmp	r3, #17
 8001ca8:	d003      	beq.n	8001cb2 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	2b12      	cmp	r3, #18
 8001cb0:	d130      	bne.n	8001d14 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001cb8:	69fb      	ldr	r3, [r7, #28]
 8001cba:	005b      	lsls	r3, r3, #1
 8001cbc:	2203      	movs	r2, #3
 8001cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc2:	43db      	mvns	r3, r3
 8001cc4:	69ba      	ldr	r2, [r7, #24]
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	68da      	ldr	r2, [r3, #12]
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	005b      	lsls	r3, r3, #1
 8001cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd6:	69ba      	ldr	r2, [r7, #24]
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	69ba      	ldr	r2, [r7, #24]
 8001ce0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ce8:	2201      	movs	r2, #1
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf0:	43db      	mvns	r3, r3
 8001cf2:	69ba      	ldr	r2, [r7, #24]
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	091b      	lsrs	r3, r3, #4
 8001cfe:	f003 0201 	and.w	r2, r3, #1
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	fa02 f303 	lsl.w	r3, r2, r3
 8001d08:	69ba      	ldr	r2, [r7, #24]
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	69ba      	ldr	r2, [r7, #24]
 8001d12:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	005b      	lsls	r3, r3, #1
 8001d1e:	2203      	movs	r2, #3
 8001d20:	fa02 f303 	lsl.w	r3, r2, r3
 8001d24:	43db      	mvns	r3, r3
 8001d26:	69ba      	ldr	r2, [r7, #24]
 8001d28:	4013      	ands	r3, r2
 8001d2a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	689a      	ldr	r2, [r3, #8]
 8001d30:	69fb      	ldr	r3, [r7, #28]
 8001d32:	005b      	lsls	r3, r3, #1
 8001d34:	fa02 f303 	lsl.w	r3, r2, r3
 8001d38:	69ba      	ldr	r2, [r7, #24]
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	69ba      	ldr	r2, [r7, #24]
 8001d42:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	f000 80c0 	beq.w	8001ed2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d52:	2300      	movs	r3, #0
 8001d54:	60fb      	str	r3, [r7, #12]
 8001d56:	4b66      	ldr	r3, [pc, #408]	; (8001ef0 <HAL_GPIO_Init+0x324>)
 8001d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d5a:	4a65      	ldr	r2, [pc, #404]	; (8001ef0 <HAL_GPIO_Init+0x324>)
 8001d5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d60:	6453      	str	r3, [r2, #68]	; 0x44
 8001d62:	4b63      	ldr	r3, [pc, #396]	; (8001ef0 <HAL_GPIO_Init+0x324>)
 8001d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d6a:	60fb      	str	r3, [r7, #12]
 8001d6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d6e:	4a61      	ldr	r2, [pc, #388]	; (8001ef4 <HAL_GPIO_Init+0x328>)
 8001d70:	69fb      	ldr	r3, [r7, #28]
 8001d72:	089b      	lsrs	r3, r3, #2
 8001d74:	3302      	adds	r3, #2
 8001d76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d7c:	69fb      	ldr	r3, [r7, #28]
 8001d7e:	f003 0303 	and.w	r3, r3, #3
 8001d82:	009b      	lsls	r3, r3, #2
 8001d84:	220f      	movs	r2, #15
 8001d86:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8a:	43db      	mvns	r3, r3
 8001d8c:	69ba      	ldr	r2, [r7, #24]
 8001d8e:	4013      	ands	r3, r2
 8001d90:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4a58      	ldr	r2, [pc, #352]	; (8001ef8 <HAL_GPIO_Init+0x32c>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d037      	beq.n	8001e0a <HAL_GPIO_Init+0x23e>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4a57      	ldr	r2, [pc, #348]	; (8001efc <HAL_GPIO_Init+0x330>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d031      	beq.n	8001e06 <HAL_GPIO_Init+0x23a>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4a56      	ldr	r2, [pc, #344]	; (8001f00 <HAL_GPIO_Init+0x334>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d02b      	beq.n	8001e02 <HAL_GPIO_Init+0x236>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4a55      	ldr	r2, [pc, #340]	; (8001f04 <HAL_GPIO_Init+0x338>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d025      	beq.n	8001dfe <HAL_GPIO_Init+0x232>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4a54      	ldr	r2, [pc, #336]	; (8001f08 <HAL_GPIO_Init+0x33c>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d01f      	beq.n	8001dfa <HAL_GPIO_Init+0x22e>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	4a53      	ldr	r2, [pc, #332]	; (8001f0c <HAL_GPIO_Init+0x340>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d019      	beq.n	8001df6 <HAL_GPIO_Init+0x22a>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	4a52      	ldr	r2, [pc, #328]	; (8001f10 <HAL_GPIO_Init+0x344>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d013      	beq.n	8001df2 <HAL_GPIO_Init+0x226>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	4a51      	ldr	r2, [pc, #324]	; (8001f14 <HAL_GPIO_Init+0x348>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d00d      	beq.n	8001dee <HAL_GPIO_Init+0x222>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4a50      	ldr	r2, [pc, #320]	; (8001f18 <HAL_GPIO_Init+0x34c>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d007      	beq.n	8001dea <HAL_GPIO_Init+0x21e>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4a4f      	ldr	r2, [pc, #316]	; (8001f1c <HAL_GPIO_Init+0x350>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d101      	bne.n	8001de6 <HAL_GPIO_Init+0x21a>
 8001de2:	2309      	movs	r3, #9
 8001de4:	e012      	b.n	8001e0c <HAL_GPIO_Init+0x240>
 8001de6:	230a      	movs	r3, #10
 8001de8:	e010      	b.n	8001e0c <HAL_GPIO_Init+0x240>
 8001dea:	2308      	movs	r3, #8
 8001dec:	e00e      	b.n	8001e0c <HAL_GPIO_Init+0x240>
 8001dee:	2307      	movs	r3, #7
 8001df0:	e00c      	b.n	8001e0c <HAL_GPIO_Init+0x240>
 8001df2:	2306      	movs	r3, #6
 8001df4:	e00a      	b.n	8001e0c <HAL_GPIO_Init+0x240>
 8001df6:	2305      	movs	r3, #5
 8001df8:	e008      	b.n	8001e0c <HAL_GPIO_Init+0x240>
 8001dfa:	2304      	movs	r3, #4
 8001dfc:	e006      	b.n	8001e0c <HAL_GPIO_Init+0x240>
 8001dfe:	2303      	movs	r3, #3
 8001e00:	e004      	b.n	8001e0c <HAL_GPIO_Init+0x240>
 8001e02:	2302      	movs	r3, #2
 8001e04:	e002      	b.n	8001e0c <HAL_GPIO_Init+0x240>
 8001e06:	2301      	movs	r3, #1
 8001e08:	e000      	b.n	8001e0c <HAL_GPIO_Init+0x240>
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	69fa      	ldr	r2, [r7, #28]
 8001e0e:	f002 0203 	and.w	r2, r2, #3
 8001e12:	0092      	lsls	r2, r2, #2
 8001e14:	4093      	lsls	r3, r2
 8001e16:	69ba      	ldr	r2, [r7, #24]
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e1c:	4935      	ldr	r1, [pc, #212]	; (8001ef4 <HAL_GPIO_Init+0x328>)
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	089b      	lsrs	r3, r3, #2
 8001e22:	3302      	adds	r3, #2
 8001e24:	69ba      	ldr	r2, [r7, #24]
 8001e26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e2a:	4b3d      	ldr	r3, [pc, #244]	; (8001f20 <HAL_GPIO_Init+0x354>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	43db      	mvns	r3, r3
 8001e34:	69ba      	ldr	r2, [r7, #24]
 8001e36:	4013      	ands	r3, r2
 8001e38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d003      	beq.n	8001e4e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001e46:	69ba      	ldr	r2, [r7, #24]
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e4e:	4a34      	ldr	r2, [pc, #208]	; (8001f20 <HAL_GPIO_Init+0x354>)
 8001e50:	69bb      	ldr	r3, [r7, #24]
 8001e52:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001e54:	4b32      	ldr	r3, [pc, #200]	; (8001f20 <HAL_GPIO_Init+0x354>)
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	43db      	mvns	r3, r3
 8001e5e:	69ba      	ldr	r2, [r7, #24]
 8001e60:	4013      	ands	r3, r2
 8001e62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d003      	beq.n	8001e78 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001e70:	69ba      	ldr	r2, [r7, #24]
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	4313      	orrs	r3, r2
 8001e76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e78:	4a29      	ldr	r2, [pc, #164]	; (8001f20 <HAL_GPIO_Init+0x354>)
 8001e7a:	69bb      	ldr	r3, [r7, #24]
 8001e7c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e7e:	4b28      	ldr	r3, [pc, #160]	; (8001f20 <HAL_GPIO_Init+0x354>)
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	43db      	mvns	r3, r3
 8001e88:	69ba      	ldr	r2, [r7, #24]
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d003      	beq.n	8001ea2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001e9a:	69ba      	ldr	r2, [r7, #24]
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ea2:	4a1f      	ldr	r2, [pc, #124]	; (8001f20 <HAL_GPIO_Init+0x354>)
 8001ea4:	69bb      	ldr	r3, [r7, #24]
 8001ea6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ea8:	4b1d      	ldr	r3, [pc, #116]	; (8001f20 <HAL_GPIO_Init+0x354>)
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	43db      	mvns	r3, r3
 8001eb2:	69ba      	ldr	r2, [r7, #24]
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d003      	beq.n	8001ecc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001ec4:	69ba      	ldr	r2, [r7, #24]
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ecc:	4a14      	ldr	r2, [pc, #80]	; (8001f20 <HAL_GPIO_Init+0x354>)
 8001ece:	69bb      	ldr	r3, [r7, #24]
 8001ed0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ed2:	69fb      	ldr	r3, [r7, #28]
 8001ed4:	3301      	adds	r3, #1
 8001ed6:	61fb      	str	r3, [r7, #28]
 8001ed8:	69fb      	ldr	r3, [r7, #28]
 8001eda:	2b0f      	cmp	r3, #15
 8001edc:	f67f ae84 	bls.w	8001be8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ee0:	bf00      	nop
 8001ee2:	bf00      	nop
 8001ee4:	3724      	adds	r7, #36	; 0x24
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr
 8001eee:	bf00      	nop
 8001ef0:	40023800 	.word	0x40023800
 8001ef4:	40013800 	.word	0x40013800
 8001ef8:	40020000 	.word	0x40020000
 8001efc:	40020400 	.word	0x40020400
 8001f00:	40020800 	.word	0x40020800
 8001f04:	40020c00 	.word	0x40020c00
 8001f08:	40021000 	.word	0x40021000
 8001f0c:	40021400 	.word	0x40021400
 8001f10:	40021800 	.word	0x40021800
 8001f14:	40021c00 	.word	0x40021c00
 8001f18:	40022000 	.word	0x40022000
 8001f1c:	40022400 	.word	0x40022400
 8001f20:	40013c00 	.word	0x40013c00

08001f24 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b087      	sub	sp, #28
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
 8001f2c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8001f32:	2300      	movs	r3, #0
 8001f34:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8001f36:	2300      	movs	r3, #0
 8001f38:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	617b      	str	r3, [r7, #20]
 8001f3e:	e0d9      	b.n	80020f4 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f40:	2201      	movs	r2, #1
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	fa02 f303 	lsl.w	r3, r2, r3
 8001f48:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8001f4a:	683a      	ldr	r2, [r7, #0]
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	4013      	ands	r3, r2
 8001f50:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8001f52:	68fa      	ldr	r2, [r7, #12]
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	429a      	cmp	r2, r3
 8001f58:	f040 80c9 	bne.w	80020ee <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8001f5c:	4a6b      	ldr	r2, [pc, #428]	; (800210c <HAL_GPIO_DeInit+0x1e8>)
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	089b      	lsrs	r3, r3, #2
 8001f62:	3302      	adds	r3, #2
 8001f64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f68:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	f003 0303 	and.w	r3, r3, #3
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	220f      	movs	r2, #15
 8001f74:	fa02 f303 	lsl.w	r3, r2, r3
 8001f78:	68ba      	ldr	r2, [r7, #8]
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4a63      	ldr	r2, [pc, #396]	; (8002110 <HAL_GPIO_DeInit+0x1ec>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d037      	beq.n	8001ff6 <HAL_GPIO_DeInit+0xd2>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4a62      	ldr	r2, [pc, #392]	; (8002114 <HAL_GPIO_DeInit+0x1f0>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d031      	beq.n	8001ff2 <HAL_GPIO_DeInit+0xce>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4a61      	ldr	r2, [pc, #388]	; (8002118 <HAL_GPIO_DeInit+0x1f4>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d02b      	beq.n	8001fee <HAL_GPIO_DeInit+0xca>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4a60      	ldr	r2, [pc, #384]	; (800211c <HAL_GPIO_DeInit+0x1f8>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d025      	beq.n	8001fea <HAL_GPIO_DeInit+0xc6>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4a5f      	ldr	r2, [pc, #380]	; (8002120 <HAL_GPIO_DeInit+0x1fc>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d01f      	beq.n	8001fe6 <HAL_GPIO_DeInit+0xc2>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4a5e      	ldr	r2, [pc, #376]	; (8002124 <HAL_GPIO_DeInit+0x200>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d019      	beq.n	8001fe2 <HAL_GPIO_DeInit+0xbe>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4a5d      	ldr	r2, [pc, #372]	; (8002128 <HAL_GPIO_DeInit+0x204>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d013      	beq.n	8001fde <HAL_GPIO_DeInit+0xba>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4a5c      	ldr	r2, [pc, #368]	; (800212c <HAL_GPIO_DeInit+0x208>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d00d      	beq.n	8001fda <HAL_GPIO_DeInit+0xb6>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4a5b      	ldr	r2, [pc, #364]	; (8002130 <HAL_GPIO_DeInit+0x20c>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d007      	beq.n	8001fd6 <HAL_GPIO_DeInit+0xb2>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4a5a      	ldr	r2, [pc, #360]	; (8002134 <HAL_GPIO_DeInit+0x210>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d101      	bne.n	8001fd2 <HAL_GPIO_DeInit+0xae>
 8001fce:	2309      	movs	r3, #9
 8001fd0:	e012      	b.n	8001ff8 <HAL_GPIO_DeInit+0xd4>
 8001fd2:	230a      	movs	r3, #10
 8001fd4:	e010      	b.n	8001ff8 <HAL_GPIO_DeInit+0xd4>
 8001fd6:	2308      	movs	r3, #8
 8001fd8:	e00e      	b.n	8001ff8 <HAL_GPIO_DeInit+0xd4>
 8001fda:	2307      	movs	r3, #7
 8001fdc:	e00c      	b.n	8001ff8 <HAL_GPIO_DeInit+0xd4>
 8001fde:	2306      	movs	r3, #6
 8001fe0:	e00a      	b.n	8001ff8 <HAL_GPIO_DeInit+0xd4>
 8001fe2:	2305      	movs	r3, #5
 8001fe4:	e008      	b.n	8001ff8 <HAL_GPIO_DeInit+0xd4>
 8001fe6:	2304      	movs	r3, #4
 8001fe8:	e006      	b.n	8001ff8 <HAL_GPIO_DeInit+0xd4>
 8001fea:	2303      	movs	r3, #3
 8001fec:	e004      	b.n	8001ff8 <HAL_GPIO_DeInit+0xd4>
 8001fee:	2302      	movs	r3, #2
 8001ff0:	e002      	b.n	8001ff8 <HAL_GPIO_DeInit+0xd4>
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e000      	b.n	8001ff8 <HAL_GPIO_DeInit+0xd4>
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	697a      	ldr	r2, [r7, #20]
 8001ffa:	f002 0203 	and.w	r2, r2, #3
 8001ffe:	0092      	lsls	r2, r2, #2
 8002000:	4093      	lsls	r3, r2
 8002002:	68ba      	ldr	r2, [r7, #8]
 8002004:	429a      	cmp	r2, r3
 8002006:	d132      	bne.n	800206e <HAL_GPIO_DeInit+0x14a>
      {
        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	f003 0303 	and.w	r3, r3, #3
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	220f      	movs	r2, #15
 8002012:	fa02 f303 	lsl.w	r3, r2, r3
 8002016:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002018:	4a3c      	ldr	r2, [pc, #240]	; (800210c <HAL_GPIO_DeInit+0x1e8>)
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	089b      	lsrs	r3, r3, #2
 800201e:	3302      	adds	r3, #2
 8002020:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	43da      	mvns	r2, r3
 8002028:	4838      	ldr	r0, [pc, #224]	; (800210c <HAL_GPIO_DeInit+0x1e8>)
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	089b      	lsrs	r3, r3, #2
 800202e:	400a      	ands	r2, r1
 8002030:	3302      	adds	r3, #2
 8002032:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002036:	4b40      	ldr	r3, [pc, #256]	; (8002138 <HAL_GPIO_DeInit+0x214>)
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	43db      	mvns	r3, r3
 800203e:	493e      	ldr	r1, [pc, #248]	; (8002138 <HAL_GPIO_DeInit+0x214>)
 8002040:	4013      	ands	r3, r2
 8002042:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002044:	4b3c      	ldr	r3, [pc, #240]	; (8002138 <HAL_GPIO_DeInit+0x214>)
 8002046:	685a      	ldr	r2, [r3, #4]
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	43db      	mvns	r3, r3
 800204c:	493a      	ldr	r1, [pc, #232]	; (8002138 <HAL_GPIO_DeInit+0x214>)
 800204e:	4013      	ands	r3, r2
 8002050:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002052:	4b39      	ldr	r3, [pc, #228]	; (8002138 <HAL_GPIO_DeInit+0x214>)
 8002054:	689a      	ldr	r2, [r3, #8]
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	43db      	mvns	r3, r3
 800205a:	4937      	ldr	r1, [pc, #220]	; (8002138 <HAL_GPIO_DeInit+0x214>)
 800205c:	4013      	ands	r3, r2
 800205e:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002060:	4b35      	ldr	r3, [pc, #212]	; (8002138 <HAL_GPIO_DeInit+0x214>)
 8002062:	68da      	ldr	r2, [r3, #12]
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	43db      	mvns	r3, r3
 8002068:	4933      	ldr	r1, [pc, #204]	; (8002138 <HAL_GPIO_DeInit+0x214>)
 800206a:	4013      	ands	r3, r2
 800206c:	60cb      	str	r3, [r1, #12]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	005b      	lsls	r3, r3, #1
 8002076:	2103      	movs	r1, #3
 8002078:	fa01 f303 	lsl.w	r3, r1, r3
 800207c:	43db      	mvns	r3, r3
 800207e:	401a      	ands	r2, r3
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	08da      	lsrs	r2, r3, #3
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	3208      	adds	r2, #8
 800208c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	f003 0307 	and.w	r3, r3, #7
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	220f      	movs	r2, #15
 800209a:	fa02 f303 	lsl.w	r3, r2, r3
 800209e:	43db      	mvns	r3, r3
 80020a0:	697a      	ldr	r2, [r7, #20]
 80020a2:	08d2      	lsrs	r2, r2, #3
 80020a4:	4019      	ands	r1, r3
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	3208      	adds	r2, #8
 80020aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	689a      	ldr	r2, [r3, #8]
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	005b      	lsls	r3, r3, #1
 80020b6:	2103      	movs	r1, #3
 80020b8:	fa01 f303 	lsl.w	r3, r1, r3
 80020bc:	43db      	mvns	r3, r3
 80020be:	401a      	ands	r2, r3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	685a      	ldr	r2, [r3, #4]
 80020c8:	2101      	movs	r1, #1
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	fa01 f303 	lsl.w	r3, r1, r3
 80020d0:	43db      	mvns	r3, r3
 80020d2:	401a      	ands	r2, r3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	68da      	ldr	r2, [r3, #12]
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	005b      	lsls	r3, r3, #1
 80020e0:	2103      	movs	r1, #3
 80020e2:	fa01 f303 	lsl.w	r3, r1, r3
 80020e6:	43db      	mvns	r3, r3
 80020e8:	401a      	ands	r2, r3
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	60da      	str	r2, [r3, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	3301      	adds	r3, #1
 80020f2:	617b      	str	r3, [r7, #20]
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	2b0f      	cmp	r3, #15
 80020f8:	f67f af22 	bls.w	8001f40 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80020fc:	bf00      	nop
 80020fe:	bf00      	nop
 8002100:	371c      	adds	r7, #28
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr
 800210a:	bf00      	nop
 800210c:	40013800 	.word	0x40013800
 8002110:	40020000 	.word	0x40020000
 8002114:	40020400 	.word	0x40020400
 8002118:	40020800 	.word	0x40020800
 800211c:	40020c00 	.word	0x40020c00
 8002120:	40021000 	.word	0x40021000
 8002124:	40021400 	.word	0x40021400
 8002128:	40021800 	.word	0x40021800
 800212c:	40021c00 	.word	0x40021c00
 8002130:	40022000 	.word	0x40022000
 8002134:	40022400 	.word	0x40022400
 8002138:	40013c00 	.word	0x40013c00

0800213c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
 8002144:	460b      	mov	r3, r1
 8002146:	807b      	strh	r3, [r7, #2]
 8002148:	4613      	mov	r3, r2
 800214a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800214c:	787b      	ldrb	r3, [r7, #1]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d003      	beq.n	800215a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002152:	887a      	ldrh	r2, [r7, #2]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002158:	e003      	b.n	8002162 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800215a:	887b      	ldrh	r3, [r7, #2]
 800215c:	041a      	lsls	r2, r3, #16
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	619a      	str	r2, [r3, #24]
}
 8002162:	bf00      	nop
 8002164:	370c      	adds	r7, #12
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr

0800216e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800216e:	b480      	push	{r7}
 8002170:	b083      	sub	sp, #12
 8002172:	af00      	add	r7, sp, #0
 8002174:	6078      	str	r0, [r7, #4]
 8002176:	460b      	mov	r3, r1
 8002178:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	695a      	ldr	r2, [r3, #20]
 800217e:	887b      	ldrh	r3, [r7, #2]
 8002180:	401a      	ands	r2, r3
 8002182:	887b      	ldrh	r3, [r7, #2]
 8002184:	429a      	cmp	r2, r3
 8002186:	d104      	bne.n	8002192 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002188:	887b      	ldrh	r3, [r7, #2]
 800218a:	041a      	lsls	r2, r3, #16
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8002190:	e002      	b.n	8002198 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8002192:	887a      	ldrh	r2, [r7, #2]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	619a      	str	r2, [r3, #24]
}
 8002198:	bf00      	nop
 800219a:	370c      	adds	r7, #12
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr

080021a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b084      	sub	sp, #16
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d101      	bne.n	80021b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e11b      	b.n	80023ee <HAL_I2C_Init+0x24a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d106      	bne.n	80021d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2200      	movs	r2, #0
 80021c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f000 f94d 	bl	800246a <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2224      	movs	r2, #36	; 0x24
 80021d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f022 0201 	bic.w	r2, r2, #1
 80021e6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80021e8:	f001 fcd0 	bl	8003b8c <HAL_RCC_GetPCLK1Freq>
 80021ec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	4a81      	ldr	r2, [pc, #516]	; (80023f8 <HAL_I2C_Init+0x254>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d807      	bhi.n	8002208 <HAL_I2C_Init+0x64>
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	4a80      	ldr	r2, [pc, #512]	; (80023fc <HAL_I2C_Init+0x258>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	bf94      	ite	ls
 8002200:	2301      	movls	r3, #1
 8002202:	2300      	movhi	r3, #0
 8002204:	b2db      	uxtb	r3, r3
 8002206:	e006      	b.n	8002216 <HAL_I2C_Init+0x72>
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	4a7d      	ldr	r2, [pc, #500]	; (8002400 <HAL_I2C_Init+0x25c>)
 800220c:	4293      	cmp	r3, r2
 800220e:	bf94      	ite	ls
 8002210:	2301      	movls	r3, #1
 8002212:	2300      	movhi	r3, #0
 8002214:	b2db      	uxtb	r3, r3
 8002216:	2b00      	cmp	r3, #0
 8002218:	d001      	beq.n	800221e <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e0e7      	b.n	80023ee <HAL_I2C_Init+0x24a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	4a78      	ldr	r2, [pc, #480]	; (8002404 <HAL_I2C_Init+0x260>)
 8002222:	fba2 2303 	umull	r2, r3, r2, r3
 8002226:	0c9b      	lsrs	r3, r3, #18
 8002228:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	68ba      	ldr	r2, [r7, #8]
 800223a:	430a      	orrs	r2, r1
 800223c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	6a1b      	ldr	r3, [r3, #32]
 8002244:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	4a6a      	ldr	r2, [pc, #424]	; (80023f8 <HAL_I2C_Init+0x254>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d802      	bhi.n	8002258 <HAL_I2C_Init+0xb4>
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	3301      	adds	r3, #1
 8002256:	e009      	b.n	800226c <HAL_I2C_Init+0xc8>
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800225e:	fb02 f303 	mul.w	r3, r2, r3
 8002262:	4a69      	ldr	r2, [pc, #420]	; (8002408 <HAL_I2C_Init+0x264>)
 8002264:	fba2 2303 	umull	r2, r3, r2, r3
 8002268:	099b      	lsrs	r3, r3, #6
 800226a:	3301      	adds	r3, #1
 800226c:	687a      	ldr	r2, [r7, #4]
 800226e:	6812      	ldr	r2, [r2, #0]
 8002270:	430b      	orrs	r3, r1
 8002272:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	69db      	ldr	r3, [r3, #28]
 800227a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800227e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	495c      	ldr	r1, [pc, #368]	; (80023f8 <HAL_I2C_Init+0x254>)
 8002288:	428b      	cmp	r3, r1
 800228a:	d819      	bhi.n	80022c0 <HAL_I2C_Init+0x11c>
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	1e59      	subs	r1, r3, #1
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	005b      	lsls	r3, r3, #1
 8002296:	fbb1 f3f3 	udiv	r3, r1, r3
 800229a:	1c59      	adds	r1, r3, #1
 800229c:	f640 73fc 	movw	r3, #4092	; 0xffc
 80022a0:	400b      	ands	r3, r1
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d00a      	beq.n	80022bc <HAL_I2C_Init+0x118>
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	1e59      	subs	r1, r3, #1
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	005b      	lsls	r3, r3, #1
 80022b0:	fbb1 f3f3 	udiv	r3, r1, r3
 80022b4:	3301      	adds	r3, #1
 80022b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022ba:	e051      	b.n	8002360 <HAL_I2C_Init+0x1bc>
 80022bc:	2304      	movs	r3, #4
 80022be:	e04f      	b.n	8002360 <HAL_I2C_Init+0x1bc>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d111      	bne.n	80022ec <HAL_I2C_Init+0x148>
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	1e58      	subs	r0, r3, #1
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6859      	ldr	r1, [r3, #4]
 80022d0:	460b      	mov	r3, r1
 80022d2:	005b      	lsls	r3, r3, #1
 80022d4:	440b      	add	r3, r1
 80022d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80022da:	3301      	adds	r3, #1
 80022dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	bf0c      	ite	eq
 80022e4:	2301      	moveq	r3, #1
 80022e6:	2300      	movne	r3, #0
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	e012      	b.n	8002312 <HAL_I2C_Init+0x16e>
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	1e58      	subs	r0, r3, #1
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6859      	ldr	r1, [r3, #4]
 80022f4:	460b      	mov	r3, r1
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	440b      	add	r3, r1
 80022fa:	0099      	lsls	r1, r3, #2
 80022fc:	440b      	add	r3, r1
 80022fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002302:	3301      	adds	r3, #1
 8002304:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002308:	2b00      	cmp	r3, #0
 800230a:	bf0c      	ite	eq
 800230c:	2301      	moveq	r3, #1
 800230e:	2300      	movne	r3, #0
 8002310:	b2db      	uxtb	r3, r3
 8002312:	2b00      	cmp	r3, #0
 8002314:	d001      	beq.n	800231a <HAL_I2C_Init+0x176>
 8002316:	2301      	movs	r3, #1
 8002318:	e022      	b.n	8002360 <HAL_I2C_Init+0x1bc>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d10e      	bne.n	8002340 <HAL_I2C_Init+0x19c>
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	1e58      	subs	r0, r3, #1
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6859      	ldr	r1, [r3, #4]
 800232a:	460b      	mov	r3, r1
 800232c:	005b      	lsls	r3, r3, #1
 800232e:	440b      	add	r3, r1
 8002330:	fbb0 f3f3 	udiv	r3, r0, r3
 8002334:	3301      	adds	r3, #1
 8002336:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800233a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800233e:	e00f      	b.n	8002360 <HAL_I2C_Init+0x1bc>
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	1e58      	subs	r0, r3, #1
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6859      	ldr	r1, [r3, #4]
 8002348:	460b      	mov	r3, r1
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	440b      	add	r3, r1
 800234e:	0099      	lsls	r1, r3, #2
 8002350:	440b      	add	r3, r1
 8002352:	fbb0 f3f3 	udiv	r3, r0, r3
 8002356:	3301      	adds	r3, #1
 8002358:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800235c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002360:	6879      	ldr	r1, [r7, #4]
 8002362:	6809      	ldr	r1, [r1, #0]
 8002364:	4313      	orrs	r3, r2
 8002366:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	69da      	ldr	r2, [r3, #28]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6a1b      	ldr	r3, [r3, #32]
 800237a:	431a      	orrs	r2, r3
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	430a      	orrs	r2, r1
 8002382:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800238e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002392:	687a      	ldr	r2, [r7, #4]
 8002394:	6911      	ldr	r1, [r2, #16]
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	68d2      	ldr	r2, [r2, #12]
 800239a:	4311      	orrs	r1, r2
 800239c:	687a      	ldr	r2, [r7, #4]
 800239e:	6812      	ldr	r2, [r2, #0]
 80023a0:	430b      	orrs	r3, r1
 80023a2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	68db      	ldr	r3, [r3, #12]
 80023aa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	695a      	ldr	r2, [r3, #20]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	699b      	ldr	r3, [r3, #24]
 80023b6:	431a      	orrs	r2, r3
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	430a      	orrs	r2, r1
 80023be:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f042 0201 	orr.w	r2, r2, #1
 80023ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2200      	movs	r2, #0
 80023d4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2220      	movs	r2, #32
 80023da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2200      	movs	r2, #0
 80023e2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2200      	movs	r2, #0
 80023e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80023ec:	2300      	movs	r3, #0
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3710      	adds	r7, #16
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	000186a0 	.word	0x000186a0
 80023fc:	001e847f 	.word	0x001e847f
 8002400:	003d08ff 	.word	0x003d08ff
 8002404:	431bde83 	.word	0x431bde83
 8002408:	10624dd3 	.word	0x10624dd3

0800240c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d101      	bne.n	800241e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e021      	b.n	8002462 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2224      	movs	r2, #36	; 0x24
 8002422:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f022 0201 	bic.w	r2, r2, #1
 8002434:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	f000 f821 	bl	800247e <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2200      	movs	r2, #0
 8002440:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2200      	movs	r2, #0
 8002446:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2200      	movs	r2, #0
 800244e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2200      	movs	r2, #0
 8002454:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2200      	movs	r2, #0
 800245c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002460:	2300      	movs	r3, #0
}
 8002462:	4618      	mov	r0, r3
 8002464:	3708      	adds	r7, #8
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}

0800246a <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800246a:	b480      	push	{r7}
 800246c:	b083      	sub	sp, #12
 800246e:	af00      	add	r7, sp, #0
 8002470:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8002472:	bf00      	nop
 8002474:	370c      	adds	r7, #12
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr

0800247e <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 800247e:	b480      	push	{r7}
 8002480:	b083      	sub	sp, #12
 8002482:	af00      	add	r7, sp, #0
 8002484:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8002486:	bf00      	nop
 8002488:	370c      	adds	r7, #12
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr
	...

08002494 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b088      	sub	sp, #32
 8002498:	af02      	add	r7, sp, #8
 800249a:	60f8      	str	r0, [r7, #12]
 800249c:	4608      	mov	r0, r1
 800249e:	4611      	mov	r1, r2
 80024a0:	461a      	mov	r2, r3
 80024a2:	4603      	mov	r3, r0
 80024a4:	817b      	strh	r3, [r7, #10]
 80024a6:	460b      	mov	r3, r1
 80024a8:	813b      	strh	r3, [r7, #8]
 80024aa:	4613      	mov	r3, r2
 80024ac:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80024ae:	f7fe f88b 	bl	80005c8 <HAL_GetTick>
 80024b2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	2b20      	cmp	r3, #32
 80024be:	f040 80d9 	bne.w	8002674 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	9300      	str	r3, [sp, #0]
 80024c6:	2319      	movs	r3, #25
 80024c8:	2201      	movs	r2, #1
 80024ca:	496d      	ldr	r1, [pc, #436]	; (8002680 <HAL_I2C_Mem_Write+0x1ec>)
 80024cc:	68f8      	ldr	r0, [r7, #12]
 80024ce:	f000 fc69 	bl	8002da4 <I2C_WaitOnFlagUntilTimeout>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d001      	beq.n	80024dc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80024d8:	2302      	movs	r3, #2
 80024da:	e0cc      	b.n	8002676 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d101      	bne.n	80024ea <HAL_I2C_Mem_Write+0x56>
 80024e6:	2302      	movs	r3, #2
 80024e8:	e0c5      	b.n	8002676 <HAL_I2C_Mem_Write+0x1e2>
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	2201      	movs	r2, #1
 80024ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f003 0301 	and.w	r3, r3, #1
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	d007      	beq.n	8002510 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f042 0201 	orr.w	r2, r2, #1
 800250e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800251e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	2221      	movs	r2, #33	; 0x21
 8002524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	2240      	movs	r2, #64	; 0x40
 800252c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	2200      	movs	r2, #0
 8002534:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	6a3a      	ldr	r2, [r7, #32]
 800253a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002540:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002546:	b29a      	uxth	r2, r3
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	4a4d      	ldr	r2, [pc, #308]	; (8002684 <HAL_I2C_Mem_Write+0x1f0>)
 8002550:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002552:	88f8      	ldrh	r0, [r7, #6]
 8002554:	893a      	ldrh	r2, [r7, #8]
 8002556:	8979      	ldrh	r1, [r7, #10]
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	9301      	str	r3, [sp, #4]
 800255c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800255e:	9300      	str	r3, [sp, #0]
 8002560:	4603      	mov	r3, r0
 8002562:	68f8      	ldr	r0, [r7, #12]
 8002564:	f000 fac4 	bl	8002af0 <I2C_RequestMemoryWrite>
 8002568:	4603      	mov	r3, r0
 800256a:	2b00      	cmp	r3, #0
 800256c:	d052      	beq.n	8002614 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e081      	b.n	8002676 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002572:	697a      	ldr	r2, [r7, #20]
 8002574:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002576:	68f8      	ldr	r0, [r7, #12]
 8002578:	f000 fcea 	bl	8002f50 <I2C_WaitOnTXEFlagUntilTimeout>
 800257c:	4603      	mov	r3, r0
 800257e:	2b00      	cmp	r3, #0
 8002580:	d00d      	beq.n	800259e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002586:	2b04      	cmp	r3, #4
 8002588:	d107      	bne.n	800259a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002598:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	e06b      	b.n	8002676 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a2:	781a      	ldrb	r2, [r3, #0]
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ae:	1c5a      	adds	r2, r3, #1
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025b8:	3b01      	subs	r3, #1
 80025ba:	b29a      	uxth	r2, r3
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025c4:	b29b      	uxth	r3, r3
 80025c6:	3b01      	subs	r3, #1
 80025c8:	b29a      	uxth	r2, r3
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	695b      	ldr	r3, [r3, #20]
 80025d4:	f003 0304 	and.w	r3, r3, #4
 80025d8:	2b04      	cmp	r3, #4
 80025da:	d11b      	bne.n	8002614 <HAL_I2C_Mem_Write+0x180>
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d017      	beq.n	8002614 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e8:	781a      	ldrb	r2, [r3, #0]
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f4:	1c5a      	adds	r2, r3, #1
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025fe:	3b01      	subs	r3, #1
 8002600:	b29a      	uxth	r2, r3
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800260a:	b29b      	uxth	r3, r3
 800260c:	3b01      	subs	r3, #1
 800260e:	b29a      	uxth	r2, r3
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002618:	2b00      	cmp	r3, #0
 800261a:	d1aa      	bne.n	8002572 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800261c:	697a      	ldr	r2, [r7, #20]
 800261e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002620:	68f8      	ldr	r0, [r7, #12]
 8002622:	f000 fcd6 	bl	8002fd2 <I2C_WaitOnBTFFlagUntilTimeout>
 8002626:	4603      	mov	r3, r0
 8002628:	2b00      	cmp	r3, #0
 800262a:	d00d      	beq.n	8002648 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002630:	2b04      	cmp	r3, #4
 8002632:	d107      	bne.n	8002644 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002642:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	e016      	b.n	8002676 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002656:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	2220      	movs	r2, #32
 800265c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	2200      	movs	r2, #0
 8002664:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	2200      	movs	r2, #0
 800266c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002670:	2300      	movs	r3, #0
 8002672:	e000      	b.n	8002676 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002674:	2302      	movs	r3, #2
  }
}
 8002676:	4618      	mov	r0, r3
 8002678:	3718      	adds	r7, #24
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	00100002 	.word	0x00100002
 8002684:	ffff0000 	.word	0xffff0000

08002688 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b08c      	sub	sp, #48	; 0x30
 800268c:	af02      	add	r7, sp, #8
 800268e:	60f8      	str	r0, [r7, #12]
 8002690:	4608      	mov	r0, r1
 8002692:	4611      	mov	r1, r2
 8002694:	461a      	mov	r2, r3
 8002696:	4603      	mov	r3, r0
 8002698:	817b      	strh	r3, [r7, #10]
 800269a:	460b      	mov	r3, r1
 800269c:	813b      	strh	r3, [r7, #8]
 800269e:	4613      	mov	r3, r2
 80026a0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80026a2:	f7fd ff91 	bl	80005c8 <HAL_GetTick>
 80026a6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	2b20      	cmp	r3, #32
 80026b2:	f040 8208 	bne.w	8002ac6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80026b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b8:	9300      	str	r3, [sp, #0]
 80026ba:	2319      	movs	r3, #25
 80026bc:	2201      	movs	r2, #1
 80026be:	497b      	ldr	r1, [pc, #492]	; (80028ac <HAL_I2C_Mem_Read+0x224>)
 80026c0:	68f8      	ldr	r0, [r7, #12]
 80026c2:	f000 fb6f 	bl	8002da4 <I2C_WaitOnFlagUntilTimeout>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d001      	beq.n	80026d0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80026cc:	2302      	movs	r3, #2
 80026ce:	e1fb      	b.n	8002ac8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d101      	bne.n	80026de <HAL_I2C_Mem_Read+0x56>
 80026da:	2302      	movs	r3, #2
 80026dc:	e1f4      	b.n	8002ac8 <HAL_I2C_Mem_Read+0x440>
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2201      	movs	r2, #1
 80026e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 0301 	and.w	r3, r3, #1
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d007      	beq.n	8002704 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f042 0201 	orr.w	r2, r2, #1
 8002702:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002712:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	2222      	movs	r2, #34	; 0x22
 8002718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	2240      	movs	r2, #64	; 0x40
 8002720:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	2200      	movs	r2, #0
 8002728:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800272e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002734:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800273a:	b29a      	uxth	r2, r3
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	4a5b      	ldr	r2, [pc, #364]	; (80028b0 <HAL_I2C_Mem_Read+0x228>)
 8002744:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002746:	88f8      	ldrh	r0, [r7, #6]
 8002748:	893a      	ldrh	r2, [r7, #8]
 800274a:	8979      	ldrh	r1, [r7, #10]
 800274c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274e:	9301      	str	r3, [sp, #4]
 8002750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002752:	9300      	str	r3, [sp, #0]
 8002754:	4603      	mov	r3, r0
 8002756:	68f8      	ldr	r0, [r7, #12]
 8002758:	f000 fa54 	bl	8002c04 <I2C_RequestMemoryRead>
 800275c:	4603      	mov	r3, r0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d001      	beq.n	8002766 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e1b0      	b.n	8002ac8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800276a:	2b00      	cmp	r3, #0
 800276c:	d113      	bne.n	8002796 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800276e:	2300      	movs	r3, #0
 8002770:	623b      	str	r3, [r7, #32]
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	695b      	ldr	r3, [r3, #20]
 8002778:	623b      	str	r3, [r7, #32]
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	699b      	ldr	r3, [r3, #24]
 8002780:	623b      	str	r3, [r7, #32]
 8002782:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002792:	601a      	str	r2, [r3, #0]
 8002794:	e184      	b.n	8002aa0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800279a:	2b01      	cmp	r3, #1
 800279c:	d11b      	bne.n	80027d6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027ac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027ae:	2300      	movs	r3, #0
 80027b0:	61fb      	str	r3, [r7, #28]
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	695b      	ldr	r3, [r3, #20]
 80027b8:	61fb      	str	r3, [r7, #28]
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	699b      	ldr	r3, [r3, #24]
 80027c0:	61fb      	str	r3, [r7, #28]
 80027c2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027d2:	601a      	str	r2, [r3, #0]
 80027d4:	e164      	b.n	8002aa0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027da:	2b02      	cmp	r3, #2
 80027dc:	d11b      	bne.n	8002816 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027ec:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80027fc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027fe:	2300      	movs	r3, #0
 8002800:	61bb      	str	r3, [r7, #24]
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	695b      	ldr	r3, [r3, #20]
 8002808:	61bb      	str	r3, [r7, #24]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	699b      	ldr	r3, [r3, #24]
 8002810:	61bb      	str	r3, [r7, #24]
 8002812:	69bb      	ldr	r3, [r7, #24]
 8002814:	e144      	b.n	8002aa0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002816:	2300      	movs	r3, #0
 8002818:	617b      	str	r3, [r7, #20]
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	695b      	ldr	r3, [r3, #20]
 8002820:	617b      	str	r3, [r7, #20]
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	699b      	ldr	r3, [r3, #24]
 8002828:	617b      	str	r3, [r7, #20]
 800282a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800282c:	e138      	b.n	8002aa0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002832:	2b03      	cmp	r3, #3
 8002834:	f200 80f1 	bhi.w	8002a1a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800283c:	2b01      	cmp	r3, #1
 800283e:	d123      	bne.n	8002888 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002840:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002842:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002844:	68f8      	ldr	r0, [r7, #12]
 8002846:	f000 fc05 	bl	8003054 <I2C_WaitOnRXNEFlagUntilTimeout>
 800284a:	4603      	mov	r3, r0
 800284c:	2b00      	cmp	r3, #0
 800284e:	d001      	beq.n	8002854 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e139      	b.n	8002ac8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	691a      	ldr	r2, [r3, #16]
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800285e:	b2d2      	uxtb	r2, r2
 8002860:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002866:	1c5a      	adds	r2, r3, #1
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002870:	3b01      	subs	r3, #1
 8002872:	b29a      	uxth	r2, r3
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800287c:	b29b      	uxth	r3, r3
 800287e:	3b01      	subs	r3, #1
 8002880:	b29a      	uxth	r2, r3
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002886:	e10b      	b.n	8002aa0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800288c:	2b02      	cmp	r3, #2
 800288e:	d14e      	bne.n	800292e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002892:	9300      	str	r3, [sp, #0]
 8002894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002896:	2200      	movs	r2, #0
 8002898:	4906      	ldr	r1, [pc, #24]	; (80028b4 <HAL_I2C_Mem_Read+0x22c>)
 800289a:	68f8      	ldr	r0, [r7, #12]
 800289c:	f000 fa82 	bl	8002da4 <I2C_WaitOnFlagUntilTimeout>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d008      	beq.n	80028b8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e10e      	b.n	8002ac8 <HAL_I2C_Mem_Read+0x440>
 80028aa:	bf00      	nop
 80028ac:	00100002 	.word	0x00100002
 80028b0:	ffff0000 	.word	0xffff0000
 80028b4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	691a      	ldr	r2, [r3, #16]
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d2:	b2d2      	uxtb	r2, r2
 80028d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028da:	1c5a      	adds	r2, r3, #1
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028e4:	3b01      	subs	r3, #1
 80028e6:	b29a      	uxth	r2, r3
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028f0:	b29b      	uxth	r3, r3
 80028f2:	3b01      	subs	r3, #1
 80028f4:	b29a      	uxth	r2, r3
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	691a      	ldr	r2, [r3, #16]
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002904:	b2d2      	uxtb	r2, r2
 8002906:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800290c:	1c5a      	adds	r2, r3, #1
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002916:	3b01      	subs	r3, #1
 8002918:	b29a      	uxth	r2, r3
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002922:	b29b      	uxth	r3, r3
 8002924:	3b01      	subs	r3, #1
 8002926:	b29a      	uxth	r2, r3
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800292c:	e0b8      	b.n	8002aa0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800292e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002930:	9300      	str	r3, [sp, #0]
 8002932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002934:	2200      	movs	r2, #0
 8002936:	4966      	ldr	r1, [pc, #408]	; (8002ad0 <HAL_I2C_Mem_Read+0x448>)
 8002938:	68f8      	ldr	r0, [r7, #12]
 800293a:	f000 fa33 	bl	8002da4 <I2C_WaitOnFlagUntilTimeout>
 800293e:	4603      	mov	r3, r0
 8002940:	2b00      	cmp	r3, #0
 8002942:	d001      	beq.n	8002948 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e0bf      	b.n	8002ac8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002956:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	691a      	ldr	r2, [r3, #16]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002962:	b2d2      	uxtb	r2, r2
 8002964:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800296a:	1c5a      	adds	r2, r3, #1
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002974:	3b01      	subs	r3, #1
 8002976:	b29a      	uxth	r2, r3
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002980:	b29b      	uxth	r3, r3
 8002982:	3b01      	subs	r3, #1
 8002984:	b29a      	uxth	r2, r3
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800298a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298c:	9300      	str	r3, [sp, #0]
 800298e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002990:	2200      	movs	r2, #0
 8002992:	494f      	ldr	r1, [pc, #316]	; (8002ad0 <HAL_I2C_Mem_Read+0x448>)
 8002994:	68f8      	ldr	r0, [r7, #12]
 8002996:	f000 fa05 	bl	8002da4 <I2C_WaitOnFlagUntilTimeout>
 800299a:	4603      	mov	r3, r0
 800299c:	2b00      	cmp	r3, #0
 800299e:	d001      	beq.n	80029a4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	e091      	b.n	8002ac8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	691a      	ldr	r2, [r3, #16]
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029be:	b2d2      	uxtb	r2, r2
 80029c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c6:	1c5a      	adds	r2, r3, #1
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029d0:	3b01      	subs	r3, #1
 80029d2:	b29a      	uxth	r2, r3
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029dc:	b29b      	uxth	r3, r3
 80029de:	3b01      	subs	r3, #1
 80029e0:	b29a      	uxth	r2, r3
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	691a      	ldr	r2, [r3, #16]
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f0:	b2d2      	uxtb	r2, r2
 80029f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f8:	1c5a      	adds	r2, r3, #1
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a02:	3b01      	subs	r3, #1
 8002a04:	b29a      	uxth	r2, r3
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a0e:	b29b      	uxth	r3, r3
 8002a10:	3b01      	subs	r3, #1
 8002a12:	b29a      	uxth	r2, r3
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002a18:	e042      	b.n	8002aa0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a1c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002a1e:	68f8      	ldr	r0, [r7, #12]
 8002a20:	f000 fb18 	bl	8003054 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002a24:	4603      	mov	r3, r0
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d001      	beq.n	8002a2e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e04c      	b.n	8002ac8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	691a      	ldr	r2, [r3, #16]
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a38:	b2d2      	uxtb	r2, r2
 8002a3a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a40:	1c5a      	adds	r2, r3, #1
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a4a:	3b01      	subs	r3, #1
 8002a4c:	b29a      	uxth	r2, r3
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a56:	b29b      	uxth	r3, r3
 8002a58:	3b01      	subs	r3, #1
 8002a5a:	b29a      	uxth	r2, r3
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	695b      	ldr	r3, [r3, #20]
 8002a66:	f003 0304 	and.w	r3, r3, #4
 8002a6a:	2b04      	cmp	r3, #4
 8002a6c:	d118      	bne.n	8002aa0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	691a      	ldr	r2, [r3, #16]
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a78:	b2d2      	uxtb	r2, r2
 8002a7a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a80:	1c5a      	adds	r2, r3, #1
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a8a:	3b01      	subs	r3, #1
 8002a8c:	b29a      	uxth	r2, r3
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a96:	b29b      	uxth	r3, r3
 8002a98:	3b01      	subs	r3, #1
 8002a9a:	b29a      	uxth	r2, r3
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	f47f aec2 	bne.w	800282e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	2220      	movs	r2, #32
 8002aae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2200      	movs	r2, #0
 8002abe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	e000      	b.n	8002ac8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002ac6:	2302      	movs	r3, #2
  }
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	3728      	adds	r7, #40	; 0x28
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}
 8002ad0:	00010004 	.word	0x00010004

08002ad4 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b083      	sub	sp, #12
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ae2:	b2db      	uxtb	r3, r3
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	370c      	adds	r7, #12
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr

08002af0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b088      	sub	sp, #32
 8002af4:	af02      	add	r7, sp, #8
 8002af6:	60f8      	str	r0, [r7, #12]
 8002af8:	4608      	mov	r0, r1
 8002afa:	4611      	mov	r1, r2
 8002afc:	461a      	mov	r2, r3
 8002afe:	4603      	mov	r3, r0
 8002b00:	817b      	strh	r3, [r7, #10]
 8002b02:	460b      	mov	r3, r1
 8002b04:	813b      	strh	r3, [r7, #8]
 8002b06:	4613      	mov	r3, r2
 8002b08:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b18:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b1c:	9300      	str	r3, [sp, #0]
 8002b1e:	6a3b      	ldr	r3, [r7, #32]
 8002b20:	2200      	movs	r2, #0
 8002b22:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002b26:	68f8      	ldr	r0, [r7, #12]
 8002b28:	f000 f93c 	bl	8002da4 <I2C_WaitOnFlagUntilTimeout>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d001      	beq.n	8002b36 <I2C_RequestMemoryWrite+0x46>
  {
    return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e05f      	b.n	8002bf6 <I2C_RequestMemoryWrite+0x106>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002b36:	897b      	ldrh	r3, [r7, #10]
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	461a      	mov	r2, r3
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002b44:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b48:	6a3a      	ldr	r2, [r7, #32]
 8002b4a:	492d      	ldr	r1, [pc, #180]	; (8002c00 <I2C_RequestMemoryWrite+0x110>)
 8002b4c:	68f8      	ldr	r0, [r7, #12]
 8002b4e:	f000 f980 	bl	8002e52 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b52:	4603      	mov	r3, r0
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d001      	beq.n	8002b5c <I2C_RequestMemoryWrite+0x6c>
  {
    return HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	e04c      	b.n	8002bf6 <I2C_RequestMemoryWrite+0x106>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	617b      	str	r3, [r7, #20]
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	695b      	ldr	r3, [r3, #20]
 8002b66:	617b      	str	r3, [r7, #20]
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	699b      	ldr	r3, [r3, #24]
 8002b6e:	617b      	str	r3, [r7, #20]
 8002b70:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b74:	6a39      	ldr	r1, [r7, #32]
 8002b76:	68f8      	ldr	r0, [r7, #12]
 8002b78:	f000 f9ea 	bl	8002f50 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d00d      	beq.n	8002b9e <I2C_RequestMemoryWrite+0xae>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b86:	2b04      	cmp	r3, #4
 8002b88:	d107      	bne.n	8002b9a <I2C_RequestMemoryWrite+0xaa>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b98:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e02b      	b.n	8002bf6 <I2C_RequestMemoryWrite+0x106>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002b9e:	88fb      	ldrh	r3, [r7, #6]
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d105      	bne.n	8002bb0 <I2C_RequestMemoryWrite+0xc0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002ba4:	893b      	ldrh	r3, [r7, #8]
 8002ba6:	b2da      	uxtb	r2, r3
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	611a      	str	r2, [r3, #16]
 8002bae:	e021      	b.n	8002bf4 <I2C_RequestMemoryWrite+0x104>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002bb0:	893b      	ldrh	r3, [r7, #8]
 8002bb2:	0a1b      	lsrs	r3, r3, #8
 8002bb4:	b29b      	uxth	r3, r3
 8002bb6:	b2da      	uxtb	r2, r3
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bc0:	6a39      	ldr	r1, [r7, #32]
 8002bc2:	68f8      	ldr	r0, [r7, #12]
 8002bc4:	f000 f9c4 	bl	8002f50 <I2C_WaitOnTXEFlagUntilTimeout>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d00d      	beq.n	8002bea <I2C_RequestMemoryWrite+0xfa>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd2:	2b04      	cmp	r3, #4
 8002bd4:	d107      	bne.n	8002be6 <I2C_RequestMemoryWrite+0xf6>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002be4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e005      	b.n	8002bf6 <I2C_RequestMemoryWrite+0x106>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002bea:	893b      	ldrh	r3, [r7, #8]
 8002bec:	b2da      	uxtb	r2, r3
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002bf4:	2300      	movs	r3, #0
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3718      	adds	r7, #24
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	00010002 	.word	0x00010002

08002c04 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b088      	sub	sp, #32
 8002c08:	af02      	add	r7, sp, #8
 8002c0a:	60f8      	str	r0, [r7, #12]
 8002c0c:	4608      	mov	r0, r1
 8002c0e:	4611      	mov	r1, r2
 8002c10:	461a      	mov	r2, r3
 8002c12:	4603      	mov	r3, r0
 8002c14:	817b      	strh	r3, [r7, #10]
 8002c16:	460b      	mov	r3, r1
 8002c18:	813b      	strh	r3, [r7, #8]
 8002c1a:	4613      	mov	r3, r2
 8002c1c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002c2c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c3c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c40:	9300      	str	r3, [sp, #0]
 8002c42:	6a3b      	ldr	r3, [r7, #32]
 8002c44:	2200      	movs	r2, #0
 8002c46:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002c4a:	68f8      	ldr	r0, [r7, #12]
 8002c4c:	f000 f8aa 	bl	8002da4 <I2C_WaitOnFlagUntilTimeout>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d001      	beq.n	8002c5a <I2C_RequestMemoryRead+0x56>
  {
    return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e09e      	b.n	8002d98 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002c5a:	897b      	ldrh	r3, [r7, #10]
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	461a      	mov	r2, r3
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002c68:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c6c:	6a3a      	ldr	r2, [r7, #32]
 8002c6e:	494c      	ldr	r1, [pc, #304]	; (8002da0 <I2C_RequestMemoryRead+0x19c>)
 8002c70:	68f8      	ldr	r0, [r7, #12]
 8002c72:	f000 f8ee 	bl	8002e52 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c76:	4603      	mov	r3, r0
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d001      	beq.n	8002c80 <I2C_RequestMemoryRead+0x7c>
  {
    return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e08b      	b.n	8002d98 <I2C_RequestMemoryRead+0x194>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c80:	2300      	movs	r3, #0
 8002c82:	617b      	str	r3, [r7, #20]
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	695b      	ldr	r3, [r3, #20]
 8002c8a:	617b      	str	r3, [r7, #20]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	699b      	ldr	r3, [r3, #24]
 8002c92:	617b      	str	r3, [r7, #20]
 8002c94:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c98:	6a39      	ldr	r1, [r7, #32]
 8002c9a:	68f8      	ldr	r0, [r7, #12]
 8002c9c:	f000 f958 	bl	8002f50 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d00d      	beq.n	8002cc2 <I2C_RequestMemoryRead+0xbe>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002caa:	2b04      	cmp	r3, #4
 8002cac:	d107      	bne.n	8002cbe <I2C_RequestMemoryRead+0xba>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cbc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e06a      	b.n	8002d98 <I2C_RequestMemoryRead+0x194>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002cc2:	88fb      	ldrh	r3, [r7, #6]
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d105      	bne.n	8002cd4 <I2C_RequestMemoryRead+0xd0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002cc8:	893b      	ldrh	r3, [r7, #8]
 8002cca:	b2da      	uxtb	r2, r3
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	611a      	str	r2, [r3, #16]
 8002cd2:	e021      	b.n	8002d18 <I2C_RequestMemoryRead+0x114>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002cd4:	893b      	ldrh	r3, [r7, #8]
 8002cd6:	0a1b      	lsrs	r3, r3, #8
 8002cd8:	b29b      	uxth	r3, r3
 8002cda:	b2da      	uxtb	r2, r3
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ce2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ce4:	6a39      	ldr	r1, [r7, #32]
 8002ce6:	68f8      	ldr	r0, [r7, #12]
 8002ce8:	f000 f932 	bl	8002f50 <I2C_WaitOnTXEFlagUntilTimeout>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d00d      	beq.n	8002d0e <I2C_RequestMemoryRead+0x10a>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf6:	2b04      	cmp	r3, #4
 8002cf8:	d107      	bne.n	8002d0a <I2C_RequestMemoryRead+0x106>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d08:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e044      	b.n	8002d98 <I2C_RequestMemoryRead+0x194>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002d0e:	893b      	ldrh	r3, [r7, #8]
 8002d10:	b2da      	uxtb	r2, r3
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d1a:	6a39      	ldr	r1, [r7, #32]
 8002d1c:	68f8      	ldr	r0, [r7, #12]
 8002d1e:	f000 f917 	bl	8002f50 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d22:	4603      	mov	r3, r0
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d00d      	beq.n	8002d44 <I2C_RequestMemoryRead+0x140>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2c:	2b04      	cmp	r3, #4
 8002d2e:	d107      	bne.n	8002d40 <I2C_RequestMemoryRead+0x13c>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d3e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	e029      	b.n	8002d98 <I2C_RequestMemoryRead+0x194>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d52:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d56:	9300      	str	r3, [sp, #0]
 8002d58:	6a3b      	ldr	r3, [r7, #32]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002d60:	68f8      	ldr	r0, [r7, #12]
 8002d62:	f000 f81f 	bl	8002da4 <I2C_WaitOnFlagUntilTimeout>
 8002d66:	4603      	mov	r3, r0
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d001      	beq.n	8002d70 <I2C_RequestMemoryRead+0x16c>
  {
    return HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e013      	b.n	8002d98 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002d70:	897b      	ldrh	r3, [r7, #10]
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	f043 0301 	orr.w	r3, r3, #1
 8002d78:	b2da      	uxtb	r2, r3
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d82:	6a3a      	ldr	r2, [r7, #32]
 8002d84:	4906      	ldr	r1, [pc, #24]	; (8002da0 <I2C_RequestMemoryRead+0x19c>)
 8002d86:	68f8      	ldr	r0, [r7, #12]
 8002d88:	f000 f863 	bl	8002e52 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d001      	beq.n	8002d96 <I2C_RequestMemoryRead+0x192>
  {
    return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e000      	b.n	8002d98 <I2C_RequestMemoryRead+0x194>
  }

  return HAL_OK;
 8002d96:	2300      	movs	r3, #0
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	3718      	adds	r7, #24
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	00010002 	.word	0x00010002

08002da4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b084      	sub	sp, #16
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	60f8      	str	r0, [r7, #12]
 8002dac:	60b9      	str	r1, [r7, #8]
 8002dae:	603b      	str	r3, [r7, #0]
 8002db0:	4613      	mov	r3, r2
 8002db2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002db4:	e025      	b.n	8002e02 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dbc:	d021      	beq.n	8002e02 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dbe:	f7fd fc03 	bl	80005c8 <HAL_GetTick>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	69bb      	ldr	r3, [r7, #24]
 8002dc6:	1ad3      	subs	r3, r2, r3
 8002dc8:	683a      	ldr	r2, [r7, #0]
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	d302      	bcc.n	8002dd4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d116      	bne.n	8002e02 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2220      	movs	r2, #32
 8002dde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2200      	movs	r2, #0
 8002de6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dee:	f043 0220 	orr.w	r2, r3, #32
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e023      	b.n	8002e4a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	0c1b      	lsrs	r3, r3, #16
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d10d      	bne.n	8002e28 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	695b      	ldr	r3, [r3, #20]
 8002e12:	43da      	mvns	r2, r3
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	4013      	ands	r3, r2
 8002e18:	b29b      	uxth	r3, r3
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	bf0c      	ite	eq
 8002e1e:	2301      	moveq	r3, #1
 8002e20:	2300      	movne	r3, #0
 8002e22:	b2db      	uxtb	r3, r3
 8002e24:	461a      	mov	r2, r3
 8002e26:	e00c      	b.n	8002e42 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	699b      	ldr	r3, [r3, #24]
 8002e2e:	43da      	mvns	r2, r3
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	4013      	ands	r3, r2
 8002e34:	b29b      	uxth	r3, r3
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	bf0c      	ite	eq
 8002e3a:	2301      	moveq	r3, #1
 8002e3c:	2300      	movne	r3, #0
 8002e3e:	b2db      	uxtb	r3, r3
 8002e40:	461a      	mov	r2, r3
 8002e42:	79fb      	ldrb	r3, [r7, #7]
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d0b6      	beq.n	8002db6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e48:	2300      	movs	r3, #0
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3710      	adds	r7, #16
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}

08002e52 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002e52:	b580      	push	{r7, lr}
 8002e54:	b084      	sub	sp, #16
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	60f8      	str	r0, [r7, #12]
 8002e5a:	60b9      	str	r1, [r7, #8]
 8002e5c:	607a      	str	r2, [r7, #4]
 8002e5e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e60:	e051      	b.n	8002f06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	695b      	ldr	r3, [r3, #20]
 8002e68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e70:	d123      	bne.n	8002eba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e80:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002e8a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2220      	movs	r2, #32
 8002e96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea6:	f043 0204 	orr.w	r2, r3, #4
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e046      	b.n	8002f48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ec0:	d021      	beq.n	8002f06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ec2:	f7fd fb81 	bl	80005c8 <HAL_GetTick>
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	1ad3      	subs	r3, r2, r3
 8002ecc:	687a      	ldr	r2, [r7, #4]
 8002ece:	429a      	cmp	r2, r3
 8002ed0:	d302      	bcc.n	8002ed8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d116      	bne.n	8002f06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2200      	movs	r2, #0
 8002edc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2220      	movs	r2, #32
 8002ee2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef2:	f043 0220 	orr.w	r2, r3, #32
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2200      	movs	r2, #0
 8002efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e020      	b.n	8002f48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	0c1b      	lsrs	r3, r3, #16
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d10c      	bne.n	8002f2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	695b      	ldr	r3, [r3, #20]
 8002f16:	43da      	mvns	r2, r3
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	b29b      	uxth	r3, r3
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	bf14      	ite	ne
 8002f22:	2301      	movne	r3, #1
 8002f24:	2300      	moveq	r3, #0
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	e00b      	b.n	8002f42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	699b      	ldr	r3, [r3, #24]
 8002f30:	43da      	mvns	r2, r3
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	4013      	ands	r3, r2
 8002f36:	b29b      	uxth	r3, r3
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	bf14      	ite	ne
 8002f3c:	2301      	movne	r3, #1
 8002f3e:	2300      	moveq	r3, #0
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d18d      	bne.n	8002e62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002f46:	2300      	movs	r3, #0
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	3710      	adds	r7, #16
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}

08002f50 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b084      	sub	sp, #16
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	60f8      	str	r0, [r7, #12]
 8002f58:	60b9      	str	r1, [r7, #8]
 8002f5a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f5c:	e02d      	b.n	8002fba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f5e:	68f8      	ldr	r0, [r7, #12]
 8002f60:	f000 f8ce 	bl	8003100 <I2C_IsAcknowledgeFailed>
 8002f64:	4603      	mov	r3, r0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d001      	beq.n	8002f6e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e02d      	b.n	8002fca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f74:	d021      	beq.n	8002fba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f76:	f7fd fb27 	bl	80005c8 <HAL_GetTick>
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	1ad3      	subs	r3, r2, r3
 8002f80:	68ba      	ldr	r2, [r7, #8]
 8002f82:	429a      	cmp	r2, r3
 8002f84:	d302      	bcc.n	8002f8c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d116      	bne.n	8002fba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2220      	movs	r2, #32
 8002f96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa6:	f043 0220 	orr.w	r2, r3, #32
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e007      	b.n	8002fca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	695b      	ldr	r3, [r3, #20]
 8002fc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fc4:	2b80      	cmp	r3, #128	; 0x80
 8002fc6:	d1ca      	bne.n	8002f5e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002fc8:	2300      	movs	r3, #0
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3710      	adds	r7, #16
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}

08002fd2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002fd2:	b580      	push	{r7, lr}
 8002fd4:	b084      	sub	sp, #16
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	60f8      	str	r0, [r7, #12]
 8002fda:	60b9      	str	r1, [r7, #8]
 8002fdc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002fde:	e02d      	b.n	800303c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002fe0:	68f8      	ldr	r0, [r7, #12]
 8002fe2:	f000 f88d 	bl	8003100 <I2C_IsAcknowledgeFailed>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d001      	beq.n	8002ff0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	e02d      	b.n	800304c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ff6:	d021      	beq.n	800303c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ff8:	f7fd fae6 	bl	80005c8 <HAL_GetTick>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	1ad3      	subs	r3, r2, r3
 8003002:	68ba      	ldr	r2, [r7, #8]
 8003004:	429a      	cmp	r2, r3
 8003006:	d302      	bcc.n	800300e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d116      	bne.n	800303c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2200      	movs	r2, #0
 8003012:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2220      	movs	r2, #32
 8003018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2200      	movs	r2, #0
 8003020:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003028:	f043 0220 	orr.w	r2, r3, #32
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2200      	movs	r2, #0
 8003034:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	e007      	b.n	800304c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	695b      	ldr	r3, [r3, #20]
 8003042:	f003 0304 	and.w	r3, r3, #4
 8003046:	2b04      	cmp	r3, #4
 8003048:	d1ca      	bne.n	8002fe0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800304a:	2300      	movs	r3, #0
}
 800304c:	4618      	mov	r0, r3
 800304e:	3710      	adds	r7, #16
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}

08003054 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b084      	sub	sp, #16
 8003058:	af00      	add	r7, sp, #0
 800305a:	60f8      	str	r0, [r7, #12]
 800305c:	60b9      	str	r1, [r7, #8]
 800305e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003060:	e042      	b.n	80030e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	695b      	ldr	r3, [r3, #20]
 8003068:	f003 0310 	and.w	r3, r3, #16
 800306c:	2b10      	cmp	r3, #16
 800306e:	d119      	bne.n	80030a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f06f 0210 	mvn.w	r2, #16
 8003078:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	2200      	movs	r2, #0
 800307e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2220      	movs	r2, #32
 8003084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2200      	movs	r2, #0
 800308c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2200      	movs	r2, #0
 800309c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	e029      	b.n	80030f8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030a4:	f7fd fa90 	bl	80005c8 <HAL_GetTick>
 80030a8:	4602      	mov	r2, r0
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	68ba      	ldr	r2, [r7, #8]
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d302      	bcc.n	80030ba <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d116      	bne.n	80030e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2200      	movs	r2, #0
 80030be:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2220      	movs	r2, #32
 80030c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2200      	movs	r2, #0
 80030cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d4:	f043 0220 	orr.w	r2, r3, #32
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2200      	movs	r2, #0
 80030e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	e007      	b.n	80030f8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	695b      	ldr	r3, [r3, #20]
 80030ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030f2:	2b40      	cmp	r3, #64	; 0x40
 80030f4:	d1b5      	bne.n	8003062 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80030f6:	2300      	movs	r3, #0
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	3710      	adds	r7, #16
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}

08003100 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003100:	b480      	push	{r7}
 8003102:	b083      	sub	sp, #12
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	695b      	ldr	r3, [r3, #20]
 800310e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003112:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003116:	d11b      	bne.n	8003150 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003120:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2200      	movs	r2, #0
 8003126:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2220      	movs	r2, #32
 800312c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2200      	movs	r2, #0
 8003134:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313c:	f043 0204 	orr.w	r2, r3, #4
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2200      	movs	r2, #0
 8003148:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	e000      	b.n	8003152 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003150:	2300      	movs	r3, #0
}
 8003152:	4618      	mov	r0, r3
 8003154:	370c      	adds	r7, #12
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr
	...

08003160 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b084      	sub	sp, #16
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d101      	bne.n	8003172 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e0bf      	b.n	80032f2 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8003178:	b2db      	uxtb	r3, r3
 800317a:	2b00      	cmp	r3, #0
 800317c:	d106      	bne.n	800318c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2200      	movs	r2, #0
 8003182:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f004 fc8c 	bl	8007aa4 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2202      	movs	r2, #2
 8003190:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	699a      	ldr	r2, [r3, #24]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80031a2:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	6999      	ldr	r1, [r3, #24]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	685a      	ldr	r2, [r3, #4]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80031b8:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	691b      	ldr	r3, [r3, #16]
 80031be:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	430a      	orrs	r2, r1
 80031c6:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	6899      	ldr	r1, [r3, #8]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	4b4a      	ldr	r3, [pc, #296]	; (80032fc <HAL_LTDC_Init+0x19c>)
 80031d4:	400b      	ands	r3, r1
 80031d6:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	695b      	ldr	r3, [r3, #20]
 80031dc:	041b      	lsls	r3, r3, #16
 80031de:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	6899      	ldr	r1, [r3, #8]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	699a      	ldr	r2, [r3, #24]
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	431a      	orrs	r2, r3
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	430a      	orrs	r2, r1
 80031f4:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	68d9      	ldr	r1, [r3, #12]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	4b3e      	ldr	r3, [pc, #248]	; (80032fc <HAL_LTDC_Init+0x19c>)
 8003202:	400b      	ands	r3, r1
 8003204:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	69db      	ldr	r3, [r3, #28]
 800320a:	041b      	lsls	r3, r3, #16
 800320c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	68d9      	ldr	r1, [r3, #12]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6a1a      	ldr	r2, [r3, #32]
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	431a      	orrs	r2, r3
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	430a      	orrs	r2, r1
 8003222:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	6919      	ldr	r1, [r3, #16]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	4b33      	ldr	r3, [pc, #204]	; (80032fc <HAL_LTDC_Init+0x19c>)
 8003230:	400b      	ands	r3, r1
 8003232:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003238:	041b      	lsls	r3, r3, #16
 800323a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	6919      	ldr	r1, [r3, #16]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	431a      	orrs	r2, r3
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	430a      	orrs	r2, r1
 8003250:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	6959      	ldr	r1, [r3, #20]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	4b27      	ldr	r3, [pc, #156]	; (80032fc <HAL_LTDC_Init+0x19c>)
 800325e:	400b      	ands	r3, r1
 8003260:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003266:	041b      	lsls	r3, r3, #16
 8003268:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	6959      	ldr	r1, [r3, #20]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	431a      	orrs	r2, r3
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	430a      	orrs	r2, r1
 800327e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003286:	021b      	lsls	r3, r3, #8
 8003288:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003290:	041b      	lsls	r3, r3, #16
 8003292:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80032a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80032aa:	68ba      	ldr	r2, [r7, #8]
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	4313      	orrs	r3, r2
 80032b0:	687a      	ldr	r2, [r7, #4]
 80032b2:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80032b6:	431a      	orrs	r2, r3
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	430a      	orrs	r2, r1
 80032be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f042 0206 	orr.w	r2, r2, #6
 80032ce:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	699a      	ldr	r2, [r3, #24]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f042 0201 	orr.w	r2, r2, #1
 80032de:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2200      	movs	r2, #0
 80032e4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2201      	movs	r2, #1
 80032ec:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80032f0:	2300      	movs	r3, #0
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3710      	adds	r7, #16
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}
 80032fa:	bf00      	nop
 80032fc:	f000f800 	.word	0xf000f800

08003300 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003300:	b5b0      	push	{r4, r5, r7, lr}
 8003302:	b084      	sub	sp, #16
 8003304:	af00      	add	r7, sp, #0
 8003306:	60f8      	str	r0, [r7, #12]
 8003308:	60b9      	str	r1, [r7, #8]
 800330a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8003312:	2b01      	cmp	r3, #1
 8003314:	d101      	bne.n	800331a <HAL_LTDC_ConfigLayer+0x1a>
 8003316:	2302      	movs	r3, #2
 8003318:	e02c      	b.n	8003374 <HAL_LTDC_ConfigLayer+0x74>
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	2201      	movs	r2, #1
 800331e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	2202      	movs	r2, #2
 8003326:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800332a:	68fa      	ldr	r2, [r7, #12]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2134      	movs	r1, #52	; 0x34
 8003330:	fb01 f303 	mul.w	r3, r1, r3
 8003334:	4413      	add	r3, r2
 8003336:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	4614      	mov	r4, r2
 800333e:	461d      	mov	r5, r3
 8003340:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003342:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003344:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003346:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003348:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800334a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800334c:	682b      	ldr	r3, [r5, #0]
 800334e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003350:	687a      	ldr	r2, [r7, #4]
 8003352:	68b9      	ldr	r1, [r7, #8]
 8003354:	68f8      	ldr	r0, [r7, #12]
 8003356:	f000 f811 	bl	800337c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	2201      	movs	r2, #1
 8003360:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2201      	movs	r2, #1
 8003366:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2200      	movs	r2, #0
 800336e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8003372:	2300      	movs	r3, #0
}
 8003374:	4618      	mov	r0, r3
 8003376:	3710      	adds	r7, #16
 8003378:	46bd      	mov	sp, r7
 800337a:	bdb0      	pop	{r4, r5, r7, pc}

0800337c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800337c:	b480      	push	{r7}
 800337e:	b089      	sub	sp, #36	; 0x24
 8003380:	af00      	add	r7, sp, #0
 8003382:	60f8      	str	r0, [r7, #12]
 8003384:	60b9      	str	r1, [r7, #8]
 8003386:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	685a      	ldr	r2, [r3, #4]
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	68db      	ldr	r3, [r3, #12]
 8003392:	0c1b      	lsrs	r3, r3, #16
 8003394:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003398:	4413      	add	r3, r2
 800339a:	041b      	lsls	r3, r3, #16
 800339c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	461a      	mov	r2, r3
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	01db      	lsls	r3, r3, #7
 80033a8:	4413      	add	r3, r2
 80033aa:	3384      	adds	r3, #132	; 0x84
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	68fa      	ldr	r2, [r7, #12]
 80033b0:	6812      	ldr	r2, [r2, #0]
 80033b2:	4611      	mov	r1, r2
 80033b4:	687a      	ldr	r2, [r7, #4]
 80033b6:	01d2      	lsls	r2, r2, #7
 80033b8:	440a      	add	r2, r1
 80033ba:	3284      	adds	r2, #132	; 0x84
 80033bc:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80033c0:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	68db      	ldr	r3, [r3, #12]
 80033cc:	0c1b      	lsrs	r3, r3, #16
 80033ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033d2:	4413      	add	r3, r2
 80033d4:	1c5a      	adds	r2, r3, #1
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4619      	mov	r1, r3
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	01db      	lsls	r3, r3, #7
 80033e0:	440b      	add	r3, r1
 80033e2:	3384      	adds	r3, #132	; 0x84
 80033e4:	4619      	mov	r1, r3
 80033e6:	69fb      	ldr	r3, [r7, #28]
 80033e8:	4313      	orrs	r3, r2
 80033ea:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	68da      	ldr	r2, [r3, #12]
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	68db      	ldr	r3, [r3, #12]
 80033f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80033fa:	4413      	add	r3, r2
 80033fc:	041b      	lsls	r3, r3, #16
 80033fe:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	461a      	mov	r2, r3
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	01db      	lsls	r3, r3, #7
 800340a:	4413      	add	r3, r2
 800340c:	3384      	adds	r3, #132	; 0x84
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	68fa      	ldr	r2, [r7, #12]
 8003412:	6812      	ldr	r2, [r2, #0]
 8003414:	4611      	mov	r1, r2
 8003416:	687a      	ldr	r2, [r7, #4]
 8003418:	01d2      	lsls	r2, r2, #7
 800341a:	440a      	add	r2, r1
 800341c:	3284      	adds	r2, #132	; 0x84
 800341e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003422:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	689a      	ldr	r2, [r3, #8]
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	68db      	ldr	r3, [r3, #12]
 800342e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003432:	4413      	add	r3, r2
 8003434:	1c5a      	adds	r2, r3, #1
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4619      	mov	r1, r3
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	01db      	lsls	r3, r3, #7
 8003440:	440b      	add	r3, r1
 8003442:	3384      	adds	r3, #132	; 0x84
 8003444:	4619      	mov	r1, r3
 8003446:	69fb      	ldr	r3, [r7, #28]
 8003448:	4313      	orrs	r3, r2
 800344a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	461a      	mov	r2, r3
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	01db      	lsls	r3, r3, #7
 8003456:	4413      	add	r3, r2
 8003458:	3384      	adds	r3, #132	; 0x84
 800345a:	691b      	ldr	r3, [r3, #16]
 800345c:	68fa      	ldr	r2, [r7, #12]
 800345e:	6812      	ldr	r2, [r2, #0]
 8003460:	4611      	mov	r1, r2
 8003462:	687a      	ldr	r2, [r7, #4]
 8003464:	01d2      	lsls	r2, r2, #7
 8003466:	440a      	add	r2, r1
 8003468:	3284      	adds	r2, #132	; 0x84
 800346a:	f023 0307 	bic.w	r3, r3, #7
 800346e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	461a      	mov	r2, r3
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	01db      	lsls	r3, r3, #7
 800347a:	4413      	add	r3, r2
 800347c:	3384      	adds	r3, #132	; 0x84
 800347e:	461a      	mov	r2, r3
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	691b      	ldr	r3, [r3, #16]
 8003484:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800348c:	021b      	lsls	r3, r3, #8
 800348e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003496:	041b      	lsls	r3, r3, #16
 8003498:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	699b      	ldr	r3, [r3, #24]
 800349e:	061b      	lsls	r3, r3, #24
 80034a0:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	461a      	mov	r2, r3
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	01db      	lsls	r3, r3, #7
 80034ac:	4413      	add	r3, r2
 80034ae:	3384      	adds	r3, #132	; 0x84
 80034b0:	699b      	ldr	r3, [r3, #24]
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	461a      	mov	r2, r3
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	01db      	lsls	r3, r3, #7
 80034bc:	4413      	add	r3, r2
 80034be:	3384      	adds	r3, #132	; 0x84
 80034c0:	461a      	mov	r2, r3
 80034c2:	2300      	movs	r3, #0
 80034c4:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80034cc:	461a      	mov	r2, r3
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	431a      	orrs	r2, r3
 80034d2:	69bb      	ldr	r3, [r7, #24]
 80034d4:	431a      	orrs	r2, r3
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4619      	mov	r1, r3
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	01db      	lsls	r3, r3, #7
 80034e0:	440b      	add	r3, r1
 80034e2:	3384      	adds	r3, #132	; 0x84
 80034e4:	4619      	mov	r1, r3
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	4313      	orrs	r3, r2
 80034ea:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	461a      	mov	r2, r3
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	01db      	lsls	r3, r3, #7
 80034f6:	4413      	add	r3, r2
 80034f8:	3384      	adds	r3, #132	; 0x84
 80034fa:	695b      	ldr	r3, [r3, #20]
 80034fc:	68fa      	ldr	r2, [r7, #12]
 80034fe:	6812      	ldr	r2, [r2, #0]
 8003500:	4611      	mov	r1, r2
 8003502:	687a      	ldr	r2, [r7, #4]
 8003504:	01d2      	lsls	r2, r2, #7
 8003506:	440a      	add	r2, r1
 8003508:	3284      	adds	r2, #132	; 0x84
 800350a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800350e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	461a      	mov	r2, r3
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	01db      	lsls	r3, r3, #7
 800351a:	4413      	add	r3, r2
 800351c:	3384      	adds	r3, #132	; 0x84
 800351e:	461a      	mov	r2, r3
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	695b      	ldr	r3, [r3, #20]
 8003524:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	461a      	mov	r2, r3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	01db      	lsls	r3, r3, #7
 8003530:	4413      	add	r3, r2
 8003532:	3384      	adds	r3, #132	; 0x84
 8003534:	69db      	ldr	r3, [r3, #28]
 8003536:	68fa      	ldr	r2, [r7, #12]
 8003538:	6812      	ldr	r2, [r2, #0]
 800353a:	4611      	mov	r1, r2
 800353c:	687a      	ldr	r2, [r7, #4]
 800353e:	01d2      	lsls	r2, r2, #7
 8003540:	440a      	add	r2, r1
 8003542:	3284      	adds	r2, #132	; 0x84
 8003544:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003548:	f023 0307 	bic.w	r3, r3, #7
 800354c:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	69da      	ldr	r2, [r3, #28]
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	6a1b      	ldr	r3, [r3, #32]
 8003556:	68f9      	ldr	r1, [r7, #12]
 8003558:	6809      	ldr	r1, [r1, #0]
 800355a:	4608      	mov	r0, r1
 800355c:	6879      	ldr	r1, [r7, #4]
 800355e:	01c9      	lsls	r1, r1, #7
 8003560:	4401      	add	r1, r0
 8003562:	3184      	adds	r1, #132	; 0x84
 8003564:	4313      	orrs	r3, r2
 8003566:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	461a      	mov	r2, r3
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	01db      	lsls	r3, r3, #7
 8003572:	4413      	add	r3, r2
 8003574:	3384      	adds	r3, #132	; 0x84
 8003576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	461a      	mov	r2, r3
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	01db      	lsls	r3, r3, #7
 8003582:	4413      	add	r3, r2
 8003584:	3384      	adds	r3, #132	; 0x84
 8003586:	461a      	mov	r2, r3
 8003588:	2300      	movs	r3, #0
 800358a:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	461a      	mov	r2, r3
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	01db      	lsls	r3, r3, #7
 8003596:	4413      	add	r3, r2
 8003598:	3384      	adds	r3, #132	; 0x84
 800359a:	461a      	mov	r2, r3
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a0:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	691b      	ldr	r3, [r3, #16]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d102      	bne.n	80035b0 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 80035aa:	2304      	movs	r3, #4
 80035ac:	61fb      	str	r3, [r7, #28]
 80035ae:	e01b      	b.n	80035e8 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	691b      	ldr	r3, [r3, #16]
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	d102      	bne.n	80035be <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 80035b8:	2303      	movs	r3, #3
 80035ba:	61fb      	str	r3, [r7, #28]
 80035bc:	e014      	b.n	80035e8 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	691b      	ldr	r3, [r3, #16]
 80035c2:	2b04      	cmp	r3, #4
 80035c4:	d00b      	beq.n	80035de <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80035ca:	2b02      	cmp	r3, #2
 80035cc:	d007      	beq.n	80035de <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80035d2:	2b03      	cmp	r3, #3
 80035d4:	d003      	beq.n	80035de <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80035da:	2b07      	cmp	r3, #7
 80035dc:	d102      	bne.n	80035e4 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80035de:	2302      	movs	r3, #2
 80035e0:	61fb      	str	r3, [r7, #28]
 80035e2:	e001      	b.n	80035e8 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80035e4:	2301      	movs	r3, #1
 80035e6:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	461a      	mov	r2, r3
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	01db      	lsls	r3, r3, #7
 80035f2:	4413      	add	r3, r2
 80035f4:	3384      	adds	r3, #132	; 0x84
 80035f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035f8:	68fa      	ldr	r2, [r7, #12]
 80035fa:	6812      	ldr	r2, [r2, #0]
 80035fc:	4611      	mov	r1, r2
 80035fe:	687a      	ldr	r2, [r7, #4]
 8003600:	01d2      	lsls	r2, r2, #7
 8003602:	440a      	add	r2, r1
 8003604:	3284      	adds	r2, #132	; 0x84
 8003606:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800360a:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003610:	69fa      	ldr	r2, [r7, #28]
 8003612:	fb02 f303 	mul.w	r3, r2, r3
 8003616:	041a      	lsls	r2, r3, #16
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	6859      	ldr	r1, [r3, #4]
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	1acb      	subs	r3, r1, r3
 8003622:	69f9      	ldr	r1, [r7, #28]
 8003624:	fb01 f303 	mul.w	r3, r1, r3
 8003628:	3303      	adds	r3, #3
 800362a:	68f9      	ldr	r1, [r7, #12]
 800362c:	6809      	ldr	r1, [r1, #0]
 800362e:	4608      	mov	r0, r1
 8003630:	6879      	ldr	r1, [r7, #4]
 8003632:	01c9      	lsls	r1, r1, #7
 8003634:	4401      	add	r1, r0
 8003636:	3184      	adds	r1, #132	; 0x84
 8003638:	4313      	orrs	r3, r2
 800363a:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	461a      	mov	r2, r3
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	01db      	lsls	r3, r3, #7
 8003646:	4413      	add	r3, r2
 8003648:	3384      	adds	r3, #132	; 0x84
 800364a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800364c:	68fa      	ldr	r2, [r7, #12]
 800364e:	6812      	ldr	r2, [r2, #0]
 8003650:	4611      	mov	r1, r2
 8003652:	687a      	ldr	r2, [r7, #4]
 8003654:	01d2      	lsls	r2, r2, #7
 8003656:	440a      	add	r2, r1
 8003658:	3284      	adds	r2, #132	; 0x84
 800365a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800365e:	f023 0307 	bic.w	r3, r3, #7
 8003662:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	461a      	mov	r2, r3
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	01db      	lsls	r3, r3, #7
 800366e:	4413      	add	r3, r2
 8003670:	3384      	adds	r3, #132	; 0x84
 8003672:	461a      	mov	r2, r3
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003678:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	461a      	mov	r2, r3
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	01db      	lsls	r3, r3, #7
 8003684:	4413      	add	r3, r2
 8003686:	3384      	adds	r3, #132	; 0x84
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	68fa      	ldr	r2, [r7, #12]
 800368c:	6812      	ldr	r2, [r2, #0]
 800368e:	4611      	mov	r1, r2
 8003690:	687a      	ldr	r2, [r7, #4]
 8003692:	01d2      	lsls	r2, r2, #7
 8003694:	440a      	add	r2, r1
 8003696:	3284      	adds	r2, #132	; 0x84
 8003698:	f043 0301 	orr.w	r3, r3, #1
 800369c:	6013      	str	r3, [r2, #0]
}
 800369e:	bf00      	nop
 80036a0:	3724      	adds	r7, #36	; 0x24
 80036a2:	46bd      	mov	sp, r7
 80036a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a8:	4770      	bx	lr

080036aa <HAL_LTDCEx_StructInitFromVideoConfig>:
  * @note   The implementation of this function is taking into account the LTDC
  *         polarities inversion as described in the current LTDC specification
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDCEx_StructInitFromVideoConfig(LTDC_HandleTypeDef *hltdc, DSI_VidCfgTypeDef *VidCfg)
{
 80036aa:	b480      	push	{r7}
 80036ac:	b083      	sub	sp, #12
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	6078      	str	r0, [r7, #4]
 80036b2:	6039      	str	r1, [r7, #0]

  /* The following polarity is inverted:
                     LTDC_DEPOLARITY_AL <-> LTDC_DEPOLARITY_AH */

  /* Note 1 : Code in line w/ Current LTDC specification */
  hltdc->Init.DEPolarity = (VidCfg->DEPolarity == DSI_DATA_ENABLE_ACTIVE_HIGH) ? LTDC_DEPOLARITY_AL : LTDC_DEPOLARITY_AH;
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d101      	bne.n	80036c0 <HAL_LTDCEx_StructInitFromVideoConfig+0x16>
 80036bc:	2200      	movs	r2, #0
 80036be:	e001      	b.n	80036c4 <HAL_LTDCEx_StructInitFromVideoConfig+0x1a>
 80036c0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	60da      	str	r2, [r3, #12]
  hltdc->Init.VSPolarity = (VidCfg->VSPolarity == DSI_VSYNC_ACTIVE_HIGH) ? LTDC_VSPOLARITY_AH : LTDC_VSPOLARITY_AL;
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	6a1b      	ldr	r3, [r3, #32]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d102      	bne.n	80036d6 <HAL_LTDCEx_StructInitFromVideoConfig+0x2c>
 80036d0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80036d4:	e000      	b.n	80036d8 <HAL_LTDCEx_StructInitFromVideoConfig+0x2e>
 80036d6:	2200      	movs	r2, #0
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	609a      	str	r2, [r3, #8]
  hltdc->Init.HSPolarity = (VidCfg->HSPolarity == DSI_HSYNC_ACTIVE_HIGH) ? LTDC_HSPOLARITY_AH : LTDC_HSPOLARITY_AL;
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	69db      	ldr	r3, [r3, #28]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d102      	bne.n	80036ea <HAL_LTDCEx_StructInitFromVideoConfig+0x40>
 80036e4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80036e8:	e000      	b.n	80036ec <HAL_LTDCEx_StructInitFromVideoConfig+0x42>
 80036ea:	2200      	movs	r2, #0
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	605a      	str	r2, [r3, #4]
  /* hltdc->Init.DEPolarity = VidCfg->DEPolarity << 29;
     hltdc->Init.VSPolarity = VidCfg->VSPolarity << 29;
     hltdc->Init.HSPolarity = VidCfg->HSPolarity << 29; */

  /* Retrieve vertical timing parameters from DSI */
  hltdc->Init.VerticalSync       = VidCfg->VerticalSyncActive - 1U;
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036f4:	1e5a      	subs	r2, r3, #1
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	619a      	str	r2, [r3, #24]
  hltdc->Init.AccumulatedVBP     = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch - 1U;
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003702:	4413      	add	r3, r2
 8003704:	1e5a      	subs	r2, r3, #1
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	621a      	str	r2, [r3, #32]
  hltdc->Init.AccumulatedActiveH = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + VidCfg->VerticalActive - 1U;
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003712:	441a      	add	r2, r3
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003718:	4413      	add	r3, r2
 800371a:	1e5a      	subs	r2, r3, #1
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc->Init.TotalHeigh         = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + VidCfg->VerticalActive + VidCfg->VerticalFrontPorch - 1U;
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003728:	441a      	add	r2, r3
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372e:	441a      	add	r2, r3
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003734:	4413      	add	r3, r2
 8003736:	1e5a      	subs	r2, r3, #1
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800373c:	2300      	movs	r3, #0
}
 800373e:	4618      	mov	r0, r3
 8003740:	370c      	adds	r7, #12
 8003742:	46bd      	mov	sp, r7
 8003744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003748:	4770      	bx	lr
	...

0800374c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b082      	sub	sp, #8
 8003750:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003752:	2300      	movs	r3, #0
 8003754:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003756:	2300      	movs	r3, #0
 8003758:	603b      	str	r3, [r7, #0]
 800375a:	4b20      	ldr	r3, [pc, #128]	; (80037dc <HAL_PWREx_EnableOverDrive+0x90>)
 800375c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375e:	4a1f      	ldr	r2, [pc, #124]	; (80037dc <HAL_PWREx_EnableOverDrive+0x90>)
 8003760:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003764:	6413      	str	r3, [r2, #64]	; 0x40
 8003766:	4b1d      	ldr	r3, [pc, #116]	; (80037dc <HAL_PWREx_EnableOverDrive+0x90>)
 8003768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800376a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800376e:	603b      	str	r3, [r7, #0]
 8003770:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003772:	4b1b      	ldr	r3, [pc, #108]	; (80037e0 <HAL_PWREx_EnableOverDrive+0x94>)
 8003774:	2201      	movs	r2, #1
 8003776:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003778:	f7fc ff26 	bl	80005c8 <HAL_GetTick>
 800377c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800377e:	e009      	b.n	8003794 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003780:	f7fc ff22 	bl	80005c8 <HAL_GetTick>
 8003784:	4602      	mov	r2, r0
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	1ad3      	subs	r3, r2, r3
 800378a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800378e:	d901      	bls.n	8003794 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003790:	2303      	movs	r3, #3
 8003792:	e01f      	b.n	80037d4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003794:	4b13      	ldr	r3, [pc, #76]	; (80037e4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800379c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037a0:	d1ee      	bne.n	8003780 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80037a2:	4b11      	ldr	r3, [pc, #68]	; (80037e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80037a4:	2201      	movs	r2, #1
 80037a6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80037a8:	f7fc ff0e 	bl	80005c8 <HAL_GetTick>
 80037ac:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80037ae:	e009      	b.n	80037c4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80037b0:	f7fc ff0a 	bl	80005c8 <HAL_GetTick>
 80037b4:	4602      	mov	r2, r0
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	1ad3      	subs	r3, r2, r3
 80037ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80037be:	d901      	bls.n	80037c4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80037c0:	2303      	movs	r3, #3
 80037c2:	e007      	b.n	80037d4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80037c4:	4b07      	ldr	r3, [pc, #28]	; (80037e4 <HAL_PWREx_EnableOverDrive+0x98>)
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80037d0:	d1ee      	bne.n	80037b0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80037d2:	2300      	movs	r3, #0
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	3708      	adds	r7, #8
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}
 80037dc:	40023800 	.word	0x40023800
 80037e0:	420e0040 	.word	0x420e0040
 80037e4:	40007000 	.word	0x40007000
 80037e8:	420e0044 	.word	0x420e0044

080037ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b084      	sub	sp, #16
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
 80037f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d101      	bne.n	8003800 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	e0ca      	b.n	8003996 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003800:	4b67      	ldr	r3, [pc, #412]	; (80039a0 <HAL_RCC_ClockConfig+0x1b4>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 030f 	and.w	r3, r3, #15
 8003808:	683a      	ldr	r2, [r7, #0]
 800380a:	429a      	cmp	r2, r3
 800380c:	d90c      	bls.n	8003828 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800380e:	4b64      	ldr	r3, [pc, #400]	; (80039a0 <HAL_RCC_ClockConfig+0x1b4>)
 8003810:	683a      	ldr	r2, [r7, #0]
 8003812:	b2d2      	uxtb	r2, r2
 8003814:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003816:	4b62      	ldr	r3, [pc, #392]	; (80039a0 <HAL_RCC_ClockConfig+0x1b4>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 030f 	and.w	r3, r3, #15
 800381e:	683a      	ldr	r2, [r7, #0]
 8003820:	429a      	cmp	r2, r3
 8003822:	d001      	beq.n	8003828 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	e0b6      	b.n	8003996 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 0302 	and.w	r3, r3, #2
 8003830:	2b00      	cmp	r3, #0
 8003832:	d020      	beq.n	8003876 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 0304 	and.w	r3, r3, #4
 800383c:	2b00      	cmp	r3, #0
 800383e:	d005      	beq.n	800384c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003840:	4b58      	ldr	r3, [pc, #352]	; (80039a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	4a57      	ldr	r2, [pc, #348]	; (80039a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003846:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800384a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 0308 	and.w	r3, r3, #8
 8003854:	2b00      	cmp	r3, #0
 8003856:	d005      	beq.n	8003864 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003858:	4b52      	ldr	r3, [pc, #328]	; (80039a4 <HAL_RCC_ClockConfig+0x1b8>)
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	4a51      	ldr	r2, [pc, #324]	; (80039a4 <HAL_RCC_ClockConfig+0x1b8>)
 800385e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003862:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003864:	4b4f      	ldr	r3, [pc, #316]	; (80039a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	494c      	ldr	r1, [pc, #304]	; (80039a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003872:	4313      	orrs	r3, r2
 8003874:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 0301 	and.w	r3, r3, #1
 800387e:	2b00      	cmp	r3, #0
 8003880:	d044      	beq.n	800390c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	2b01      	cmp	r3, #1
 8003888:	d107      	bne.n	800389a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800388a:	4b46      	ldr	r3, [pc, #280]	; (80039a4 <HAL_RCC_ClockConfig+0x1b8>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003892:	2b00      	cmp	r3, #0
 8003894:	d119      	bne.n	80038ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	e07d      	b.n	8003996 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	2b02      	cmp	r3, #2
 80038a0:	d003      	beq.n	80038aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038a6:	2b03      	cmp	r3, #3
 80038a8:	d107      	bne.n	80038ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038aa:	4b3e      	ldr	r3, [pc, #248]	; (80039a4 <HAL_RCC_ClockConfig+0x1b8>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d109      	bne.n	80038ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e06d      	b.n	8003996 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038ba:	4b3a      	ldr	r3, [pc, #232]	; (80039a4 <HAL_RCC_ClockConfig+0x1b8>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 0302 	and.w	r3, r3, #2
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d101      	bne.n	80038ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e065      	b.n	8003996 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038ca:	4b36      	ldr	r3, [pc, #216]	; (80039a4 <HAL_RCC_ClockConfig+0x1b8>)
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	f023 0203 	bic.w	r2, r3, #3
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	4933      	ldr	r1, [pc, #204]	; (80039a4 <HAL_RCC_ClockConfig+0x1b8>)
 80038d8:	4313      	orrs	r3, r2
 80038da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038dc:	f7fc fe74 	bl	80005c8 <HAL_GetTick>
 80038e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038e2:	e00a      	b.n	80038fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038e4:	f7fc fe70 	bl	80005c8 <HAL_GetTick>
 80038e8:	4602      	mov	r2, r0
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	1ad3      	subs	r3, r2, r3
 80038ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d901      	bls.n	80038fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80038f6:	2303      	movs	r3, #3
 80038f8:	e04d      	b.n	8003996 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038fa:	4b2a      	ldr	r3, [pc, #168]	; (80039a4 <HAL_RCC_ClockConfig+0x1b8>)
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	f003 020c 	and.w	r2, r3, #12
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	429a      	cmp	r2, r3
 800390a:	d1eb      	bne.n	80038e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800390c:	4b24      	ldr	r3, [pc, #144]	; (80039a0 <HAL_RCC_ClockConfig+0x1b4>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 030f 	and.w	r3, r3, #15
 8003914:	683a      	ldr	r2, [r7, #0]
 8003916:	429a      	cmp	r2, r3
 8003918:	d20c      	bcs.n	8003934 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800391a:	4b21      	ldr	r3, [pc, #132]	; (80039a0 <HAL_RCC_ClockConfig+0x1b4>)
 800391c:	683a      	ldr	r2, [r7, #0]
 800391e:	b2d2      	uxtb	r2, r2
 8003920:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003922:	4b1f      	ldr	r3, [pc, #124]	; (80039a0 <HAL_RCC_ClockConfig+0x1b4>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 030f 	and.w	r3, r3, #15
 800392a:	683a      	ldr	r2, [r7, #0]
 800392c:	429a      	cmp	r2, r3
 800392e:	d001      	beq.n	8003934 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003930:	2301      	movs	r3, #1
 8003932:	e030      	b.n	8003996 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 0304 	and.w	r3, r3, #4
 800393c:	2b00      	cmp	r3, #0
 800393e:	d008      	beq.n	8003952 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003940:	4b18      	ldr	r3, [pc, #96]	; (80039a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	68db      	ldr	r3, [r3, #12]
 800394c:	4915      	ldr	r1, [pc, #84]	; (80039a4 <HAL_RCC_ClockConfig+0x1b8>)
 800394e:	4313      	orrs	r3, r2
 8003950:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 0308 	and.w	r3, r3, #8
 800395a:	2b00      	cmp	r3, #0
 800395c:	d009      	beq.n	8003972 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800395e:	4b11      	ldr	r3, [pc, #68]	; (80039a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	691b      	ldr	r3, [r3, #16]
 800396a:	00db      	lsls	r3, r3, #3
 800396c:	490d      	ldr	r1, [pc, #52]	; (80039a4 <HAL_RCC_ClockConfig+0x1b8>)
 800396e:	4313      	orrs	r3, r2
 8003970:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003972:	f000 f81d 	bl	80039b0 <HAL_RCC_GetSysClockFreq>
 8003976:	4602      	mov	r2, r0
 8003978:	4b0a      	ldr	r3, [pc, #40]	; (80039a4 <HAL_RCC_ClockConfig+0x1b8>)
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	091b      	lsrs	r3, r3, #4
 800397e:	f003 030f 	and.w	r3, r3, #15
 8003982:	4909      	ldr	r1, [pc, #36]	; (80039a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003984:	5ccb      	ldrb	r3, [r1, r3]
 8003986:	fa22 f303 	lsr.w	r3, r2, r3
 800398a:	4a08      	ldr	r2, [pc, #32]	; (80039ac <HAL_RCC_ClockConfig+0x1c0>)
 800398c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 800398e:	200f      	movs	r0, #15
 8003990:	f7fc fdd6 	bl	8000540 <HAL_InitTick>

  return HAL_OK;
 8003994:	2300      	movs	r3, #0
}
 8003996:	4618      	mov	r0, r3
 8003998:	3710      	adds	r7, #16
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
 800399e:	bf00      	nop
 80039a0:	40023c00 	.word	0x40023c00
 80039a4:	40023800 	.word	0x40023800
 80039a8:	080a1b50 	.word	0x080a1b50
 80039ac:	20000094 	.word	0x20000094

080039b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039b0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80039b4:	b084      	sub	sp, #16
 80039b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80039b8:	2300      	movs	r3, #0
 80039ba:	607b      	str	r3, [r7, #4]
 80039bc:	2300      	movs	r3, #0
 80039be:	60fb      	str	r3, [r7, #12]
 80039c0:	2300      	movs	r3, #0
 80039c2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80039c4:	2300      	movs	r3, #0
 80039c6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80039c8:	4b67      	ldr	r3, [pc, #412]	; (8003b68 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	f003 030c 	and.w	r3, r3, #12
 80039d0:	2b08      	cmp	r3, #8
 80039d2:	d00d      	beq.n	80039f0 <HAL_RCC_GetSysClockFreq+0x40>
 80039d4:	2b08      	cmp	r3, #8
 80039d6:	f200 80bd 	bhi.w	8003b54 <HAL_RCC_GetSysClockFreq+0x1a4>
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d002      	beq.n	80039e4 <HAL_RCC_GetSysClockFreq+0x34>
 80039de:	2b04      	cmp	r3, #4
 80039e0:	d003      	beq.n	80039ea <HAL_RCC_GetSysClockFreq+0x3a>
 80039e2:	e0b7      	b.n	8003b54 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80039e4:	4b61      	ldr	r3, [pc, #388]	; (8003b6c <HAL_RCC_GetSysClockFreq+0x1bc>)
 80039e6:	60bb      	str	r3, [r7, #8]
       break;
 80039e8:	e0b7      	b.n	8003b5a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80039ea:	4b61      	ldr	r3, [pc, #388]	; (8003b70 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80039ec:	60bb      	str	r3, [r7, #8]
      break;
 80039ee:	e0b4      	b.n	8003b5a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80039f0:	4b5d      	ldr	r3, [pc, #372]	; (8003b68 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80039f8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80039fa:	4b5b      	ldr	r3, [pc, #364]	; (8003b68 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d04d      	beq.n	8003aa2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a06:	4b58      	ldr	r3, [pc, #352]	; (8003b68 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	099b      	lsrs	r3, r3, #6
 8003a0c:	461a      	mov	r2, r3
 8003a0e:	f04f 0300 	mov.w	r3, #0
 8003a12:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003a16:	f04f 0100 	mov.w	r1, #0
 8003a1a:	ea02 0800 	and.w	r8, r2, r0
 8003a1e:	ea03 0901 	and.w	r9, r3, r1
 8003a22:	4640      	mov	r0, r8
 8003a24:	4649      	mov	r1, r9
 8003a26:	f04f 0200 	mov.w	r2, #0
 8003a2a:	f04f 0300 	mov.w	r3, #0
 8003a2e:	014b      	lsls	r3, r1, #5
 8003a30:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003a34:	0142      	lsls	r2, r0, #5
 8003a36:	4610      	mov	r0, r2
 8003a38:	4619      	mov	r1, r3
 8003a3a:	ebb0 0008 	subs.w	r0, r0, r8
 8003a3e:	eb61 0109 	sbc.w	r1, r1, r9
 8003a42:	f04f 0200 	mov.w	r2, #0
 8003a46:	f04f 0300 	mov.w	r3, #0
 8003a4a:	018b      	lsls	r3, r1, #6
 8003a4c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003a50:	0182      	lsls	r2, r0, #6
 8003a52:	1a12      	subs	r2, r2, r0
 8003a54:	eb63 0301 	sbc.w	r3, r3, r1
 8003a58:	f04f 0000 	mov.w	r0, #0
 8003a5c:	f04f 0100 	mov.w	r1, #0
 8003a60:	00d9      	lsls	r1, r3, #3
 8003a62:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003a66:	00d0      	lsls	r0, r2, #3
 8003a68:	4602      	mov	r2, r0
 8003a6a:	460b      	mov	r3, r1
 8003a6c:	eb12 0208 	adds.w	r2, r2, r8
 8003a70:	eb43 0309 	adc.w	r3, r3, r9
 8003a74:	f04f 0000 	mov.w	r0, #0
 8003a78:	f04f 0100 	mov.w	r1, #0
 8003a7c:	0259      	lsls	r1, r3, #9
 8003a7e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003a82:	0250      	lsls	r0, r2, #9
 8003a84:	4602      	mov	r2, r0
 8003a86:	460b      	mov	r3, r1
 8003a88:	4610      	mov	r0, r2
 8003a8a:	4619      	mov	r1, r3
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	461a      	mov	r2, r3
 8003a90:	f04f 0300 	mov.w	r3, #0
 8003a94:	f7fc fbb6 	bl	8000204 <__aeabi_uldivmod>
 8003a98:	4602      	mov	r2, r0
 8003a9a:	460b      	mov	r3, r1
 8003a9c:	4613      	mov	r3, r2
 8003a9e:	60fb      	str	r3, [r7, #12]
 8003aa0:	e04a      	b.n	8003b38 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003aa2:	4b31      	ldr	r3, [pc, #196]	; (8003b68 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	099b      	lsrs	r3, r3, #6
 8003aa8:	461a      	mov	r2, r3
 8003aaa:	f04f 0300 	mov.w	r3, #0
 8003aae:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003ab2:	f04f 0100 	mov.w	r1, #0
 8003ab6:	ea02 0400 	and.w	r4, r2, r0
 8003aba:	ea03 0501 	and.w	r5, r3, r1
 8003abe:	4620      	mov	r0, r4
 8003ac0:	4629      	mov	r1, r5
 8003ac2:	f04f 0200 	mov.w	r2, #0
 8003ac6:	f04f 0300 	mov.w	r3, #0
 8003aca:	014b      	lsls	r3, r1, #5
 8003acc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003ad0:	0142      	lsls	r2, r0, #5
 8003ad2:	4610      	mov	r0, r2
 8003ad4:	4619      	mov	r1, r3
 8003ad6:	1b00      	subs	r0, r0, r4
 8003ad8:	eb61 0105 	sbc.w	r1, r1, r5
 8003adc:	f04f 0200 	mov.w	r2, #0
 8003ae0:	f04f 0300 	mov.w	r3, #0
 8003ae4:	018b      	lsls	r3, r1, #6
 8003ae6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003aea:	0182      	lsls	r2, r0, #6
 8003aec:	1a12      	subs	r2, r2, r0
 8003aee:	eb63 0301 	sbc.w	r3, r3, r1
 8003af2:	f04f 0000 	mov.w	r0, #0
 8003af6:	f04f 0100 	mov.w	r1, #0
 8003afa:	00d9      	lsls	r1, r3, #3
 8003afc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003b00:	00d0      	lsls	r0, r2, #3
 8003b02:	4602      	mov	r2, r0
 8003b04:	460b      	mov	r3, r1
 8003b06:	1912      	adds	r2, r2, r4
 8003b08:	eb45 0303 	adc.w	r3, r5, r3
 8003b0c:	f04f 0000 	mov.w	r0, #0
 8003b10:	f04f 0100 	mov.w	r1, #0
 8003b14:	0299      	lsls	r1, r3, #10
 8003b16:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003b1a:	0290      	lsls	r0, r2, #10
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	460b      	mov	r3, r1
 8003b20:	4610      	mov	r0, r2
 8003b22:	4619      	mov	r1, r3
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	461a      	mov	r2, r3
 8003b28:	f04f 0300 	mov.w	r3, #0
 8003b2c:	f7fc fb6a 	bl	8000204 <__aeabi_uldivmod>
 8003b30:	4602      	mov	r2, r0
 8003b32:	460b      	mov	r3, r1
 8003b34:	4613      	mov	r3, r2
 8003b36:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003b38:	4b0b      	ldr	r3, [pc, #44]	; (8003b68 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	0c1b      	lsrs	r3, r3, #16
 8003b3e:	f003 0303 	and.w	r3, r3, #3
 8003b42:	3301      	adds	r3, #1
 8003b44:	005b      	lsls	r3, r3, #1
 8003b46:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003b48:	68fa      	ldr	r2, [r7, #12]
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b50:	60bb      	str	r3, [r7, #8]
      break;
 8003b52:	e002      	b.n	8003b5a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b54:	4b05      	ldr	r3, [pc, #20]	; (8003b6c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003b56:	60bb      	str	r3, [r7, #8]
      break;
 8003b58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b5a:	68bb      	ldr	r3, [r7, #8]
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	3710      	adds	r7, #16
 8003b60:	46bd      	mov	sp, r7
 8003b62:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003b66:	bf00      	nop
 8003b68:	40023800 	.word	0x40023800
 8003b6c:	00f42400 	.word	0x00f42400
 8003b70:	007a1200 	.word	0x007a1200

08003b74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b74:	b480      	push	{r7}
 8003b76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b78:	4b03      	ldr	r3, [pc, #12]	; (8003b88 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr
 8003b86:	bf00      	nop
 8003b88:	20000094 	.word	0x20000094

08003b8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003b90:	f7ff fff0 	bl	8003b74 <HAL_RCC_GetHCLKFreq>
 8003b94:	4602      	mov	r2, r0
 8003b96:	4b05      	ldr	r3, [pc, #20]	; (8003bac <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	0a9b      	lsrs	r3, r3, #10
 8003b9c:	f003 0307 	and.w	r3, r3, #7
 8003ba0:	4903      	ldr	r1, [pc, #12]	; (8003bb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ba2:	5ccb      	ldrb	r3, [r1, r3]
 8003ba4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	bd80      	pop	{r7, pc}
 8003bac:	40023800 	.word	0x40023800
 8003bb0:	080a1b60 	.word	0x080a1b60

08003bb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003bb8:	f7ff ffdc 	bl	8003b74 <HAL_RCC_GetHCLKFreq>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	4b05      	ldr	r3, [pc, #20]	; (8003bd4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	0b5b      	lsrs	r3, r3, #13
 8003bc4:	f003 0307 	and.w	r3, r3, #7
 8003bc8:	4903      	ldr	r1, [pc, #12]	; (8003bd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003bca:	5ccb      	ldrb	r3, [r1, r3]
 8003bcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	bd80      	pop	{r7, pc}
 8003bd4:	40023800 	.word	0x40023800
 8003bd8:	080a1b60 	.word	0x080a1b60

08003bdc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b088      	sub	sp, #32
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003be4:	2300      	movs	r3, #0
 8003be6:	61fb      	str	r3, [r7, #28]
  uint32_t tmpreg1 = 0U;
 8003be8:	2300      	movs	r3, #0
 8003bea:	61bb      	str	r3, [r7, #24]
  uint32_t pllsaip = 0U;
 8003bec:	2300      	movs	r3, #0
 8003bee:	617b      	str	r3, [r7, #20]
  uint32_t pllsaiq = 0U;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	613b      	str	r3, [r7, #16]
  uint32_t pllsair = 0U;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*--------------------------- CLK48 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d00a      	beq.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003c04:	4b66      	ldr	r3, [pc, #408]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003c06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c0a:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c12:	4963      	ldr	r1, [pc, #396]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003c14:	4313      	orrs	r3, r2
 8003c16:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d00a      	beq.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8003c26:	4b5e      	ldr	r3, [pc, #376]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003c28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c2c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c34:	495a      	ldr	r1, [pc, #360]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003c36:	4313      	orrs	r3, r2
 8003c38:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f003 0301 	and.w	r3, r3, #1
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d10b      	bne.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d105      	bne.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d075      	beq.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003c60:	4b50      	ldr	r3, [pc, #320]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8003c62:	2200      	movs	r2, #0
 8003c64:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003c66:	f7fc fcaf 	bl	80005c8 <HAL_GetTick>
 8003c6a:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003c6c:	e008      	b.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003c6e:	f7fc fcab 	bl	80005c8 <HAL_GetTick>
 8003c72:	4602      	mov	r2, r0
 8003c74:	69fb      	ldr	r3, [r7, #28]
 8003c76:	1ad3      	subs	r3, r2, r3
 8003c78:	2b02      	cmp	r3, #2
 8003c7a:	d901      	bls.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c7c:	2303      	movs	r3, #3
 8003c7e:	e1dc      	b.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003c80:	4b47      	ldr	r3, [pc, #284]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d1f0      	bne.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x92>
    }

    /*---------------------- I2S configuration -------------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f003 0301 	and.w	r3, r3, #1
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d009      	beq.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0xd0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	019a      	lsls	r2, r3, #6
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	071b      	lsls	r3, r3, #28
 8003ca4:	493e      	ldr	r1, [pc, #248]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f003 0302 	and.w	r3, r3, #2
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d01f      	beq.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x11c>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003cb8:	4b39      	ldr	r3, [pc, #228]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003cba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cbe:	0f1b      	lsrs	r3, r3, #28
 8003cc0:	f003 0307 	and.w	r3, r3, #7
 8003cc4:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	019a      	lsls	r2, r3, #6
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	68db      	ldr	r3, [r3, #12]
 8003cd0:	061b      	lsls	r3, r3, #24
 8003cd2:	431a      	orrs	r2, r3
 8003cd4:	69bb      	ldr	r3, [r7, #24]
 8003cd6:	071b      	lsls	r3, r3, #28
 8003cd8:	4931      	ldr	r1, [pc, #196]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003ce0:	4b2f      	ldr	r3, [pc, #188]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003ce2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ce6:	f023 021f 	bic.w	r2, r3, #31
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6a1b      	ldr	r3, [r3, #32]
 8003cee:	3b01      	subs	r3, #1
 8003cf0:	492b      	ldr	r1, [pc, #172]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d00d      	beq.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x144>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	019a      	lsls	r2, r3, #6
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	68db      	ldr	r3, [r3, #12]
 8003d0e:	061b      	lsls	r3, r3, #24
 8003d10:	431a      	orrs	r2, r3
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	071b      	lsls	r3, r3, #28
 8003d18:	4921      	ldr	r1, [pc, #132]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003d20:	4b20      	ldr	r3, [pc, #128]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8003d22:	2201      	movs	r2, #1
 8003d24:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003d26:	f7fc fc4f 	bl	80005c8 <HAL_GetTick>
 8003d2a:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003d2c:	e008      	b.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003d2e:	f7fc fc4b 	bl	80005c8 <HAL_GetTick>
 8003d32:	4602      	mov	r2, r0
 8003d34:	69fb      	ldr	r3, [r7, #28]
 8003d36:	1ad3      	subs	r3, r2, r3
 8003d38:	2b02      	cmp	r3, #2
 8003d3a:	d901      	bls.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d3c:	2303      	movs	r3, #3
 8003d3e:	e17c      	b.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003d40:	4b17      	ldr	r3, [pc, #92]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d0f0      	beq.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x152>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f003 0304 	and.w	r3, r3, #4
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d112      	bne.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d10c      	bne.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f003 0380 	and.w	r3, r3, #128	; 0x80
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	f000 80ce 	beq.w	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x332>
      (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)))
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 8003d76:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d7a:	f040 80c8 	bne.w	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003d7e:	4b0a      	ldr	r3, [pc, #40]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003d80:	2200      	movs	r2, #0
 8003d82:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003d84:	f7fc fc20 	bl	80005c8 <HAL_GetTick>
 8003d88:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003d8a:	e00f      	b.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003d8c:	f7fc fc1c 	bl	80005c8 <HAL_GetTick>
 8003d90:	4602      	mov	r2, r0
 8003d92:	69fb      	ldr	r3, [r7, #28]
 8003d94:	1ad3      	subs	r3, r2, r3
 8003d96:	2b02      	cmp	r3, #2
 8003d98:	d908      	bls.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d9a:	2303      	movs	r3, #3
 8003d9c:	e14d      	b.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x45e>
 8003d9e:	bf00      	nop
 8003da0:	40023800 	.word	0x40023800
 8003da4:	42470068 	.word	0x42470068
 8003da8:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003dac:	4ba5      	ldr	r3, [pc, #660]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003db4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003db8:	d0e8      	beq.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f003 0304 	and.w	r3, r3, #4
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d02e      	beq.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8003dc6:	4b9f      	ldr	r3, [pc, #636]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003dc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dcc:	0c1b      	lsrs	r3, r3, #16
 8003dce:	f003 0303 	and.w	r3, r3, #3
 8003dd2:	3301      	adds	r3, #1
 8003dd4:	005b      	lsls	r3, r3, #1
 8003dd6:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003dd8:	4b9a      	ldr	r3, [pc, #616]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dde:	0f1b      	lsrs	r3, r3, #28
 8003de0:	f003 0307 	and.w	r3, r3, #7
 8003de4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	691b      	ldr	r3, [r3, #16]
 8003dea:	019a      	lsls	r2, r3, #6
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	085b      	lsrs	r3, r3, #1
 8003df0:	3b01      	subs	r3, #1
 8003df2:	041b      	lsls	r3, r3, #16
 8003df4:	431a      	orrs	r2, r3
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	699b      	ldr	r3, [r3, #24]
 8003dfa:	061b      	lsls	r3, r3, #24
 8003dfc:	431a      	orrs	r2, r3
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	071b      	lsls	r3, r3, #28
 8003e02:	4990      	ldr	r1, [pc, #576]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003e04:	4313      	orrs	r3, r2
 8003e06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003e0a:	4b8e      	ldr	r3, [pc, #568]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003e0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e10:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e18:	3b01      	subs	r3, #1
 8003e1a:	021b      	lsls	r3, r3, #8
 8003e1c:	4989      	ldr	r1, [pc, #548]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f003 0308 	and.w	r3, r3, #8
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d02c      	beq.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8003e30:	4b84      	ldr	r3, [pc, #528]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e36:	0c1b      	lsrs	r3, r3, #16
 8003e38:	f003 0303 	and.w	r3, r3, #3
 8003e3c:	3301      	adds	r3, #1
 8003e3e:	005b      	lsls	r3, r3, #1
 8003e40:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003e42:	4b80      	ldr	r3, [pc, #512]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003e44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e48:	0e1b      	lsrs	r3, r3, #24
 8003e4a:	f003 030f 	and.w	r3, r3, #15
 8003e4e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	691b      	ldr	r3, [r3, #16]
 8003e54:	019a      	lsls	r2, r3, #6
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	085b      	lsrs	r3, r3, #1
 8003e5a:	3b01      	subs	r3, #1
 8003e5c:	041b      	lsls	r3, r3, #16
 8003e5e:	431a      	orrs	r2, r3
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	061b      	lsls	r3, r3, #24
 8003e64:	431a      	orrs	r2, r3
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	69db      	ldr	r3, [r3, #28]
 8003e6a:	071b      	lsls	r3, r3, #28
 8003e6c:	4975      	ldr	r1, [pc, #468]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003e74:	4b73      	ldr	r3, [pc, #460]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003e76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e7a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e82:	4970      	ldr	r1, [pc, #448]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003e84:	4313      	orrs	r3, r2
 8003e86:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- CLK48 configuration ------------------------*/
    /* Configure the PLLSAI when it is used as clock source for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d024      	beq.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x304>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 8003e9a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e9e:	d11f      	bne.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x304>
    {
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));

      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003ea0:	4b68      	ldr	r3, [pc, #416]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003ea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ea6:	0e1b      	lsrs	r3, r3, #24
 8003ea8:	f003 030f 	and.w	r3, r3, #15
 8003eac:	613b      	str	r3, [r7, #16]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003eae:	4b65      	ldr	r3, [pc, #404]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003eb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eb4:	0f1b      	lsrs	r3, r3, #28
 8003eb6:	f003 0307 	and.w	r3, r3, #7
 8003eba:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	691b      	ldr	r3, [r3, #16]
 8003ec0:	019a      	lsls	r2, r3, #6
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	695b      	ldr	r3, [r3, #20]
 8003ec6:	085b      	lsrs	r3, r3, #1
 8003ec8:	3b01      	subs	r3, #1
 8003eca:	041b      	lsls	r3, r3, #16
 8003ecc:	431a      	orrs	r2, r3
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	061b      	lsls	r3, r3, #24
 8003ed2:	431a      	orrs	r2, r3
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	071b      	lsls	r3, r3, #28
 8003ed8:	495a      	ldr	r1, [pc, #360]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003eda:	4313      	orrs	r3, r2
 8003edc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003ee0:	4b59      	ldr	r3, [pc, #356]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003ee6:	f7fc fb6f 	bl	80005c8 <HAL_GetTick>
 8003eea:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003eec:	e008      	b.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x324>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003eee:	f7fc fb6b 	bl	80005c8 <HAL_GetTick>
 8003ef2:	4602      	mov	r2, r0
 8003ef4:	69fb      	ldr	r3, [r7, #28]
 8003ef6:	1ad3      	subs	r3, r2, r3
 8003ef8:	2b02      	cmp	r3, #2
 8003efa:	d901      	bls.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x324>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003efc:	2303      	movs	r3, #3
 8003efe:	e09c      	b.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003f00:	4b50      	ldr	r3, [pc, #320]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f0c:	d1ef      	bne.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x312>
  }

  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f003 0320 	and.w	r3, r3, #32
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	f000 8083 	beq.w	8004022 <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	60bb      	str	r3, [r7, #8]
 8003f20:	4b48      	ldr	r3, [pc, #288]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f24:	4a47      	ldr	r2, [pc, #284]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003f26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f2a:	6413      	str	r3, [r2, #64]	; 0x40
 8003f2c:	4b45      	ldr	r3, [pc, #276]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f34:	60bb      	str	r3, [r7, #8]
 8003f36:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003f38:	4b44      	ldr	r3, [pc, #272]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a43      	ldr	r2, [pc, #268]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8003f3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f42:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003f44:	f7fc fb40 	bl	80005c8 <HAL_GetTick>
 8003f48:	61f8      	str	r0, [r7, #28]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003f4a:	e008      	b.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003f4c:	f7fc fb3c 	bl	80005c8 <HAL_GetTick>
 8003f50:	4602      	mov	r2, r0
 8003f52:	69fb      	ldr	r3, [r7, #28]
 8003f54:	1ad3      	subs	r3, r2, r3
 8003f56:	2b02      	cmp	r3, #2
 8003f58:	d901      	bls.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x382>
      {
        return HAL_TIMEOUT;
 8003f5a:	2303      	movs	r3, #3
 8003f5c:	e06d      	b.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003f5e:	4b3b      	ldr	r3, [pc, #236]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d0f0      	beq.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x370>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003f6a:	4b36      	ldr	r3, [pc, #216]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003f6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f72:	61bb      	str	r3, [r7, #24]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003f74:	69bb      	ldr	r3, [r7, #24]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d02f      	beq.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f82:	69ba      	ldr	r2, [r7, #24]
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d028      	beq.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f88:	4b2e      	ldr	r3, [pc, #184]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003f8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f90:	61bb      	str	r3, [r7, #24]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003f92:	4b2f      	ldr	r3, [pc, #188]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003f94:	2201      	movs	r2, #1
 8003f96:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003f98:	4b2d      	ldr	r3, [pc, #180]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003f9e:	4a29      	ldr	r2, [pc, #164]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003fa0:	69bb      	ldr	r3, [r7, #24]
 8003fa2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003fa4:	4b27      	ldr	r3, [pc, #156]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003fa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fa8:	f003 0301 	and.w	r3, r3, #1
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	d114      	bne.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003fb0:	f7fc fb0a 	bl	80005c8 <HAL_GetTick>
 8003fb4:	61f8      	str	r0, [r7, #28]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fb6:	e00a      	b.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0x3f2>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fb8:	f7fc fb06 	bl	80005c8 <HAL_GetTick>
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	69fb      	ldr	r3, [r7, #28]
 8003fc0:	1ad3      	subs	r3, r2, r3
 8003fc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d901      	bls.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0x3f2>
          {
            return HAL_TIMEOUT;
 8003fca:	2303      	movs	r3, #3
 8003fcc:	e035      	b.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x45e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fce:	4b1d      	ldr	r3, [pc, #116]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003fd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fd2:	f003 0302 	and.w	r3, r3, #2
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d0ee      	beq.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fe2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003fe6:	d10d      	bne.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8003fe8:	4b16      	ldr	r3, [pc, #88]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ff4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003ff8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ffc:	4911      	ldr	r1, [pc, #68]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003ffe:	4313      	orrs	r3, r2
 8004000:	608b      	str	r3, [r1, #8]
 8004002:	e005      	b.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x434>
 8004004:	4b0f      	ldr	r3, [pc, #60]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	4a0e      	ldr	r2, [pc, #56]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800400a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800400e:	6093      	str	r3, [r2, #8]
 8004010:	4b0c      	ldr	r3, [pc, #48]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8004012:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004018:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800401c:	4909      	ldr	r1, [pc, #36]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800401e:	4313      	orrs	r3, r2
 8004020:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f003 0310 	and.w	r3, r3, #16
 800402a:	2b00      	cmp	r3, #0
 800402c:	d004      	beq.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8004034:	4b07      	ldr	r3, [pc, #28]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x478>)
 8004036:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8004038:	2300      	movs	r3, #0
}
 800403a:	4618      	mov	r0, r3
 800403c:	3720      	adds	r7, #32
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}
 8004042:	bf00      	nop
 8004044:	40023800 	.word	0x40023800
 8004048:	42470070 	.word	0x42470070
 800404c:	40007000 	.word	0x40007000
 8004050:	42470e40 	.word	0x42470e40
 8004054:	424711e0 	.word	0x424711e0

08004058 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b086      	sub	sp, #24
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004060:	2300      	movs	r3, #0
 8004062:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f003 0301 	and.w	r3, r3, #1
 800406c:	2b00      	cmp	r3, #0
 800406e:	d075      	beq.n	800415c <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004070:	4ba2      	ldr	r3, [pc, #648]	; (80042fc <HAL_RCC_OscConfig+0x2a4>)
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	f003 030c 	and.w	r3, r3, #12
 8004078:	2b04      	cmp	r3, #4
 800407a:	d00c      	beq.n	8004096 <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800407c:	4b9f      	ldr	r3, [pc, #636]	; (80042fc <HAL_RCC_OscConfig+0x2a4>)
 800407e:	689b      	ldr	r3, [r3, #8]
 8004080:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004084:	2b08      	cmp	r3, #8
 8004086:	d112      	bne.n	80040ae <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004088:	4b9c      	ldr	r3, [pc, #624]	; (80042fc <HAL_RCC_OscConfig+0x2a4>)
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004090:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004094:	d10b      	bne.n	80040ae <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004096:	4b99      	ldr	r3, [pc, #612]	; (80042fc <HAL_RCC_OscConfig+0x2a4>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d05b      	beq.n	800415a <HAL_RCC_OscConfig+0x102>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d157      	bne.n	800415a <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	e20b      	b.n	80044c6 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040b6:	d106      	bne.n	80040c6 <HAL_RCC_OscConfig+0x6e>
 80040b8:	4b90      	ldr	r3, [pc, #576]	; (80042fc <HAL_RCC_OscConfig+0x2a4>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a8f      	ldr	r2, [pc, #572]	; (80042fc <HAL_RCC_OscConfig+0x2a4>)
 80040be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040c2:	6013      	str	r3, [r2, #0]
 80040c4:	e01d      	b.n	8004102 <HAL_RCC_OscConfig+0xaa>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040ce:	d10c      	bne.n	80040ea <HAL_RCC_OscConfig+0x92>
 80040d0:	4b8a      	ldr	r3, [pc, #552]	; (80042fc <HAL_RCC_OscConfig+0x2a4>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a89      	ldr	r2, [pc, #548]	; (80042fc <HAL_RCC_OscConfig+0x2a4>)
 80040d6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040da:	6013      	str	r3, [r2, #0]
 80040dc:	4b87      	ldr	r3, [pc, #540]	; (80042fc <HAL_RCC_OscConfig+0x2a4>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a86      	ldr	r2, [pc, #536]	; (80042fc <HAL_RCC_OscConfig+0x2a4>)
 80040e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040e6:	6013      	str	r3, [r2, #0]
 80040e8:	e00b      	b.n	8004102 <HAL_RCC_OscConfig+0xaa>
 80040ea:	4b84      	ldr	r3, [pc, #528]	; (80042fc <HAL_RCC_OscConfig+0x2a4>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a83      	ldr	r2, [pc, #524]	; (80042fc <HAL_RCC_OscConfig+0x2a4>)
 80040f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040f4:	6013      	str	r3, [r2, #0]
 80040f6:	4b81      	ldr	r3, [pc, #516]	; (80042fc <HAL_RCC_OscConfig+0x2a4>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a80      	ldr	r2, [pc, #512]	; (80042fc <HAL_RCC_OscConfig+0x2a4>)
 80040fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004100:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d013      	beq.n	8004132 <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800410a:	f7fc fa5d 	bl	80005c8 <HAL_GetTick>
 800410e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004110:	e008      	b.n	8004124 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004112:	f7fc fa59 	bl	80005c8 <HAL_GetTick>
 8004116:	4602      	mov	r2, r0
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	1ad3      	subs	r3, r2, r3
 800411c:	2b64      	cmp	r3, #100	; 0x64
 800411e:	d901      	bls.n	8004124 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 8004120:	2303      	movs	r3, #3
 8004122:	e1d0      	b.n	80044c6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004124:	4b75      	ldr	r3, [pc, #468]	; (80042fc <HAL_RCC_OscConfig+0x2a4>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800412c:	2b00      	cmp	r3, #0
 800412e:	d0f0      	beq.n	8004112 <HAL_RCC_OscConfig+0xba>
 8004130:	e014      	b.n	800415c <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004132:	f7fc fa49 	bl	80005c8 <HAL_GetTick>
 8004136:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004138:	e008      	b.n	800414c <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800413a:	f7fc fa45 	bl	80005c8 <HAL_GetTick>
 800413e:	4602      	mov	r2, r0
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	1ad3      	subs	r3, r2, r3
 8004144:	2b64      	cmp	r3, #100	; 0x64
 8004146:	d901      	bls.n	800414c <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 8004148:	2303      	movs	r3, #3
 800414a:	e1bc      	b.n	80044c6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800414c:	4b6b      	ldr	r3, [pc, #428]	; (80042fc <HAL_RCC_OscConfig+0x2a4>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004154:	2b00      	cmp	r3, #0
 8004156:	d1f0      	bne.n	800413a <HAL_RCC_OscConfig+0xe2>
 8004158:	e000      	b.n	800415c <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800415a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 0302 	and.w	r3, r3, #2
 8004164:	2b00      	cmp	r3, #0
 8004166:	d063      	beq.n	8004230 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004168:	4b64      	ldr	r3, [pc, #400]	; (80042fc <HAL_RCC_OscConfig+0x2a4>)
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	f003 030c 	and.w	r3, r3, #12
 8004170:	2b00      	cmp	r3, #0
 8004172:	d00b      	beq.n	800418c <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004174:	4b61      	ldr	r3, [pc, #388]	; (80042fc <HAL_RCC_OscConfig+0x2a4>)
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800417c:	2b08      	cmp	r3, #8
 800417e:	d11c      	bne.n	80041ba <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004180:	4b5e      	ldr	r3, [pc, #376]	; (80042fc <HAL_RCC_OscConfig+0x2a4>)
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004188:	2b00      	cmp	r3, #0
 800418a:	d116      	bne.n	80041ba <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800418c:	4b5b      	ldr	r3, [pc, #364]	; (80042fc <HAL_RCC_OscConfig+0x2a4>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f003 0302 	and.w	r3, r3, #2
 8004194:	2b00      	cmp	r3, #0
 8004196:	d005      	beq.n	80041a4 <HAL_RCC_OscConfig+0x14c>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	68db      	ldr	r3, [r3, #12]
 800419c:	2b01      	cmp	r3, #1
 800419e:	d001      	beq.n	80041a4 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	e190      	b.n	80044c6 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041a4:	4b55      	ldr	r3, [pc, #340]	; (80042fc <HAL_RCC_OscConfig+0x2a4>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	691b      	ldr	r3, [r3, #16]
 80041b0:	00db      	lsls	r3, r3, #3
 80041b2:	4952      	ldr	r1, [pc, #328]	; (80042fc <HAL_RCC_OscConfig+0x2a4>)
 80041b4:	4313      	orrs	r3, r2
 80041b6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041b8:	e03a      	b.n	8004230 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	68db      	ldr	r3, [r3, #12]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d020      	beq.n	8004204 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041c2:	4b4f      	ldr	r3, [pc, #316]	; (8004300 <HAL_RCC_OscConfig+0x2a8>)
 80041c4:	2201      	movs	r2, #1
 80041c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041c8:	f7fc f9fe 	bl	80005c8 <HAL_GetTick>
 80041cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041ce:	e008      	b.n	80041e2 <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041d0:	f7fc f9fa 	bl	80005c8 <HAL_GetTick>
 80041d4:	4602      	mov	r2, r0
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	1ad3      	subs	r3, r2, r3
 80041da:	2b02      	cmp	r3, #2
 80041dc:	d901      	bls.n	80041e2 <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 80041de:	2303      	movs	r3, #3
 80041e0:	e171      	b.n	80044c6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041e2:	4b46      	ldr	r3, [pc, #280]	; (80042fc <HAL_RCC_OscConfig+0x2a4>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f003 0302 	and.w	r3, r3, #2
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d0f0      	beq.n	80041d0 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041ee:	4b43      	ldr	r3, [pc, #268]	; (80042fc <HAL_RCC_OscConfig+0x2a4>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	691b      	ldr	r3, [r3, #16]
 80041fa:	00db      	lsls	r3, r3, #3
 80041fc:	493f      	ldr	r1, [pc, #252]	; (80042fc <HAL_RCC_OscConfig+0x2a4>)
 80041fe:	4313      	orrs	r3, r2
 8004200:	600b      	str	r3, [r1, #0]
 8004202:	e015      	b.n	8004230 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004204:	4b3e      	ldr	r3, [pc, #248]	; (8004300 <HAL_RCC_OscConfig+0x2a8>)
 8004206:	2200      	movs	r2, #0
 8004208:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800420a:	f7fc f9dd 	bl	80005c8 <HAL_GetTick>
 800420e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004210:	e008      	b.n	8004224 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004212:	f7fc f9d9 	bl	80005c8 <HAL_GetTick>
 8004216:	4602      	mov	r2, r0
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	1ad3      	subs	r3, r2, r3
 800421c:	2b02      	cmp	r3, #2
 800421e:	d901      	bls.n	8004224 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8004220:	2303      	movs	r3, #3
 8004222:	e150      	b.n	80044c6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004224:	4b35      	ldr	r3, [pc, #212]	; (80042fc <HAL_RCC_OscConfig+0x2a4>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f003 0302 	and.w	r3, r3, #2
 800422c:	2b00      	cmp	r3, #0
 800422e:	d1f0      	bne.n	8004212 <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f003 0308 	and.w	r3, r3, #8
 8004238:	2b00      	cmp	r3, #0
 800423a:	d030      	beq.n	800429e <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	695b      	ldr	r3, [r3, #20]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d016      	beq.n	8004272 <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004244:	4b2f      	ldr	r3, [pc, #188]	; (8004304 <HAL_RCC_OscConfig+0x2ac>)
 8004246:	2201      	movs	r2, #1
 8004248:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800424a:	f7fc f9bd 	bl	80005c8 <HAL_GetTick>
 800424e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004250:	e008      	b.n	8004264 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004252:	f7fc f9b9 	bl	80005c8 <HAL_GetTick>
 8004256:	4602      	mov	r2, r0
 8004258:	693b      	ldr	r3, [r7, #16]
 800425a:	1ad3      	subs	r3, r2, r3
 800425c:	2b02      	cmp	r3, #2
 800425e:	d901      	bls.n	8004264 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 8004260:	2303      	movs	r3, #3
 8004262:	e130      	b.n	80044c6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004264:	4b25      	ldr	r3, [pc, #148]	; (80042fc <HAL_RCC_OscConfig+0x2a4>)
 8004266:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004268:	f003 0302 	and.w	r3, r3, #2
 800426c:	2b00      	cmp	r3, #0
 800426e:	d0f0      	beq.n	8004252 <HAL_RCC_OscConfig+0x1fa>
 8004270:	e015      	b.n	800429e <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004272:	4b24      	ldr	r3, [pc, #144]	; (8004304 <HAL_RCC_OscConfig+0x2ac>)
 8004274:	2200      	movs	r2, #0
 8004276:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004278:	f7fc f9a6 	bl	80005c8 <HAL_GetTick>
 800427c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800427e:	e008      	b.n	8004292 <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004280:	f7fc f9a2 	bl	80005c8 <HAL_GetTick>
 8004284:	4602      	mov	r2, r0
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	1ad3      	subs	r3, r2, r3
 800428a:	2b02      	cmp	r3, #2
 800428c:	d901      	bls.n	8004292 <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 800428e:	2303      	movs	r3, #3
 8004290:	e119      	b.n	80044c6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004292:	4b1a      	ldr	r3, [pc, #104]	; (80042fc <HAL_RCC_OscConfig+0x2a4>)
 8004294:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004296:	f003 0302 	and.w	r3, r3, #2
 800429a:	2b00      	cmp	r3, #0
 800429c:	d1f0      	bne.n	8004280 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f003 0304 	and.w	r3, r3, #4
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	f000 809f 	beq.w	80043ea <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042ac:	2300      	movs	r3, #0
 80042ae:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042b0:	4b12      	ldr	r3, [pc, #72]	; (80042fc <HAL_RCC_OscConfig+0x2a4>)
 80042b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d10f      	bne.n	80042dc <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042bc:	2300      	movs	r3, #0
 80042be:	60fb      	str	r3, [r7, #12]
 80042c0:	4b0e      	ldr	r3, [pc, #56]	; (80042fc <HAL_RCC_OscConfig+0x2a4>)
 80042c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c4:	4a0d      	ldr	r2, [pc, #52]	; (80042fc <HAL_RCC_OscConfig+0x2a4>)
 80042c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042ca:	6413      	str	r3, [r2, #64]	; 0x40
 80042cc:	4b0b      	ldr	r3, [pc, #44]	; (80042fc <HAL_RCC_OscConfig+0x2a4>)
 80042ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042d4:	60fb      	str	r3, [r7, #12]
 80042d6:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80042d8:	2301      	movs	r3, #1
 80042da:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042dc:	4b0a      	ldr	r3, [pc, #40]	; (8004308 <HAL_RCC_OscConfig+0x2b0>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d120      	bne.n	800432a <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80042e8:	4b07      	ldr	r3, [pc, #28]	; (8004308 <HAL_RCC_OscConfig+0x2b0>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a06      	ldr	r2, [pc, #24]	; (8004308 <HAL_RCC_OscConfig+0x2b0>)
 80042ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042f2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042f4:	f7fc f968 	bl	80005c8 <HAL_GetTick>
 80042f8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042fa:	e010      	b.n	800431e <HAL_RCC_OscConfig+0x2c6>
 80042fc:	40023800 	.word	0x40023800
 8004300:	42470000 	.word	0x42470000
 8004304:	42470e80 	.word	0x42470e80
 8004308:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800430c:	f7fc f95c 	bl	80005c8 <HAL_GetTick>
 8004310:	4602      	mov	r2, r0
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	1ad3      	subs	r3, r2, r3
 8004316:	2b02      	cmp	r3, #2
 8004318:	d901      	bls.n	800431e <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 800431a:	2303      	movs	r3, #3
 800431c:	e0d3      	b.n	80044c6 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800431e:	4b6c      	ldr	r3, [pc, #432]	; (80044d0 <HAL_RCC_OscConfig+0x478>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004326:	2b00      	cmp	r3, #0
 8004328:	d0f0      	beq.n	800430c <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	689b      	ldr	r3, [r3, #8]
 800432e:	2b01      	cmp	r3, #1
 8004330:	d106      	bne.n	8004340 <HAL_RCC_OscConfig+0x2e8>
 8004332:	4b68      	ldr	r3, [pc, #416]	; (80044d4 <HAL_RCC_OscConfig+0x47c>)
 8004334:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004336:	4a67      	ldr	r2, [pc, #412]	; (80044d4 <HAL_RCC_OscConfig+0x47c>)
 8004338:	f043 0301 	orr.w	r3, r3, #1
 800433c:	6713      	str	r3, [r2, #112]	; 0x70
 800433e:	e01c      	b.n	800437a <HAL_RCC_OscConfig+0x322>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	2b05      	cmp	r3, #5
 8004346:	d10c      	bne.n	8004362 <HAL_RCC_OscConfig+0x30a>
 8004348:	4b62      	ldr	r3, [pc, #392]	; (80044d4 <HAL_RCC_OscConfig+0x47c>)
 800434a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800434c:	4a61      	ldr	r2, [pc, #388]	; (80044d4 <HAL_RCC_OscConfig+0x47c>)
 800434e:	f043 0304 	orr.w	r3, r3, #4
 8004352:	6713      	str	r3, [r2, #112]	; 0x70
 8004354:	4b5f      	ldr	r3, [pc, #380]	; (80044d4 <HAL_RCC_OscConfig+0x47c>)
 8004356:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004358:	4a5e      	ldr	r2, [pc, #376]	; (80044d4 <HAL_RCC_OscConfig+0x47c>)
 800435a:	f043 0301 	orr.w	r3, r3, #1
 800435e:	6713      	str	r3, [r2, #112]	; 0x70
 8004360:	e00b      	b.n	800437a <HAL_RCC_OscConfig+0x322>
 8004362:	4b5c      	ldr	r3, [pc, #368]	; (80044d4 <HAL_RCC_OscConfig+0x47c>)
 8004364:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004366:	4a5b      	ldr	r2, [pc, #364]	; (80044d4 <HAL_RCC_OscConfig+0x47c>)
 8004368:	f023 0301 	bic.w	r3, r3, #1
 800436c:	6713      	str	r3, [r2, #112]	; 0x70
 800436e:	4b59      	ldr	r3, [pc, #356]	; (80044d4 <HAL_RCC_OscConfig+0x47c>)
 8004370:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004372:	4a58      	ldr	r2, [pc, #352]	; (80044d4 <HAL_RCC_OscConfig+0x47c>)
 8004374:	f023 0304 	bic.w	r3, r3, #4
 8004378:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d015      	beq.n	80043ae <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004382:	f7fc f921 	bl	80005c8 <HAL_GetTick>
 8004386:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004388:	e00a      	b.n	80043a0 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800438a:	f7fc f91d 	bl	80005c8 <HAL_GetTick>
 800438e:	4602      	mov	r2, r0
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	1ad3      	subs	r3, r2, r3
 8004394:	f241 3288 	movw	r2, #5000	; 0x1388
 8004398:	4293      	cmp	r3, r2
 800439a:	d901      	bls.n	80043a0 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 800439c:	2303      	movs	r3, #3
 800439e:	e092      	b.n	80044c6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043a0:	4b4c      	ldr	r3, [pc, #304]	; (80044d4 <HAL_RCC_OscConfig+0x47c>)
 80043a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043a4:	f003 0302 	and.w	r3, r3, #2
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d0ee      	beq.n	800438a <HAL_RCC_OscConfig+0x332>
 80043ac:	e014      	b.n	80043d8 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043ae:	f7fc f90b 	bl	80005c8 <HAL_GetTick>
 80043b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043b4:	e00a      	b.n	80043cc <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043b6:	f7fc f907 	bl	80005c8 <HAL_GetTick>
 80043ba:	4602      	mov	r2, r0
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	1ad3      	subs	r3, r2, r3
 80043c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d901      	bls.n	80043cc <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 80043c8:	2303      	movs	r3, #3
 80043ca:	e07c      	b.n	80044c6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043cc:	4b41      	ldr	r3, [pc, #260]	; (80044d4 <HAL_RCC_OscConfig+0x47c>)
 80043ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043d0:	f003 0302 	and.w	r3, r3, #2
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d1ee      	bne.n	80043b6 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80043d8:	7dfb      	ldrb	r3, [r7, #23]
 80043da:	2b01      	cmp	r3, #1
 80043dc:	d105      	bne.n	80043ea <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043de:	4b3d      	ldr	r3, [pc, #244]	; (80044d4 <HAL_RCC_OscConfig+0x47c>)
 80043e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e2:	4a3c      	ldr	r2, [pc, #240]	; (80044d4 <HAL_RCC_OscConfig+0x47c>)
 80043e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043e8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	699b      	ldr	r3, [r3, #24]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d068      	beq.n	80044c4 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80043f2:	4b38      	ldr	r3, [pc, #224]	; (80044d4 <HAL_RCC_OscConfig+0x47c>)
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	f003 030c 	and.w	r3, r3, #12
 80043fa:	2b08      	cmp	r3, #8
 80043fc:	d060      	beq.n	80044c0 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	699b      	ldr	r3, [r3, #24]
 8004402:	2b02      	cmp	r3, #2
 8004404:	d145      	bne.n	8004492 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004406:	4b34      	ldr	r3, [pc, #208]	; (80044d8 <HAL_RCC_OscConfig+0x480>)
 8004408:	2200      	movs	r2, #0
 800440a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800440c:	f7fc f8dc 	bl	80005c8 <HAL_GetTick>
 8004410:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004412:	e008      	b.n	8004426 <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004414:	f7fc f8d8 	bl	80005c8 <HAL_GetTick>
 8004418:	4602      	mov	r2, r0
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	1ad3      	subs	r3, r2, r3
 800441e:	2b02      	cmp	r3, #2
 8004420:	d901      	bls.n	8004426 <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 8004422:	2303      	movs	r3, #3
 8004424:	e04f      	b.n	80044c6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004426:	4b2b      	ldr	r3, [pc, #172]	; (80044d4 <HAL_RCC_OscConfig+0x47c>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800442e:	2b00      	cmp	r3, #0
 8004430:	d1f0      	bne.n	8004414 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	69da      	ldr	r2, [r3, #28]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6a1b      	ldr	r3, [r3, #32]
 800443a:	431a      	orrs	r2, r3
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004440:	019b      	lsls	r3, r3, #6
 8004442:	431a      	orrs	r2, r3
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004448:	085b      	lsrs	r3, r3, #1
 800444a:	3b01      	subs	r3, #1
 800444c:	041b      	lsls	r3, r3, #16
 800444e:	431a      	orrs	r2, r3
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004454:	061b      	lsls	r3, r3, #24
 8004456:	431a      	orrs	r2, r3
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800445c:	071b      	lsls	r3, r3, #28
 800445e:	491d      	ldr	r1, [pc, #116]	; (80044d4 <HAL_RCC_OscConfig+0x47c>)
 8004460:	4313      	orrs	r3, r2
 8004462:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004464:	4b1c      	ldr	r3, [pc, #112]	; (80044d8 <HAL_RCC_OscConfig+0x480>)
 8004466:	2201      	movs	r2, #1
 8004468:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800446a:	f7fc f8ad 	bl	80005c8 <HAL_GetTick>
 800446e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004470:	e008      	b.n	8004484 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004472:	f7fc f8a9 	bl	80005c8 <HAL_GetTick>
 8004476:	4602      	mov	r2, r0
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	1ad3      	subs	r3, r2, r3
 800447c:	2b02      	cmp	r3, #2
 800447e:	d901      	bls.n	8004484 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8004480:	2303      	movs	r3, #3
 8004482:	e020      	b.n	80044c6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004484:	4b13      	ldr	r3, [pc, #76]	; (80044d4 <HAL_RCC_OscConfig+0x47c>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800448c:	2b00      	cmp	r3, #0
 800448e:	d0f0      	beq.n	8004472 <HAL_RCC_OscConfig+0x41a>
 8004490:	e018      	b.n	80044c4 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004492:	4b11      	ldr	r3, [pc, #68]	; (80044d8 <HAL_RCC_OscConfig+0x480>)
 8004494:	2200      	movs	r2, #0
 8004496:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004498:	f7fc f896 	bl	80005c8 <HAL_GetTick>
 800449c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800449e:	e008      	b.n	80044b2 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044a0:	f7fc f892 	bl	80005c8 <HAL_GetTick>
 80044a4:	4602      	mov	r2, r0
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	1ad3      	subs	r3, r2, r3
 80044aa:	2b02      	cmp	r3, #2
 80044ac:	d901      	bls.n	80044b2 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 80044ae:	2303      	movs	r3, #3
 80044b0:	e009      	b.n	80044c6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044b2:	4b08      	ldr	r3, [pc, #32]	; (80044d4 <HAL_RCC_OscConfig+0x47c>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d1f0      	bne.n	80044a0 <HAL_RCC_OscConfig+0x448>
 80044be:	e001      	b.n	80044c4 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80044c0:	2301      	movs	r3, #1
 80044c2:	e000      	b.n	80044c6 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 80044c4:	2300      	movs	r3, #0
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3718      	adds	r7, #24
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}
 80044ce:	bf00      	nop
 80044d0:	40007000 	.word	0x40007000
 80044d4:	40023800 	.word	0x40023800
 80044d8:	42470060 	.word	0x42470060

080044dc <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 80044dc:	b580      	push	{r7, lr}
 80044de:	b082      	sub	sp, #8
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
 80044e4:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d101      	bne.n	80044f0 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80044ec:	2301      	movs	r3, #1
 80044ee:	e025      	b.n	800453c <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80044f6:	b2db      	uxtb	r3, r3
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d106      	bne.n	800450a <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2200      	movs	r2, #0
 8004500:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8004504:	6878      	ldr	r0, [r7, #4]
 8004506:	f000 f81d 	bl	8004544 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2202      	movs	r2, #2
 800450e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681a      	ldr	r2, [r3, #0]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	3304      	adds	r3, #4
 800451a:	4619      	mov	r1, r3
 800451c:	4610      	mov	r0, r2
 800451e:	f000 fe2f 	bl	8005180 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6818      	ldr	r0, [r3, #0]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	461a      	mov	r2, r3
 800452c:	6839      	ldr	r1, [r7, #0]
 800452e:	f000 fe9a 	bl	8005266 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2201      	movs	r2, #1
 8004536:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 800453a:	2300      	movs	r3, #0
}
 800453c:	4618      	mov	r0, r3
 800453e:	3708      	adds	r7, #8
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}

08004544 <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 8004544:	b480      	push	{r7}
 8004546:	b083      	sub	sp, #12
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsdram);
  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */ 
}
 800454c:	bf00      	nop
 800454e:	370c      	adds	r7, #12
 8004550:	46bd      	mov	sp, r7
 8004552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004556:	4770      	bx	lr

08004558 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b084      	sub	sp, #16
 800455c:	af00      	add	r7, sp, #0
 800455e:	60f8      	str	r0, [r7, #12]
 8004560:	60b9      	str	r1, [r7, #8]
 8004562:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800456a:	b2db      	uxtb	r3, r3
 800456c:	2b02      	cmp	r3, #2
 800456e:	d101      	bne.n	8004574 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8004570:	2302      	movs	r3, #2
 8004572:	e018      	b.n	80045a6 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2202      	movs	r2, #2
 8004578:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	687a      	ldr	r2, [r7, #4]
 8004582:	68b9      	ldr	r1, [r7, #8]
 8004584:	4618      	mov	r0, r3
 8004586:	f000 feed 	bl	8005364 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	2b02      	cmp	r3, #2
 8004590:	d104      	bne.n	800459c <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	2205      	movs	r2, #5
 8004596:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800459a:	e003      	b.n	80045a4 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2201      	movs	r2, #1
 80045a0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 80045a4:	2300      	movs	r3, #0
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	3710      	adds	r7, #16
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}

080045ae <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80045ae:	b580      	push	{r7, lr}
 80045b0:	b082      	sub	sp, #8
 80045b2:	af00      	add	r7, sp, #0
 80045b4:	6078      	str	r0, [r7, #4]
 80045b6:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80045be:	b2db      	uxtb	r3, r3
 80045c0:	2b02      	cmp	r3, #2
 80045c2:	d101      	bne.n	80045c8 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 80045c4:	2302      	movs	r3, #2
 80045c6:	e00e      	b.n	80045e6 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2202      	movs	r2, #2
 80045cc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	6839      	ldr	r1, [r7, #0]
 80045d6:	4618      	mov	r0, r3
 80045d8:	f000 ff00 	bl	80053dc <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2201      	movs	r2, #1
 80045e0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 80045e4:	2300      	movs	r3, #0
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3708      	adds	r7, #8
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}

080045ee <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045ee:	b580      	push	{r7, lr}
 80045f0:	b082      	sub	sp, #8
 80045f2:	af00      	add	r7, sp, #0
 80045f4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d101      	bne.n	8004600 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045fc:	2301      	movs	r3, #1
 80045fe:	e03f      	b.n	8004680 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004606:	b2db      	uxtb	r3, r3
 8004608:	2b00      	cmp	r3, #0
 800460a:	d106      	bne.n	800461a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2200      	movs	r2, #0
 8004610:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004614:	6878      	ldr	r0, [r7, #4]
 8004616:	f000 f837 	bl	8004688 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2224      	movs	r2, #36	; 0x24
 800461e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	68da      	ldr	r2, [r3, #12]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004630:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	f000 fb9a 	bl	8004d6c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	691a      	ldr	r2, [r3, #16]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004646:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	695a      	ldr	r2, [r3, #20]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004656:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	68da      	ldr	r2, [r3, #12]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004666:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2200      	movs	r2, #0
 800466c:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2220      	movs	r2, #32
 8004672:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2220      	movs	r2, #32
 800467a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800467e:	2300      	movs	r3, #0
}
 8004680:	4618      	mov	r0, r3
 8004682:	3708      	adds	r7, #8
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}

08004688 <HAL_UART_MspInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8004688:	b480      	push	{r7}
 800468a:	b083      	sub	sp, #12
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspInit could be implemented in the user file
   */
}
 8004690:	bf00      	nop
 8004692:	370c      	adds	r7, #12
 8004694:	46bd      	mov	sp, r7
 8004696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469a:	4770      	bx	lr

0800469c <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b088      	sub	sp, #32
 80046a0:	af02      	add	r7, sp, #8
 80046a2:	60f8      	str	r0, [r7, #12]
 80046a4:	60b9      	str	r1, [r7, #8]
 80046a6:	603b      	str	r3, [r7, #0]
 80046a8:	4613      	mov	r3, r2
 80046aa:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80046ac:	2300      	movs	r3, #0
 80046ae:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80046b6:	b2db      	uxtb	r3, r3
 80046b8:	2b20      	cmp	r3, #32
 80046ba:	f040 8083 	bne.w	80047c4 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d002      	beq.n	80046ca <HAL_UART_Transmit+0x2e>
 80046c4:	88fb      	ldrh	r3, [r7, #6]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d101      	bne.n	80046ce <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80046ca:	2301      	movs	r3, #1
 80046cc:	e07b      	b.n	80047c6 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	d101      	bne.n	80046dc <HAL_UART_Transmit+0x40>
 80046d8:	2302      	movs	r3, #2
 80046da:	e074      	b.n	80047c6 <HAL_UART_Transmit+0x12a>
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	2201      	movs	r2, #1
 80046e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	2200      	movs	r2, #0
 80046e8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	2221      	movs	r2, #33	; 0x21
 80046ee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80046f2:	f7fb ff69 	bl	80005c8 <HAL_GetTick>
 80046f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	88fa      	ldrh	r2, [r7, #6]
 80046fc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	88fa      	ldrh	r2, [r7, #6]
 8004702:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004704:	e042      	b.n	800478c <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800470a:	b29b      	uxth	r3, r3
 800470c:	3b01      	subs	r3, #1
 800470e:	b29a      	uxth	r2, r3
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800471c:	d122      	bne.n	8004764 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	9300      	str	r3, [sp, #0]
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	2200      	movs	r2, #0
 8004726:	2180      	movs	r1, #128	; 0x80
 8004728:	68f8      	ldr	r0, [r7, #12]
 800472a:	f000 f9b3 	bl	8004a94 <UART_WaitOnFlagUntilTimeout>
 800472e:	4603      	mov	r3, r0
 8004730:	2b00      	cmp	r3, #0
 8004732:	d001      	beq.n	8004738 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8004734:	2303      	movs	r3, #3
 8004736:	e046      	b.n	80047c6 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	881b      	ldrh	r3, [r3, #0]
 8004740:	461a      	mov	r2, r3
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800474a:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	691b      	ldr	r3, [r3, #16]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d103      	bne.n	800475c <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	3302      	adds	r3, #2
 8004758:	60bb      	str	r3, [r7, #8]
 800475a:	e017      	b.n	800478c <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	3301      	adds	r3, #1
 8004760:	60bb      	str	r3, [r7, #8]
 8004762:	e013      	b.n	800478c <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	9300      	str	r3, [sp, #0]
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	2200      	movs	r2, #0
 800476c:	2180      	movs	r1, #128	; 0x80
 800476e:	68f8      	ldr	r0, [r7, #12]
 8004770:	f000 f990 	bl	8004a94 <UART_WaitOnFlagUntilTimeout>
 8004774:	4603      	mov	r3, r0
 8004776:	2b00      	cmp	r3, #0
 8004778:	d001      	beq.n	800477e <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 800477a:	2303      	movs	r3, #3
 800477c:	e023      	b.n	80047c6 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	1c5a      	adds	r2, r3, #1
 8004782:	60ba      	str	r2, [r7, #8]
 8004784:	781a      	ldrb	r2, [r3, #0]
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004790:	b29b      	uxth	r3, r3
 8004792:	2b00      	cmp	r3, #0
 8004794:	d1b7      	bne.n	8004706 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	9300      	str	r3, [sp, #0]
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	2200      	movs	r2, #0
 800479e:	2140      	movs	r1, #64	; 0x40
 80047a0:	68f8      	ldr	r0, [r7, #12]
 80047a2:	f000 f977 	bl	8004a94 <UART_WaitOnFlagUntilTimeout>
 80047a6:	4603      	mov	r3, r0
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d001      	beq.n	80047b0 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80047ac:	2303      	movs	r3, #3
 80047ae:	e00a      	b.n	80047c6 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2220      	movs	r2, #32
 80047b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2200      	movs	r2, #0
 80047bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80047c0:	2300      	movs	r3, #0
 80047c2:	e000      	b.n	80047c6 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80047c4:	2302      	movs	r3, #2
  }
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	3718      	adds	r7, #24
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}

080047ce <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80047ce:	b480      	push	{r7}
 80047d0:	b085      	sub	sp, #20
 80047d2:	af00      	add	r7, sp, #0
 80047d4:	60f8      	str	r0, [r7, #12]
 80047d6:	60b9      	str	r1, [r7, #8]
 80047d8:	4613      	mov	r3, r2
 80047da:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80047e2:	b2db      	uxtb	r3, r3
 80047e4:	2b20      	cmp	r3, #32
 80047e6:	d140      	bne.n	800486a <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d002      	beq.n	80047f4 <HAL_UART_Receive_IT+0x26>
 80047ee:	88fb      	ldrh	r3, [r7, #6]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d101      	bne.n	80047f8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80047f4:	2301      	movs	r3, #1
 80047f6:	e039      	b.n	800486c <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80047fe:	2b01      	cmp	r3, #1
 8004800:	d101      	bne.n	8004806 <HAL_UART_Receive_IT+0x38>
 8004802:	2302      	movs	r3, #2
 8004804:	e032      	b.n	800486c <HAL_UART_Receive_IT+0x9e>
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2201      	movs	r2, #1
 800480a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	68ba      	ldr	r2, [r7, #8]
 8004812:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	88fa      	ldrh	r2, [r7, #6]
 8004818:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	88fa      	ldrh	r2, [r7, #6]
 800481e:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	2200      	movs	r2, #0
 8004824:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2222      	movs	r2, #34	; 0x22
 800482a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	2200      	movs	r2, #0
 8004832:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	68da      	ldr	r2, [r3, #12]
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004844:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	695a      	ldr	r2, [r3, #20]
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f042 0201 	orr.w	r2, r2, #1
 8004854:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	68da      	ldr	r2, [r3, #12]
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f042 0220 	orr.w	r2, r2, #32
 8004864:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004866:	2300      	movs	r3, #0
 8004868:	e000      	b.n	800486c <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800486a:	2302      	movs	r3, #2
  }
}
 800486c:	4618      	mov	r0, r3
 800486e:	3714      	adds	r7, #20
 8004870:	46bd      	mov	sp, r7
 8004872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004876:	4770      	bx	lr

08004878 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b088      	sub	sp, #32
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	68db      	ldr	r3, [r3, #12]
 800488e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	695b      	ldr	r3, [r3, #20]
 8004896:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8004898:	2300      	movs	r3, #0
 800489a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800489c:	2300      	movs	r3, #0
 800489e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80048a0:	69fb      	ldr	r3, [r7, #28]
 80048a2:	f003 030f 	and.w	r3, r3, #15
 80048a6:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80048a8:	693b      	ldr	r3, [r7, #16]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d10d      	bne.n	80048ca <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80048ae:	69fb      	ldr	r3, [r7, #28]
 80048b0:	f003 0320 	and.w	r3, r3, #32
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d008      	beq.n	80048ca <HAL_UART_IRQHandler+0x52>
 80048b8:	69bb      	ldr	r3, [r7, #24]
 80048ba:	f003 0320 	and.w	r3, r3, #32
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d003      	beq.n	80048ca <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f000 f9d0 	bl	8004c68 <UART_Receive_IT>
      return;
 80048c8:	e0cb      	b.n	8004a62 <HAL_UART_IRQHandler+0x1ea>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	f000 80ab 	beq.w	8004a28 <HAL_UART_IRQHandler+0x1b0>
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	f003 0301 	and.w	r3, r3, #1
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d105      	bne.n	80048e8 <HAL_UART_IRQHandler+0x70>
 80048dc:	69bb      	ldr	r3, [r7, #24]
 80048de:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	f000 80a0 	beq.w	8004a28 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80048e8:	69fb      	ldr	r3, [r7, #28]
 80048ea:	f003 0301 	and.w	r3, r3, #1
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d00a      	beq.n	8004908 <HAL_UART_IRQHandler+0x90>
 80048f2:	69bb      	ldr	r3, [r7, #24]
 80048f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d005      	beq.n	8004908 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004900:	f043 0201 	orr.w	r2, r3, #1
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004908:	69fb      	ldr	r3, [r7, #28]
 800490a:	f003 0304 	and.w	r3, r3, #4
 800490e:	2b00      	cmp	r3, #0
 8004910:	d00a      	beq.n	8004928 <HAL_UART_IRQHandler+0xb0>
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	f003 0301 	and.w	r3, r3, #1
 8004918:	2b00      	cmp	r3, #0
 800491a:	d005      	beq.n	8004928 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004920:	f043 0202 	orr.w	r2, r3, #2
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004928:	69fb      	ldr	r3, [r7, #28]
 800492a:	f003 0302 	and.w	r3, r3, #2
 800492e:	2b00      	cmp	r3, #0
 8004930:	d00a      	beq.n	8004948 <HAL_UART_IRQHandler+0xd0>
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	f003 0301 	and.w	r3, r3, #1
 8004938:	2b00      	cmp	r3, #0
 800493a:	d005      	beq.n	8004948 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004940:	f043 0204 	orr.w	r2, r3, #4
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004948:	69fb      	ldr	r3, [r7, #28]
 800494a:	f003 0308 	and.w	r3, r3, #8
 800494e:	2b00      	cmp	r3, #0
 8004950:	d00a      	beq.n	8004968 <HAL_UART_IRQHandler+0xf0>
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	f003 0301 	and.w	r3, r3, #1
 8004958:	2b00      	cmp	r3, #0
 800495a:	d005      	beq.n	8004968 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004960:	f043 0208 	orr.w	r2, r3, #8
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800496c:	2b00      	cmp	r3, #0
 800496e:	d077      	beq.n	8004a60 <HAL_UART_IRQHandler+0x1e8>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004970:	69fb      	ldr	r3, [r7, #28]
 8004972:	f003 0320 	and.w	r3, r3, #32
 8004976:	2b00      	cmp	r3, #0
 8004978:	d007      	beq.n	800498a <HAL_UART_IRQHandler+0x112>
 800497a:	69bb      	ldr	r3, [r7, #24]
 800497c:	f003 0320 	and.w	r3, r3, #32
 8004980:	2b00      	cmp	r3, #0
 8004982:	d002      	beq.n	800498a <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8004984:	6878      	ldr	r0, [r7, #4]
 8004986:	f000 f96f 	bl	8004c68 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	695b      	ldr	r3, [r3, #20]
 8004990:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004994:	2b40      	cmp	r3, #64	; 0x40
 8004996:	bf0c      	ite	eq
 8004998:	2301      	moveq	r3, #1
 800499a:	2300      	movne	r3, #0
 800499c:	b2db      	uxtb	r3, r3
 800499e:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049a4:	f003 0308 	and.w	r3, r3, #8
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d102      	bne.n	80049b2 <HAL_UART_IRQHandler+0x13a>
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d031      	beq.n	8004a16 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	f000 f8b8 	bl	8004b28 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	695b      	ldr	r3, [r3, #20]
 80049be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049c2:	2b40      	cmp	r3, #64	; 0x40
 80049c4:	d123      	bne.n	8004a0e <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	695a      	ldr	r2, [r3, #20]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049d4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d013      	beq.n	8004a06 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049e2:	4a21      	ldr	r2, [pc, #132]	; (8004a68 <HAL_UART_IRQHandler+0x1f0>)
 80049e4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049ea:	4618      	mov	r0, r3
 80049ec:	f7fc f846 	bl	8000a7c <HAL_DMA_Abort_IT>
 80049f0:	4603      	mov	r3, r0
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d016      	beq.n	8004a24 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049fc:	687a      	ldr	r2, [r7, #4]
 80049fe:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004a00:	4610      	mov	r0, r2
 8004a02:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a04:	e00e      	b.n	8004a24 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f000 f83a 	bl	8004a80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a0c:	e00a      	b.n	8004a24 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f000 f836 	bl	8004a80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a14:	e006      	b.n	8004a24 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f000 f832 	bl	8004a80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8004a22:	e01d      	b.n	8004a60 <HAL_UART_IRQHandler+0x1e8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a24:	bf00      	nop
    return;
 8004a26:	e01b      	b.n	8004a60 <HAL_UART_IRQHandler+0x1e8>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004a28:	69fb      	ldr	r3, [r7, #28]
 8004a2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d008      	beq.n	8004a44 <HAL_UART_IRQHandler+0x1cc>
 8004a32:	69bb      	ldr	r3, [r7, #24]
 8004a34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d003      	beq.n	8004a44 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8004a3c:	6878      	ldr	r0, [r7, #4]
 8004a3e:	f000 f8a5 	bl	8004b8c <UART_Transmit_IT>
    return;
 8004a42:	e00e      	b.n	8004a62 <HAL_UART_IRQHandler+0x1ea>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004a44:	69fb      	ldr	r3, [r7, #28]
 8004a46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d009      	beq.n	8004a62 <HAL_UART_IRQHandler+0x1ea>
 8004a4e:	69bb      	ldr	r3, [r7, #24]
 8004a50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d004      	beq.n	8004a62 <HAL_UART_IRQHandler+0x1ea>
  {
    UART_EndTransmit_IT(huart);
 8004a58:	6878      	ldr	r0, [r7, #4]
 8004a5a:	f000 f8ed 	bl	8004c38 <UART_EndTransmit_IT>
    return;
 8004a5e:	e000      	b.n	8004a62 <HAL_UART_IRQHandler+0x1ea>
    return;
 8004a60:	bf00      	nop
  }
}
 8004a62:	3720      	adds	r7, #32
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}
 8004a68:	08004b65 	.word	0x08004b65

08004a6c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b083      	sub	sp, #12
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004a74:	bf00      	nop
 8004a76:	370c      	adds	r7, #12
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7e:	4770      	bx	lr

08004a80 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b083      	sub	sp, #12
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004a88:	bf00      	nop
 8004a8a:	370c      	adds	r7, #12
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a92:	4770      	bx	lr

08004a94 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b084      	sub	sp, #16
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	60f8      	str	r0, [r7, #12]
 8004a9c:	60b9      	str	r1, [r7, #8]
 8004a9e:	603b      	str	r3, [r7, #0]
 8004aa0:	4613      	mov	r3, r2
 8004aa2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004aa4:	e02c      	b.n	8004b00 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004aa6:	69bb      	ldr	r3, [r7, #24]
 8004aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aac:	d028      	beq.n	8004b00 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004aae:	69bb      	ldr	r3, [r7, #24]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d007      	beq.n	8004ac4 <UART_WaitOnFlagUntilTimeout+0x30>
 8004ab4:	f7fb fd88 	bl	80005c8 <HAL_GetTick>
 8004ab8:	4602      	mov	r2, r0
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	1ad3      	subs	r3, r2, r3
 8004abe:	69ba      	ldr	r2, [r7, #24]
 8004ac0:	429a      	cmp	r2, r3
 8004ac2:	d21d      	bcs.n	8004b00 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	68da      	ldr	r2, [r3, #12]
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004ad2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	695a      	ldr	r2, [r3, #20]
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f022 0201 	bic.w	r2, r2, #1
 8004ae2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2220      	movs	r2, #32
 8004ae8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	2220      	movs	r2, #32
 8004af0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	2200      	movs	r2, #0
 8004af8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004afc:	2303      	movs	r3, #3
 8004afe:	e00f      	b.n	8004b20 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	681a      	ldr	r2, [r3, #0]
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	4013      	ands	r3, r2
 8004b0a:	68ba      	ldr	r2, [r7, #8]
 8004b0c:	429a      	cmp	r2, r3
 8004b0e:	bf0c      	ite	eq
 8004b10:	2301      	moveq	r3, #1
 8004b12:	2300      	movne	r3, #0
 8004b14:	b2db      	uxtb	r3, r3
 8004b16:	461a      	mov	r2, r3
 8004b18:	79fb      	ldrb	r3, [r7, #7]
 8004b1a:	429a      	cmp	r2, r3
 8004b1c:	d0c3      	beq.n	8004aa6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004b1e:	2300      	movs	r3, #0
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	3710      	adds	r7, #16
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}

08004b28 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b083      	sub	sp, #12
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	68da      	ldr	r2, [r3, #12]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004b3e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	695a      	ldr	r2, [r3, #20]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f022 0201 	bic.w	r2, r2, #1
 8004b4e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2220      	movs	r2, #32
 8004b54:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8004b58:	bf00      	nop
 8004b5a:	370c      	adds	r7, #12
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b62:	4770      	bx	lr

08004b64 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b084      	sub	sp, #16
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b70:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	2200      	movs	r2, #0
 8004b76:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004b7e:	68f8      	ldr	r0, [r7, #12]
 8004b80:	f7ff ff7e 	bl	8004a80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b84:	bf00      	nop
 8004b86:	3710      	adds	r7, #16
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bd80      	pop	{r7, pc}

08004b8c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b085      	sub	sp, #20
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004b9a:	b2db      	uxtb	r3, r3
 8004b9c:	2b21      	cmp	r3, #33	; 0x21
 8004b9e:	d144      	bne.n	8004c2a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ba8:	d11a      	bne.n	8004be0 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6a1b      	ldr	r3, [r3, #32]
 8004bae:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	881b      	ldrh	r3, [r3, #0]
 8004bb4:	461a      	mov	r2, r3
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004bbe:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	691b      	ldr	r3, [r3, #16]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d105      	bne.n	8004bd4 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6a1b      	ldr	r3, [r3, #32]
 8004bcc:	1c9a      	adds	r2, r3, #2
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	621a      	str	r2, [r3, #32]
 8004bd2:	e00e      	b.n	8004bf2 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6a1b      	ldr	r3, [r3, #32]
 8004bd8:	1c5a      	adds	r2, r3, #1
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	621a      	str	r2, [r3, #32]
 8004bde:	e008      	b.n	8004bf2 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6a1b      	ldr	r3, [r3, #32]
 8004be4:	1c59      	adds	r1, r3, #1
 8004be6:	687a      	ldr	r2, [r7, #4]
 8004be8:	6211      	str	r1, [r2, #32]
 8004bea:	781a      	ldrb	r2, [r3, #0]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004bf6:	b29b      	uxth	r3, r3
 8004bf8:	3b01      	subs	r3, #1
 8004bfa:	b29b      	uxth	r3, r3
 8004bfc:	687a      	ldr	r2, [r7, #4]
 8004bfe:	4619      	mov	r1, r3
 8004c00:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d10f      	bne.n	8004c26 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	68da      	ldr	r2, [r3, #12]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c14:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	68da      	ldr	r2, [r3, #12]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c24:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004c26:	2300      	movs	r3, #0
 8004c28:	e000      	b.n	8004c2c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004c2a:	2302      	movs	r3, #2
  }
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	3714      	adds	r7, #20
 8004c30:	46bd      	mov	sp, r7
 8004c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c36:	4770      	bx	lr

08004c38 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b082      	sub	sp, #8
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	68da      	ldr	r2, [r3, #12]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c4e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2220      	movs	r2, #32
 8004c54:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004c58:	6878      	ldr	r0, [r7, #4]
 8004c5a:	f7ff ff07 	bl	8004a6c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004c5e:	2300      	movs	r3, #0
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	3708      	adds	r7, #8
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bd80      	pop	{r7, pc}

08004c68 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b084      	sub	sp, #16
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004c76:	b2db      	uxtb	r3, r3
 8004c78:	2b22      	cmp	r3, #34	; 0x22
 8004c7a:	d171      	bne.n	8004d60 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	689b      	ldr	r3, [r3, #8]
 8004c80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c84:	d123      	bne.n	8004cce <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c8a:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	691b      	ldr	r3, [r3, #16]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d10e      	bne.n	8004cb2 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	b29b      	uxth	r3, r3
 8004c9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ca0:	b29a      	uxth	r2, r3
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004caa:	1c9a      	adds	r2, r3, #2
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	629a      	str	r2, [r3, #40]	; 0x28
 8004cb0:	e029      	b.n	8004d06 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	b29b      	uxth	r3, r3
 8004cba:	b2db      	uxtb	r3, r3
 8004cbc:	b29a      	uxth	r2, r3
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cc6:	1c5a      	adds	r2, r3, #1
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	629a      	str	r2, [r3, #40]	; 0x28
 8004ccc:	e01b      	b.n	8004d06 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	691b      	ldr	r3, [r3, #16]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d10a      	bne.n	8004cec <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	6858      	ldr	r0, [r3, #4]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ce0:	1c59      	adds	r1, r3, #1
 8004ce2:	687a      	ldr	r2, [r7, #4]
 8004ce4:	6291      	str	r1, [r2, #40]	; 0x28
 8004ce6:	b2c2      	uxtb	r2, r0
 8004ce8:	701a      	strb	r2, [r3, #0]
 8004cea:	e00c      	b.n	8004d06 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	b2da      	uxtb	r2, r3
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cf8:	1c58      	adds	r0, r3, #1
 8004cfa:	6879      	ldr	r1, [r7, #4]
 8004cfc:	6288      	str	r0, [r1, #40]	; 0x28
 8004cfe:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004d02:	b2d2      	uxtb	r2, r2
 8004d04:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d0a:	b29b      	uxth	r3, r3
 8004d0c:	3b01      	subs	r3, #1
 8004d0e:	b29b      	uxth	r3, r3
 8004d10:	687a      	ldr	r2, [r7, #4]
 8004d12:	4619      	mov	r1, r3
 8004d14:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d120      	bne.n	8004d5c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	68da      	ldr	r2, [r3, #12]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f022 0220 	bic.w	r2, r2, #32
 8004d28:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	68da      	ldr	r2, [r3, #12]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004d38:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	695a      	ldr	r2, [r3, #20]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f022 0201 	bic.w	r2, r2, #1
 8004d48:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2220      	movs	r2, #32
 8004d4e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004d52:	6878      	ldr	r0, [r7, #4]
 8004d54:	f002 fd40 	bl	80077d8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8004d58:	2300      	movs	r3, #0
 8004d5a:	e002      	b.n	8004d62 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	e000      	b.n	8004d62 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8004d60:	2302      	movs	r3, #2
  }
 }
 8004d62:	4618      	mov	r0, r3
 8004d64:	3710      	adds	r7, #16
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}
	...

08004d6c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d6c:	b5b0      	push	{r4, r5, r7, lr}
 8004d6e:	b084      	sub	sp, #16
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	691b      	ldr	r3, [r3, #16]
 8004d7a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	68da      	ldr	r2, [r3, #12]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	430a      	orrs	r2, r1
 8004d88:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	689a      	ldr	r2, [r3, #8]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	691b      	ldr	r3, [r3, #16]
 8004d92:	431a      	orrs	r2, r3
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	695b      	ldr	r3, [r3, #20]
 8004d98:	431a      	orrs	r2, r3
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	69db      	ldr	r3, [r3, #28]
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	68db      	ldr	r3, [r3, #12]
 8004da8:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004dac:	f023 030c 	bic.w	r3, r3, #12
 8004db0:	687a      	ldr	r2, [r7, #4]
 8004db2:	6812      	ldr	r2, [r2, #0]
 8004db4:	68f9      	ldr	r1, [r7, #12]
 8004db6:	430b      	orrs	r3, r1
 8004db8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	695b      	ldr	r3, [r3, #20]
 8004dc0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	699a      	ldr	r2, [r3, #24]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	430a      	orrs	r2, r1
 8004dce:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	69db      	ldr	r3, [r3, #28]
 8004dd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004dd8:	f040 80e4 	bne.w	8004fa4 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4aab      	ldr	r2, [pc, #684]	; (8005090 <UART_SetConfig+0x324>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d004      	beq.n	8004df0 <UART_SetConfig+0x84>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4aaa      	ldr	r2, [pc, #680]	; (8005094 <UART_SetConfig+0x328>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d16c      	bne.n	8004eca <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8004df0:	f7fe fee0 	bl	8003bb4 <HAL_RCC_GetPCLK2Freq>
 8004df4:	4602      	mov	r2, r0
 8004df6:	4613      	mov	r3, r2
 8004df8:	009b      	lsls	r3, r3, #2
 8004dfa:	4413      	add	r3, r2
 8004dfc:	009a      	lsls	r2, r3, #2
 8004dfe:	441a      	add	r2, r3
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	005b      	lsls	r3, r3, #1
 8004e06:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e0a:	4aa3      	ldr	r2, [pc, #652]	; (8005098 <UART_SetConfig+0x32c>)
 8004e0c:	fba2 2303 	umull	r2, r3, r2, r3
 8004e10:	095b      	lsrs	r3, r3, #5
 8004e12:	011c      	lsls	r4, r3, #4
 8004e14:	f7fe fece 	bl	8003bb4 <HAL_RCC_GetPCLK2Freq>
 8004e18:	4602      	mov	r2, r0
 8004e1a:	4613      	mov	r3, r2
 8004e1c:	009b      	lsls	r3, r3, #2
 8004e1e:	4413      	add	r3, r2
 8004e20:	009a      	lsls	r2, r3, #2
 8004e22:	441a      	add	r2, r3
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	005b      	lsls	r3, r3, #1
 8004e2a:	fbb2 f5f3 	udiv	r5, r2, r3
 8004e2e:	f7fe fec1 	bl	8003bb4 <HAL_RCC_GetPCLK2Freq>
 8004e32:	4602      	mov	r2, r0
 8004e34:	4613      	mov	r3, r2
 8004e36:	009b      	lsls	r3, r3, #2
 8004e38:	4413      	add	r3, r2
 8004e3a:	009a      	lsls	r2, r3, #2
 8004e3c:	441a      	add	r2, r3
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	005b      	lsls	r3, r3, #1
 8004e44:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e48:	4a93      	ldr	r2, [pc, #588]	; (8005098 <UART_SetConfig+0x32c>)
 8004e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e4e:	095b      	lsrs	r3, r3, #5
 8004e50:	2264      	movs	r2, #100	; 0x64
 8004e52:	fb02 f303 	mul.w	r3, r2, r3
 8004e56:	1aeb      	subs	r3, r5, r3
 8004e58:	00db      	lsls	r3, r3, #3
 8004e5a:	3332      	adds	r3, #50	; 0x32
 8004e5c:	4a8e      	ldr	r2, [pc, #568]	; (8005098 <UART_SetConfig+0x32c>)
 8004e5e:	fba2 2303 	umull	r2, r3, r2, r3
 8004e62:	095b      	lsrs	r3, r3, #5
 8004e64:	005b      	lsls	r3, r3, #1
 8004e66:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004e6a:	441c      	add	r4, r3
 8004e6c:	f7fe fea2 	bl	8003bb4 <HAL_RCC_GetPCLK2Freq>
 8004e70:	4602      	mov	r2, r0
 8004e72:	4613      	mov	r3, r2
 8004e74:	009b      	lsls	r3, r3, #2
 8004e76:	4413      	add	r3, r2
 8004e78:	009a      	lsls	r2, r3, #2
 8004e7a:	441a      	add	r2, r3
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	005b      	lsls	r3, r3, #1
 8004e82:	fbb2 f5f3 	udiv	r5, r2, r3
 8004e86:	f7fe fe95 	bl	8003bb4 <HAL_RCC_GetPCLK2Freq>
 8004e8a:	4602      	mov	r2, r0
 8004e8c:	4613      	mov	r3, r2
 8004e8e:	009b      	lsls	r3, r3, #2
 8004e90:	4413      	add	r3, r2
 8004e92:	009a      	lsls	r2, r3, #2
 8004e94:	441a      	add	r2, r3
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	005b      	lsls	r3, r3, #1
 8004e9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ea0:	4a7d      	ldr	r2, [pc, #500]	; (8005098 <UART_SetConfig+0x32c>)
 8004ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ea6:	095b      	lsrs	r3, r3, #5
 8004ea8:	2264      	movs	r2, #100	; 0x64
 8004eaa:	fb02 f303 	mul.w	r3, r2, r3
 8004eae:	1aeb      	subs	r3, r5, r3
 8004eb0:	00db      	lsls	r3, r3, #3
 8004eb2:	3332      	adds	r3, #50	; 0x32
 8004eb4:	4a78      	ldr	r2, [pc, #480]	; (8005098 <UART_SetConfig+0x32c>)
 8004eb6:	fba2 2303 	umull	r2, r3, r2, r3
 8004eba:	095b      	lsrs	r3, r3, #5
 8004ebc:	f003 0207 	and.w	r2, r3, #7
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4422      	add	r2, r4
 8004ec6:	609a      	str	r2, [r3, #8]
 8004ec8:	e154      	b.n	8005174 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8004eca:	f7fe fe5f 	bl	8003b8c <HAL_RCC_GetPCLK1Freq>
 8004ece:	4602      	mov	r2, r0
 8004ed0:	4613      	mov	r3, r2
 8004ed2:	009b      	lsls	r3, r3, #2
 8004ed4:	4413      	add	r3, r2
 8004ed6:	009a      	lsls	r2, r3, #2
 8004ed8:	441a      	add	r2, r3
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	005b      	lsls	r3, r3, #1
 8004ee0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ee4:	4a6c      	ldr	r2, [pc, #432]	; (8005098 <UART_SetConfig+0x32c>)
 8004ee6:	fba2 2303 	umull	r2, r3, r2, r3
 8004eea:	095b      	lsrs	r3, r3, #5
 8004eec:	011c      	lsls	r4, r3, #4
 8004eee:	f7fe fe4d 	bl	8003b8c <HAL_RCC_GetPCLK1Freq>
 8004ef2:	4602      	mov	r2, r0
 8004ef4:	4613      	mov	r3, r2
 8004ef6:	009b      	lsls	r3, r3, #2
 8004ef8:	4413      	add	r3, r2
 8004efa:	009a      	lsls	r2, r3, #2
 8004efc:	441a      	add	r2, r3
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	005b      	lsls	r3, r3, #1
 8004f04:	fbb2 f5f3 	udiv	r5, r2, r3
 8004f08:	f7fe fe40 	bl	8003b8c <HAL_RCC_GetPCLK1Freq>
 8004f0c:	4602      	mov	r2, r0
 8004f0e:	4613      	mov	r3, r2
 8004f10:	009b      	lsls	r3, r3, #2
 8004f12:	4413      	add	r3, r2
 8004f14:	009a      	lsls	r2, r3, #2
 8004f16:	441a      	add	r2, r3
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	005b      	lsls	r3, r3, #1
 8004f1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f22:	4a5d      	ldr	r2, [pc, #372]	; (8005098 <UART_SetConfig+0x32c>)
 8004f24:	fba2 2303 	umull	r2, r3, r2, r3
 8004f28:	095b      	lsrs	r3, r3, #5
 8004f2a:	2264      	movs	r2, #100	; 0x64
 8004f2c:	fb02 f303 	mul.w	r3, r2, r3
 8004f30:	1aeb      	subs	r3, r5, r3
 8004f32:	00db      	lsls	r3, r3, #3
 8004f34:	3332      	adds	r3, #50	; 0x32
 8004f36:	4a58      	ldr	r2, [pc, #352]	; (8005098 <UART_SetConfig+0x32c>)
 8004f38:	fba2 2303 	umull	r2, r3, r2, r3
 8004f3c:	095b      	lsrs	r3, r3, #5
 8004f3e:	005b      	lsls	r3, r3, #1
 8004f40:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004f44:	441c      	add	r4, r3
 8004f46:	f7fe fe21 	bl	8003b8c <HAL_RCC_GetPCLK1Freq>
 8004f4a:	4602      	mov	r2, r0
 8004f4c:	4613      	mov	r3, r2
 8004f4e:	009b      	lsls	r3, r3, #2
 8004f50:	4413      	add	r3, r2
 8004f52:	009a      	lsls	r2, r3, #2
 8004f54:	441a      	add	r2, r3
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	005b      	lsls	r3, r3, #1
 8004f5c:	fbb2 f5f3 	udiv	r5, r2, r3
 8004f60:	f7fe fe14 	bl	8003b8c <HAL_RCC_GetPCLK1Freq>
 8004f64:	4602      	mov	r2, r0
 8004f66:	4613      	mov	r3, r2
 8004f68:	009b      	lsls	r3, r3, #2
 8004f6a:	4413      	add	r3, r2
 8004f6c:	009a      	lsls	r2, r3, #2
 8004f6e:	441a      	add	r2, r3
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	005b      	lsls	r3, r3, #1
 8004f76:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f7a:	4a47      	ldr	r2, [pc, #284]	; (8005098 <UART_SetConfig+0x32c>)
 8004f7c:	fba2 2303 	umull	r2, r3, r2, r3
 8004f80:	095b      	lsrs	r3, r3, #5
 8004f82:	2264      	movs	r2, #100	; 0x64
 8004f84:	fb02 f303 	mul.w	r3, r2, r3
 8004f88:	1aeb      	subs	r3, r5, r3
 8004f8a:	00db      	lsls	r3, r3, #3
 8004f8c:	3332      	adds	r3, #50	; 0x32
 8004f8e:	4a42      	ldr	r2, [pc, #264]	; (8005098 <UART_SetConfig+0x32c>)
 8004f90:	fba2 2303 	umull	r2, r3, r2, r3
 8004f94:	095b      	lsrs	r3, r3, #5
 8004f96:	f003 0207 	and.w	r2, r3, #7
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4422      	add	r2, r4
 8004fa0:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8004fa2:	e0e7      	b.n	8005174 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a39      	ldr	r2, [pc, #228]	; (8005090 <UART_SetConfig+0x324>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d004      	beq.n	8004fb8 <UART_SetConfig+0x24c>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a38      	ldr	r2, [pc, #224]	; (8005094 <UART_SetConfig+0x328>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d171      	bne.n	800509c <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8004fb8:	f7fe fdfc 	bl	8003bb4 <HAL_RCC_GetPCLK2Freq>
 8004fbc:	4602      	mov	r2, r0
 8004fbe:	4613      	mov	r3, r2
 8004fc0:	009b      	lsls	r3, r3, #2
 8004fc2:	4413      	add	r3, r2
 8004fc4:	009a      	lsls	r2, r3, #2
 8004fc6:	441a      	add	r2, r3
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	009b      	lsls	r3, r3, #2
 8004fce:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fd2:	4a31      	ldr	r2, [pc, #196]	; (8005098 <UART_SetConfig+0x32c>)
 8004fd4:	fba2 2303 	umull	r2, r3, r2, r3
 8004fd8:	095b      	lsrs	r3, r3, #5
 8004fda:	011c      	lsls	r4, r3, #4
 8004fdc:	f7fe fdea 	bl	8003bb4 <HAL_RCC_GetPCLK2Freq>
 8004fe0:	4602      	mov	r2, r0
 8004fe2:	4613      	mov	r3, r2
 8004fe4:	009b      	lsls	r3, r3, #2
 8004fe6:	4413      	add	r3, r2
 8004fe8:	009a      	lsls	r2, r3, #2
 8004fea:	441a      	add	r2, r3
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	009b      	lsls	r3, r3, #2
 8004ff2:	fbb2 f5f3 	udiv	r5, r2, r3
 8004ff6:	f7fe fddd 	bl	8003bb4 <HAL_RCC_GetPCLK2Freq>
 8004ffa:	4602      	mov	r2, r0
 8004ffc:	4613      	mov	r3, r2
 8004ffe:	009b      	lsls	r3, r3, #2
 8005000:	4413      	add	r3, r2
 8005002:	009a      	lsls	r2, r3, #2
 8005004:	441a      	add	r2, r3
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	009b      	lsls	r3, r3, #2
 800500c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005010:	4a21      	ldr	r2, [pc, #132]	; (8005098 <UART_SetConfig+0x32c>)
 8005012:	fba2 2303 	umull	r2, r3, r2, r3
 8005016:	095b      	lsrs	r3, r3, #5
 8005018:	2264      	movs	r2, #100	; 0x64
 800501a:	fb02 f303 	mul.w	r3, r2, r3
 800501e:	1aeb      	subs	r3, r5, r3
 8005020:	011b      	lsls	r3, r3, #4
 8005022:	3332      	adds	r3, #50	; 0x32
 8005024:	4a1c      	ldr	r2, [pc, #112]	; (8005098 <UART_SetConfig+0x32c>)
 8005026:	fba2 2303 	umull	r2, r3, r2, r3
 800502a:	095b      	lsrs	r3, r3, #5
 800502c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005030:	441c      	add	r4, r3
 8005032:	f7fe fdbf 	bl	8003bb4 <HAL_RCC_GetPCLK2Freq>
 8005036:	4602      	mov	r2, r0
 8005038:	4613      	mov	r3, r2
 800503a:	009b      	lsls	r3, r3, #2
 800503c:	4413      	add	r3, r2
 800503e:	009a      	lsls	r2, r3, #2
 8005040:	441a      	add	r2, r3
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	009b      	lsls	r3, r3, #2
 8005048:	fbb2 f5f3 	udiv	r5, r2, r3
 800504c:	f7fe fdb2 	bl	8003bb4 <HAL_RCC_GetPCLK2Freq>
 8005050:	4602      	mov	r2, r0
 8005052:	4613      	mov	r3, r2
 8005054:	009b      	lsls	r3, r3, #2
 8005056:	4413      	add	r3, r2
 8005058:	009a      	lsls	r2, r3, #2
 800505a:	441a      	add	r2, r3
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	009b      	lsls	r3, r3, #2
 8005062:	fbb2 f3f3 	udiv	r3, r2, r3
 8005066:	4a0c      	ldr	r2, [pc, #48]	; (8005098 <UART_SetConfig+0x32c>)
 8005068:	fba2 2303 	umull	r2, r3, r2, r3
 800506c:	095b      	lsrs	r3, r3, #5
 800506e:	2264      	movs	r2, #100	; 0x64
 8005070:	fb02 f303 	mul.w	r3, r2, r3
 8005074:	1aeb      	subs	r3, r5, r3
 8005076:	011b      	lsls	r3, r3, #4
 8005078:	3332      	adds	r3, #50	; 0x32
 800507a:	4a07      	ldr	r2, [pc, #28]	; (8005098 <UART_SetConfig+0x32c>)
 800507c:	fba2 2303 	umull	r2, r3, r2, r3
 8005080:	095b      	lsrs	r3, r3, #5
 8005082:	f003 020f 	and.w	r2, r3, #15
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4422      	add	r2, r4
 800508c:	609a      	str	r2, [r3, #8]
 800508e:	e071      	b.n	8005174 <UART_SetConfig+0x408>
 8005090:	40011000 	.word	0x40011000
 8005094:	40011400 	.word	0x40011400
 8005098:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800509c:	f7fe fd76 	bl	8003b8c <HAL_RCC_GetPCLK1Freq>
 80050a0:	4602      	mov	r2, r0
 80050a2:	4613      	mov	r3, r2
 80050a4:	009b      	lsls	r3, r3, #2
 80050a6:	4413      	add	r3, r2
 80050a8:	009a      	lsls	r2, r3, #2
 80050aa:	441a      	add	r2, r3
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	009b      	lsls	r3, r3, #2
 80050b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80050b6:	4a31      	ldr	r2, [pc, #196]	; (800517c <UART_SetConfig+0x410>)
 80050b8:	fba2 2303 	umull	r2, r3, r2, r3
 80050bc:	095b      	lsrs	r3, r3, #5
 80050be:	011c      	lsls	r4, r3, #4
 80050c0:	f7fe fd64 	bl	8003b8c <HAL_RCC_GetPCLK1Freq>
 80050c4:	4602      	mov	r2, r0
 80050c6:	4613      	mov	r3, r2
 80050c8:	009b      	lsls	r3, r3, #2
 80050ca:	4413      	add	r3, r2
 80050cc:	009a      	lsls	r2, r3, #2
 80050ce:	441a      	add	r2, r3
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	009b      	lsls	r3, r3, #2
 80050d6:	fbb2 f5f3 	udiv	r5, r2, r3
 80050da:	f7fe fd57 	bl	8003b8c <HAL_RCC_GetPCLK1Freq>
 80050de:	4602      	mov	r2, r0
 80050e0:	4613      	mov	r3, r2
 80050e2:	009b      	lsls	r3, r3, #2
 80050e4:	4413      	add	r3, r2
 80050e6:	009a      	lsls	r2, r3, #2
 80050e8:	441a      	add	r2, r3
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	009b      	lsls	r3, r3, #2
 80050f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80050f4:	4a21      	ldr	r2, [pc, #132]	; (800517c <UART_SetConfig+0x410>)
 80050f6:	fba2 2303 	umull	r2, r3, r2, r3
 80050fa:	095b      	lsrs	r3, r3, #5
 80050fc:	2264      	movs	r2, #100	; 0x64
 80050fe:	fb02 f303 	mul.w	r3, r2, r3
 8005102:	1aeb      	subs	r3, r5, r3
 8005104:	011b      	lsls	r3, r3, #4
 8005106:	3332      	adds	r3, #50	; 0x32
 8005108:	4a1c      	ldr	r2, [pc, #112]	; (800517c <UART_SetConfig+0x410>)
 800510a:	fba2 2303 	umull	r2, r3, r2, r3
 800510e:	095b      	lsrs	r3, r3, #5
 8005110:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005114:	441c      	add	r4, r3
 8005116:	f7fe fd39 	bl	8003b8c <HAL_RCC_GetPCLK1Freq>
 800511a:	4602      	mov	r2, r0
 800511c:	4613      	mov	r3, r2
 800511e:	009b      	lsls	r3, r3, #2
 8005120:	4413      	add	r3, r2
 8005122:	009a      	lsls	r2, r3, #2
 8005124:	441a      	add	r2, r3
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	009b      	lsls	r3, r3, #2
 800512c:	fbb2 f5f3 	udiv	r5, r2, r3
 8005130:	f7fe fd2c 	bl	8003b8c <HAL_RCC_GetPCLK1Freq>
 8005134:	4602      	mov	r2, r0
 8005136:	4613      	mov	r3, r2
 8005138:	009b      	lsls	r3, r3, #2
 800513a:	4413      	add	r3, r2
 800513c:	009a      	lsls	r2, r3, #2
 800513e:	441a      	add	r2, r3
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	009b      	lsls	r3, r3, #2
 8005146:	fbb2 f3f3 	udiv	r3, r2, r3
 800514a:	4a0c      	ldr	r2, [pc, #48]	; (800517c <UART_SetConfig+0x410>)
 800514c:	fba2 2303 	umull	r2, r3, r2, r3
 8005150:	095b      	lsrs	r3, r3, #5
 8005152:	2264      	movs	r2, #100	; 0x64
 8005154:	fb02 f303 	mul.w	r3, r2, r3
 8005158:	1aeb      	subs	r3, r5, r3
 800515a:	011b      	lsls	r3, r3, #4
 800515c:	3332      	adds	r3, #50	; 0x32
 800515e:	4a07      	ldr	r2, [pc, #28]	; (800517c <UART_SetConfig+0x410>)
 8005160:	fba2 2303 	umull	r2, r3, r2, r3
 8005164:	095b      	lsrs	r3, r3, #5
 8005166:	f003 020f 	and.w	r2, r3, #15
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4422      	add	r2, r4
 8005170:	609a      	str	r2, [r3, #8]
}
 8005172:	e7ff      	b.n	8005174 <UART_SetConfig+0x408>
 8005174:	bf00      	nop
 8005176:	3710      	adds	r7, #16
 8005178:	46bd      	mov	sp, r7
 800517a:	bdb0      	pop	{r4, r5, r7, pc}
 800517c:	51eb851f 	.word	0x51eb851f

08005180 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8005180:	b480      	push	{r7}
 8005182:	b085      	sub	sp, #20
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
 8005188:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 800518a:	2300      	movs	r3, #0
 800518c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 800518e:	2300      	movs	r3, #0
 8005190:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	2b01      	cmp	r3, #1
 8005198:	d029      	beq.n	80051ee <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80051a6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80051aa:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80051b4:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 80051ba:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 80051c0:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 80051c6:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 80051cc:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 80051d2:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 80051d8:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 80051de:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80051e0:	68fa      	ldr	r2, [r7, #12]
 80051e2:	4313      	orrs	r3, r2
 80051e4:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	68fa      	ldr	r2, [r7, #12]
 80051ea:	601a      	str	r2, [r3, #0]
 80051ec:	e034      	b.n	8005258 <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80051fa:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8005204:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800520a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800520c:	68fa      	ldr	r2, [r7, #12]
 800520e:	4313      	orrs	r3, r2
 8005210:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800521e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005222:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800522c:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 8005232:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 8005238:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 800523e:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 8005244:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005246:	68ba      	ldr	r2, [r7, #8]
 8005248:	4313      	orrs	r3, r2
 800524a:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	68fa      	ldr	r2, [r7, #12]
 8005250:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	68ba      	ldr	r2, [r7, #8]
 8005256:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 8005258:	2300      	movs	r3, #0
}
 800525a:	4618      	mov	r0, r3
 800525c:	3714      	adds	r7, #20
 800525e:	46bd      	mov	sp, r7
 8005260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005264:	4770      	bx	lr

08005266 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8005266:	b480      	push	{r7}
 8005268:	b087      	sub	sp, #28
 800526a:	af00      	add	r7, sp, #0
 800526c:	60f8      	str	r0, [r7, #12]
 800526e:	60b9      	str	r1, [r7, #8]
 8005270:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 8005272:	2300      	movs	r3, #0
 8005274:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 8005276:	2300      	movs	r3, #0
 8005278:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2b01      	cmp	r3, #1
 800527e:	d02e      	beq.n	80052de <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	689b      	ldr	r3, [r3, #8]
 8005284:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800528c:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	3b01      	subs	r3, #1
 800529a:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800529c:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	689b      	ldr	r3, [r3, #8]
 80052a2:	3b01      	subs	r3, #1
 80052a4:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 80052a6:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	68db      	ldr	r3, [r3, #12]
 80052ac:	3b01      	subs	r3, #1
 80052ae:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 80052b0:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	691b      	ldr	r3, [r3, #16]
 80052b6:	3b01      	subs	r3, #1
 80052b8:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 80052ba:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	695b      	ldr	r3, [r3, #20]
 80052c0:	3b01      	subs	r3, #1
 80052c2:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 80052c4:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	699b      	ldr	r3, [r3, #24]
 80052ca:	3b01      	subs	r3, #1
 80052cc:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80052ce:	4313      	orrs	r3, r2
 80052d0:	697a      	ldr	r2, [r7, #20]
 80052d2:	4313      	orrs	r3, r2
 80052d4:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	697a      	ldr	r2, [r7, #20]
 80052da:	609a      	str	r2, [r3, #8]
 80052dc:	e03b      	b.n	8005356 <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	689b      	ldr	r3, [r3, #8]
 80052e2:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80052ea:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80052ee:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	68db      	ldr	r3, [r3, #12]
 80052f4:	3b01      	subs	r3, #1
 80052f6:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	695b      	ldr	r3, [r3, #20]
 80052fc:	3b01      	subs	r3, #1
 80052fe:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8005300:	4313      	orrs	r3, r2
 8005302:	697a      	ldr	r2, [r7, #20]
 8005304:	4313      	orrs	r3, r2
 8005306:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	68db      	ldr	r3, [r3, #12]
 800530c:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005314:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	3b01      	subs	r3, #1
 8005322:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8005324:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	689b      	ldr	r3, [r3, #8]
 800532a:	3b01      	subs	r3, #1
 800532c:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 800532e:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	691b      	ldr	r3, [r3, #16]
 8005334:	3b01      	subs	r3, #1
 8005336:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8005338:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	699b      	ldr	r3, [r3, #24]
 800533e:	3b01      	subs	r3, #1
 8005340:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8005342:	4313      	orrs	r3, r2
 8005344:	693a      	ldr	r2, [r7, #16]
 8005346:	4313      	orrs	r3, r2
 8005348:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	697a      	ldr	r2, [r7, #20]
 800534e:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	693a      	ldr	r2, [r7, #16]
 8005354:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 8005356:	2300      	movs	r3, #0
}
 8005358:	4618      	mov	r0, r3
 800535a:	371c      	adds	r7, #28
 800535c:	46bd      	mov	sp, r7
 800535e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005362:	4770      	bx	lr

08005364 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b086      	sub	sp, #24
 8005368:	af00      	add	r7, sp, #0
 800536a:	60f8      	str	r0, [r7, #12]
 800536c:	60b9      	str	r1, [r7, #8]
 800536e:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0U;
 8005370:	2300      	movs	r3, #0
 8005372:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 8005374:	2300      	movs	r3, #0
 8005376:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8005380:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	689b      	ldr	r3, [r3, #8]
 8005386:	3b01      	subs	r3, #1
 8005388:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 800538a:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9U)
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	68db      	ldr	r3, [r3, #12]
 8005390:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8005392:	4313      	orrs	r3, r2
 8005394:	613b      	str	r3, [r7, #16]
                    );
    
  Device->SDCMR = tmpr;
 8005396:	693a      	ldr	r2, [r7, #16]
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	611a      	str	r2, [r3, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800539c:	f7fb f914 	bl	80005c8 <HAL_GetTick>
 80053a0:	6178      	str	r0, [r7, #20]

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 80053a2:	e010      	b.n	80053c6 <FMC_SDRAM_SendCommand+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053aa:	d00c      	beq.n	80053c6 <FMC_SDRAM_SendCommand+0x62>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d007      	beq.n	80053c2 <FMC_SDRAM_SendCommand+0x5e>
 80053b2:	f7fb f909 	bl	80005c8 <HAL_GetTick>
 80053b6:	4602      	mov	r2, r0
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	1ad3      	subs	r3, r2, r3
 80053bc:	687a      	ldr	r2, [r7, #4]
 80053be:	429a      	cmp	r2, r3
 80053c0:	d201      	bcs.n	80053c6 <FMC_SDRAM_SendCommand+0x62>
      {
        return HAL_TIMEOUT;
 80053c2:	2303      	movs	r3, #3
 80053c4:	e006      	b.n	80053d4 <FMC_SDRAM_SendCommand+0x70>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	699b      	ldr	r3, [r3, #24]
 80053ca:	f003 0320 	and.w	r3, r3, #32
 80053ce:	2b20      	cmp	r3, #32
 80053d0:	d0e8      	beq.n	80053a4 <FMC_SDRAM_SendCommand+0x40>
      }
    }
  }

  return HAL_OK;
 80053d2:	2300      	movs	r3, #0
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	3718      	adds	r7, #24
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}

080053dc <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 80053dc:	b480      	push	{r7}
 80053de:	b083      	sub	sp, #12
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
 80053e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	695a      	ldr	r2, [r3, #20]
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	005b      	lsls	r3, r3, #1
 80053ee:	431a      	orrs	r2, r3
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 80053f4:	2300      	movs	r3, #0
}
 80053f6:	4618      	mov	r0, r3
 80053f8:	370c      	adds	r7, #12
 80053fa:	46bd      	mov	sp, r7
 80053fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005400:	4770      	bx	lr
	...

08005404 <ft6x06_Init>:
  *         from MCU to FT6206 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval None
  */
void ft6x06_Init(uint16_t DeviceAddr)
{  
 8005404:	b580      	push	{r7, lr}
 8005406:	b084      	sub	sp, #16
 8005408:	af00      	add	r7, sp, #0
 800540a:	4603      	mov	r3, r0
 800540c:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;
  
  /* Check if device instance already exists */
  instance = ft6x06_GetInstance(DeviceAddr);
 800540e:	88fb      	ldrh	r3, [r7, #6]
 8005410:	4618      	mov	r0, r3
 8005412:	f000 f90d 	bl	8005630 <ft6x06_GetInstance>
 8005416:	4603      	mov	r3, r0
 8005418:	73fb      	strb	r3, [r7, #15]
  
  /* To prevent double initialization */
  if(instance == 0xFF)
 800541a:	7bfb      	ldrb	r3, [r7, #15]
 800541c:	2bff      	cmp	r3, #255	; 0xff
 800541e:	d10e      	bne.n	800543e <ft6x06_Init+0x3a>
  {
    /* Look for empty instance */
    empty = ft6x06_GetInstance(0);
 8005420:	2000      	movs	r0, #0
 8005422:	f000 f905 	bl	8005630 <ft6x06_GetInstance>
 8005426:	4603      	mov	r3, r0
 8005428:	73bb      	strb	r3, [r7, #14]
    
    if(empty < FT6x06_MAX_INSTANCE)
 800542a:	7bbb      	ldrb	r3, [r7, #14]
 800542c:	2b01      	cmp	r3, #1
 800542e:	d806      	bhi.n	800543e <ft6x06_Init+0x3a>
    {
      /* Register the current device instance */
      ft6x06[empty] = DeviceAddr;
 8005430:	7bbb      	ldrb	r3, [r7, #14]
 8005432:	88fa      	ldrh	r2, [r7, #6]
 8005434:	b2d1      	uxtb	r1, r2
 8005436:	4a04      	ldr	r2, [pc, #16]	; (8005448 <ft6x06_Init+0x44>)
 8005438:	54d1      	strb	r1, [r2, r3]
      
      /* Initialize IO BUS layer */
      TS_IO_Init(); 
 800543a:	f000 fcb1 	bl	8005da0 <TS_IO_Init>
    }
  }
}
 800543e:	bf00      	nop
 8005440:	3710      	adds	r7, #16
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}
 8005446:	bf00      	nop
 8005448:	200000b4 	.word	0x200000b4

0800544c <ft6x06_Reset>:
  *         @note : Not applicable to FT6206.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval None
  */
void ft6x06_Reset(uint16_t DeviceAddr)
{
 800544c:	b480      	push	{r7}
 800544e:	b083      	sub	sp, #12
 8005450:	af00      	add	r7, sp, #0
 8005452:	4603      	mov	r3, r0
 8005454:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT6206 IC */
}
 8005456:	bf00      	nop
 8005458:	370c      	adds	r7, #12
 800545a:	46bd      	mov	sp, r7
 800545c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005460:	4770      	bx	lr

08005462 <ft6x06_ReadID>:
  *         able to read the FT6206 device ID, and verify this is a FT6206.
  * @param  DeviceAddr: I2C FT6x06 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft6x06_ReadID(uint16_t DeviceAddr)
{
 8005462:	b580      	push	{r7, lr}
 8005464:	b082      	sub	sp, #8
 8005466:	af00      	add	r7, sp, #0
 8005468:	4603      	mov	r3, r0
 800546a:	80fb      	strh	r3, [r7, #6]
  /* Initialize I2C link if needed */
  TS_IO_Init();
 800546c:	f000 fc98 	bl	8005da0 <TS_IO_Init>
  
  /* Return the device ID value */
  return (TS_IO_Read(DeviceAddr, FT6206_CHIP_ID_REG));
 8005470:	88fb      	ldrh	r3, [r7, #6]
 8005472:	b2db      	uxtb	r3, r3
 8005474:	21a8      	movs	r1, #168	; 0xa8
 8005476:	4618      	mov	r0, r3
 8005478:	f000 fcab 	bl	8005dd2 <TS_IO_Read>
 800547c:	4603      	mov	r3, r0
 800547e:	b29b      	uxth	r3, r3
}
 8005480:	4618      	mov	r0, r3
 8005482:	3708      	adds	r7, #8
 8005484:	46bd      	mov	sp, r7
 8005486:	bd80      	pop	{r7, pc}

08005488 <ft6x06_TS_Start>:
  *         the touch screen).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft6x06_TS_Start(uint16_t DeviceAddr)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b082      	sub	sp, #8
 800548c:	af00      	add	r7, sp, #0
 800548e:	4603      	mov	r3, r0
 8005490:	80fb      	strh	r3, [r7, #6]
  /* Hw Calibration sequence start : should be done once after each power up */
  /* This is called internal calibration of the touch screen                 */
  ft6x06_TS_Calibration(DeviceAddr);
#endif
  /* Minimum static configuration of FT6206 */
  ft6x06_TS_Configure(DeviceAddr);
 8005492:	88fb      	ldrh	r3, [r7, #6]
 8005494:	4618      	mov	r0, r3
 8005496:	f000 f8bc 	bl	8005612 <ft6x06_TS_Configure>

  /* By default set FT6206 IC in Polling mode : no INT generation on FT6206 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft6x06_TS_DisableIT(DeviceAddr);
 800549a:	88fb      	ldrh	r3, [r7, #6]
 800549c:	4618      	mov	r0, r3
 800549e:	f000 f88d 	bl	80055bc <ft6x06_TS_DisableIT>
}
 80054a2:	bf00      	nop
 80054a4:	3708      	adds	r7, #8
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}
	...

080054ac <ft6x06_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft6x06_TS_DetectTouch(uint16_t DeviceAddr)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b084      	sub	sp, #16
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	4603      	mov	r3, r0
 80054b4:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 80054b6:	2300      	movs	r3, #0
 80054b8:	73fb      	strb	r3, [r7, #15]

  /* Read register FT6206_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT6206_TD_STAT_REG);
 80054ba:	88fb      	ldrh	r3, [r7, #6]
 80054bc:	b2db      	uxtb	r3, r3
 80054be:	2102      	movs	r1, #2
 80054c0:	4618      	mov	r0, r3
 80054c2:	f000 fc86 	bl	8005dd2 <TS_IO_Read>
 80054c6:	4603      	mov	r3, r0
 80054c8:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT6206_TD_STAT_MASK;
 80054ca:	7bfb      	ldrb	r3, [r7, #15]
 80054cc:	b2db      	uxtb	r3, r3
 80054ce:	f003 030f 	and.w	r3, r3, #15
 80054d2:	b2db      	uxtb	r3, r3
 80054d4:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT6206_MAX_DETECTABLE_TOUCH)
 80054d6:	7bfb      	ldrb	r3, [r7, #15]
 80054d8:	b2db      	uxtb	r3, r3
 80054da:	2b02      	cmp	r3, #2
 80054dc:	d901      	bls.n	80054e2 <ft6x06_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 80054de:	2300      	movs	r3, #0
 80054e0:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft6x06 driver internal global : current number of active touches */
  ft6x06_handle.currActiveTouchNb = nbTouch;
 80054e2:	7bfb      	ldrb	r3, [r7, #15]
 80054e4:	b2da      	uxtb	r2, r3
 80054e6:	4b05      	ldr	r3, [pc, #20]	; (80054fc <ft6x06_TS_DetectTouch+0x50>)
 80054e8:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft6x06_handle.currActiveTouchIdx = 0;
 80054ea:	4b04      	ldr	r3, [pc, #16]	; (80054fc <ft6x06_TS_DetectTouch+0x50>)
 80054ec:	2200      	movs	r2, #0
 80054ee:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 80054f0:	7bfb      	ldrb	r3, [r7, #15]
 80054f2:	b2db      	uxtb	r3, r3
}
 80054f4:	4618      	mov	r0, r3
 80054f6:	3710      	adds	r7, #16
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bd80      	pop	{r7, pc}
 80054fc:	200000b8 	.word	0x200000b8

08005500 <ft6x06_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft6x06_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b086      	sub	sp, #24
 8005504:	af00      	add	r7, sp, #0
 8005506:	4603      	mov	r3, r0
 8005508:	60b9      	str	r1, [r7, #8]
 800550a:	607a      	str	r2, [r7, #4]
 800550c:	81fb      	strh	r3, [r7, #14]
  uint8_t regAddress = 0;
 800550e:	2300      	movs	r3, #0
 8005510:	75fb      	strb	r3, [r7, #23]
  uint8_t  dataxy[4];
  
  if(ft6x06_handle.currActiveTouchIdx < ft6x06_handle.currActiveTouchNb)
 8005512:	4b1f      	ldr	r3, [pc, #124]	; (8005590 <ft6x06_TS_GetXY+0x90>)
 8005514:	789a      	ldrb	r2, [r3, #2]
 8005516:	4b1e      	ldr	r3, [pc, #120]	; (8005590 <ft6x06_TS_GetXY+0x90>)
 8005518:	785b      	ldrb	r3, [r3, #1]
 800551a:	429a      	cmp	r2, r3
 800551c:	d234      	bcs.n	8005588 <ft6x06_TS_GetXY+0x88>
  {
    switch(ft6x06_handle.currActiveTouchIdx)
 800551e:	4b1c      	ldr	r3, [pc, #112]	; (8005590 <ft6x06_TS_GetXY+0x90>)
 8005520:	789b      	ldrb	r3, [r3, #2]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d002      	beq.n	800552c <ft6x06_TS_GetXY+0x2c>
 8005526:	2b01      	cmp	r3, #1
 8005528:	d003      	beq.n	8005532 <ft6x06_TS_GetXY+0x32>
    case 1 :
      regAddress = FT6206_P2_XH_REG; 
      break;

    default :
      break;
 800552a:	e005      	b.n	8005538 <ft6x06_TS_GetXY+0x38>
      regAddress = FT6206_P1_XH_REG; 
 800552c:	2303      	movs	r3, #3
 800552e:	75fb      	strb	r3, [r7, #23]
      break;
 8005530:	e002      	b.n	8005538 <ft6x06_TS_GetXY+0x38>
      regAddress = FT6206_P2_XH_REG; 
 8005532:	2309      	movs	r3, #9
 8005534:	75fb      	strb	r3, [r7, #23]
      break;
 8005536:	bf00      	nop
    }
    
    /* Read X and Y positions */
    TS_IO_ReadMultiple(DeviceAddr, regAddress, dataxy, sizeof(dataxy)); 
 8005538:	89fb      	ldrh	r3, [r7, #14]
 800553a:	b2d8      	uxtb	r0, r3
 800553c:	f107 0210 	add.w	r2, r7, #16
 8005540:	7df9      	ldrb	r1, [r7, #23]
 8005542:	2304      	movs	r3, #4
 8005544:	f000 fc58 	bl	8005df8 <TS_IO_ReadMultiple>

    /* Send back ready X position to caller */
    *X = ((dataxy[0] & FT6206_MSB_MASK) << 8) | (dataxy[1] & FT6206_LSB_MASK);
 8005548:	7c3b      	ldrb	r3, [r7, #16]
 800554a:	021b      	lsls	r3, r3, #8
 800554c:	b21b      	sxth	r3, r3
 800554e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005552:	b21a      	sxth	r2, r3
 8005554:	7c7b      	ldrb	r3, [r7, #17]
 8005556:	b21b      	sxth	r3, r3
 8005558:	4313      	orrs	r3, r2
 800555a:	b21b      	sxth	r3, r3
 800555c:	b29a      	uxth	r2, r3
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	801a      	strh	r2, [r3, #0]
    
    /* Send back ready Y position to caller */
    *Y = ((dataxy[2] & FT6206_MSB_MASK) << 8) | (dataxy[3] & FT6206_LSB_MASK);
 8005562:	7cbb      	ldrb	r3, [r7, #18]
 8005564:	021b      	lsls	r3, r3, #8
 8005566:	b21b      	sxth	r3, r3
 8005568:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800556c:	b21a      	sxth	r2, r3
 800556e:	7cfb      	ldrb	r3, [r7, #19]
 8005570:	b21b      	sxth	r3, r3
 8005572:	4313      	orrs	r3, r2
 8005574:	b21b      	sxth	r3, r3
 8005576:	b29a      	uxth	r2, r3
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	801a      	strh	r2, [r3, #0]
    
    ft6x06_handle.currActiveTouchIdx++;
 800557c:	4b04      	ldr	r3, [pc, #16]	; (8005590 <ft6x06_TS_GetXY+0x90>)
 800557e:	789b      	ldrb	r3, [r3, #2]
 8005580:	3301      	adds	r3, #1
 8005582:	b2da      	uxtb	r2, r3
 8005584:	4b02      	ldr	r3, [pc, #8]	; (8005590 <ft6x06_TS_GetXY+0x90>)
 8005586:	709a      	strb	r2, [r3, #2]
  }
}
 8005588:	bf00      	nop
 800558a:	3718      	adds	r7, #24
 800558c:	46bd      	mov	sp, r7
 800558e:	bd80      	pop	{r7, pc}
 8005590:	200000b8 	.word	0x200000b8

08005594 <ft6x06_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT6206).
  * @retval None
  */
void ft6x06_TS_EnableIT(uint16_t DeviceAddr)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b084      	sub	sp, #16
 8005598:	af00      	add	r7, sp, #0
 800559a:	4603      	mov	r3, r0
 800559c:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 800559e:	2300      	movs	r3, #0
 80055a0:	73fb      	strb	r3, [r7, #15]
  regValue = (FT6206_G_MODE_INTERRUPT_TRIGGER & (FT6206_G_MODE_INTERRUPT_MASK >> FT6206_G_MODE_INTERRUPT_SHIFT)) << FT6206_G_MODE_INTERRUPT_SHIFT;
 80055a2:	2301      	movs	r3, #1
 80055a4:	73fb      	strb	r3, [r7, #15]
  
  /* Set interrupt trigger mode in FT6206_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT6206_GMODE_REG, regValue);
 80055a6:	88fb      	ldrh	r3, [r7, #6]
 80055a8:	b2db      	uxtb	r3, r3
 80055aa:	7bfa      	ldrb	r2, [r7, #15]
 80055ac:	21a4      	movs	r1, #164	; 0xa4
 80055ae:	4618      	mov	r0, r3
 80055b0:	f000 fbfc 	bl	8005dac <TS_IO_Write>
}
 80055b4:	bf00      	nop
 80055b6:	3710      	adds	r7, #16
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bd80      	pop	{r7, pc}

080055bc <ft6x06_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT6206).
  * @retval None
  */
void ft6x06_TS_DisableIT(uint16_t DeviceAddr)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b084      	sub	sp, #16
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	4603      	mov	r3, r0
 80055c4:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 80055c6:	2300      	movs	r3, #0
 80055c8:	73fb      	strb	r3, [r7, #15]
  regValue = (FT6206_G_MODE_INTERRUPT_POLLING & (FT6206_G_MODE_INTERRUPT_MASK >> FT6206_G_MODE_INTERRUPT_SHIFT)) << FT6206_G_MODE_INTERRUPT_SHIFT;
 80055ca:	2300      	movs	r3, #0
 80055cc:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT6206_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT6206_GMODE_REG, regValue);
 80055ce:	88fb      	ldrh	r3, [r7, #6]
 80055d0:	b2db      	uxtb	r3, r3
 80055d2:	7bfa      	ldrb	r2, [r7, #15]
 80055d4:	21a4      	movs	r1, #164	; 0xa4
 80055d6:	4618      	mov	r0, r3
 80055d8:	f000 fbe8 	bl	8005dac <TS_IO_Write>
}
 80055dc:	bf00      	nop
 80055de:	3710      	adds	r7, #16
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bd80      	pop	{r7, pc}

080055e4 <ft6x06_TS_ITStatus>:
  *         @note : This feature is not applicable to FT6206.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft6x06_TS_ITStatus(uint16_t DeviceAddr)
{
 80055e4:	b480      	push	{r7}
 80055e6:	b083      	sub	sp, #12
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	4603      	mov	r3, r0
 80055ec:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT6206 */
  return 0;
 80055ee:	2300      	movs	r3, #0
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	370c      	adds	r7, #12
 80055f4:	46bd      	mov	sp, r7
 80055f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fa:	4770      	bx	lr

080055fc <ft6x06_TS_ClearIT>:
  *         @note : This feature is not applicable to FT6206.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval None
  */
void ft6x06_TS_ClearIT(uint16_t DeviceAddr)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b083      	sub	sp, #12
 8005600:	af00      	add	r7, sp, #0
 8005602:	4603      	mov	r3, r0
 8005604:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT6206 */
}
 8005606:	bf00      	nop
 8005608:	370c      	adds	r7, #12
 800560a:	46bd      	mov	sp, r7
 800560c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005610:	4770      	bx	lr

08005612 <ft6x06_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT6206 Device address for communication on I2C Bus.
  * @retval Status FT6206_STATUS_OK or FT6206_STATUS_NOT_OK.
  */
static uint32_t ft6x06_TS_Configure(uint16_t DeviceAddr)
{
 8005612:	b480      	push	{r7}
 8005614:	b085      	sub	sp, #20
 8005616:	af00      	add	r7, sp, #0
 8005618:	4603      	mov	r3, r0
 800561a:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT6206_STATUS_OK;
 800561c:	2300      	movs	r3, #0
 800561e:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT6206 */

  return(status);
 8005620:	68fb      	ldr	r3, [r7, #12]
}
 8005622:	4618      	mov	r0, r3
 8005624:	3714      	adds	r7, #20
 8005626:	46bd      	mov	sp, r7
 8005628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562c:	4770      	bx	lr
	...

08005630 <ft6x06_GetInstance>:
  *         and return its index  
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t ft6x06_GetInstance(uint16_t DeviceAddr)
{
 8005630:	b480      	push	{r7}
 8005632:	b085      	sub	sp, #20
 8005634:	af00      	add	r7, sp, #0
 8005636:	4603      	mov	r3, r0
 8005638:	80fb      	strh	r3, [r7, #6]
  uint8_t idx = 0;
 800563a:	2300      	movs	r3, #0
 800563c:	73fb      	strb	r3, [r7, #15]
  
  /* Check all the registered instances */
  for(idx = 0; idx < FT6x06_MAX_INSTANCE ; idx ++)
 800563e:	2300      	movs	r3, #0
 8005640:	73fb      	strb	r3, [r7, #15]
 8005642:	e00b      	b.n	800565c <ft6x06_GetInstance+0x2c>
  {
    if(ft6x06[idx] == DeviceAddr)
 8005644:	7bfb      	ldrb	r3, [r7, #15]
 8005646:	4a0a      	ldr	r2, [pc, #40]	; (8005670 <ft6x06_GetInstance+0x40>)
 8005648:	5cd3      	ldrb	r3, [r2, r3]
 800564a:	b29b      	uxth	r3, r3
 800564c:	88fa      	ldrh	r2, [r7, #6]
 800564e:	429a      	cmp	r2, r3
 8005650:	d101      	bne.n	8005656 <ft6x06_GetInstance+0x26>
    {
      return idx; 
 8005652:	7bfb      	ldrb	r3, [r7, #15]
 8005654:	e006      	b.n	8005664 <ft6x06_GetInstance+0x34>
  for(idx = 0; idx < FT6x06_MAX_INSTANCE ; idx ++)
 8005656:	7bfb      	ldrb	r3, [r7, #15]
 8005658:	3301      	adds	r3, #1
 800565a:	73fb      	strb	r3, [r7, #15]
 800565c:	7bfb      	ldrb	r3, [r7, #15]
 800565e:	2b01      	cmp	r3, #1
 8005660:	d9f0      	bls.n	8005644 <ft6x06_GetInstance+0x14>
    }
  }
  
  return 0xFF;
 8005662:	23ff      	movs	r3, #255	; 0xff
}
 8005664:	4618      	mov	r0, r3
 8005666:	3714      	adds	r7, #20
 8005668:	46bd      	mov	sp, r7
 800566a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566e:	4770      	bx	lr
 8005670:	200000b4 	.word	0x200000b4

08005674 <OTM8009A_Init>:
  * @param  hdsi_eval : pointer on DSI configuration structure
  * @param  hdsivideo_handle : pointer on DSI video mode configuration structure
  * @retval Status
  */
uint8_t OTM8009A_Init(uint32_t ColorCoding, uint32_t orientation)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b082      	sub	sp, #8
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
 800567c:	6039      	str	r1, [r7, #0]
  /* Enable CMD2 to access vendor specific commands                               */
  /* Enter in command 2 mode and set EXTC to enable address shift function (0x00) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 800567e:	49c1      	ldr	r1, [pc, #772]	; (8005984 <OTM8009A_Init+0x310>)
 8005680:	2000      	movs	r0, #0
 8005682:	f000 ff83 	bl	800658c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData1);
 8005686:	49c0      	ldr	r1, [pc, #768]	; (8005988 <OTM8009A_Init+0x314>)
 8005688:	2003      	movs	r0, #3
 800568a:	f000 ff7f 	bl	800658c <DSI_IO_WriteCmd>

  /* Enter ORISE Command 2 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2); /* Shift address to 0x80 */
 800568e:	49bf      	ldr	r1, [pc, #764]	; (800598c <OTM8009A_Init+0x318>)
 8005690:	2000      	movs	r0, #0
 8005692:	f000 ff7b 	bl	800658c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData2);
 8005696:	49be      	ldr	r1, [pc, #760]	; (8005990 <OTM8009A_Init+0x31c>)
 8005698:	2002      	movs	r0, #2
 800569a:	f000 ff77 	bl	800658c <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////
  /* SD_PCH_CTRL - 0xC480h - 129th parameter - Default 0x00          */
  /* Set SD_PT                                                       */
  /* -> Source output level during porch and non-display area to GND */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 800569e:	49bb      	ldr	r1, [pc, #748]	; (800598c <OTM8009A_Init+0x318>)
 80056a0:	2000      	movs	r0, #0
 80056a2:	f000 ff73 	bl	800658c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData3);
 80056a6:	49bb      	ldr	r1, [pc, #748]	; (8005994 <OTM8009A_Init+0x320>)
 80056a8:	2000      	movs	r0, #0
 80056aa:	f000 ff6f 	bl	800658c <DSI_IO_WriteCmd>
  OTM8009A_IO_Delay(10);
 80056ae:	200a      	movs	r0, #10
 80056b0:	f000 fbbc 	bl	8005e2c <OTM8009A_IO_Delay>
  /* Not documented */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData4);
 80056b4:	49b8      	ldr	r1, [pc, #736]	; (8005998 <OTM8009A_Init+0x324>)
 80056b6:	2000      	movs	r0, #0
 80056b8:	f000 ff68 	bl	800658c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData5);
 80056bc:	49b7      	ldr	r1, [pc, #732]	; (800599c <OTM8009A_Init+0x328>)
 80056be:	2000      	movs	r0, #0
 80056c0:	f000 ff64 	bl	800658c <DSI_IO_WriteCmd>
  OTM8009A_IO_Delay(10);
 80056c4:	200a      	movs	r0, #10
 80056c6:	f000 fbb1 	bl	8005e2c <OTM8009A_IO_Delay>
  /////////////////////////////////////////////////////////////////////

  /* PWR_CTRL4 - 0xC4B0h - 178th parameter - Default 0xA8 */
  /* Set gvdd_en_test                                     */
  /* -> enable GVDD test mode !!!                         */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData6);
 80056ca:	49b5      	ldr	r1, [pc, #724]	; (80059a0 <OTM8009A_Init+0x32c>)
 80056cc:	2000      	movs	r0, #0
 80056ce:	f000 ff5d 	bl	800658c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData7);
 80056d2:	49b4      	ldr	r1, [pc, #720]	; (80059a4 <OTM8009A_Init+0x330>)
 80056d4:	2000      	movs	r0, #0
 80056d6:	f000 ff59 	bl	800658c <DSI_IO_WriteCmd>
  /* PWR_CTRL2 - 0xC590h - 146th parameter - Default 0x79      */
  /* Set pump 4 vgh voltage                                    */
  /* -> from 15.0v down to 13.0v                               */
  /* Set pump 5 vgh voltage                                    */
  /* -> from -12.0v downto -9.0v                               */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData8);
 80056da:	49b3      	ldr	r1, [pc, #716]	; (80059a8 <OTM8009A_Init+0x334>)
 80056dc:	2000      	movs	r0, #0
 80056de:	f000 ff55 	bl	800658c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 80056e2:	49b2      	ldr	r1, [pc, #712]	; (80059ac <OTM8009A_Init+0x338>)
 80056e4:	2000      	movs	r0, #0
 80056e6:	f000 ff51 	bl	800658c <DSI_IO_WriteCmd>

  /* P_DRV_M - 0xC0B4h - 181th parameter - Default 0x00 */
  /* -> Column inversion                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData10);
 80056ea:	49b1      	ldr	r1, [pc, #708]	; (80059b0 <OTM8009A_Init+0x33c>)
 80056ec:	2000      	movs	r0, #0
 80056ee:	f000 ff4d 	bl	800658c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData11);
 80056f2:	49b0      	ldr	r1, [pc, #704]	; (80059b4 <OTM8009A_Init+0x340>)
 80056f4:	2000      	movs	r0, #0
 80056f6:	f000 ff49 	bl	800658c <DSI_IO_WriteCmd>

  /* VCOMDC - 0xD900h - 1st parameter - Default 0x39h */
  /* VCOM Voltage settings                            */
  /* -> from -1.0000v downto -1.2625v                 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80056fa:	49a2      	ldr	r1, [pc, #648]	; (8005984 <OTM8009A_Init+0x310>)
 80056fc:	2000      	movs	r0, #0
 80056fe:	f000 ff45 	bl	800658c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData12);
 8005702:	49ad      	ldr	r1, [pc, #692]	; (80059b8 <OTM8009A_Init+0x344>)
 8005704:	2000      	movs	r0, #0
 8005706:	f000 ff41 	bl	800658c <DSI_IO_WriteCmd>

  /* Oscillator adjustment for Idle/Normal mode (LPDT only) set to 65Hz (default is 60Hz) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 800570a:	49ac      	ldr	r1, [pc, #688]	; (80059bc <OTM8009A_Init+0x348>)
 800570c:	2000      	movs	r0, #0
 800570e:	f000 ff3d 	bl	800658c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData14);
 8005712:	49ab      	ldr	r1, [pc, #684]	; (80059c0 <OTM8009A_Init+0x34c>)
 8005714:	2000      	movs	r0, #0
 8005716:	f000 ff39 	bl	800658c <DSI_IO_WriteCmd>

  /* Video mode internal */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 800571a:	49aa      	ldr	r1, [pc, #680]	; (80059c4 <OTM8009A_Init+0x350>)
 800571c:	2000      	movs	r0, #0
 800571e:	f000 ff35 	bl	800658c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData16);
 8005722:	49a9      	ldr	r1, [pc, #676]	; (80059c8 <OTM8009A_Init+0x354>)
 8005724:	2000      	movs	r0, #0
 8005726:	f000 ff31 	bl	800658c <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 147h parameter - Default 0x00 */
  /* Set pump 4&5 x6                                     */
  /* -> ONLY VALID when PUMP4_EN_ASDM_HV = "0"           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData17);
 800572a:	49a8      	ldr	r1, [pc, #672]	; (80059cc <OTM8009A_Init+0x358>)
 800572c:	2000      	movs	r0, #0
 800572e:	f000 ff2d 	bl	800658c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData18);
 8005732:	49a7      	ldr	r1, [pc, #668]	; (80059d0 <OTM8009A_Init+0x35c>)
 8005734:	2000      	movs	r0, #0
 8005736:	f000 ff29 	bl	800658c <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 150th parameter - Default 0x33h */
  /* Change pump4 clock ratio                              */
  /* -> from 1 line to 1/2 line                            */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData19);
 800573a:	49a6      	ldr	r1, [pc, #664]	; (80059d4 <OTM8009A_Init+0x360>)
 800573c:	2000      	movs	r0, #0
 800573e:	f000 ff25 	bl	800658c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 8005742:	499a      	ldr	r1, [pc, #616]	; (80059ac <OTM8009A_Init+0x338>)
 8005744:	2000      	movs	r0, #0
 8005746:	f000 ff21 	bl	800658c <DSI_IO_WriteCmd>

  /* GVDD/NGVDD settings */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 800574a:	498e      	ldr	r1, [pc, #568]	; (8005984 <OTM8009A_Init+0x310>)
 800574c:	2000      	movs	r0, #0
 800574e:	f000 ff1d 	bl	800658c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData5);
 8005752:	49a1      	ldr	r1, [pc, #644]	; (80059d8 <OTM8009A_Init+0x364>)
 8005754:	2002      	movs	r0, #2
 8005756:	f000 ff19 	bl	800658c <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 149th parameter - Default 0x33h */
  /* Rewrite the default value !                           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData20);
 800575a:	49a0      	ldr	r1, [pc, #640]	; (80059dc <OTM8009A_Init+0x368>)
 800575c:	2000      	movs	r0, #0
 800575e:	f000 ff15 	bl	800658c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData21);
 8005762:	499f      	ldr	r1, [pc, #636]	; (80059e0 <OTM8009A_Init+0x36c>)
 8005764:	2000      	movs	r0, #0
 8005766:	f000 ff11 	bl	800658c <DSI_IO_WriteCmd>

  /* Panel display timing Setting 3 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData22);
 800576a:	499e      	ldr	r1, [pc, #632]	; (80059e4 <OTM8009A_Init+0x370>)
 800576c:	2000      	movs	r0, #0
 800576e:	f000 ff0d 	bl	800658c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData23);
 8005772:	499d      	ldr	r1, [pc, #628]	; (80059e8 <OTM8009A_Init+0x374>)
 8005774:	2000      	movs	r0, #0
 8005776:	f000 ff09 	bl	800658c <DSI_IO_WriteCmd>

  /* Power control 1 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData24);
 800577a:	499c      	ldr	r1, [pc, #624]	; (80059ec <OTM8009A_Init+0x378>)
 800577c:	2000      	movs	r0, #0
 800577e:	f000 ff05 	bl	800658c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData25);
 8005782:	499b      	ldr	r1, [pc, #620]	; (80059f0 <OTM8009A_Init+0x37c>)
 8005784:	2000      	movs	r0, #0
 8005786:	f000 ff01 	bl	800658c <DSI_IO_WriteCmd>

  /* Source driver precharge */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 800578a:	498c      	ldr	r1, [pc, #560]	; (80059bc <OTM8009A_Init+0x348>)
 800578c:	2000      	movs	r0, #0
 800578e:	f000 fefd 	bl	800658c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData26);
 8005792:	4998      	ldr	r1, [pc, #608]	; (80059f4 <OTM8009A_Init+0x380>)
 8005794:	2000      	movs	r0, #0
 8005796:	f000 fef9 	bl	800658c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 800579a:	498a      	ldr	r1, [pc, #552]	; (80059c4 <OTM8009A_Init+0x350>)
 800579c:	2000      	movs	r0, #0
 800579e:	f000 fef5 	bl	800658c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData27);
 80057a2:	4995      	ldr	r1, [pc, #596]	; (80059f8 <OTM8009A_Init+0x384>)
 80057a4:	2000      	movs	r0, #0
 80057a6:	f000 fef1 	bl	800658c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData28);
 80057aa:	4994      	ldr	r1, [pc, #592]	; (80059fc <OTM8009A_Init+0x388>)
 80057ac:	2000      	movs	r0, #0
 80057ae:	f000 feed 	bl	800658c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData6);
 80057b2:	4993      	ldr	r1, [pc, #588]	; (8005a00 <OTM8009A_Init+0x38c>)
 80057b4:	2002      	movs	r0, #2
 80057b6:	f000 fee9 	bl	800658c <DSI_IO_WriteCmd>

  /* GOAVST */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 80057ba:	4974      	ldr	r1, [pc, #464]	; (800598c <OTM8009A_Init+0x318>)
 80057bc:	2000      	movs	r0, #0
 80057be:	f000 fee5 	bl	800658c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 6, (uint8_t *)lcdRegData7);
 80057c2:	4990      	ldr	r1, [pc, #576]	; (8005a04 <OTM8009A_Init+0x390>)
 80057c4:	2006      	movs	r0, #6
 80057c6:	f000 fee1 	bl	800658c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 80057ca:	498f      	ldr	r1, [pc, #572]	; (8005a08 <OTM8009A_Init+0x394>)
 80057cc:	2000      	movs	r0, #0
 80057ce:	f000 fedd 	bl	800658c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData8);
 80057d2:	498e      	ldr	r1, [pc, #568]	; (8005a0c <OTM8009A_Init+0x398>)
 80057d4:	200e      	movs	r0, #14
 80057d6:	f000 fed9 	bl	800658c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 80057da:	498d      	ldr	r1, [pc, #564]	; (8005a10 <OTM8009A_Init+0x39c>)
 80057dc:	2000      	movs	r0, #0
 80057de:	f000 fed5 	bl	800658c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData9);
 80057e2:	498c      	ldr	r1, [pc, #560]	; (8005a14 <OTM8009A_Init+0x3a0>)
 80057e4:	200e      	movs	r0, #14
 80057e6:	f000 fed1 	bl	800658c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 80057ea:	498b      	ldr	r1, [pc, #556]	; (8005a18 <OTM8009A_Init+0x3a4>)
 80057ec:	2000      	movs	r0, #0
 80057ee:	f000 fecd 	bl	800658c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData10);
 80057f2:	498a      	ldr	r1, [pc, #552]	; (8005a1c <OTM8009A_Init+0x3a8>)
 80057f4:	200a      	movs	r0, #10
 80057f6:	f000 fec9 	bl	800658c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 80057fa:	4989      	ldr	r1, [pc, #548]	; (8005a20 <OTM8009A_Init+0x3ac>)
 80057fc:	2000      	movs	r0, #0
 80057fe:	f000 fec5 	bl	800658c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData46);
 8005802:	4988      	ldr	r1, [pc, #544]	; (8005a24 <OTM8009A_Init+0x3b0>)
 8005804:	2000      	movs	r0, #0
 8005806:	f000 fec1 	bl	800658c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 800580a:	4960      	ldr	r1, [pc, #384]	; (800598c <OTM8009A_Init+0x318>)
 800580c:	2000      	movs	r0, #0
 800580e:	f000 febd 	bl	800658c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData11);
 8005812:	4985      	ldr	r1, [pc, #532]	; (8005a28 <OTM8009A_Init+0x3b4>)
 8005814:	200a      	movs	r0, #10
 8005816:	f000 feb9 	bl	800658c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 800581a:	4984      	ldr	r1, [pc, #528]	; (8005a2c <OTM8009A_Init+0x3b8>)
 800581c:	2000      	movs	r0, #0
 800581e:	f000 feb5 	bl	800658c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData12);
 8005822:	4983      	ldr	r1, [pc, #524]	; (8005a30 <OTM8009A_Init+0x3bc>)
 8005824:	200f      	movs	r0, #15
 8005826:	f000 feb1 	bl	800658c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 800582a:	4977      	ldr	r1, [pc, #476]	; (8005a08 <OTM8009A_Init+0x394>)
 800582c:	2000      	movs	r0, #0
 800582e:	f000 fead 	bl	800658c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData13);
 8005832:	4980      	ldr	r1, [pc, #512]	; (8005a34 <OTM8009A_Init+0x3c0>)
 8005834:	200f      	movs	r0, #15
 8005836:	f000 fea9 	bl	800658c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 800583a:	4975      	ldr	r1, [pc, #468]	; (8005a10 <OTM8009A_Init+0x39c>)
 800583c:	2000      	movs	r0, #0
 800583e:	f000 fea5 	bl	800658c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData14);
 8005842:	497d      	ldr	r1, [pc, #500]	; (8005a38 <OTM8009A_Init+0x3c4>)
 8005844:	200a      	movs	r0, #10
 8005846:	f000 fea1 	bl	800658c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 800584a:	4973      	ldr	r1, [pc, #460]	; (8005a18 <OTM8009A_Init+0x3a4>)
 800584c:	2000      	movs	r0, #0
 800584e:	f000 fe9d 	bl	800658c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData15);
 8005852:	497a      	ldr	r1, [pc, #488]	; (8005a3c <OTM8009A_Init+0x3c8>)
 8005854:	200f      	movs	r0, #15
 8005856:	f000 fe99 	bl	800658c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 800585a:	4971      	ldr	r1, [pc, #452]	; (8005a20 <OTM8009A_Init+0x3ac>)
 800585c:	2000      	movs	r0, #0
 800585e:	f000 fe95 	bl	800658c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData16);
 8005862:	4977      	ldr	r1, [pc, #476]	; (8005a40 <OTM8009A_Init+0x3cc>)
 8005864:	200f      	movs	r0, #15
 8005866:	f000 fe91 	bl	800658c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData34);
 800586a:	4976      	ldr	r1, [pc, #472]	; (8005a44 <OTM8009A_Init+0x3d0>)
 800586c:	2000      	movs	r0, #0
 800586e:	f000 fe8d 	bl	800658c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData17);
 8005872:	4975      	ldr	r1, [pc, #468]	; (8005a48 <OTM8009A_Init+0x3d4>)
 8005874:	200a      	movs	r0, #10
 8005876:	f000 fe89 	bl	800658c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData35);
 800587a:	4974      	ldr	r1, [pc, #464]	; (8005a4c <OTM8009A_Init+0x3d8>)
 800587c:	2000      	movs	r0, #0
 800587e:	f000 fe85 	bl	800658c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData18);
 8005882:	4973      	ldr	r1, [pc, #460]	; (8005a50 <OTM8009A_Init+0x3dc>)
 8005884:	200a      	movs	r0, #10
 8005886:	f000 fe81 	bl	800658c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 800588a:	4940      	ldr	r1, [pc, #256]	; (800598c <OTM8009A_Init+0x318>)
 800588c:	2000      	movs	r0, #0
 800588e:	f000 fe7d 	bl	800658c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData19);
 8005892:	4970      	ldr	r1, [pc, #448]	; (8005a54 <OTM8009A_Init+0x3e0>)
 8005894:	200a      	movs	r0, #10
 8005896:	f000 fe79 	bl	800658c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 800589a:	4964      	ldr	r1, [pc, #400]	; (8005a2c <OTM8009A_Init+0x3b8>)
 800589c:	2000      	movs	r0, #0
 800589e:	f000 fe75 	bl	800658c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData20);
 80058a2:	496d      	ldr	r1, [pc, #436]	; (8005a58 <OTM8009A_Init+0x3e4>)
 80058a4:	200f      	movs	r0, #15
 80058a6:	f000 fe71 	bl	800658c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 80058aa:	4957      	ldr	r1, [pc, #348]	; (8005a08 <OTM8009A_Init+0x394>)
 80058ac:	2000      	movs	r0, #0
 80058ae:	f000 fe6d 	bl	800658c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData21);
 80058b2:	496a      	ldr	r1, [pc, #424]	; (8005a5c <OTM8009A_Init+0x3e8>)
 80058b4:	200f      	movs	r0, #15
 80058b6:	f000 fe69 	bl	800658c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 80058ba:	4955      	ldr	r1, [pc, #340]	; (8005a10 <OTM8009A_Init+0x39c>)
 80058bc:	2000      	movs	r0, #0
 80058be:	f000 fe65 	bl	800658c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData22);
 80058c2:	4967      	ldr	r1, [pc, #412]	; (8005a60 <OTM8009A_Init+0x3ec>)
 80058c4:	200a      	movs	r0, #10
 80058c6:	f000 fe61 	bl	800658c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 80058ca:	4953      	ldr	r1, [pc, #332]	; (8005a18 <OTM8009A_Init+0x3a4>)
 80058cc:	2000      	movs	r0, #0
 80058ce:	f000 fe5d 	bl	800658c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData23);
 80058d2:	4964      	ldr	r1, [pc, #400]	; (8005a64 <OTM8009A_Init+0x3f0>)
 80058d4:	200f      	movs	r0, #15
 80058d6:	f000 fe59 	bl	800658c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 80058da:	4951      	ldr	r1, [pc, #324]	; (8005a20 <OTM8009A_Init+0x3ac>)
 80058dc:	2000      	movs	r0, #0
 80058de:	f000 fe55 	bl	800658c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData24);
 80058e2:	4961      	ldr	r1, [pc, #388]	; (8005a68 <OTM8009A_Init+0x3f4>)
 80058e4:	200f      	movs	r0, #15
 80058e6:	f000 fe51 	bl	800658c <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////////////
  /* PWR_CTRL1 - 0xc580h - 130th parameter - default 0x00 */
  /* Pump 1 min and max DM                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 80058ea:	4934      	ldr	r1, [pc, #208]	; (80059bc <OTM8009A_Init+0x348>)
 80058ec:	2000      	movs	r0, #0
 80058ee:	f000 fe4d 	bl	800658c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData47);
 80058f2:	495e      	ldr	r1, [pc, #376]	; (8005a6c <OTM8009A_Init+0x3f8>)
 80058f4:	2000      	movs	r0, #0
 80058f6:	f000 fe49 	bl	800658c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData48);
 80058fa:	495d      	ldr	r1, [pc, #372]	; (8005a70 <OTM8009A_Init+0x3fc>)
 80058fc:	2000      	movs	r0, #0
 80058fe:	f000 fe45 	bl	800658c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData49);
 8005902:	495c      	ldr	r1, [pc, #368]	; (8005a74 <OTM8009A_Init+0x400>)
 8005904:	2000      	movs	r0, #0
 8005906:	f000 fe41 	bl	800658c <DSI_IO_WriteCmd>
  /////////////////////////////////////////////////////////////////////////////

  /* CABC LEDPWM frequency adjusted to 19,5kHz */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData50);
 800590a:	495b      	ldr	r1, [pc, #364]	; (8005a78 <OTM8009A_Init+0x404>)
 800590c:	2000      	movs	r0, #0
 800590e:	f000 fe3d 	bl	800658c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData51);
 8005912:	495a      	ldr	r1, [pc, #360]	; (8005a7c <OTM8009A_Init+0x408>)
 8005914:	2000      	movs	r0, #0
 8005916:	f000 fe39 	bl	800658c <DSI_IO_WriteCmd>
  
  /* Exit CMD2 mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 800591a:	491a      	ldr	r1, [pc, #104]	; (8005984 <OTM8009A_Init+0x310>)
 800591c:	2000      	movs	r0, #0
 800591e:	f000 fe35 	bl	800658c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData25);
 8005922:	4957      	ldr	r1, [pc, #348]	; (8005a80 <OTM8009A_Init+0x40c>)
 8005924:	2003      	movs	r0, #3
 8005926:	f000 fe31 	bl	800658c <DSI_IO_WriteCmd>
  /*************************************************************************** */
  /* Standard DCS Initialization TO KEEP CAN BE DONE IN HSDT                   */
  /*************************************************************************** */

  /* NOP - goes back to DCS std command ? */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 800592a:	4916      	ldr	r1, [pc, #88]	; (8005984 <OTM8009A_Init+0x310>)
 800592c:	2000      	movs	r0, #0
 800592e:	f000 fe2d 	bl	800658c <DSI_IO_WriteCmd>
          
  /* Gamma correction 2.2+ table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8005932:	4914      	ldr	r1, [pc, #80]	; (8005984 <OTM8009A_Init+0x310>)
 8005934:	2000      	movs	r0, #0
 8005936:	f000 fe29 	bl	800658c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData3);
 800593a:	4952      	ldr	r1, [pc, #328]	; (8005a84 <OTM8009A_Init+0x410>)
 800593c:	2010      	movs	r0, #16
 800593e:	f000 fe25 	bl	800658c <DSI_IO_WriteCmd>
  
  /* Gamma correction 2.2- table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8005942:	4910      	ldr	r1, [pc, #64]	; (8005984 <OTM8009A_Init+0x310>)
 8005944:	2000      	movs	r0, #0
 8005946:	f000 fe21 	bl	800658c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData4);
 800594a:	494f      	ldr	r1, [pc, #316]	; (8005a88 <OTM8009A_Init+0x414>)
 800594c:	2010      	movs	r0, #16
 800594e:	f000 fe1d 	bl	800658c <DSI_IO_WriteCmd>
          
  /* Send Sleep Out command to display : no parameter */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData36);
 8005952:	494e      	ldr	r1, [pc, #312]	; (8005a8c <OTM8009A_Init+0x418>)
 8005954:	2000      	movs	r0, #0
 8005956:	f000 fe19 	bl	800658c <DSI_IO_WriteCmd>
  
  /* Wait for sleep out exit */
  OTM8009A_IO_Delay(120);
 800595a:	2078      	movs	r0, #120	; 0x78
 800595c:	f000 fa66 	bl	8005e2c <OTM8009A_IO_Delay>

  switch(ColorCoding)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d008      	beq.n	8005978 <OTM8009A_Init+0x304>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2b02      	cmp	r3, #2
 800596a:	f040 8095 	bne.w	8005a98 <OTM8009A_Init+0x424>
  {
  case OTM8009A_FORMAT_RBG565 :
    /* Set Pixel color format to RGB565 */
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData37);
 800596e:	4948      	ldr	r1, [pc, #288]	; (8005a90 <OTM8009A_Init+0x41c>)
 8005970:	2000      	movs	r0, #0
 8005972:	f000 fe0b 	bl	800658c <DSI_IO_WriteCmd>
    break;
 8005976:	e090      	b.n	8005a9a <OTM8009A_Init+0x426>
  case OTM8009A_FORMAT_RGB888 :
    /* Set Pixel color format to RGB888 */
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData38);
 8005978:	4946      	ldr	r1, [pc, #280]	; (8005a94 <OTM8009A_Init+0x420>)
 800597a:	2000      	movs	r0, #0
 800597c:	f000 fe06 	bl	800658c <DSI_IO_WriteCmd>
    break;
 8005980:	e08b      	b.n	8005a9a <OTM8009A_Init+0x426>
 8005982:	bf00      	nop
 8005984:	08007d90 	.word	0x08007d90
 8005988:	08007c48 	.word	0x08007c48
 800598c:	08007d94 	.word	0x08007d94
 8005990:	08007c4c 	.word	0x08007c4c
 8005994:	08007d98 	.word	0x08007d98
 8005998:	08007d9c 	.word	0x08007d9c
 800599c:	08007da0 	.word	0x08007da0
 80059a0:	08007da4 	.word	0x08007da4
 80059a4:	08007da8 	.word	0x08007da8
 80059a8:	08007dac 	.word	0x08007dac
 80059ac:	08007db0 	.word	0x08007db0
 80059b0:	08007db4 	.word	0x08007db4
 80059b4:	08007db8 	.word	0x08007db8
 80059b8:	08007dbc 	.word	0x08007dbc
 80059bc:	08007dc0 	.word	0x08007dc0
 80059c0:	08007dc4 	.word	0x08007dc4
 80059c4:	08007dc8 	.word	0x08007dc8
 80059c8:	08007dcc 	.word	0x08007dcc
 80059cc:	08007dd0 	.word	0x08007dd0
 80059d0:	08007dd4 	.word	0x08007dd4
 80059d4:	08007dd8 	.word	0x08007dd8
 80059d8:	08007c78 	.word	0x08007c78
 80059dc:	08007ddc 	.word	0x08007ddc
 80059e0:	08007de0 	.word	0x08007de0
 80059e4:	08007de4 	.word	0x08007de4
 80059e8:	08007de8 	.word	0x08007de8
 80059ec:	08007dec 	.word	0x08007dec
 80059f0:	08007df0 	.word	0x08007df0
 80059f4:	08007df4 	.word	0x08007df4
 80059f8:	08007df8 	.word	0x08007df8
 80059fc:	08007dfc 	.word	0x08007dfc
 8005a00:	08007c7c 	.word	0x08007c7c
 8005a04:	08007c80 	.word	0x08007c80
 8005a08:	08007e00 	.word	0x08007e00
 8005a0c:	08007c88 	.word	0x08007c88
 8005a10:	08007e04 	.word	0x08007e04
 8005a14:	08007c98 	.word	0x08007c98
 8005a18:	08007e08 	.word	0x08007e08
 8005a1c:	08007ca8 	.word	0x08007ca8
 8005a20:	08007e0c 	.word	0x08007e0c
 8005a24:	08007e44 	.word	0x08007e44
 8005a28:	08007cb4 	.word	0x08007cb4
 8005a2c:	08007e10 	.word	0x08007e10
 8005a30:	08007cc0 	.word	0x08007cc0
 8005a34:	08007cd0 	.word	0x08007cd0
 8005a38:	08007ce0 	.word	0x08007ce0
 8005a3c:	08007cec 	.word	0x08007cec
 8005a40:	08007cfc 	.word	0x08007cfc
 8005a44:	08007e14 	.word	0x08007e14
 8005a48:	08007d0c 	.word	0x08007d0c
 8005a4c:	08007e18 	.word	0x08007e18
 8005a50:	08007d18 	.word	0x08007d18
 8005a54:	08007d24 	.word	0x08007d24
 8005a58:	08007d30 	.word	0x08007d30
 8005a5c:	08007d40 	.word	0x08007d40
 8005a60:	08007d50 	.word	0x08007d50
 8005a64:	08007d5c 	.word	0x08007d5c
 8005a68:	08007d6c 	.word	0x08007d6c
 8005a6c:	08007e48 	.word	0x08007e48
 8005a70:	08007e4c 	.word	0x08007e4c
 8005a74:	08007e50 	.word	0x08007e50
 8005a78:	08007e54 	.word	0x08007e54
 8005a7c:	08007e58 	.word	0x08007e58
 8005a80:	08007d7c 	.word	0x08007d7c
 8005a84:	08007c50 	.word	0x08007c50
 8005a88:	08007c64 	.word	0x08007c64
 8005a8c:	08007e1c 	.word	0x08007e1c
 8005a90:	08007e20 	.word	0x08007e20
 8005a94:	08007e24 	.word	0x08007e24
  default :
    break;
 8005a98:	bf00      	nop
  }

  /* Send command to configure display in landscape orientation mode. By default
      the orientation mode is portrait  */
  if(orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	2b01      	cmp	r3, #1
 8005a9e:	d10b      	bne.n	8005ab8 <OTM8009A_Init+0x444>
  {
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData39);
 8005aa0:	4916      	ldr	r1, [pc, #88]	; (8005afc <OTM8009A_Init+0x488>)
 8005aa2:	2000      	movs	r0, #0
 8005aa4:	f000 fd72 	bl	800658c <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData27);
 8005aa8:	4915      	ldr	r1, [pc, #84]	; (8005b00 <OTM8009A_Init+0x48c>)
 8005aaa:	2004      	movs	r0, #4
 8005aac:	f000 fd6e 	bl	800658c <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData28);
 8005ab0:	4914      	ldr	r1, [pc, #80]	; (8005b04 <OTM8009A_Init+0x490>)
 8005ab2:	2004      	movs	r0, #4
 8005ab4:	f000 fd6a 	bl	800658c <DSI_IO_WriteCmd>
  }

  /** CABC : Content Adaptive Backlight Control section start >> */
  /* Note : defaut is 0 (lowest Brightness), 0xFF is highest Brightness, try 0x7F : intermediate value */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData40);
 8005ab8:	4913      	ldr	r1, [pc, #76]	; (8005b08 <OTM8009A_Init+0x494>)
 8005aba:	2000      	movs	r0, #0
 8005abc:	f000 fd66 	bl	800658c <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x2C - Brightness Control Block, Display Dimming & BackLight on */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData41);
 8005ac0:	4912      	ldr	r1, [pc, #72]	; (8005b0c <OTM8009A_Init+0x498>)
 8005ac2:	2000      	movs	r0, #0
 8005ac4:	f000 fd62 	bl	800658c <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x02 - image Content based Adaptive Brightness [Still Picture] */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData42);
 8005ac8:	4911      	ldr	r1, [pc, #68]	; (8005b10 <OTM8009A_Init+0x49c>)
 8005aca:	2000      	movs	r0, #0
 8005acc:	f000 fd5e 	bl	800658c <DSI_IO_WriteCmd>

  /* defaut is 0 (lowest Brightness), 0xFF is highest Brightness */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData43);
 8005ad0:	4910      	ldr	r1, [pc, #64]	; (8005b14 <OTM8009A_Init+0x4a0>)
 8005ad2:	2000      	movs	r0, #0
 8005ad4:	f000 fd5a 	bl	800658c <DSI_IO_WriteCmd>

  /** CABC : Content Adaptive Backlight Control section end << */

  /* Send Command Display On */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData44);
 8005ad8:	490f      	ldr	r1, [pc, #60]	; (8005b18 <OTM8009A_Init+0x4a4>)
 8005ada:	2000      	movs	r0, #0
 8005adc:	f000 fd56 	bl	800658c <DSI_IO_WriteCmd>

  /* NOP command */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8005ae0:	490e      	ldr	r1, [pc, #56]	; (8005b1c <OTM8009A_Init+0x4a8>)
 8005ae2:	2000      	movs	r0, #0
 8005ae4:	f000 fd52 	bl	800658c <DSI_IO_WriteCmd>

  /* Send Command GRAM memory write (no parameters) : this initiates frame write via other DSI commands sent by */
  /* DSI host from LTDC incoming pixels in video mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData45);
 8005ae8:	490d      	ldr	r1, [pc, #52]	; (8005b20 <OTM8009A_Init+0x4ac>)
 8005aea:	2000      	movs	r0, #0
 8005aec:	f000 fd4e 	bl	800658c <DSI_IO_WriteCmd>

  return 0;
 8005af0:	2300      	movs	r3, #0
}
 8005af2:	4618      	mov	r0, r3
 8005af4:	3708      	adds	r7, #8
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}
 8005afa:	bf00      	nop
 8005afc:	08007e28 	.word	0x08007e28
 8005b00:	08007d80 	.word	0x08007d80
 8005b04:	08007d88 	.word	0x08007d88
 8005b08:	08007e2c 	.word	0x08007e2c
 8005b0c:	08007e30 	.word	0x08007e30
 8005b10:	08007e34 	.word	0x08007e34
 8005b14:	08007e38 	.word	0x08007e38
 8005b18:	08007e3c 	.word	0x08007e3c
 8005b1c:	08007d90 	.word	0x08007d90
 8005b20:	08007e40 	.word	0x08007e40

08005b24 <BSP_LED_Off>:
  *            @arg  LED2
  *            @arg  LED3
  *            @arg  LED4
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b082      	sub	sp, #8
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	71fb      	strb	r3, [r7, #7]
  if (Led <= LED4)
 8005b2e:	79fb      	ldrb	r3, [r7, #7]
 8005b30:	2b03      	cmp	r3, #3
 8005b32:	d80c      	bhi.n	8005b4e <BSP_LED_Off+0x2a>
  {
    HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 8005b34:	79fb      	ldrb	r3, [r7, #7]
 8005b36:	4a08      	ldr	r2, [pc, #32]	; (8005b58 <BSP_LED_Off+0x34>)
 8005b38:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8005b3c:	79fb      	ldrb	r3, [r7, #7]
 8005b3e:	4a07      	ldr	r2, [pc, #28]	; (8005b5c <BSP_LED_Off+0x38>)
 8005b40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b44:	b29b      	uxth	r3, r3
 8005b46:	2201      	movs	r2, #1
 8005b48:	4619      	mov	r1, r3
 8005b4a:	f7fc faf7 	bl	800213c <HAL_GPIO_WritePin>
  }
}
 8005b4e:	bf00      	nop
 8005b50:	3708      	adds	r7, #8
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bd80      	pop	{r7, pc}
 8005b56:	bf00      	nop
 8005b58:	20000040 	.word	0x20000040
 8005b5c:	20000030 	.word	0x20000030

08005b60 <I2C1_MspInit>:
/******************************* I2C Routines *********************************/
/**
  * @brief  Initializes I2C MSP.
  */
static void I2C1_MspInit(void)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b088      	sub	sp, #32
 8005b64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCO_I2C1_SCL_SDA_GPIO_CLK_ENABLE();
 8005b66:	2300      	movs	r3, #0
 8005b68:	60bb      	str	r3, [r7, #8]
 8005b6a:	4b2a      	ldr	r3, [pc, #168]	; (8005c14 <I2C1_MspInit+0xb4>)
 8005b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b6e:	4a29      	ldr	r2, [pc, #164]	; (8005c14 <I2C1_MspInit+0xb4>)
 8005b70:	f043 0302 	orr.w	r3, r3, #2
 8005b74:	6313      	str	r3, [r2, #48]	; 0x30
 8005b76:	4b27      	ldr	r3, [pc, #156]	; (8005c14 <I2C1_MspInit+0xb4>)
 8005b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b7a:	f003 0302 	and.w	r3, r3, #2
 8005b7e:	60bb      	str	r3, [r7, #8]
 8005b80:	68bb      	ldr	r3, [r7, #8]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin = DISCO_I2C1_SCL_PIN;
 8005b82:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005b86:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8005b88:	2312      	movs	r3, #18
 8005b8a:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8005b90:	2302      	movs	r3, #2
 8005b92:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = DISCO_I2C1_SCL_SDA_AF;
 8005b94:	2304      	movs	r3, #4
 8005b96:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DISCO_I2C1_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8005b98:	f107 030c 	add.w	r3, r7, #12
 8005b9c:	4619      	mov	r1, r3
 8005b9e:	481e      	ldr	r0, [pc, #120]	; (8005c18 <I2C1_MspInit+0xb8>)
 8005ba0:	f7fc f814 	bl	8001bcc <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin = DISCO_I2C1_SDA_PIN;
 8005ba4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005ba8:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(DISCO_I2C1_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8005baa:	f107 030c 	add.w	r3, r7, #12
 8005bae:	4619      	mov	r1, r3
 8005bb0:	4819      	ldr	r0, [pc, #100]	; (8005c18 <I2C1_MspInit+0xb8>)
 8005bb2:	f7fc f80b 	bl	8001bcc <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCO_I2C1_CLK_ENABLE();
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	607b      	str	r3, [r7, #4]
 8005bba:	4b16      	ldr	r3, [pc, #88]	; (8005c14 <I2C1_MspInit+0xb4>)
 8005bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bbe:	4a15      	ldr	r2, [pc, #84]	; (8005c14 <I2C1_MspInit+0xb4>)
 8005bc0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005bc4:	6413      	str	r3, [r2, #64]	; 0x40
 8005bc6:	4b13      	ldr	r3, [pc, #76]	; (8005c14 <I2C1_MspInit+0xb4>)
 8005bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005bce:	607b      	str	r3, [r7, #4]
 8005bd0:	687b      	ldr	r3, [r7, #4]

  /* Force the I2C peripheral clock reset */
  DISCO_I2C1_FORCE_RESET();
 8005bd2:	4b10      	ldr	r3, [pc, #64]	; (8005c14 <I2C1_MspInit+0xb4>)
 8005bd4:	6a1b      	ldr	r3, [r3, #32]
 8005bd6:	4a0f      	ldr	r2, [pc, #60]	; (8005c14 <I2C1_MspInit+0xb4>)
 8005bd8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005bdc:	6213      	str	r3, [r2, #32]

  /* Release the I2C peripheral clock reset */
  DISCO_I2C1_RELEASE_RESET();
 8005bde:	4b0d      	ldr	r3, [pc, #52]	; (8005c14 <I2C1_MspInit+0xb4>)
 8005be0:	6a1b      	ldr	r3, [r3, #32]
 8005be2:	4a0c      	ldr	r2, [pc, #48]	; (8005c14 <I2C1_MspInit+0xb4>)
 8005be4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005be8:	6213      	str	r3, [r2, #32]

  /* Enable and set I2C1 Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCO_I2C1_EV_IRQn, 0x05, 0);
 8005bea:	2200      	movs	r2, #0
 8005bec:	2105      	movs	r1, #5
 8005bee:	201f      	movs	r0, #31
 8005bf0:	f7fa fdf5 	bl	80007de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCO_I2C1_EV_IRQn);
 8005bf4:	201f      	movs	r0, #31
 8005bf6:	f7fa fe0e 	bl	8000816 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2C1 Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCO_I2C1_ER_IRQn, 0x05, 0);
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	2105      	movs	r1, #5
 8005bfe:	2020      	movs	r0, #32
 8005c00:	f7fa fded 	bl	80007de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCO_I2C1_ER_IRQn);
 8005c04:	2020      	movs	r0, #32
 8005c06:	f7fa fe06 	bl	8000816 <HAL_NVIC_EnableIRQ>
}
 8005c0a:	bf00      	nop
 8005c0c:	3720      	adds	r7, #32
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}
 8005c12:	bf00      	nop
 8005c14:	40023800 	.word	0x40023800
 8005c18:	40020400 	.word	0x40020400

08005c1c <I2C1_Init>:

/**
  * @brief  Initializes I2C HAL.
  */
static void I2C1_Init(void)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&heval_I2c1) == HAL_I2C_STATE_RESET)
 8005c20:	4814      	ldr	r0, [pc, #80]	; (8005c74 <I2C1_Init+0x58>)
 8005c22:	f7fc ff57 	bl	8002ad4 <HAL_I2C_GetState>
 8005c26:	4603      	mov	r3, r0
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d120      	bne.n	8005c6e <I2C1_Init+0x52>
  {
    heval_I2c1.Instance = I2C1;
 8005c2c:	4b11      	ldr	r3, [pc, #68]	; (8005c74 <I2C1_Init+0x58>)
 8005c2e:	4a12      	ldr	r2, [pc, #72]	; (8005c78 <I2C1_Init+0x5c>)
 8005c30:	601a      	str	r2, [r3, #0]
    heval_I2c1.Init.ClockSpeed      = I2C1_SCL_FREQ_KHZ;
 8005c32:	4b10      	ldr	r3, [pc, #64]	; (8005c74 <I2C1_Init+0x58>)
 8005c34:	4a11      	ldr	r2, [pc, #68]	; (8005c7c <I2C1_Init+0x60>)
 8005c36:	605a      	str	r2, [r3, #4]
    heval_I2c1.Init.DutyCycle       = I2C_DUTYCYCLE_2;
 8005c38:	4b0e      	ldr	r3, [pc, #56]	; (8005c74 <I2C1_Init+0x58>)
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	609a      	str	r2, [r3, #8]
    heval_I2c1.Init.OwnAddress1     = 0;
 8005c3e:	4b0d      	ldr	r3, [pc, #52]	; (8005c74 <I2C1_Init+0x58>)
 8005c40:	2200      	movs	r2, #0
 8005c42:	60da      	str	r2, [r3, #12]
    heval_I2c1.Init.AddressingMode  = I2C_ADDRESSINGMODE_7BIT;
 8005c44:	4b0b      	ldr	r3, [pc, #44]	; (8005c74 <I2C1_Init+0x58>)
 8005c46:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005c4a:	611a      	str	r2, [r3, #16]
    heval_I2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005c4c:	4b09      	ldr	r3, [pc, #36]	; (8005c74 <I2C1_Init+0x58>)
 8005c4e:	2200      	movs	r2, #0
 8005c50:	615a      	str	r2, [r3, #20]
    heval_I2c1.Init.OwnAddress2     = 0;
 8005c52:	4b08      	ldr	r3, [pc, #32]	; (8005c74 <I2C1_Init+0x58>)
 8005c54:	2200      	movs	r2, #0
 8005c56:	619a      	str	r2, [r3, #24]
    heval_I2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005c58:	4b06      	ldr	r3, [pc, #24]	; (8005c74 <I2C1_Init+0x58>)
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	61da      	str	r2, [r3, #28]
    heval_I2c1.Init.NoStretchMode   = I2C_NOSTRETCH_DISABLE;
 8005c5e:	4b05      	ldr	r3, [pc, #20]	; (8005c74 <I2C1_Init+0x58>)
 8005c60:	2200      	movs	r2, #0
 8005c62:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2C1_MspInit();
 8005c64:	f7ff ff7c 	bl	8005b60 <I2C1_MspInit>
    HAL_I2C_Init(&heval_I2c1);
 8005c68:	4802      	ldr	r0, [pc, #8]	; (8005c74 <I2C1_Init+0x58>)
 8005c6a:	f7fc fa9b 	bl	80021a4 <HAL_I2C_Init>
  }
}
 8005c6e:	bf00      	nop
 8005c70:	bd80      	pop	{r7, pc}
 8005c72:	bf00      	nop
 8005c74:	200000bc 	.word	0x200000bc
 8005c78:	40005400 	.word	0x40005400
 8005c7c:	00061a80 	.word	0x00061a80

08005c80 <I2C1_Write>:
  * @param  Addr: I2C address
  * @param  Reg: Register address
  * @param  Value: Data to be written
  */
static void I2C1_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b088      	sub	sp, #32
 8005c84:	af04      	add	r7, sp, #16
 8005c86:	4603      	mov	r3, r0
 8005c88:	71fb      	strb	r3, [r7, #7]
 8005c8a:	460b      	mov	r3, r1
 8005c8c:	71bb      	strb	r3, [r7, #6]
 8005c8e:	4613      	mov	r3, r2
 8005c90:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 8005c92:	2300      	movs	r3, #0
 8005c94:	73fb      	strb	r3, [r7, #15]

  status = HAL_I2C_Mem_Write(&heval_I2c1,
 8005c96:	79fb      	ldrb	r3, [r7, #7]
 8005c98:	b299      	uxth	r1, r3
 8005c9a:	79bb      	ldrb	r3, [r7, #6]
 8005c9c:	b29a      	uxth	r2, r3
 8005c9e:	2364      	movs	r3, #100	; 0x64
 8005ca0:	9302      	str	r3, [sp, #8]
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	9301      	str	r3, [sp, #4]
 8005ca6:	1d7b      	adds	r3, r7, #5
 8005ca8:	9300      	str	r3, [sp, #0]
 8005caa:	2301      	movs	r3, #1
 8005cac:	4807      	ldr	r0, [pc, #28]	; (8005ccc <I2C1_Write+0x4c>)
 8005cae:	f7fc fbf1 	bl	8002494 <HAL_I2C_Mem_Write>
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	73fb      	strb	r3, [r7, #15]
                         &Value,
                         1,
                         100);

  /* Check the communication status */
  if(status != HAL_OK)
 8005cb6:	7bfb      	ldrb	r3, [r7, #15]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d003      	beq.n	8005cc4 <I2C1_Write+0x44>
  {
    /* Execute user timeout callback */
    I2C1_Error(Addr);
 8005cbc:	79fb      	ldrb	r3, [r7, #7]
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	f000 f85e 	bl	8005d80 <I2C1_Error>
  }
}
 8005cc4:	bf00      	nop
 8005cc6:	3710      	adds	r7, #16
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bd80      	pop	{r7, pc}
 8005ccc:	200000bc 	.word	0x200000bc

08005cd0 <I2C1_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Register address
  * @retval Read data
  */
static uint8_t I2C1_Read(uint8_t Addr, uint8_t Reg)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b088      	sub	sp, #32
 8005cd4:	af04      	add	r7, sp, #16
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	460a      	mov	r2, r1
 8005cda:	71fb      	strb	r3, [r7, #7]
 8005cdc:	4613      	mov	r3, r2
 8005cde:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	73fb      	strb	r3, [r7, #15]
  uint8_t Value = 0;
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	73bb      	strb	r3, [r7, #14]

  status = HAL_I2C_Mem_Read(&heval_I2c1,
 8005ce8:	79fb      	ldrb	r3, [r7, #7]
 8005cea:	b299      	uxth	r1, r3
 8005cec:	79bb      	ldrb	r3, [r7, #6]
 8005cee:	b29a      	uxth	r2, r3
 8005cf0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005cf4:	9302      	str	r3, [sp, #8]
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	9301      	str	r3, [sp, #4]
 8005cfa:	f107 030e 	add.w	r3, r7, #14
 8005cfe:	9300      	str	r3, [sp, #0]
 8005d00:	2301      	movs	r3, #1
 8005d02:	4808      	ldr	r0, [pc, #32]	; (8005d24 <I2C1_Read+0x54>)
 8005d04:	f7fc fcc0 	bl	8002688 <HAL_I2C_Mem_Read>
 8005d08:	4603      	mov	r3, r0
 8005d0a:	73fb      	strb	r3, [r7, #15]
                        &Value,
                        1,
                        1000);

  /* Check the communication status */
  if(status != HAL_OK)
 8005d0c:	7bfb      	ldrb	r3, [r7, #15]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d003      	beq.n	8005d1a <I2C1_Read+0x4a>
  {
    /* Execute user timeout callback */
    I2C1_Error(Addr);
 8005d12:	79fb      	ldrb	r3, [r7, #7]
 8005d14:	4618      	mov	r0, r3
 8005d16:	f000 f833 	bl	8005d80 <I2C1_Error>
  }
  return Value;
 8005d1a:	7bbb      	ldrb	r3, [r7, #14]
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	3710      	adds	r7, #16
 8005d20:	46bd      	mov	sp, r7
 8005d22:	bd80      	pop	{r7, pc}
 8005d24:	200000bc 	.word	0x200000bc

08005d28 <I2C1_ReadMultiple>:
static HAL_StatusTypeDef I2C1_ReadMultiple(uint8_t Addr,
                                       uint16_t Reg,
                                       uint16_t MemAddress,
                                       uint8_t *Buffer,
                                       uint16_t Length)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b08a      	sub	sp, #40	; 0x28
 8005d2c:	af04      	add	r7, sp, #16
 8005d2e:	607b      	str	r3, [r7, #4]
 8005d30:	4603      	mov	r3, r0
 8005d32:	73fb      	strb	r3, [r7, #15]
 8005d34:	460b      	mov	r3, r1
 8005d36:	81bb      	strh	r3, [r7, #12]
 8005d38:	4613      	mov	r3, r2
 8005d3a:	817b      	strh	r3, [r7, #10]
  HAL_StatusTypeDef status = HAL_OK;
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(&heval_I2c1,
 8005d40:	7bfb      	ldrb	r3, [r7, #15]
 8005d42:	b299      	uxth	r1, r3
 8005d44:	8978      	ldrh	r0, [r7, #10]
 8005d46:	89ba      	ldrh	r2, [r7, #12]
 8005d48:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005d4c:	9302      	str	r3, [sp, #8]
 8005d4e:	8c3b      	ldrh	r3, [r7, #32]
 8005d50:	9301      	str	r3, [sp, #4]
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	9300      	str	r3, [sp, #0]
 8005d56:	4603      	mov	r3, r0
 8005d58:	4808      	ldr	r0, [pc, #32]	; (8005d7c <I2C1_ReadMultiple+0x54>)
 8005d5a:	f7fc fc95 	bl	8002688 <HAL_I2C_Mem_Read>
 8005d5e:	4603      	mov	r3, r0
 8005d60:	75fb      	strb	r3, [r7, #23]
                        Buffer,
                        Length,
                        1000);

  /* Check the communication status */
  if(status != HAL_OK)
 8005d62:	7dfb      	ldrb	r3, [r7, #23]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d003      	beq.n	8005d70 <I2C1_ReadMultiple+0x48>
  {
    /* I2C error occured */
    I2C1_Error(Addr);
 8005d68:	7bfb      	ldrb	r3, [r7, #15]
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f000 f808 	bl	8005d80 <I2C1_Error>
  }
  return status;
 8005d70:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d72:	4618      	mov	r0, r3
 8005d74:	3718      	adds	r7, #24
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bd80      	pop	{r7, pc}
 8005d7a:	bf00      	nop
 8005d7c:	200000bc 	.word	0x200000bc

08005d80 <I2C1_Error>:
/**
  * @brief  Manages error callback by re-initializing I2C.
  * @param  Addr: I2C Address
  */
static void I2C1_Error(uint8_t Addr)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b082      	sub	sp, #8
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	4603      	mov	r3, r0
 8005d88:	71fb      	strb	r3, [r7, #7]
  /* De-initialize the I2C comunication bus */
  HAL_I2C_DeInit(&heval_I2c1);
 8005d8a:	4804      	ldr	r0, [pc, #16]	; (8005d9c <I2C1_Error+0x1c>)
 8005d8c:	f7fc fb3e 	bl	800240c <HAL_I2C_DeInit>

  /* Re-Initiaize the I2C comunication bus */
  I2C1_Init();
 8005d90:	f7ff ff44 	bl	8005c1c <I2C1_Init>
}
 8005d94:	bf00      	nop
 8005d96:	3708      	adds	r7, #8
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bd80      	pop	{r7, pc}
 8005d9c:	200000bc 	.word	0x200000bc

08005da0 <TS_IO_Init>:
/**
  * @brief  Initialize I2C communication
  *         channel from MCU to TouchScreen (TS).
  */
void TS_IO_Init(void)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	af00      	add	r7, sp, #0
  I2C1_Init();
 8005da4:	f7ff ff3a 	bl	8005c1c <I2C1_Init>
}
 8005da8:	bf00      	nop
 8005daa:	bd80      	pop	{r7, pc}

08005dac <TS_IO_Write>:
  * @param  Addr: I2C address
  * @param  Reg: Register address
  * @param  Value: Data to be written
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b082      	sub	sp, #8
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	4603      	mov	r3, r0
 8005db4:	71fb      	strb	r3, [r7, #7]
 8005db6:	460b      	mov	r3, r1
 8005db8:	71bb      	strb	r3, [r7, #6]
 8005dba:	4613      	mov	r3, r2
 8005dbc:	717b      	strb	r3, [r7, #5]
  I2C1_Write(Addr, Reg, Value);
 8005dbe:	797a      	ldrb	r2, [r7, #5]
 8005dc0:	79b9      	ldrb	r1, [r7, #6]
 8005dc2:	79fb      	ldrb	r3, [r7, #7]
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	f7ff ff5b 	bl	8005c80 <I2C1_Write>
}
 8005dca:	bf00      	nop
 8005dcc:	3708      	adds	r7, #8
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bd80      	pop	{r7, pc}

08005dd2 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Register address
  * @retval Read data
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8005dd2:	b580      	push	{r7, lr}
 8005dd4:	b082      	sub	sp, #8
 8005dd6:	af00      	add	r7, sp, #0
 8005dd8:	4603      	mov	r3, r0
 8005dda:	460a      	mov	r2, r1
 8005ddc:	71fb      	strb	r3, [r7, #7]
 8005dde:	4613      	mov	r3, r2
 8005de0:	71bb      	strb	r3, [r7, #6]
  return I2C1_Read(Addr, Reg);
 8005de2:	79ba      	ldrb	r2, [r7, #6]
 8005de4:	79fb      	ldrb	r3, [r7, #7]
 8005de6:	4611      	mov	r1, r2
 8005de8:	4618      	mov	r0, r3
 8005dea:	f7ff ff71 	bl	8005cd0 <I2C1_Read>
 8005dee:	4603      	mov	r3, r0
}
 8005df0:	4618      	mov	r0, r3
 8005df2:	3708      	adds	r7, #8
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bd80      	pop	{r7, pc}

08005df8 <TS_IO_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval Number of read data
  */
uint16_t TS_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b084      	sub	sp, #16
 8005dfc:	af02      	add	r7, sp, #8
 8005dfe:	603a      	str	r2, [r7, #0]
 8005e00:	461a      	mov	r2, r3
 8005e02:	4603      	mov	r3, r0
 8005e04:	71fb      	strb	r3, [r7, #7]
 8005e06:	460b      	mov	r3, r1
 8005e08:	71bb      	strb	r3, [r7, #6]
 8005e0a:	4613      	mov	r3, r2
 8005e0c:	80bb      	strh	r3, [r7, #4]
 return I2C1_ReadMultiple(Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8005e0e:	79bb      	ldrb	r3, [r7, #6]
 8005e10:	b299      	uxth	r1, r3
 8005e12:	79f8      	ldrb	r0, [r7, #7]
 8005e14:	88bb      	ldrh	r3, [r7, #4]
 8005e16:	9300      	str	r3, [sp, #0]
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	2201      	movs	r2, #1
 8005e1c:	f7ff ff84 	bl	8005d28 <I2C1_ReadMultiple>
 8005e20:	4603      	mov	r3, r0
 8005e22:	b29b      	uxth	r3, r3
}
 8005e24:	4618      	mov	r0, r3
 8005e26:	3708      	adds	r7, #8
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	bd80      	pop	{r7, pc}

08005e2c <OTM8009A_IO_Delay>:
/**
  * @brief  OTM8009A delay
  * @param  Delay: Delay in ms
  */
void OTM8009A_IO_Delay(uint32_t Delay)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b082      	sub	sp, #8
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8005e34:	6878      	ldr	r0, [r7, #4]
 8005e36:	f7fa fbd3 	bl	80005e0 <HAL_Delay>
}
 8005e3a:	bf00      	nop
 8005e3c:	3708      	adds	r7, #8
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bd80      	pop	{r7, pc}

08005e42 <BSP_LCD_Init>:
/**
  * @brief  Initializes the DSI LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{
 8005e42:	b580      	push	{r7, lr}
 8005e44:	af00      	add	r7, sp, #0
  return (BSP_LCD_InitEx(LCD_ORIENTATION_LANDSCAPE));
 8005e46:	2001      	movs	r0, #1
 8005e48:	f000 f804 	bl	8005e54 <BSP_LCD_InitEx>
 8005e4c:	4603      	mov	r3, r0
}
 8005e4e:	4618      	mov	r0, r3
 8005e50:	bd80      	pop	{r7, pc}
	...

08005e54 <BSP_LCD_InitEx>:
  *     - LTDC ititialization
  *     - OTM8009A LCD Display IC Driver ititialization
  * @retval LCD state
  */
uint8_t BSP_LCD_InitEx(LCD_OrientationTypeDef orientation)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b096      	sub	sp, #88	; 0x58
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	71fb      	strb	r3, [r7, #7]
  DSI_PLLInitTypeDef dsiPllInit;
  DSI_PHY_TimerTypeDef  PhyTimings;
  static RCC_PeriphCLKInitTypeDef  PeriphClkInitStruct;
  uint32_t LcdClock  = 27429; /*!< LcdClk = 27429 kHz */
 8005e5e:	f646 3325 	movw	r3, #27429	; 0x6b25
 8005e62:	657b      	str	r3, [r7, #84]	; 0x54
  
  uint32_t laneByteClk_kHz = 0;
 8005e64:	2300      	movs	r3, #0
 8005e66:	653b      	str	r3, [r7, #80]	; 0x50
  uint32_t                   HACT; /*!< Horizontal Active time in units of lcdClk = imageSize X in pixels to display */
  
  
  /* Toggle Hardware Reset of the DSI LCD using
  * its XRES signal (active low) */
  BSP_LCD_Reset();
 8005e68:	f000 f93e 	bl	80060e8 <BSP_LCD_Reset>
  * This will set IP blocks LTDC, DSI and DMA2D
  * - out of reset
  * - clocked
  * - NVIC IRQ related to IP blocks enabled
  */
  BSP_LCD_MspInit();
 8005e6c:	f000 fbb8 	bl	80065e0 <BSP_LCD_MspInit>
  
/*************************DSI Initialization***********************************/  
  
  /* Base address of DSI Host/Wrapper registers to be set before calling De-Init */
  hdsi_eval.Instance = DSI;
 8005e70:	4b93      	ldr	r3, [pc, #588]	; (80060c0 <BSP_LCD_InitEx+0x26c>)
 8005e72:	4a94      	ldr	r2, [pc, #592]	; (80060c4 <BSP_LCD_InitEx+0x270>)
 8005e74:	601a      	str	r2, [r3, #0]
  
  HAL_DSI_DeInit(&(hdsi_eval));
 8005e76:	4892      	ldr	r0, [pc, #584]	; (80060c0 <BSP_LCD_InitEx+0x26c>)
 8005e78:	f7fb facc 	bl	8001414 <HAL_DSI_DeInit>
  
#if !defined(USE_STM32469I_DISCO_REVA)
  dsiPllInit.PLLNDIV  = 125;
 8005e7c:	237d      	movs	r3, #125	; 0x7d
 8005e7e:	627b      	str	r3, [r7, #36]	; 0x24
  dsiPllInit.PLLIDF   = DSI_PLL_IN_DIV2;
 8005e80:	2302      	movs	r3, #2
 8005e82:	62bb      	str	r3, [r7, #40]	; 0x28
  dsiPllInit.PLLODF   = DSI_PLL_OUT_DIV1;
 8005e84:	2300      	movs	r3, #0
 8005e86:	62fb      	str	r3, [r7, #44]	; 0x2c
#else  
  dsiPllInit.PLLNDIV  = 100;
  dsiPllInit.PLLIDF   = DSI_PLL_IN_DIV5;
  dsiPllInit.PLLODF   = DSI_PLL_OUT_DIV1;
#endif
  laneByteClk_kHz = 62500; /* 500 MHz / 8 = 62.5 MHz = 62500 kHz */
 8005e88:	f24f 4324 	movw	r3, #62500	; 0xf424
 8005e8c:	653b      	str	r3, [r7, #80]	; 0x50
  
  /* Set number of Lanes */
  hdsi_eval.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 8005e8e:	4b8c      	ldr	r3, [pc, #560]	; (80060c0 <BSP_LCD_InitEx+0x26c>)
 8005e90:	2201      	movs	r2, #1
 8005e92:	60da      	str	r2, [r3, #12]
  
  /* TXEscapeCkdiv = f(LaneByteClk)/15.62 = 4 */
  hdsi_eval.Init.TXEscapeCkdiv = laneByteClk_kHz/15620; 
 8005e94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e96:	089b      	lsrs	r3, r3, #2
 8005e98:	4a8b      	ldr	r2, [pc, #556]	; (80060c8 <BSP_LCD_InitEx+0x274>)
 8005e9a:	fba2 2303 	umull	r2, r3, r2, r3
 8005e9e:	0a9b      	lsrs	r3, r3, #10
 8005ea0:	4a87      	ldr	r2, [pc, #540]	; (80060c0 <BSP_LCD_InitEx+0x26c>)
 8005ea2:	6093      	str	r3, [r2, #8]
  
  HAL_DSI_Init(&(hdsi_eval), &(dsiPllInit));
 8005ea4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005ea8:	4619      	mov	r1, r3
 8005eaa:	4885      	ldr	r0, [pc, #532]	; (80060c0 <BSP_LCD_InitEx+0x26c>)
 8005eac:	f7fb f998 	bl	80011e0 <HAL_DSI_Init>
  
  /* Timing parameters for all Video modes
  * Set Timing parameters of LTDC depending on its chosen orientation
  */
  if(orientation == LCD_ORIENTATION_PORTRAIT)
 8005eb0:	79fb      	ldrb	r3, [r7, #7]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d108      	bne.n	8005ec8 <BSP_LCD_InitEx+0x74>
  {
    lcd_x_size = OTM8009A_480X800_WIDTH;  /* 480 */
 8005eb6:	4b85      	ldr	r3, [pc, #532]	; (80060cc <BSP_LCD_InitEx+0x278>)
 8005eb8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8005ebc:	601a      	str	r2, [r3, #0]
    lcd_y_size = OTM8009A_480X800_HEIGHT; /* 800 */                                
 8005ebe:	4b84      	ldr	r3, [pc, #528]	; (80060d0 <BSP_LCD_InitEx+0x27c>)
 8005ec0:	f44f 7248 	mov.w	r2, #800	; 0x320
 8005ec4:	601a      	str	r2, [r3, #0]
 8005ec6:	e007      	b.n	8005ed8 <BSP_LCD_InitEx+0x84>
  }
  else
  {
    /* lcd_orientation == LCD_ORIENTATION_LANDSCAPE */
    lcd_x_size = OTM8009A_800X480_WIDTH;  /* 800 */
 8005ec8:	4b80      	ldr	r3, [pc, #512]	; (80060cc <BSP_LCD_InitEx+0x278>)
 8005eca:	f44f 7248 	mov.w	r2, #800	; 0x320
 8005ece:	601a      	str	r2, [r3, #0]
    lcd_y_size = OTM8009A_800X480_HEIGHT; /* 480 */                                
 8005ed0:	4b7f      	ldr	r3, [pc, #508]	; (80060d0 <BSP_LCD_InitEx+0x27c>)
 8005ed2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8005ed6:	601a      	str	r2, [r3, #0]
  }
  
  HACT = lcd_x_size;
 8005ed8:	4b7c      	ldr	r3, [pc, #496]	; (80060cc <BSP_LCD_InitEx+0x278>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	64fb      	str	r3, [r7, #76]	; 0x4c
  VACT = lcd_y_size;
 8005ede:	4b7c      	ldr	r3, [pc, #496]	; (80060d0 <BSP_LCD_InitEx+0x27c>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	64bb      	str	r3, [r7, #72]	; 0x48
  
  /* The following values are same for portrait and landscape orientations */
  VSA  = OTM8009A_480X800_VSYNC;
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	647b      	str	r3, [r7, #68]	; 0x44
  VBP  = OTM8009A_480X800_VBP;
 8005ee8:	230f      	movs	r3, #15
 8005eea:	643b      	str	r3, [r7, #64]	; 0x40
  VFP  = OTM8009A_480X800_VFP;
 8005eec:	2310      	movs	r3, #16
 8005eee:	63fb      	str	r3, [r7, #60]	; 0x3c
  HSA  = OTM8009A_480X800_HSYNC;
 8005ef0:	2302      	movs	r3, #2
 8005ef2:	63bb      	str	r3, [r7, #56]	; 0x38
  HBP  = OTM8009A_480X800_HBP;
 8005ef4:	2322      	movs	r3, #34	; 0x22
 8005ef6:	637b      	str	r3, [r7, #52]	; 0x34
  HFP  = OTM8009A_480X800_HFP;
 8005ef8:	2322      	movs	r3, #34	; 0x22
 8005efa:	633b      	str	r3, [r7, #48]	; 0x30
  
  
  hdsivideo_handle.VirtualChannelID = LCD_OTM8009A_ID;
 8005efc:	4b75      	ldr	r3, [pc, #468]	; (80060d4 <BSP_LCD_InitEx+0x280>)
 8005efe:	2200      	movs	r2, #0
 8005f00:	601a      	str	r2, [r3, #0]
  hdsivideo_handle.ColorCoding = LCD_DSI_PIXEL_DATA_FMT_RBG888;
 8005f02:	4b74      	ldr	r3, [pc, #464]	; (80060d4 <BSP_LCD_InitEx+0x280>)
 8005f04:	2205      	movs	r2, #5
 8005f06:	605a      	str	r2, [r3, #4]
  hdsivideo_handle.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 8005f08:	4b72      	ldr	r3, [pc, #456]	; (80060d4 <BSP_LCD_InitEx+0x280>)
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	621a      	str	r2, [r3, #32]
  hdsivideo_handle.HSPolarity = DSI_HSYNC_ACTIVE_HIGH;
 8005f0e:	4b71      	ldr	r3, [pc, #452]	; (80060d4 <BSP_LCD_InitEx+0x280>)
 8005f10:	2200      	movs	r2, #0
 8005f12:	61da      	str	r2, [r3, #28]
  hdsivideo_handle.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;  
 8005f14:	4b6f      	ldr	r3, [pc, #444]	; (80060d4 <BSP_LCD_InitEx+0x280>)
 8005f16:	2200      	movs	r2, #0
 8005f18:	625a      	str	r2, [r3, #36]	; 0x24
  hdsivideo_handle.Mode = DSI_VID_MODE_BURST; /* Mode Video burst ie : one LgP per line */
 8005f1a:	4b6e      	ldr	r3, [pc, #440]	; (80060d4 <BSP_LCD_InitEx+0x280>)
 8005f1c:	2202      	movs	r2, #2
 8005f1e:	60da      	str	r2, [r3, #12]
  hdsivideo_handle.NullPacketSize = 0xFFF;
 8005f20:	4b6c      	ldr	r3, [pc, #432]	; (80060d4 <BSP_LCD_InitEx+0x280>)
 8005f22:	f640 72ff 	movw	r2, #4095	; 0xfff
 8005f26:	619a      	str	r2, [r3, #24]
  hdsivideo_handle.NumberOfChunks = 0;
 8005f28:	4b6a      	ldr	r3, [pc, #424]	; (80060d4 <BSP_LCD_InitEx+0x280>)
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	615a      	str	r2, [r3, #20]
  hdsivideo_handle.PacketSize                = HACT; /* Value depending on display orientation choice portrait/landscape */ 
 8005f2e:	4a69      	ldr	r2, [pc, #420]	; (80060d4 <BSP_LCD_InitEx+0x280>)
 8005f30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f32:	6113      	str	r3, [r2, #16]
  hdsivideo_handle.HorizontalSyncActive      = (HSA * laneByteClk_kHz) / LcdClock;
 8005f34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f36:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005f38:	fb02 f203 	mul.w	r2, r2, r3
 8005f3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f42:	4a64      	ldr	r2, [pc, #400]	; (80060d4 <BSP_LCD_InitEx+0x280>)
 8005f44:	6293      	str	r3, [r2, #40]	; 0x28
  hdsivideo_handle.HorizontalBackPorch       = (HBP * laneByteClk_kHz) / LcdClock;
 8005f46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f48:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005f4a:	fb02 f203 	mul.w	r2, r2, r3
 8005f4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f50:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f54:	4a5f      	ldr	r2, [pc, #380]	; (80060d4 <BSP_LCD_InitEx+0x280>)
 8005f56:	62d3      	str	r3, [r2, #44]	; 0x2c
  hdsivideo_handle.HorizontalLine            = ((HACT + HSA + HBP + HFP) * laneByteClk_kHz) / LcdClock; /* Value depending on display orientation choice portrait/landscape */
 8005f58:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005f5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f5c:	441a      	add	r2, r3
 8005f5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f60:	441a      	add	r2, r3
 8005f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f64:	4413      	add	r3, r2
 8005f66:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005f68:	fb02 f203 	mul.w	r2, r2, r3
 8005f6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f72:	4a58      	ldr	r2, [pc, #352]	; (80060d4 <BSP_LCD_InitEx+0x280>)
 8005f74:	6313      	str	r3, [r2, #48]	; 0x30
  hdsivideo_handle.VerticalSyncActive        = VSA;
 8005f76:	4a57      	ldr	r2, [pc, #348]	; (80060d4 <BSP_LCD_InitEx+0x280>)
 8005f78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f7a:	6353      	str	r3, [r2, #52]	; 0x34
  hdsivideo_handle.VerticalBackPorch         = VBP;
 8005f7c:	4a55      	ldr	r2, [pc, #340]	; (80060d4 <BSP_LCD_InitEx+0x280>)
 8005f7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f80:	6393      	str	r3, [r2, #56]	; 0x38
  hdsivideo_handle.VerticalFrontPorch        = VFP;
 8005f82:	4a54      	ldr	r2, [pc, #336]	; (80060d4 <BSP_LCD_InitEx+0x280>)
 8005f84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f86:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdsivideo_handle.VerticalActive            = VACT; /* Value depending on display orientation choice portrait/landscape */
 8005f88:	4a52      	ldr	r2, [pc, #328]	; (80060d4 <BSP_LCD_InitEx+0x280>)
 8005f8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f8c:	6413      	str	r3, [r2, #64]	; 0x40
  
  /* Enable or disable sending LP command while streaming is active in video mode */
  hdsivideo_handle.LPCommandEnable = DSI_LP_COMMAND_ENABLE; /* Enable sending commands in mode LP (Low Power) */
 8005f8e:	4b51      	ldr	r3, [pc, #324]	; (80060d4 <BSP_LCD_InitEx+0x280>)
 8005f90:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8005f94:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Largest packet size possible to transmit in LP mode in VSA, VBP, VFP regions */
  /* Only useful when sending LP packets is allowed while streaming is active in video mode */
  hdsivideo_handle.LPLargestPacketSize = 16;
 8005f96:	4b4f      	ldr	r3, [pc, #316]	; (80060d4 <BSP_LCD_InitEx+0x280>)
 8005f98:	2210      	movs	r2, #16
 8005f9a:	649a      	str	r2, [r3, #72]	; 0x48
  
  /* Largest packet size possible to transmit in LP mode in HFP region during VACT period */
  /* Only useful when sending LP packets is allowed while streaming is active in video mode */
  hdsivideo_handle.LPVACTLargestPacketSize = 0;
 8005f9c:	4b4d      	ldr	r3, [pc, #308]	; (80060d4 <BSP_LCD_InitEx+0x280>)
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	64da      	str	r2, [r3, #76]	; 0x4c
  
  
  /* Specify for each region of the video frame, if the transmission of command in LP mode is allowed in this region */
  /* while streaming is active in video mode                                                                         */
  hdsivideo_handle.LPHorizontalFrontPorchEnable = DSI_LP_HFP_ENABLE;   /* Allow sending LP commands during HFP period */
 8005fa2:	4b4c      	ldr	r3, [pc, #304]	; (80060d4 <BSP_LCD_InitEx+0x280>)
 8005fa4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005fa8:	651a      	str	r2, [r3, #80]	; 0x50
  hdsivideo_handle.LPHorizontalBackPorchEnable  = DSI_LP_HBP_ENABLE;   /* Allow sending LP commands during HBP period */
 8005faa:	4b4a      	ldr	r3, [pc, #296]	; (80060d4 <BSP_LCD_InitEx+0x280>)
 8005fac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005fb0:	655a      	str	r2, [r3, #84]	; 0x54
  hdsivideo_handle.LPVerticalActiveEnable = DSI_LP_VACT_ENABLE;  /* Allow sending LP commands during VACT period */
 8005fb2:	4b48      	ldr	r3, [pc, #288]	; (80060d4 <BSP_LCD_InitEx+0x280>)
 8005fb4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005fb8:	659a      	str	r2, [r3, #88]	; 0x58
  hdsivideo_handle.LPVerticalFrontPorchEnable = DSI_LP_VFP_ENABLE;   /* Allow sending LP commands during VFP period */
 8005fba:	4b46      	ldr	r3, [pc, #280]	; (80060d4 <BSP_LCD_InitEx+0x280>)
 8005fbc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005fc0:	65da      	str	r2, [r3, #92]	; 0x5c
  hdsivideo_handle.LPVerticalBackPorchEnable = DSI_LP_VBP_ENABLE;   /* Allow sending LP commands during VBP period */
 8005fc2:	4b44      	ldr	r3, [pc, #272]	; (80060d4 <BSP_LCD_InitEx+0x280>)
 8005fc4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005fc8:	661a      	str	r2, [r3, #96]	; 0x60
  hdsivideo_handle.LPVerticalSyncActiveEnable = DSI_LP_VSYNC_ENABLE; /* Allow sending LP commands during VSync = VSA period */
 8005fca:	4b42      	ldr	r3, [pc, #264]	; (80060d4 <BSP_LCD_InitEx+0x280>)
 8005fcc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005fd0:	665a      	str	r2, [r3, #100]	; 0x64
  
  /* Configure DSI Video mode timings with settings set above */
  HAL_DSI_ConfigVideoMode(&(hdsi_eval), &(hdsivideo_handle));
 8005fd2:	4940      	ldr	r1, [pc, #256]	; (80060d4 <BSP_LCD_InitEx+0x280>)
 8005fd4:	483a      	ldr	r0, [pc, #232]	; (80060c0 <BSP_LCD_InitEx+0x26c>)
 8005fd6:	f7fb fa91 	bl	80014fc <HAL_DSI_ConfigVideoMode>

  /* Configure DSI PHY HS2LP and LP2HS timings */
  PhyTimings.ClockLaneHS2LPTime = 35;
 8005fda:	2323      	movs	r3, #35	; 0x23
 8005fdc:	60fb      	str	r3, [r7, #12]
  PhyTimings.ClockLaneLP2HSTime = 35;
 8005fde:	2323      	movs	r3, #35	; 0x23
 8005fe0:	613b      	str	r3, [r7, #16]
  PhyTimings.DataLaneHS2LPTime = 35;
 8005fe2:	2323      	movs	r3, #35	; 0x23
 8005fe4:	617b      	str	r3, [r7, #20]
  PhyTimings.DataLaneLP2HSTime = 35;
 8005fe6:	2323      	movs	r3, #35	; 0x23
 8005fe8:	61bb      	str	r3, [r7, #24]
  PhyTimings.DataLaneMaxReadTime = 0;
 8005fea:	2300      	movs	r3, #0
 8005fec:	61fb      	str	r3, [r7, #28]
  PhyTimings.StopWaitTime = 10;
 8005fee:	230a      	movs	r3, #10
 8005ff0:	623b      	str	r3, [r7, #32]
  HAL_DSI_ConfigPhyTimer(&hdsi_eval, &PhyTimings);
 8005ff2:	f107 030c 	add.w	r3, r7, #12
 8005ff6:	4619      	mov	r1, r3
 8005ff8:	4831      	ldr	r0, [pc, #196]	; (80060c0 <BSP_LCD_InitEx+0x26c>)
 8005ffa:	f7fb fc87 	bl	800190c <HAL_DSI_ConfigPhyTimer>
  
  
/************************LTDC Initialization***********************************/  
  
  /* Timing Configuration */    
  hltdc_eval.Init.HorizontalSync = (HSA - 1);
 8005ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006000:	3b01      	subs	r3, #1
 8006002:	4a35      	ldr	r2, [pc, #212]	; (80060d8 <BSP_LCD_InitEx+0x284>)
 8006004:	6153      	str	r3, [r2, #20]
  hltdc_eval.Init.AccumulatedHBP = (HSA + HBP - 1);
 8006006:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006008:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800600a:	4413      	add	r3, r2
 800600c:	3b01      	subs	r3, #1
 800600e:	4a32      	ldr	r2, [pc, #200]	; (80060d8 <BSP_LCD_InitEx+0x284>)
 8006010:	61d3      	str	r3, [r2, #28]
  hltdc_eval.Init.AccumulatedActiveW = (lcd_x_size + HSA + HBP - 1);
 8006012:	4b2e      	ldr	r3, [pc, #184]	; (80060cc <BSP_LCD_InitEx+0x278>)
 8006014:	681a      	ldr	r2, [r3, #0]
 8006016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006018:	441a      	add	r2, r3
 800601a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800601c:	4413      	add	r3, r2
 800601e:	3b01      	subs	r3, #1
 8006020:	4a2d      	ldr	r2, [pc, #180]	; (80060d8 <BSP_LCD_InitEx+0x284>)
 8006022:	6253      	str	r3, [r2, #36]	; 0x24
  hltdc_eval.Init.TotalWidth = (lcd_x_size + HSA + HBP + HFP - 1);
 8006024:	4b29      	ldr	r3, [pc, #164]	; (80060cc <BSP_LCD_InitEx+0x278>)
 8006026:	681a      	ldr	r2, [r3, #0]
 8006028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800602a:	441a      	add	r2, r3
 800602c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800602e:	441a      	add	r2, r3
 8006030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006032:	4413      	add	r3, r2
 8006034:	3b01      	subs	r3, #1
 8006036:	4a28      	ldr	r2, [pc, #160]	; (80060d8 <BSP_LCD_InitEx+0x284>)
 8006038:	62d3      	str	r3, [r2, #44]	; 0x2c
  
  /* Initialize the LCD pixel width and pixel height */
  hltdc_eval.LayerCfg->ImageWidth  = lcd_x_size;
 800603a:	4b24      	ldr	r3, [pc, #144]	; (80060cc <BSP_LCD_InitEx+0x278>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4a26      	ldr	r2, [pc, #152]	; (80060d8 <BSP_LCD_InitEx+0x284>)
 8006040:	6613      	str	r3, [r2, #96]	; 0x60
  hltdc_eval.LayerCfg->ImageHeight = lcd_y_size;   
 8006042:	4b23      	ldr	r3, [pc, #140]	; (80060d0 <BSP_LCD_InitEx+0x27c>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4a24      	ldr	r2, [pc, #144]	; (80060d8 <BSP_LCD_InitEx+0x284>)
 8006048:	6653      	str	r3, [r2, #100]	; 0x64
  /* LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 384 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 384 MHz / 7 = 54.857 MHz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_2 = 54.857 MHz / 2 = 27.429 MHz */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800604a:	4b24      	ldr	r3, [pc, #144]	; (80060dc <BSP_LCD_InitEx+0x288>)
 800604c:	2208      	movs	r2, #8
 800604e:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8006050:	4b22      	ldr	r3, [pc, #136]	; (80060dc <BSP_LCD_InitEx+0x288>)
 8006052:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8006056:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 7;
 8006058:	4b20      	ldr	r3, [pc, #128]	; (80060dc <BSP_LCD_InitEx+0x288>)
 800605a:	2207      	movs	r2, #7
 800605c:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 800605e:	4b1f      	ldr	r3, [pc, #124]	; (80060dc <BSP_LCD_InitEx+0x288>)
 8006060:	2200      	movs	r2, #0
 8006062:	629a      	str	r2, [r3, #40]	; 0x28
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 8006064:	481d      	ldr	r0, [pc, #116]	; (80060dc <BSP_LCD_InitEx+0x288>)
 8006066:	f7fd fdb9 	bl	8003bdc <HAL_RCCEx_PeriphCLKConfig>
  
  /* Background value */
  hltdc_eval.Init.Backcolor.Blue = 0;
 800606a:	4b1b      	ldr	r3, [pc, #108]	; (80060d8 <BSP_LCD_InitEx+0x284>)
 800606c:	2200      	movs	r2, #0
 800606e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc_eval.Init.Backcolor.Green = 0;
 8006072:	4b19      	ldr	r3, [pc, #100]	; (80060d8 <BSP_LCD_InitEx+0x284>)
 8006074:	2200      	movs	r2, #0
 8006076:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc_eval.Init.Backcolor.Red = 0;
 800607a:	4b17      	ldr	r3, [pc, #92]	; (80060d8 <BSP_LCD_InitEx+0x284>)
 800607c:	2200      	movs	r2, #0
 800607e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  hltdc_eval.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8006082:	4b15      	ldr	r3, [pc, #84]	; (80060d8 <BSP_LCD_InitEx+0x284>)
 8006084:	2200      	movs	r2, #0
 8006086:	611a      	str	r2, [r3, #16]
  hltdc_eval.Instance = LTDC;
 8006088:	4b13      	ldr	r3, [pc, #76]	; (80060d8 <BSP_LCD_InitEx+0x284>)
 800608a:	4a15      	ldr	r2, [pc, #84]	; (80060e0 <BSP_LCD_InitEx+0x28c>)
 800608c:	601a      	str	r2, [r3, #0]
  
  /* Get LTDC Configuration from DSI Configuration */
  HAL_LTDCEx_StructInitFromVideoConfig(&(hltdc_eval), &(hdsivideo_handle));
 800608e:	4911      	ldr	r1, [pc, #68]	; (80060d4 <BSP_LCD_InitEx+0x280>)
 8006090:	4811      	ldr	r0, [pc, #68]	; (80060d8 <BSP_LCD_InitEx+0x284>)
 8006092:	f7fd fb0a 	bl	80036aa <HAL_LTDCEx_StructInitFromVideoConfig>
  
  /* Initialize the LTDC */  
  HAL_LTDC_Init(&hltdc_eval);
 8006096:	4810      	ldr	r0, [pc, #64]	; (80060d8 <BSP_LCD_InitEx+0x284>)
 8006098:	f7fd f862 	bl	8003160 <HAL_LTDC_Init>

  /* Enable the DSI host and wrapper after the LTDC initialization
     To avoid any synchronization issue, the DSI shall be started after enabling the LTDC */
  HAL_DSI_Start(&(hdsi_eval));
 800609c:	4808      	ldr	r0, [pc, #32]	; (80060c0 <BSP_LCD_InitEx+0x26c>)
 800609e:	f7fb fc9f 	bl	80019e0 <HAL_DSI_Start>
  
#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 80060a2:	f000 fc23 	bl	80068ec <BSP_SDRAM_Init>
#endif /* DATA_IN_ExtSDRAM */
  
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80060a6:	480f      	ldr	r0, [pc, #60]	; (80060e4 <BSP_LCD_InitEx+0x290>)
 80060a8:	f000 f90e 	bl	80062c8 <BSP_LCD_SetFont>
/***********************OTM8009A Initialization********************************/  
  
  /* Initialize the OTM8009A LCD Display IC Driver (KoD LCD IC Driver)
  *  depending on configuration set in 'hdsivideo_handle'.
  */
  OTM8009A_Init(OTM8009A_FORMAT_RGB888, orientation);
 80060ac:	79fb      	ldrb	r3, [r7, #7]
 80060ae:	4619      	mov	r1, r3
 80060b0:	2000      	movs	r0, #0
 80060b2:	f7ff fadf 	bl	8005674 <OTM8009A_Init>
  
/***********************End OTM8009A Initialization****************************/ 
  
  return LCD_OK;
 80060b6:	2300      	movs	r3, #0
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	3758      	adds	r7, #88	; 0x58
 80060bc:	46bd      	mov	sp, r7
 80060be:	bd80      	pop	{r7, pc}
 80060c0:	2000049c 	.word	0x2000049c
 80060c4:	40016c00 	.word	0x40016c00
 80060c8:	43215e57 	.word	0x43215e57
 80060cc:	2000007c 	.word	0x2000007c
 80060d0:	20000080 	.word	0x20000080
 80060d4:	20000164 	.word	0x20000164
 80060d8:	200003f4 	.word	0x200003f4
 80060dc:	200001ec 	.word	0x200001ec
 80060e0:	40016800 	.word	0x40016800
 80060e4:	20000054 	.word	0x20000054

080060e8 <BSP_LCD_Reset>:
  *         Hw reset the LCD DSI activating its XRES signal (active low for some time)
  *         and desactivating it later.
  *         This signal is only cabled on Discovery Rev B and beyond.
  */
void BSP_LCD_Reset(void)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b086      	sub	sp, #24
 80060ec:	af00      	add	r7, sp, #0
#if !defined(USE_STM32469I_DISCO_REVA)
/* EVAL Rev B and beyond : reset the LCD by activation of XRES (active low) connected to PH7 */
  GPIO_InitTypeDef  gpio_init_structure;

  __HAL_RCC_GPIOH_CLK_ENABLE();
 80060ee:	2300      	movs	r3, #0
 80060f0:	603b      	str	r3, [r7, #0]
 80060f2:	4b16      	ldr	r3, [pc, #88]	; (800614c <BSP_LCD_Reset+0x64>)
 80060f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060f6:	4a15      	ldr	r2, [pc, #84]	; (800614c <BSP_LCD_Reset+0x64>)
 80060f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060fc:	6313      	str	r3, [r2, #48]	; 0x30
 80060fe:	4b13      	ldr	r3, [pc, #76]	; (800614c <BSP_LCD_Reset+0x64>)
 8006100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006102:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006106:	603b      	str	r3, [r7, #0]
 8006108:	683b      	ldr	r3, [r7, #0]

    /* Configure the GPIO on PH7 */
    gpio_init_structure.Pin   = GPIO_PIN_7;
 800610a:	2380      	movs	r3, #128	; 0x80
 800610c:	607b      	str	r3, [r7, #4]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_OD;
 800610e:	2311      	movs	r3, #17
 8006110:	60bb      	str	r3, [r7, #8]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8006112:	2300      	movs	r3, #0
 8006114:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8006116:	2303      	movs	r3, #3
 8006118:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 800611a:	1d3b      	adds	r3, r7, #4
 800611c:	4619      	mov	r1, r3
 800611e:	480c      	ldr	r0, [pc, #48]	; (8006150 <BSP_LCD_Reset+0x68>)
 8006120:	f7fb fd54 	bl	8001bcc <HAL_GPIO_Init>

    /* Activate XRES active low */
    HAL_GPIO_WritePin(GPIOH, GPIO_PIN_7, GPIO_PIN_RESET);
 8006124:	2200      	movs	r2, #0
 8006126:	2180      	movs	r1, #128	; 0x80
 8006128:	4809      	ldr	r0, [pc, #36]	; (8006150 <BSP_LCD_Reset+0x68>)
 800612a:	f7fc f807 	bl	800213c <HAL_GPIO_WritePin>

    HAL_Delay(20); /* wait 20 ms */
 800612e:	2014      	movs	r0, #20
 8006130:	f7fa fa56 	bl	80005e0 <HAL_Delay>

    /* Desactivate XRES */
    HAL_GPIO_WritePin(GPIOH, GPIO_PIN_7, GPIO_PIN_SET);
 8006134:	2201      	movs	r2, #1
 8006136:	2180      	movs	r1, #128	; 0x80
 8006138:	4805      	ldr	r0, [pc, #20]	; (8006150 <BSP_LCD_Reset+0x68>)
 800613a:	f7fb ffff 	bl	800213c <HAL_GPIO_WritePin>
    
    /* Wait for 10ms after releasing XRES before sending commands */
    HAL_Delay(10);    
 800613e:	200a      	movs	r0, #10
 8006140:	f7fa fa4e 	bl	80005e0 <HAL_Delay>
#else
  
#endif /* USE_STM32469I_DISCO_REVA == 0 */
}
 8006144:	bf00      	nop
 8006146:	3718      	adds	r7, #24
 8006148:	46bd      	mov	sp, r7
 800614a:	bd80      	pop	{r7, pc}
 800614c:	40023800 	.word	0x40023800
 8006150:	40021c00 	.word	0x40021c00

08006154 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8006154:	b480      	push	{r7}
 8006156:	af00      	add	r7, sp, #0
  return (lcd_x_size);
 8006158:	4b03      	ldr	r3, [pc, #12]	; (8006168 <BSP_LCD_GetXSize+0x14>)
 800615a:	681b      	ldr	r3, [r3, #0]
}
 800615c:	4618      	mov	r0, r3
 800615e:	46bd      	mov	sp, r7
 8006160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006164:	4770      	bx	lr
 8006166:	bf00      	nop
 8006168:	2000007c 	.word	0x2000007c

0800616c <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 800616c:	b480      	push	{r7}
 800616e:	af00      	add	r7, sp, #0
  return (lcd_y_size);
 8006170:	4b03      	ldr	r3, [pc, #12]	; (8006180 <BSP_LCD_GetYSize+0x14>)
 8006172:	681b      	ldr	r3, [r3, #0]
}
 8006174:	4618      	mov	r0, r3
 8006176:	46bd      	mov	sp, r7
 8006178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617c:	4770      	bx	lr
 800617e:	bf00      	nop
 8006180:	20000080 	.word	0x20000080

08006184 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b090      	sub	sp, #64	; 0x40
 8006188:	af00      	add	r7, sp, #0
 800618a:	4603      	mov	r3, r0
 800618c:	6039      	str	r1, [r7, #0]
 800618e:	80fb      	strh	r3, [r7, #6]
    LCD_LayerCfgTypeDef  Layercfg;

  /* Layer Init */
  Layercfg.WindowX0 = 0;
 8006190:	2300      	movs	r3, #0
 8006192:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8006194:	f7ff ffde 	bl	8006154 <BSP_LCD_GetXSize>
 8006198:	4603      	mov	r3, r0
 800619a:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 800619c:	2300      	movs	r3, #0
 800619e:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 80061a0:	f7ff ffe4 	bl	800616c <BSP_LCD_GetYSize>
 80061a4:	4603      	mov	r3, r0
 80061a6:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80061a8:	2300      	movs	r3, #0
 80061aa:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 80061b0:	23ff      	movs	r3, #255	; 0xff
 80061b2:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 80061b4:	2300      	movs	r3, #0
 80061b6:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 80061b8:	2300      	movs	r3, #0
 80061ba:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 80061be:	2300      	movs	r3, #0
 80061c0:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 80061c4:	2300      	movs	r3, #0
 80061c6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80061ca:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80061ce:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80061d0:	2307      	movs	r3, #7
 80061d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 80061d4:	f7ff ffbe 	bl	8006154 <BSP_LCD_GetXSize>
 80061d8:	4603      	mov	r3, r0
 80061da:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 80061dc:	f7ff ffc6 	bl	800616c <BSP_LCD_GetYSize>
 80061e0:	4603      	mov	r3, r0
 80061e2:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hltdc_eval, &Layercfg, LayerIndex); 
 80061e4:	88fa      	ldrh	r2, [r7, #6]
 80061e6:	f107 030c 	add.w	r3, r7, #12
 80061ea:	4619      	mov	r1, r3
 80061ec:	4812      	ldr	r0, [pc, #72]	; (8006238 <BSP_LCD_LayerDefaultInit+0xb4>)
 80061ee:	f7fd f887 	bl	8003300 <HAL_LTDC_ConfigLayer>
  
  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 80061f2:	88fa      	ldrh	r2, [r7, #6]
 80061f4:	4911      	ldr	r1, [pc, #68]	; (800623c <BSP_LCD_LayerDefaultInit+0xb8>)
 80061f6:	4613      	mov	r3, r2
 80061f8:	005b      	lsls	r3, r3, #1
 80061fa:	4413      	add	r3, r2
 80061fc:	009b      	lsls	r3, r3, #2
 80061fe:	440b      	add	r3, r1
 8006200:	3304      	adds	r3, #4
 8006202:	f04f 32ff 	mov.w	r2, #4294967295
 8006206:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8006208:	88fa      	ldrh	r2, [r7, #6]
 800620a:	490c      	ldr	r1, [pc, #48]	; (800623c <BSP_LCD_LayerDefaultInit+0xb8>)
 800620c:	4613      	mov	r3, r2
 800620e:	005b      	lsls	r3, r3, #1
 8006210:	4413      	add	r3, r2
 8006212:	009b      	lsls	r3, r3, #2
 8006214:	440b      	add	r3, r1
 8006216:	3308      	adds	r3, #8
 8006218:	4a09      	ldr	r2, [pc, #36]	; (8006240 <BSP_LCD_LayerDefaultInit+0xbc>)
 800621a:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK;
 800621c:	88fa      	ldrh	r2, [r7, #6]
 800621e:	4907      	ldr	r1, [pc, #28]	; (800623c <BSP_LCD_LayerDefaultInit+0xb8>)
 8006220:	4613      	mov	r3, r2
 8006222:	005b      	lsls	r3, r3, #1
 8006224:	4413      	add	r3, r2
 8006226:	009b      	lsls	r3, r3, #2
 8006228:	440b      	add	r3, r1
 800622a:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 800622e:	601a      	str	r2, [r3, #0]
}
 8006230:	bf00      	nop
 8006232:	3740      	adds	r7, #64	; 0x40
 8006234:	46bd      	mov	sp, r7
 8006236:	bd80      	pop	{r7, pc}
 8006238:	200003f4 	.word	0x200003f4
 800623c:	200001d4 	.word	0x200001d4
 8006240:	20000054 	.word	0x20000054

08006244 <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8006244:	b480      	push	{r7}
 8006246:	b083      	sub	sp, #12
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 800624c:	4a04      	ldr	r2, [pc, #16]	; (8006260 <BSP_LCD_SelectLayer+0x1c>)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6013      	str	r3, [r2, #0]
}
 8006252:	bf00      	nop
 8006254:	370c      	adds	r7, #12
 8006256:	46bd      	mov	sp, r7
 8006258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625c:	4770      	bx	lr
 800625e:	bf00      	nop
 8006260:	200001d0 	.word	0x200001d0

08006264 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8006264:	b480      	push	{r7}
 8006266:	b083      	sub	sp, #12
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 800626c:	4b07      	ldr	r3, [pc, #28]	; (800628c <BSP_LCD_SetTextColor+0x28>)
 800626e:	681a      	ldr	r2, [r3, #0]
 8006270:	4907      	ldr	r1, [pc, #28]	; (8006290 <BSP_LCD_SetTextColor+0x2c>)
 8006272:	4613      	mov	r3, r2
 8006274:	005b      	lsls	r3, r3, #1
 8006276:	4413      	add	r3, r2
 8006278:	009b      	lsls	r3, r3, #2
 800627a:	440b      	add	r3, r1
 800627c:	687a      	ldr	r2, [r7, #4]
 800627e:	601a      	str	r2, [r3, #0]
}
 8006280:	bf00      	nop
 8006282:	370c      	adds	r7, #12
 8006284:	46bd      	mov	sp, r7
 8006286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628a:	4770      	bx	lr
 800628c:	200001d0 	.word	0x200001d0
 8006290:	200001d4 	.word	0x200001d4

08006294 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8006294:	b480      	push	{r7}
 8006296:	b083      	sub	sp, #12
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 800629c:	4b08      	ldr	r3, [pc, #32]	; (80062c0 <BSP_LCD_SetBackColor+0x2c>)
 800629e:	681a      	ldr	r2, [r3, #0]
 80062a0:	4908      	ldr	r1, [pc, #32]	; (80062c4 <BSP_LCD_SetBackColor+0x30>)
 80062a2:	4613      	mov	r3, r2
 80062a4:	005b      	lsls	r3, r3, #1
 80062a6:	4413      	add	r3, r2
 80062a8:	009b      	lsls	r3, r3, #2
 80062aa:	440b      	add	r3, r1
 80062ac:	3304      	adds	r3, #4
 80062ae:	687a      	ldr	r2, [r7, #4]
 80062b0:	601a      	str	r2, [r3, #0]
}
 80062b2:	bf00      	nop
 80062b4:	370c      	adds	r7, #12
 80062b6:	46bd      	mov	sp, r7
 80062b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062bc:	4770      	bx	lr
 80062be:	bf00      	nop
 80062c0:	200001d0 	.word	0x200001d0
 80062c4:	200001d4 	.word	0x200001d4

080062c8 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 80062c8:	b480      	push	{r7}
 80062ca:	b083      	sub	sp, #12
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 80062d0:	4b08      	ldr	r3, [pc, #32]	; (80062f4 <BSP_LCD_SetFont+0x2c>)
 80062d2:	681a      	ldr	r2, [r3, #0]
 80062d4:	4908      	ldr	r1, [pc, #32]	; (80062f8 <BSP_LCD_SetFont+0x30>)
 80062d6:	4613      	mov	r3, r2
 80062d8:	005b      	lsls	r3, r3, #1
 80062da:	4413      	add	r3, r2
 80062dc:	009b      	lsls	r3, r3, #2
 80062de:	440b      	add	r3, r1
 80062e0:	3308      	adds	r3, #8
 80062e2:	687a      	ldr	r2, [r7, #4]
 80062e4:	601a      	str	r2, [r3, #0]
}
 80062e6:	bf00      	nop
 80062e8:	370c      	adds	r7, #12
 80062ea:	46bd      	mov	sp, r7
 80062ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f0:	4770      	bx	lr
 80062f2:	bf00      	nop
 80062f4:	200001d0 	.word	0x200001d0
 80062f8:	200001d4 	.word	0x200001d4

080062fc <BSP_LCD_Clear>:
/**
  * @brief  Clears the whole currently active layer of LTDC.
  * @param  Color: Color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{
 80062fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80062fe:	b085      	sub	sp, #20
 8006300:	af02      	add	r7, sp, #8
 8006302:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hltdc_eval.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8006304:	4b0f      	ldr	r3, [pc, #60]	; (8006344 <BSP_LCD_Clear+0x48>)
 8006306:	681c      	ldr	r4, [r3, #0]
 8006308:	4b0e      	ldr	r3, [pc, #56]	; (8006344 <BSP_LCD_Clear+0x48>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4a0e      	ldr	r2, [pc, #56]	; (8006348 <BSP_LCD_Clear+0x4c>)
 800630e:	2134      	movs	r1, #52	; 0x34
 8006310:	fb01 f303 	mul.w	r3, r1, r3
 8006314:	4413      	add	r3, r2
 8006316:	335c      	adds	r3, #92	; 0x5c
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	461e      	mov	r6, r3
 800631c:	f7ff ff1a 	bl	8006154 <BSP_LCD_GetXSize>
 8006320:	4605      	mov	r5, r0
 8006322:	f7ff ff23 	bl	800616c <BSP_LCD_GetYSize>
 8006326:	4602      	mov	r2, r0
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	9301      	str	r3, [sp, #4]
 800632c:	2300      	movs	r3, #0
 800632e:	9300      	str	r3, [sp, #0]
 8006330:	4613      	mov	r3, r2
 8006332:	462a      	mov	r2, r5
 8006334:	4631      	mov	r1, r6
 8006336:	4620      	mov	r0, r4
 8006338:	f000 faa0 	bl	800687c <LL_FillBuffer>
}
 800633c:	bf00      	nop
 800633e:	370c      	adds	r7, #12
 8006340:	46bd      	mov	sp, r7
 8006342:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006344:	200001d0 	.word	0x200001d0
 8006348:	200003f4 	.word	0x200003f4

0800634c <BSP_LCD_DisplayChar>:
  * @param  Ypos: Line where to display the character shape.
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 800634c:	b590      	push	{r4, r7, lr}
 800634e:	b083      	sub	sp, #12
 8006350:	af00      	add	r7, sp, #0
 8006352:	4603      	mov	r3, r0
 8006354:	80fb      	strh	r3, [r7, #6]
 8006356:	460b      	mov	r3, r1
 8006358:	80bb      	strh	r3, [r7, #4]
 800635a:	4613      	mov	r3, r2
 800635c:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800635e:	4b1b      	ldr	r3, [pc, #108]	; (80063cc <BSP_LCD_DisplayChar+0x80>)
 8006360:	681a      	ldr	r2, [r3, #0]
 8006362:	491b      	ldr	r1, [pc, #108]	; (80063d0 <BSP_LCD_DisplayChar+0x84>)
 8006364:	4613      	mov	r3, r2
 8006366:	005b      	lsls	r3, r3, #1
 8006368:	4413      	add	r3, r2
 800636a:	009b      	lsls	r3, r3, #2
 800636c:	440b      	add	r3, r1
 800636e:	3308      	adds	r3, #8
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	6819      	ldr	r1, [r3, #0]
 8006374:	78fb      	ldrb	r3, [r7, #3]
 8006376:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 800637a:	4b14      	ldr	r3, [pc, #80]	; (80063cc <BSP_LCD_DisplayChar+0x80>)
 800637c:	681a      	ldr	r2, [r3, #0]
 800637e:	4c14      	ldr	r4, [pc, #80]	; (80063d0 <BSP_LCD_DisplayChar+0x84>)
 8006380:	4613      	mov	r3, r2
 8006382:	005b      	lsls	r3, r3, #1
 8006384:	4413      	add	r3, r2
 8006386:	009b      	lsls	r3, r3, #2
 8006388:	4423      	add	r3, r4
 800638a:	3308      	adds	r3, #8
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8006390:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8006394:	4b0d      	ldr	r3, [pc, #52]	; (80063cc <BSP_LCD_DisplayChar+0x80>)
 8006396:	681a      	ldr	r2, [r3, #0]
 8006398:	4c0d      	ldr	r4, [pc, #52]	; (80063d0 <BSP_LCD_DisplayChar+0x84>)
 800639a:	4613      	mov	r3, r2
 800639c:	005b      	lsls	r3, r3, #1
 800639e:	4413      	add	r3, r2
 80063a0:	009b      	lsls	r3, r3, #2
 80063a2:	4423      	add	r3, r4
 80063a4:	3308      	adds	r3, #8
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	889b      	ldrh	r3, [r3, #4]
 80063aa:	3307      	adds	r3, #7
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	da00      	bge.n	80063b2 <BSP_LCD_DisplayChar+0x66>
 80063b0:	3307      	adds	r3, #7
 80063b2:	10db      	asrs	r3, r3, #3
 80063b4:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80063b8:	18ca      	adds	r2, r1, r3
 80063ba:	88b9      	ldrh	r1, [r7, #4]
 80063bc:	88fb      	ldrh	r3, [r7, #6]
 80063be:	4618      	mov	r0, r3
 80063c0:	f000 f9a4 	bl	800670c <DrawChar>
}
 80063c4:	bf00      	nop
 80063c6:	370c      	adds	r7, #12
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bd90      	pop	{r4, r7, pc}
 80063cc:	200001d0 	.word	0x200001d0
 80063d0:	200001d4 	.word	0x200001d4

080063d4 <BSP_LCD_DisplayStringAt>:
  *            @arg  CENTER_MODE
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 80063d4:	b5b0      	push	{r4, r5, r7, lr}
 80063d6:	b088      	sub	sp, #32
 80063d8:	af00      	add	r7, sp, #0
 80063da:	60ba      	str	r2, [r7, #8]
 80063dc:	461a      	mov	r2, r3
 80063de:	4603      	mov	r3, r0
 80063e0:	81fb      	strh	r3, [r7, #14]
 80063e2:	460b      	mov	r3, r1
 80063e4:	81bb      	strh	r3, [r7, #12]
 80063e6:	4613      	mov	r3, r2
 80063e8:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 80063ea:	2301      	movs	r3, #1
 80063ec:	83fb      	strh	r3, [r7, #30]
 80063ee:	2300      	movs	r3, #0
 80063f0:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0;
 80063f2:	2300      	movs	r3, #0
 80063f4:	61bb      	str	r3, [r7, #24]
 80063f6:	2300      	movs	r3, #0
 80063f8:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	617b      	str	r3, [r7, #20]

  /* Get the text size */
  while (*ptr++) size ++ ;
 80063fe:	e002      	b.n	8006406 <BSP_LCD_DisplayStringAt+0x32>
 8006400:	69bb      	ldr	r3, [r7, #24]
 8006402:	3301      	adds	r3, #1
 8006404:	61bb      	str	r3, [r7, #24]
 8006406:	697b      	ldr	r3, [r7, #20]
 8006408:	1c5a      	adds	r2, r3, #1
 800640a:	617a      	str	r2, [r7, #20]
 800640c:	781b      	ldrb	r3, [r3, #0]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d1f6      	bne.n	8006400 <BSP_LCD_DisplayStringAt+0x2c>

  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8006412:	f7ff fe9f 	bl	8006154 <BSP_LCD_GetXSize>
 8006416:	4601      	mov	r1, r0
 8006418:	4b50      	ldr	r3, [pc, #320]	; (800655c <BSP_LCD_DisplayStringAt+0x188>)
 800641a:	681a      	ldr	r2, [r3, #0]
 800641c:	4850      	ldr	r0, [pc, #320]	; (8006560 <BSP_LCD_DisplayStringAt+0x18c>)
 800641e:	4613      	mov	r3, r2
 8006420:	005b      	lsls	r3, r3, #1
 8006422:	4413      	add	r3, r2
 8006424:	009b      	lsls	r3, r3, #2
 8006426:	4403      	add	r3, r0
 8006428:	3308      	adds	r3, #8
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	889b      	ldrh	r3, [r3, #4]
 800642e:	fbb1 f3f3 	udiv	r3, r1, r3
 8006432:	613b      	str	r3, [r7, #16]

  switch (Mode)
 8006434:	79fb      	ldrb	r3, [r7, #7]
 8006436:	2b03      	cmp	r3, #3
 8006438:	d01c      	beq.n	8006474 <BSP_LCD_DisplayStringAt+0xa0>
 800643a:	2b03      	cmp	r3, #3
 800643c:	dc33      	bgt.n	80064a6 <BSP_LCD_DisplayStringAt+0xd2>
 800643e:	2b01      	cmp	r3, #1
 8006440:	d002      	beq.n	8006448 <BSP_LCD_DisplayStringAt+0x74>
 8006442:	2b02      	cmp	r3, #2
 8006444:	d019      	beq.n	800647a <BSP_LCD_DisplayStringAt+0xa6>
 8006446:	e02e      	b.n	80064a6 <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8006448:	693a      	ldr	r2, [r7, #16]
 800644a:	69bb      	ldr	r3, [r7, #24]
 800644c:	1ad1      	subs	r1, r2, r3
 800644e:	4b43      	ldr	r3, [pc, #268]	; (800655c <BSP_LCD_DisplayStringAt+0x188>)
 8006450:	681a      	ldr	r2, [r3, #0]
 8006452:	4843      	ldr	r0, [pc, #268]	; (8006560 <BSP_LCD_DisplayStringAt+0x18c>)
 8006454:	4613      	mov	r3, r2
 8006456:	005b      	lsls	r3, r3, #1
 8006458:	4413      	add	r3, r2
 800645a:	009b      	lsls	r3, r3, #2
 800645c:	4403      	add	r3, r0
 800645e:	3308      	adds	r3, #8
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	889b      	ldrh	r3, [r3, #4]
 8006464:	fb03 f301 	mul.w	r3, r3, r1
 8006468:	085b      	lsrs	r3, r3, #1
 800646a:	b29a      	uxth	r2, r3
 800646c:	89fb      	ldrh	r3, [r7, #14]
 800646e:	4413      	add	r3, r2
 8006470:	83fb      	strh	r3, [r7, #30]
      break;
 8006472:	e01b      	b.n	80064ac <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
 8006474:	89fb      	ldrh	r3, [r7, #14]
 8006476:	83fb      	strh	r3, [r7, #30]
      break;
 8006478:	e018      	b.n	80064ac <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      refcolumn = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 800647a:	693a      	ldr	r2, [r7, #16]
 800647c:	69bb      	ldr	r3, [r7, #24]
 800647e:	1ad3      	subs	r3, r2, r3
 8006480:	b299      	uxth	r1, r3
 8006482:	4b36      	ldr	r3, [pc, #216]	; (800655c <BSP_LCD_DisplayStringAt+0x188>)
 8006484:	681a      	ldr	r2, [r3, #0]
 8006486:	4836      	ldr	r0, [pc, #216]	; (8006560 <BSP_LCD_DisplayStringAt+0x18c>)
 8006488:	4613      	mov	r3, r2
 800648a:	005b      	lsls	r3, r3, #1
 800648c:	4413      	add	r3, r2
 800648e:	009b      	lsls	r3, r3, #2
 8006490:	4403      	add	r3, r0
 8006492:	3308      	adds	r3, #8
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	889b      	ldrh	r3, [r3, #4]
 8006498:	fb11 f303 	smulbb	r3, r1, r3
 800649c:	b29a      	uxth	r2, r3
 800649e:	89fb      	ldrh	r3, [r7, #14]
 80064a0:	1ad3      	subs	r3, r2, r3
 80064a2:	83fb      	strh	r3, [r7, #30]
      break;
 80064a4:	e002      	b.n	80064ac <BSP_LCD_DisplayStringAt+0xd8>
    }
  default:
    {
      refcolumn = Xpos;
 80064a6:	89fb      	ldrh	r3, [r7, #14]
 80064a8:	83fb      	strh	r3, [r7, #30]
      break;
 80064aa:	bf00      	nop
    }
  }

  /* Check that the Start column is located in the screen */
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
 80064ac:	8bfb      	ldrh	r3, [r7, #30]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d003      	beq.n	80064ba <BSP_LCD_DisplayStringAt+0xe6>
 80064b2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	da1d      	bge.n	80064f6 <BSP_LCD_DisplayStringAt+0x122>
  {
    refcolumn = 1;
 80064ba:	2301      	movs	r3, #1
 80064bc:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80064be:	e01a      	b.n	80064f6 <BSP_LCD_DisplayStringAt+0x122>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Ypos, *Text);
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	781a      	ldrb	r2, [r3, #0]
 80064c4:	89b9      	ldrh	r1, [r7, #12]
 80064c6:	8bfb      	ldrh	r3, [r7, #30]
 80064c8:	4618      	mov	r0, r3
 80064ca:	f7ff ff3f 	bl	800634c <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 80064ce:	4b23      	ldr	r3, [pc, #140]	; (800655c <BSP_LCD_DisplayStringAt+0x188>)
 80064d0:	681a      	ldr	r2, [r3, #0]
 80064d2:	4923      	ldr	r1, [pc, #140]	; (8006560 <BSP_LCD_DisplayStringAt+0x18c>)
 80064d4:	4613      	mov	r3, r2
 80064d6:	005b      	lsls	r3, r3, #1
 80064d8:	4413      	add	r3, r2
 80064da:	009b      	lsls	r3, r3, #2
 80064dc:	440b      	add	r3, r1
 80064de:	3308      	adds	r3, #8
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	889a      	ldrh	r2, [r3, #4]
 80064e4:	8bfb      	ldrh	r3, [r7, #30]
 80064e6:	4413      	add	r3, r2
 80064e8:	83fb      	strh	r3, [r7, #30]

    /* Point on the next character */
    Text++;
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	3301      	adds	r3, #1
 80064ee:	60bb      	str	r3, [r7, #8]
    i++;
 80064f0:	8bbb      	ldrh	r3, [r7, #28]
 80064f2:	3301      	adds	r3, #1
 80064f4:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	781b      	ldrb	r3, [r3, #0]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	bf14      	ite	ne
 80064fe:	2301      	movne	r3, #1
 8006500:	2300      	moveq	r3, #0
 8006502:	b2dc      	uxtb	r4, r3
 8006504:	f7ff fe26 	bl	8006154 <BSP_LCD_GetXSize>
 8006508:	8bb9      	ldrh	r1, [r7, #28]
 800650a:	4b14      	ldr	r3, [pc, #80]	; (800655c <BSP_LCD_DisplayStringAt+0x188>)
 800650c:	681a      	ldr	r2, [r3, #0]
 800650e:	4d14      	ldr	r5, [pc, #80]	; (8006560 <BSP_LCD_DisplayStringAt+0x18c>)
 8006510:	4613      	mov	r3, r2
 8006512:	005b      	lsls	r3, r3, #1
 8006514:	4413      	add	r3, r2
 8006516:	009b      	lsls	r3, r3, #2
 8006518:	442b      	add	r3, r5
 800651a:	3308      	adds	r3, #8
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	889b      	ldrh	r3, [r3, #4]
 8006520:	fb03 f301 	mul.w	r3, r3, r1
 8006524:	1ac3      	subs	r3, r0, r3
 8006526:	b299      	uxth	r1, r3
 8006528:	4b0c      	ldr	r3, [pc, #48]	; (800655c <BSP_LCD_DisplayStringAt+0x188>)
 800652a:	681a      	ldr	r2, [r3, #0]
 800652c:	480c      	ldr	r0, [pc, #48]	; (8006560 <BSP_LCD_DisplayStringAt+0x18c>)
 800652e:	4613      	mov	r3, r2
 8006530:	005b      	lsls	r3, r3, #1
 8006532:	4413      	add	r3, r2
 8006534:	009b      	lsls	r3, r3, #2
 8006536:	4403      	add	r3, r0
 8006538:	3308      	adds	r3, #8
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	889b      	ldrh	r3, [r3, #4]
 800653e:	4299      	cmp	r1, r3
 8006540:	bf2c      	ite	cs
 8006542:	2301      	movcs	r3, #1
 8006544:	2300      	movcc	r3, #0
 8006546:	b2db      	uxtb	r3, r3
 8006548:	4023      	ands	r3, r4
 800654a:	b2db      	uxtb	r3, r3
 800654c:	2b00      	cmp	r3, #0
 800654e:	d1b7      	bne.n	80064c0 <BSP_LCD_DisplayStringAt+0xec>
  }

}
 8006550:	bf00      	nop
 8006552:	bf00      	nop
 8006554:	3720      	adds	r7, #32
 8006556:	46bd      	mov	sp, r7
 8006558:	bdb0      	pop	{r4, r5, r7, pc}
 800655a:	bf00      	nop
 800655c:	200001d0 	.word	0x200001d0
 8006560:	200001d4 	.word	0x200001d4

08006564 <BSP_LCD_DisplayOn>:
/**
  * @brief  Switch back on the display if was switched off by previous call of BSP_LCD_DisplayOff().
  *         Exit DSI ULPM mode if was allowed and configured in Dsi Configuration.
  */
void BSP_LCD_DisplayOn(void)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b082      	sub	sp, #8
 8006568:	af02      	add	r7, sp, #8
  /* Send Display on DCS command to display */
  HAL_DSI_ShortWrite(&(hdsi_eval),
 800656a:	4b06      	ldr	r3, [pc, #24]	; (8006584 <BSP_LCD_DisplayOn+0x20>)
 800656c:	6819      	ldr	r1, [r3, #0]
 800656e:	2300      	movs	r3, #0
 8006570:	9300      	str	r3, [sp, #0]
 8006572:	2329      	movs	r3, #41	; 0x29
 8006574:	2215      	movs	r2, #21
 8006576:	4804      	ldr	r0, [pc, #16]	; (8006588 <BSP_LCD_DisplayOn+0x24>)
 8006578:	f7fb fa6e 	bl	8001a58 <HAL_DSI_ShortWrite>
                     hdsivideo_handle.VirtualChannelID,
                     DSI_DCS_SHORT_PKT_WRITE_P1,
                     OTM8009A_CMD_DISPON,
                     0x00);
  
}
 800657c:	bf00      	nop
 800657e:	46bd      	mov	sp, r7
 8006580:	bd80      	pop	{r7, pc}
 8006582:	bf00      	nop
 8006584:	20000164 	.word	0x20000164
 8006588:	2000049c 	.word	0x2000049c

0800658c <DSI_IO_WriteCmd>:
  *                 If inferior to 2, a long write command is performed else short.
  * @param  pParams: Pointer to parameter values table.
  * @retval HAL status
  */
void DSI_IO_WriteCmd(uint32_t NbrParams, uint8_t *pParams)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b084      	sub	sp, #16
 8006590:	af02      	add	r7, sp, #8
 8006592:	6078      	str	r0, [r7, #4]
 8006594:	6039      	str	r1, [r7, #0]
  if(NbrParams <= 1)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2b01      	cmp	r3, #1
 800659a:	d80d      	bhi.n	80065b8 <DSI_IO_WriteCmd+0x2c>
  {
   HAL_DSI_ShortWrite(&hdsi_eval, LCD_OTM8009A_ID, DSI_DCS_SHORT_PKT_WRITE_P1, pParams[0], pParams[1]); 
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	781b      	ldrb	r3, [r3, #0]
 80065a0:	461a      	mov	r2, r3
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	3301      	adds	r3, #1
 80065a6:	781b      	ldrb	r3, [r3, #0]
 80065a8:	9300      	str	r3, [sp, #0]
 80065aa:	4613      	mov	r3, r2
 80065ac:	2215      	movs	r2, #21
 80065ae:	2100      	movs	r1, #0
 80065b0:	480a      	ldr	r0, [pc, #40]	; (80065dc <DSI_IO_WriteCmd+0x50>)
 80065b2:	f7fb fa51 	bl	8001a58 <HAL_DSI_ShortWrite>
  }
  else
  {
   HAL_DSI_LongWrite(&hdsi_eval,  LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams); 
  }
}
 80065b6:	e00d      	b.n	80065d4 <DSI_IO_WriteCmd+0x48>
   HAL_DSI_LongWrite(&hdsi_eval,  LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams); 
 80065b8:	683a      	ldr	r2, [r7, #0]
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	4413      	add	r3, r2
 80065be:	781b      	ldrb	r3, [r3, #0]
 80065c0:	461a      	mov	r2, r3
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	9301      	str	r3, [sp, #4]
 80065c6:	9200      	str	r2, [sp, #0]
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2239      	movs	r2, #57	; 0x39
 80065cc:	2100      	movs	r1, #0
 80065ce:	4803      	ldr	r0, [pc, #12]	; (80065dc <DSI_IO_WriteCmd+0x50>)
 80065d0:	f7fb fa64 	bl	8001a9c <HAL_DSI_LongWrite>
}
 80065d4:	bf00      	nop
 80065d6:	3708      	adds	r7, #8
 80065d8:	46bd      	mov	sp, r7
 80065da:	bd80      	pop	{r7, pc}
 80065dc:	2000049c 	.word	0x2000049c

080065e0 <BSP_LCD_MspInit>:
/**
  * @brief  Initialize the BSP LCD Msp.
  * Application can surcharge if needed this function implementation
  */
__weak void BSP_LCD_MspInit(void)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b084      	sub	sp, #16
 80065e4:	af00      	add	r7, sp, #0
  /** @brief Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80065e6:	2300      	movs	r3, #0
 80065e8:	60fb      	str	r3, [r7, #12]
 80065ea:	4b34      	ldr	r3, [pc, #208]	; (80066bc <BSP_LCD_MspInit+0xdc>)
 80065ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065ee:	4a33      	ldr	r2, [pc, #204]	; (80066bc <BSP_LCD_MspInit+0xdc>)
 80065f0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80065f4:	6453      	str	r3, [r2, #68]	; 0x44
 80065f6:	4b31      	ldr	r3, [pc, #196]	; (80066bc <BSP_LCD_MspInit+0xdc>)
 80065f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065fa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80065fe:	60fb      	str	r3, [r7, #12]
 8006600:	68fb      	ldr	r3, [r7, #12]

  /** @brief Toggle Sw reset of LTDC IP */
  __HAL_RCC_LTDC_FORCE_RESET();
 8006602:	4b2e      	ldr	r3, [pc, #184]	; (80066bc <BSP_LCD_MspInit+0xdc>)
 8006604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006606:	4a2d      	ldr	r2, [pc, #180]	; (80066bc <BSP_LCD_MspInit+0xdc>)
 8006608:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800660c:	6253      	str	r3, [r2, #36]	; 0x24
  __HAL_RCC_LTDC_RELEASE_RESET();
 800660e:	4b2b      	ldr	r3, [pc, #172]	; (80066bc <BSP_LCD_MspInit+0xdc>)
 8006610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006612:	4a2a      	ldr	r2, [pc, #168]	; (80066bc <BSP_LCD_MspInit+0xdc>)
 8006614:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006618:	6253      	str	r3, [r2, #36]	; 0x24

  /** @brief Enable the DMA2D clock */
  __HAL_RCC_DMA2D_CLK_ENABLE();
 800661a:	2300      	movs	r3, #0
 800661c:	60bb      	str	r3, [r7, #8]
 800661e:	4b27      	ldr	r3, [pc, #156]	; (80066bc <BSP_LCD_MspInit+0xdc>)
 8006620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006622:	4a26      	ldr	r2, [pc, #152]	; (80066bc <BSP_LCD_MspInit+0xdc>)
 8006624:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006628:	6313      	str	r3, [r2, #48]	; 0x30
 800662a:	4b24      	ldr	r3, [pc, #144]	; (80066bc <BSP_LCD_MspInit+0xdc>)
 800662c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800662e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006632:	60bb      	str	r3, [r7, #8]
 8006634:	68bb      	ldr	r3, [r7, #8]

  /** @brief Toggle Sw reset of DMA2D IP */
  __HAL_RCC_DMA2D_FORCE_RESET();
 8006636:	4b21      	ldr	r3, [pc, #132]	; (80066bc <BSP_LCD_MspInit+0xdc>)
 8006638:	691b      	ldr	r3, [r3, #16]
 800663a:	4a20      	ldr	r2, [pc, #128]	; (80066bc <BSP_LCD_MspInit+0xdc>)
 800663c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006640:	6113      	str	r3, [r2, #16]
  __HAL_RCC_DMA2D_RELEASE_RESET();
 8006642:	4b1e      	ldr	r3, [pc, #120]	; (80066bc <BSP_LCD_MspInit+0xdc>)
 8006644:	691b      	ldr	r3, [r3, #16]
 8006646:	4a1d      	ldr	r2, [pc, #116]	; (80066bc <BSP_LCD_MspInit+0xdc>)
 8006648:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800664c:	6113      	str	r3, [r2, #16]

  /** @brief Enable DSI Host and wrapper clocks */
  __HAL_RCC_DSI_CLK_ENABLE();
 800664e:	2300      	movs	r3, #0
 8006650:	607b      	str	r3, [r7, #4]
 8006652:	4b1a      	ldr	r3, [pc, #104]	; (80066bc <BSP_LCD_MspInit+0xdc>)
 8006654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006656:	4a19      	ldr	r2, [pc, #100]	; (80066bc <BSP_LCD_MspInit+0xdc>)
 8006658:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800665c:	6453      	str	r3, [r2, #68]	; 0x44
 800665e:	4b17      	ldr	r3, [pc, #92]	; (80066bc <BSP_LCD_MspInit+0xdc>)
 8006660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006662:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006666:	607b      	str	r3, [r7, #4]
 8006668:	687b      	ldr	r3, [r7, #4]

  /** @brief Soft Reset the DSI Host and wrapper */
  __HAL_RCC_DSI_FORCE_RESET();
 800666a:	4b14      	ldr	r3, [pc, #80]	; (80066bc <BSP_LCD_MspInit+0xdc>)
 800666c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800666e:	4a13      	ldr	r2, [pc, #76]	; (80066bc <BSP_LCD_MspInit+0xdc>)
 8006670:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006674:	6253      	str	r3, [r2, #36]	; 0x24
  __HAL_RCC_DSI_RELEASE_RESET();
 8006676:	4b11      	ldr	r3, [pc, #68]	; (80066bc <BSP_LCD_MspInit+0xdc>)
 8006678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800667a:	4a10      	ldr	r2, [pc, #64]	; (80066bc <BSP_LCD_MspInit+0xdc>)
 800667c:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8006680:	6253      	str	r3, [r2, #36]	; 0x24

  /** @brief NVIC configuration for LTDC interrupt that is now enabled */
  HAL_NVIC_SetPriority(LTDC_IRQn, 3, 0);
 8006682:	2200      	movs	r2, #0
 8006684:	2103      	movs	r1, #3
 8006686:	2058      	movs	r0, #88	; 0x58
 8006688:	f7fa f8a9 	bl	80007de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800668c:	2058      	movs	r0, #88	; 0x58
 800668e:	f7fa f8c2 	bl	8000816 <HAL_NVIC_EnableIRQ>

  /** @brief NVIC configuration for DMA2D interrupt that is now enabled */
  HAL_NVIC_SetPriority(DMA2D_IRQn, 3, 0);
 8006692:	2200      	movs	r2, #0
 8006694:	2103      	movs	r1, #3
 8006696:	205a      	movs	r0, #90	; 0x5a
 8006698:	f7fa f8a1 	bl	80007de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800669c:	205a      	movs	r0, #90	; 0x5a
 800669e:	f7fa f8ba 	bl	8000816 <HAL_NVIC_EnableIRQ>

  /** @brief NVIC configuration for DSI interrupt that is now enabled */
  HAL_NVIC_SetPriority(DSI_IRQn, 3, 0);
 80066a2:	2200      	movs	r2, #0
 80066a4:	2103      	movs	r1, #3
 80066a6:	205c      	movs	r0, #92	; 0x5c
 80066a8:	f7fa f899 	bl	80007de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DSI_IRQn);
 80066ac:	205c      	movs	r0, #92	; 0x5c
 80066ae:	f7fa f8b2 	bl	8000816 <HAL_NVIC_EnableIRQ>
}
 80066b2:	bf00      	nop
 80066b4:	3710      	adds	r7, #16
 80066b6:	46bd      	mov	sp, r7
 80066b8:	bd80      	pop	{r7, pc}
 80066ba:	bf00      	nop
 80066bc:	40023800 	.word	0x40023800

080066c0 <BSP_LCD_DrawPixel>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 80066c0:	b5b0      	push	{r4, r5, r7, lr}
 80066c2:	b082      	sub	sp, #8
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	4603      	mov	r3, r0
 80066c8:	603a      	str	r2, [r7, #0]
 80066ca:	80fb      	strh	r3, [r7, #6]
 80066cc:	460b      	mov	r3, r1
 80066ce:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (hltdc_eval.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 80066d0:	4b0c      	ldr	r3, [pc, #48]	; (8006704 <BSP_LCD_DrawPixel+0x44>)
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4a0c      	ldr	r2, [pc, #48]	; (8006708 <BSP_LCD_DrawPixel+0x48>)
 80066d6:	2134      	movs	r1, #52	; 0x34
 80066d8:	fb01 f303 	mul.w	r3, r1, r3
 80066dc:	4413      	add	r3, r2
 80066de:	335c      	adds	r3, #92	; 0x5c
 80066e0:	681c      	ldr	r4, [r3, #0]
 80066e2:	88bd      	ldrh	r5, [r7, #4]
 80066e4:	f7ff fd36 	bl	8006154 <BSP_LCD_GetXSize>
 80066e8:	4603      	mov	r3, r0
 80066ea:	fb03 f205 	mul.w	r2, r3, r5
 80066ee:	88fb      	ldrh	r3, [r7, #6]
 80066f0:	4413      	add	r3, r2
 80066f2:	009b      	lsls	r3, r3, #2
 80066f4:	4423      	add	r3, r4
 80066f6:	461a      	mov	r2, r3
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	6013      	str	r3, [r2, #0]
}
 80066fc:	bf00      	nop
 80066fe:	3708      	adds	r7, #8
 8006700:	46bd      	mov	sp, r7
 8006702:	bdb0      	pop	{r4, r5, r7, pc}
 8006704:	200001d0 	.word	0x200001d0
 8006708:	200003f4 	.word	0x200003f4

0800670c <DrawChar>:
  * @param  Xpos: Line where to display the character shape
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b088      	sub	sp, #32
 8006710:	af00      	add	r7, sp, #0
 8006712:	4603      	mov	r3, r0
 8006714:	603a      	str	r2, [r7, #0]
 8006716:	80fb      	strh	r3, [r7, #6]
 8006718:	460b      	mov	r3, r1
 800671a:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 800671c:	2300      	movs	r3, #0
 800671e:	61fb      	str	r3, [r7, #28]
 8006720:	2300      	movs	r3, #0
 8006722:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;

  height = DrawProp[ActiveLayer].pFont->Height;
 8006724:	4b53      	ldr	r3, [pc, #332]	; (8006874 <DrawChar+0x168>)
 8006726:	681a      	ldr	r2, [r3, #0]
 8006728:	4953      	ldr	r1, [pc, #332]	; (8006878 <DrawChar+0x16c>)
 800672a:	4613      	mov	r3, r2
 800672c:	005b      	lsls	r3, r3, #1
 800672e:	4413      	add	r3, r2
 8006730:	009b      	lsls	r3, r3, #2
 8006732:	440b      	add	r3, r1
 8006734:	3308      	adds	r3, #8
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	88db      	ldrh	r3, [r3, #6]
 800673a:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 800673c:	4b4d      	ldr	r3, [pc, #308]	; (8006874 <DrawChar+0x168>)
 800673e:	681a      	ldr	r2, [r3, #0]
 8006740:	494d      	ldr	r1, [pc, #308]	; (8006878 <DrawChar+0x16c>)
 8006742:	4613      	mov	r3, r2
 8006744:	005b      	lsls	r3, r3, #1
 8006746:	4413      	add	r3, r2
 8006748:	009b      	lsls	r3, r3, #2
 800674a:	440b      	add	r3, r1
 800674c:	3308      	adds	r3, #8
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	889b      	ldrh	r3, [r3, #4]
 8006752:	823b      	strh	r3, [r7, #16]

  offset =  8 *((width + 7)/8) -  width ;
 8006754:	8a3b      	ldrh	r3, [r7, #16]
 8006756:	3307      	adds	r3, #7
 8006758:	2b00      	cmp	r3, #0
 800675a:	da00      	bge.n	800675e <DrawChar+0x52>
 800675c:	3307      	adds	r3, #7
 800675e:	10db      	asrs	r3, r3, #3
 8006760:	b2db      	uxtb	r3, r3
 8006762:	00db      	lsls	r3, r3, #3
 8006764:	b2da      	uxtb	r2, r3
 8006766:	8a3b      	ldrh	r3, [r7, #16]
 8006768:	b2db      	uxtb	r3, r3
 800676a:	1ad3      	subs	r3, r2, r3
 800676c:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 800676e:	2300      	movs	r3, #0
 8006770:	61fb      	str	r3, [r7, #28]
 8006772:	e076      	b.n	8006862 <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8006774:	8a3b      	ldrh	r3, [r7, #16]
 8006776:	3307      	adds	r3, #7
 8006778:	2b00      	cmp	r3, #0
 800677a:	da00      	bge.n	800677e <DrawChar+0x72>
 800677c:	3307      	adds	r3, #7
 800677e:	10db      	asrs	r3, r3, #3
 8006780:	461a      	mov	r2, r3
 8006782:	69fb      	ldr	r3, [r7, #28]
 8006784:	fb03 f302 	mul.w	r3, r3, r2
 8006788:	683a      	ldr	r2, [r7, #0]
 800678a:	4413      	add	r3, r2
 800678c:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 800678e:	8a3b      	ldrh	r3, [r7, #16]
 8006790:	3307      	adds	r3, #7
 8006792:	2b00      	cmp	r3, #0
 8006794:	da00      	bge.n	8006798 <DrawChar+0x8c>
 8006796:	3307      	adds	r3, #7
 8006798:	10db      	asrs	r3, r3, #3
 800679a:	2b01      	cmp	r3, #1
 800679c:	d002      	beq.n	80067a4 <DrawChar+0x98>
 800679e:	2b02      	cmp	r3, #2
 80067a0:	d004      	beq.n	80067ac <DrawChar+0xa0>
 80067a2:	e00c      	b.n	80067be <DrawChar+0xb2>
    {

    case 1:
      line =  pchar[0];
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	781b      	ldrb	r3, [r3, #0]
 80067a8:	617b      	str	r3, [r7, #20]
      break;
 80067aa:	e016      	b.n	80067da <DrawChar+0xce>

    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	781b      	ldrb	r3, [r3, #0]
 80067b0:	021b      	lsls	r3, r3, #8
 80067b2:	68ba      	ldr	r2, [r7, #8]
 80067b4:	3201      	adds	r2, #1
 80067b6:	7812      	ldrb	r2, [r2, #0]
 80067b8:	4313      	orrs	r3, r2
 80067ba:	617b      	str	r3, [r7, #20]
      break;
 80067bc:	e00d      	b.n	80067da <DrawChar+0xce>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	781b      	ldrb	r3, [r3, #0]
 80067c2:	041a      	lsls	r2, r3, #16
 80067c4:	68bb      	ldr	r3, [r7, #8]
 80067c6:	3301      	adds	r3, #1
 80067c8:	781b      	ldrb	r3, [r3, #0]
 80067ca:	021b      	lsls	r3, r3, #8
 80067cc:	4313      	orrs	r3, r2
 80067ce:	68ba      	ldr	r2, [r7, #8]
 80067d0:	3202      	adds	r2, #2
 80067d2:	7812      	ldrb	r2, [r2, #0]
 80067d4:	4313      	orrs	r3, r2
 80067d6:	617b      	str	r3, [r7, #20]
      break;
 80067d8:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 80067da:	2300      	movs	r3, #0
 80067dc:	61bb      	str	r3, [r7, #24]
 80067de:	e036      	b.n	800684e <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1)))
 80067e0:	8a3a      	ldrh	r2, [r7, #16]
 80067e2:	69bb      	ldr	r3, [r7, #24]
 80067e4:	1ad2      	subs	r2, r2, r3
 80067e6:	7bfb      	ldrb	r3, [r7, #15]
 80067e8:	4413      	add	r3, r2
 80067ea:	3b01      	subs	r3, #1
 80067ec:	2201      	movs	r2, #1
 80067ee:	fa02 f303 	lsl.w	r3, r2, r3
 80067f2:	461a      	mov	r2, r3
 80067f4:	697b      	ldr	r3, [r7, #20]
 80067f6:	4013      	ands	r3, r2
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d012      	beq.n	8006822 <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 80067fc:	69bb      	ldr	r3, [r7, #24]
 80067fe:	b29a      	uxth	r2, r3
 8006800:	88fb      	ldrh	r3, [r7, #6]
 8006802:	4413      	add	r3, r2
 8006804:	b298      	uxth	r0, r3
 8006806:	4b1b      	ldr	r3, [pc, #108]	; (8006874 <DrawChar+0x168>)
 8006808:	681a      	ldr	r2, [r3, #0]
 800680a:	491b      	ldr	r1, [pc, #108]	; (8006878 <DrawChar+0x16c>)
 800680c:	4613      	mov	r3, r2
 800680e:	005b      	lsls	r3, r3, #1
 8006810:	4413      	add	r3, r2
 8006812:	009b      	lsls	r3, r3, #2
 8006814:	440b      	add	r3, r1
 8006816:	681a      	ldr	r2, [r3, #0]
 8006818:	88bb      	ldrh	r3, [r7, #4]
 800681a:	4619      	mov	r1, r3
 800681c:	f7ff ff50 	bl	80066c0 <BSP_LCD_DrawPixel>
 8006820:	e012      	b.n	8006848 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8006822:	69bb      	ldr	r3, [r7, #24]
 8006824:	b29a      	uxth	r2, r3
 8006826:	88fb      	ldrh	r3, [r7, #6]
 8006828:	4413      	add	r3, r2
 800682a:	b298      	uxth	r0, r3
 800682c:	4b11      	ldr	r3, [pc, #68]	; (8006874 <DrawChar+0x168>)
 800682e:	681a      	ldr	r2, [r3, #0]
 8006830:	4911      	ldr	r1, [pc, #68]	; (8006878 <DrawChar+0x16c>)
 8006832:	4613      	mov	r3, r2
 8006834:	005b      	lsls	r3, r3, #1
 8006836:	4413      	add	r3, r2
 8006838:	009b      	lsls	r3, r3, #2
 800683a:	440b      	add	r3, r1
 800683c:	3304      	adds	r3, #4
 800683e:	681a      	ldr	r2, [r3, #0]
 8006840:	88bb      	ldrh	r3, [r7, #4]
 8006842:	4619      	mov	r1, r3
 8006844:	f7ff ff3c 	bl	80066c0 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8006848:	69bb      	ldr	r3, [r7, #24]
 800684a:	3301      	adds	r3, #1
 800684c:	61bb      	str	r3, [r7, #24]
 800684e:	8a3b      	ldrh	r3, [r7, #16]
 8006850:	69ba      	ldr	r2, [r7, #24]
 8006852:	429a      	cmp	r2, r3
 8006854:	d3c4      	bcc.n	80067e0 <DrawChar+0xd4>
      }
    }
    Ypos++;
 8006856:	88bb      	ldrh	r3, [r7, #4]
 8006858:	3301      	adds	r3, #1
 800685a:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 800685c:	69fb      	ldr	r3, [r7, #28]
 800685e:	3301      	adds	r3, #1
 8006860:	61fb      	str	r3, [r7, #28]
 8006862:	8a7b      	ldrh	r3, [r7, #18]
 8006864:	69fa      	ldr	r2, [r7, #28]
 8006866:	429a      	cmp	r2, r3
 8006868:	d384      	bcc.n	8006774 <DrawChar+0x68>
  }
}
 800686a:	bf00      	nop
 800686c:	bf00      	nop
 800686e:	3720      	adds	r7, #32
 8006870:	46bd      	mov	sp, r7
 8006872:	bd80      	pop	{r7, pc}
 8006874:	200001d0 	.word	0x200001d0
 8006878:	200001d4 	.word	0x200001d4

0800687c <LL_FillBuffer>:
  * @param  ySize: Buffer height
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b086      	sub	sp, #24
 8006880:	af02      	add	r7, sp, #8
 8006882:	60f8      	str	r0, [r7, #12]
 8006884:	60b9      	str	r1, [r7, #8]
 8006886:	607a      	str	r2, [r7, #4]
 8006888:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */
  hdma2d_eval.Init.Mode         = DMA2D_R2M;
 800688a:	4b16      	ldr	r3, [pc, #88]	; (80068e4 <LL_FillBuffer+0x68>)
 800688c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8006890:	605a      	str	r2, [r3, #4]
  hdma2d_eval.Init.ColorMode    = DMA2D_ARGB8888;
 8006892:	4b14      	ldr	r3, [pc, #80]	; (80068e4 <LL_FillBuffer+0x68>)
 8006894:	2200      	movs	r2, #0
 8006896:	609a      	str	r2, [r3, #8]
  hdma2d_eval.Init.OutputOffset = OffLine;
 8006898:	4a12      	ldr	r2, [pc, #72]	; (80068e4 <LL_FillBuffer+0x68>)
 800689a:	69bb      	ldr	r3, [r7, #24]
 800689c:	60d3      	str	r3, [r2, #12]

  hdma2d_eval.Instance = DMA2D;
 800689e:	4b11      	ldr	r3, [pc, #68]	; (80068e4 <LL_FillBuffer+0x68>)
 80068a0:	4a11      	ldr	r2, [pc, #68]	; (80068e8 <LL_FillBuffer+0x6c>)
 80068a2:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hdma2d_eval) == HAL_OK)
 80068a4:	480f      	ldr	r0, [pc, #60]	; (80068e4 <LL_FillBuffer+0x68>)
 80068a6:	f7fa f9bd 	bl	8000c24 <HAL_DMA2D_Init>
 80068aa:	4603      	mov	r3, r0
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d115      	bne.n	80068dc <LL_FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&hdma2d_eval, LayerIndex) == HAL_OK)
 80068b0:	68f9      	ldr	r1, [r7, #12]
 80068b2:	480c      	ldr	r0, [pc, #48]	; (80068e4 <LL_FillBuffer+0x68>)
 80068b4:	f7fa fb1e 	bl	8000ef4 <HAL_DMA2D_ConfigLayer>
 80068b8:	4603      	mov	r3, r0
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d10e      	bne.n	80068dc <LL_FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&hdma2d_eval, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 80068be:	68ba      	ldr	r2, [r7, #8]
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	9300      	str	r3, [sp, #0]
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	69f9      	ldr	r1, [r7, #28]
 80068c8:	4806      	ldr	r0, [pc, #24]	; (80068e4 <LL_FillBuffer+0x68>)
 80068ca:	f7fa f9fe 	bl	8000cca <HAL_DMA2D_Start>
 80068ce:	4603      	mov	r3, r0
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d103      	bne.n	80068dc <LL_FillBuffer+0x60>
      {
        /* Polling For DMA transfer */
        HAL_DMA2D_PollForTransfer(&hdma2d_eval, 10);
 80068d4:	210a      	movs	r1, #10
 80068d6:	4803      	ldr	r0, [pc, #12]	; (80068e4 <LL_FillBuffer+0x68>)
 80068d8:	f7fa fa22 	bl	8000d20 <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 80068dc:	bf00      	nop
 80068de:	3710      	adds	r7, #16
 80068e0:	46bd      	mov	sp, r7
 80068e2:	bd80      	pop	{r7, pc}
 80068e4:	200004b8 	.word	0x200004b8
 80068e8:	4002b000 	.word	0x4002b000

080068ec <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 80068f0:	4b29      	ldr	r3, [pc, #164]	; (8006998 <BSP_SDRAM_Init+0xac>)
 80068f2:	4a2a      	ldr	r2, [pc, #168]	; (800699c <BSP_SDRAM_Init+0xb0>)
 80068f4:	601a      	str	r2, [r3, #0]

  /* Timing configuration for 90 MHz as SD clock frequency (System clock is up to 180 MHz) */
  Timing.LoadToActiveDelay    = 2;
 80068f6:	4b2a      	ldr	r3, [pc, #168]	; (80069a0 <BSP_SDRAM_Init+0xb4>)
 80068f8:	2202      	movs	r2, #2
 80068fa:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 80068fc:	4b28      	ldr	r3, [pc, #160]	; (80069a0 <BSP_SDRAM_Init+0xb4>)
 80068fe:	2207      	movs	r2, #7
 8006900:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 8006902:	4b27      	ldr	r3, [pc, #156]	; (80069a0 <BSP_SDRAM_Init+0xb4>)
 8006904:	2204      	movs	r2, #4
 8006906:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8006908:	4b25      	ldr	r3, [pc, #148]	; (80069a0 <BSP_SDRAM_Init+0xb4>)
 800690a:	2207      	movs	r2, #7
 800690c:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 800690e:	4b24      	ldr	r3, [pc, #144]	; (80069a0 <BSP_SDRAM_Init+0xb4>)
 8006910:	2202      	movs	r2, #2
 8006912:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8006914:	4b22      	ldr	r3, [pc, #136]	; (80069a0 <BSP_SDRAM_Init+0xb4>)
 8006916:	2202      	movs	r2, #2
 8006918:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 800691a:	4b21      	ldr	r3, [pc, #132]	; (80069a0 <BSP_SDRAM_Init+0xb4>)
 800691c:	2202      	movs	r2, #2
 800691e:	619a      	str	r2, [r3, #24]

  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8006920:	4b1d      	ldr	r3, [pc, #116]	; (8006998 <BSP_SDRAM_Init+0xac>)
 8006922:	2200      	movs	r2, #0
 8006924:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8006926:	4b1c      	ldr	r3, [pc, #112]	; (8006998 <BSP_SDRAM_Init+0xac>)
 8006928:	2200      	movs	r2, #0
 800692a:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 800692c:	4b1a      	ldr	r3, [pc, #104]	; (8006998 <BSP_SDRAM_Init+0xac>)
 800692e:	2204      	movs	r2, #4
 8006930:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8006932:	4b19      	ldr	r3, [pc, #100]	; (8006998 <BSP_SDRAM_Init+0xac>)
 8006934:	2220      	movs	r2, #32
 8006936:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8006938:	4b17      	ldr	r3, [pc, #92]	; (8006998 <BSP_SDRAM_Init+0xac>)
 800693a:	2240      	movs	r2, #64	; 0x40
 800693c:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 800693e:	4b16      	ldr	r3, [pc, #88]	; (8006998 <BSP_SDRAM_Init+0xac>)
 8006940:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8006944:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8006946:	4b14      	ldr	r3, [pc, #80]	; (8006998 <BSP_SDRAM_Init+0xac>)
 8006948:	2200      	movs	r2, #0
 800694a:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 800694c:	4b12      	ldr	r3, [pc, #72]	; (8006998 <BSP_SDRAM_Init+0xac>)
 800694e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006952:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8006954:	4b10      	ldr	r3, [pc, #64]	; (8006998 <BSP_SDRAM_Init+0xac>)
 8006956:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800695a:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 800695c:	4b0e      	ldr	r3, [pc, #56]	; (8006998 <BSP_SDRAM_Init+0xac>)
 800695e:	2200      	movs	r2, #0
 8006960:	629a      	str	r2, [r3, #40]	; 0x28

  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&sdramHandle, (void *)NULL);
 8006962:	2100      	movs	r1, #0
 8006964:	480c      	ldr	r0, [pc, #48]	; (8006998 <BSP_SDRAM_Init+0xac>)
 8006966:	f000 f87f 	bl	8006a68 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 800696a:	490d      	ldr	r1, [pc, #52]	; (80069a0 <BSP_SDRAM_Init+0xb4>)
 800696c:	480a      	ldr	r0, [pc, #40]	; (8006998 <BSP_SDRAM_Init+0xac>)
 800696e:	f7fd fdb5 	bl	80044dc <HAL_SDRAM_Init>
 8006972:	4603      	mov	r3, r0
 8006974:	2b00      	cmp	r3, #0
 8006976:	d003      	beq.n	8006980 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8006978:	4b0a      	ldr	r3, [pc, #40]	; (80069a4 <BSP_SDRAM_Init+0xb8>)
 800697a:	2201      	movs	r2, #1
 800697c:	701a      	strb	r2, [r3, #0]
 800697e:	e002      	b.n	8006986 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8006980:	4b08      	ldr	r3, [pc, #32]	; (80069a4 <BSP_SDRAM_Init+0xb8>)
 8006982:	2200      	movs	r2, #0
 8006984:	701a      	strb	r2, [r3, #0]
  }

  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8006986:	f240 5069 	movw	r0, #1385	; 0x569
 800698a:	f000 f80d 	bl	80069a8 <BSP_SDRAM_Initialization_sequence>

  return sdramstatus;
 800698e:	4b05      	ldr	r3, [pc, #20]	; (80069a4 <BSP_SDRAM_Init+0xb8>)
 8006990:	781b      	ldrb	r3, [r3, #0]
}
 8006992:	4618      	mov	r0, r3
 8006994:	bd80      	pop	{r7, pc}
 8006996:	bf00      	nop
 8006998:	20000228 	.word	0x20000228
 800699c:	a0000140 	.word	0xa0000140
 80069a0:	2000025c 	.word	0x2000025c
 80069a4:	20000084 	.word	0x20000084

080069a8 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b084      	sub	sp, #16
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 80069b0:	2300      	movs	r3, #0
 80069b2:	60fb      	str	r3, [r7, #12]

  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 80069b4:	4b2a      	ldr	r3, [pc, #168]	; (8006a60 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80069b6:	2201      	movs	r2, #1
 80069b8:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80069ba:	4b29      	ldr	r3, [pc, #164]	; (8006a60 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80069bc:	2210      	movs	r2, #16
 80069be:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80069c0:	4b27      	ldr	r3, [pc, #156]	; (8006a60 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80069c2:	2201      	movs	r2, #1
 80069c4:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80069c6:	4b26      	ldr	r3, [pc, #152]	; (8006a60 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80069c8:	2200      	movs	r2, #0
 80069ca:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80069cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80069d0:	4923      	ldr	r1, [pc, #140]	; (8006a60 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80069d2:	4824      	ldr	r0, [pc, #144]	; (8006a64 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80069d4:	f7fd fdc0 	bl	8004558 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 80069d8:	2001      	movs	r0, #1
 80069da:	f7f9 fe01 	bl	80005e0 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 80069de:	4b20      	ldr	r3, [pc, #128]	; (8006a60 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80069e0:	2202      	movs	r2, #2
 80069e2:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80069e4:	4b1e      	ldr	r3, [pc, #120]	; (8006a60 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80069e6:	2210      	movs	r2, #16
 80069e8:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80069ea:	4b1d      	ldr	r3, [pc, #116]	; (8006a60 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80069ec:	2201      	movs	r2, #1
 80069ee:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80069f0:	4b1b      	ldr	r3, [pc, #108]	; (8006a60 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80069f2:	2200      	movs	r2, #0
 80069f4:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80069f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80069fa:	4919      	ldr	r1, [pc, #100]	; (8006a60 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80069fc:	4819      	ldr	r0, [pc, #100]	; (8006a64 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80069fe:	f7fd fdab 	bl	8004558 <HAL_SDRAM_SendCommand>

  /* Step 4: Configure an Auto Refresh command */
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8006a02:	4b17      	ldr	r3, [pc, #92]	; (8006a60 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006a04:	2203      	movs	r2, #3
 8006a06:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8006a08:	4b15      	ldr	r3, [pc, #84]	; (8006a60 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006a0a:	2210      	movs	r2, #16
 8006a0c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8006a0e:	4b14      	ldr	r3, [pc, #80]	; (8006a60 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006a10:	2208      	movs	r2, #8
 8006a12:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8006a14:	4b12      	ldr	r3, [pc, #72]	; (8006a60 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006a16:	2200      	movs	r2, #0
 8006a18:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8006a1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006a1e:	4910      	ldr	r1, [pc, #64]	; (8006a60 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006a20:	4810      	ldr	r0, [pc, #64]	; (8006a64 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8006a22:	f7fd fd99 	bl	8004558 <HAL_SDRAM_SendCommand>

  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8006a26:	f44f 730c 	mov.w	r3, #560	; 0x230
 8006a2a:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_3           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8006a2c:	4b0c      	ldr	r3, [pc, #48]	; (8006a60 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006a2e:	2204      	movs	r2, #4
 8006a30:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8006a32:	4b0b      	ldr	r3, [pc, #44]	; (8006a60 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006a34:	2210      	movs	r2, #16
 8006a36:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8006a38:	4b09      	ldr	r3, [pc, #36]	; (8006a60 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006a3a:	2201      	movs	r2, #1
 8006a3c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	4a07      	ldr	r2, [pc, #28]	; (8006a60 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006a42:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8006a44:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006a48:	4905      	ldr	r1, [pc, #20]	; (8006a60 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006a4a:	4806      	ldr	r0, [pc, #24]	; (8006a64 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8006a4c:	f7fd fd84 	bl	8004558 <HAL_SDRAM_SendCommand>

  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount);
 8006a50:	6879      	ldr	r1, [r7, #4]
 8006a52:	4804      	ldr	r0, [pc, #16]	; (8006a64 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8006a54:	f7fd fdab 	bl	80045ae <HAL_SDRAM_ProgramRefreshRate>
}
 8006a58:	bf00      	nop
 8006a5a:	3710      	adds	r7, #16
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	bd80      	pop	{r7, pc}
 8006a60:	20000278 	.word	0x20000278
 8006a64:	20000228 	.word	0x20000228

08006a68 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b090      	sub	sp, #64	; 0x40
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
 8006a70:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	f000 8104 	beq.w	8006c82 <BSP_SDRAM_MspInit+0x21a>
  {
    /* Enable FMC clock */
    __HAL_RCC_FMC_CLK_ENABLE();
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a7e:	4b83      	ldr	r3, [pc, #524]	; (8006c8c <BSP_SDRAM_MspInit+0x224>)
 8006a80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a82:	4a82      	ldr	r2, [pc, #520]	; (8006c8c <BSP_SDRAM_MspInit+0x224>)
 8006a84:	f043 0301 	orr.w	r3, r3, #1
 8006a88:	6393      	str	r3, [r2, #56]	; 0x38
 8006a8a:	4b80      	ldr	r3, [pc, #512]	; (8006c8c <BSP_SDRAM_MspInit+0x224>)
 8006a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a8e:	f003 0301 	and.w	r3, r3, #1
 8006a92:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a94:	6abb      	ldr	r3, [r7, #40]	; 0x28

    /* Enable chosen DMAx clock */
    __DMAx_CLK_ENABLE();
 8006a96:	2300      	movs	r3, #0
 8006a98:	627b      	str	r3, [r7, #36]	; 0x24
 8006a9a:	4b7c      	ldr	r3, [pc, #496]	; (8006c8c <BSP_SDRAM_MspInit+0x224>)
 8006a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a9e:	4a7b      	ldr	r2, [pc, #492]	; (8006c8c <BSP_SDRAM_MspInit+0x224>)
 8006aa0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006aa4:	6313      	str	r3, [r2, #48]	; 0x30
 8006aa6:	4b79      	ldr	r3, [pc, #484]	; (8006c8c <BSP_SDRAM_MspInit+0x224>)
 8006aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aaa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006aae:	627b      	str	r3, [r7, #36]	; 0x24
 8006ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    /* Enable GPIOs clock */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	623b      	str	r3, [r7, #32]
 8006ab6:	4b75      	ldr	r3, [pc, #468]	; (8006c8c <BSP_SDRAM_MspInit+0x224>)
 8006ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aba:	4a74      	ldr	r2, [pc, #464]	; (8006c8c <BSP_SDRAM_MspInit+0x224>)
 8006abc:	f043 0304 	orr.w	r3, r3, #4
 8006ac0:	6313      	str	r3, [r2, #48]	; 0x30
 8006ac2:	4b72      	ldr	r3, [pc, #456]	; (8006c8c <BSP_SDRAM_MspInit+0x224>)
 8006ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ac6:	f003 0304 	and.w	r3, r3, #4
 8006aca:	623b      	str	r3, [r7, #32]
 8006acc:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006ace:	2300      	movs	r3, #0
 8006ad0:	61fb      	str	r3, [r7, #28]
 8006ad2:	4b6e      	ldr	r3, [pc, #440]	; (8006c8c <BSP_SDRAM_MspInit+0x224>)
 8006ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ad6:	4a6d      	ldr	r2, [pc, #436]	; (8006c8c <BSP_SDRAM_MspInit+0x224>)
 8006ad8:	f043 0308 	orr.w	r3, r3, #8
 8006adc:	6313      	str	r3, [r2, #48]	; 0x30
 8006ade:	4b6b      	ldr	r3, [pc, #428]	; (8006c8c <BSP_SDRAM_MspInit+0x224>)
 8006ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ae2:	f003 0308 	and.w	r3, r3, #8
 8006ae6:	61fb      	str	r3, [r7, #28]
 8006ae8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006aea:	2300      	movs	r3, #0
 8006aec:	61bb      	str	r3, [r7, #24]
 8006aee:	4b67      	ldr	r3, [pc, #412]	; (8006c8c <BSP_SDRAM_MspInit+0x224>)
 8006af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006af2:	4a66      	ldr	r2, [pc, #408]	; (8006c8c <BSP_SDRAM_MspInit+0x224>)
 8006af4:	f043 0310 	orr.w	r3, r3, #16
 8006af8:	6313      	str	r3, [r2, #48]	; 0x30
 8006afa:	4b64      	ldr	r3, [pc, #400]	; (8006c8c <BSP_SDRAM_MspInit+0x224>)
 8006afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006afe:	f003 0310 	and.w	r3, r3, #16
 8006b02:	61bb      	str	r3, [r7, #24]
 8006b04:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8006b06:	2300      	movs	r3, #0
 8006b08:	617b      	str	r3, [r7, #20]
 8006b0a:	4b60      	ldr	r3, [pc, #384]	; (8006c8c <BSP_SDRAM_MspInit+0x224>)
 8006b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b0e:	4a5f      	ldr	r2, [pc, #380]	; (8006c8c <BSP_SDRAM_MspInit+0x224>)
 8006b10:	f043 0320 	orr.w	r3, r3, #32
 8006b14:	6313      	str	r3, [r2, #48]	; 0x30
 8006b16:	4b5d      	ldr	r3, [pc, #372]	; (8006c8c <BSP_SDRAM_MspInit+0x224>)
 8006b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b1a:	f003 0320 	and.w	r3, r3, #32
 8006b1e:	617b      	str	r3, [r7, #20]
 8006b20:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8006b22:	2300      	movs	r3, #0
 8006b24:	613b      	str	r3, [r7, #16]
 8006b26:	4b59      	ldr	r3, [pc, #356]	; (8006c8c <BSP_SDRAM_MspInit+0x224>)
 8006b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b2a:	4a58      	ldr	r2, [pc, #352]	; (8006c8c <BSP_SDRAM_MspInit+0x224>)
 8006b2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b30:	6313      	str	r3, [r2, #48]	; 0x30
 8006b32:	4b56      	ldr	r3, [pc, #344]	; (8006c8c <BSP_SDRAM_MspInit+0x224>)
 8006b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b3a:	613b      	str	r3, [r7, #16]
 8006b3c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8006b3e:	2300      	movs	r3, #0
 8006b40:	60fb      	str	r3, [r7, #12]
 8006b42:	4b52      	ldr	r3, [pc, #328]	; (8006c8c <BSP_SDRAM_MspInit+0x224>)
 8006b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b46:	4a51      	ldr	r2, [pc, #324]	; (8006c8c <BSP_SDRAM_MspInit+0x224>)
 8006b48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b4c:	6313      	str	r3, [r2, #48]	; 0x30
 8006b4e:	4b4f      	ldr	r3, [pc, #316]	; (8006c8c <BSP_SDRAM_MspInit+0x224>)
 8006b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b56:	60fb      	str	r3, [r7, #12]
 8006b58:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	60bb      	str	r3, [r7, #8]
 8006b5e:	4b4b      	ldr	r3, [pc, #300]	; (8006c8c <BSP_SDRAM_MspInit+0x224>)
 8006b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b62:	4a4a      	ldr	r2, [pc, #296]	; (8006c8c <BSP_SDRAM_MspInit+0x224>)
 8006b64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b68:	6313      	str	r3, [r2, #48]	; 0x30
 8006b6a:	4b48      	ldr	r3, [pc, #288]	; (8006c8c <BSP_SDRAM_MspInit+0x224>)
 8006b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b72:	60bb      	str	r3, [r7, #8]
 8006b74:	68bb      	ldr	r3, [r7, #8]

    /* Common GPIO configuration */
    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8006b76:	2302      	movs	r3, #2
 8006b78:	633b      	str	r3, [r7, #48]	; 0x30
    gpio_init_structure.Pull      = GPIO_PULLUP;
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	637b      	str	r3, [r7, #52]	; 0x34
    gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8006b7e:	2302      	movs	r3, #2
 8006b80:	63bb      	str	r3, [r7, #56]	; 0x38
    gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8006b82:	230c      	movs	r3, #12
 8006b84:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* GPIOC configuration : PC0 is SDNWE */
    gpio_init_structure.Pin   = GPIO_PIN_0;
 8006b86:	2301      	movs	r3, #1
 8006b88:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8006b8a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006b8e:	4619      	mov	r1, r3
 8006b90:	483f      	ldr	r0, [pc, #252]	; (8006c90 <BSP_SDRAM_MspInit+0x228>)
 8006b92:	f7fb f81b 	bl	8001bcc <HAL_GPIO_Init>

    /* GPIOD configuration */
    gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 8006b96:	f24c 7303 	movw	r3, #50947	; 0xc703
 8006b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
                                GPIO_PIN_14 | GPIO_PIN_15;


    HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8006b9c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006ba0:	4619      	mov	r1, r3
 8006ba2:	483c      	ldr	r0, [pc, #240]	; (8006c94 <BSP_SDRAM_MspInit+0x22c>)
 8006ba4:	f7fb f812 	bl	8001bcc <HAL_GPIO_Init>

    /* GPIOE configuration */
    gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8006ba8:	f64f 7383 	movw	r3, #65411	; 0xff83
 8006bac:	62fb      	str	r3, [r7, #44]	; 0x2c
                                GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                                GPIO_PIN_15;

    HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8006bae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006bb2:	4619      	mov	r1, r3
 8006bb4:	4838      	ldr	r0, [pc, #224]	; (8006c98 <BSP_SDRAM_MspInit+0x230>)
 8006bb6:	f7fb f809 	bl	8001bcc <HAL_GPIO_Init>

    /* GPIOF configuration */
    gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8006bba:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8006bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
                                GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                                GPIO_PIN_15;

    HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8006bc0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006bc4:	4619      	mov	r1, r3
 8006bc6:	4835      	ldr	r0, [pc, #212]	; (8006c9c <BSP_SDRAM_MspInit+0x234>)
 8006bc8:	f7fb f800 	bl	8001bcc <HAL_GPIO_Init>

    /* GPIOG configuration */
    gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8006bcc:	f248 1333 	movw	r3, #33075	; 0x8133
 8006bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
                                GPIO_PIN_15;
    HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8006bd2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006bd6:	4619      	mov	r1, r3
 8006bd8:	4831      	ldr	r0, [pc, #196]	; (8006ca0 <BSP_SDRAM_MspInit+0x238>)
 8006bda:	f7fa fff7 	bl	8001bcc <HAL_GPIO_Init>

    /* GPIOH configuration */
    gpio_init_structure.Pin   = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_8 | GPIO_PIN_9 |\
 8006bde:	f64f 730c 	movw	r3, #65292	; 0xff0c
 8006be2:	62fb      	str	r3, [r7, #44]	; 0x2c
                                GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                                GPIO_PIN_15;
    HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 8006be4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006be8:	4619      	mov	r1, r3
 8006bea:	482e      	ldr	r0, [pc, #184]	; (8006ca4 <BSP_SDRAM_MspInit+0x23c>)
 8006bec:	f7fa ffee 	bl	8001bcc <HAL_GPIO_Init>

    /* GPIOI configuration */
    gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8006bf0:	f240 63ff 	movw	r3, #1791	; 0x6ff
 8006bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
                                GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_9 | GPIO_PIN_10;
    HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8006bf6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006bfa:	4619      	mov	r1, r3
 8006bfc:	482a      	ldr	r0, [pc, #168]	; (8006ca8 <BSP_SDRAM_MspInit+0x240>)
 8006bfe:	f7fa ffe5 	bl	8001bcc <HAL_GPIO_Init>

    /* Configure common DMA parameters */
    dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8006c02:	4b2a      	ldr	r3, [pc, #168]	; (8006cac <BSP_SDRAM_MspInit+0x244>)
 8006c04:	2200      	movs	r2, #0
 8006c06:	605a      	str	r2, [r3, #4]
    dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8006c08:	4b28      	ldr	r3, [pc, #160]	; (8006cac <BSP_SDRAM_MspInit+0x244>)
 8006c0a:	2280      	movs	r2, #128	; 0x80
 8006c0c:	609a      	str	r2, [r3, #8]
    dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8006c0e:	4b27      	ldr	r3, [pc, #156]	; (8006cac <BSP_SDRAM_MspInit+0x244>)
 8006c10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006c14:	60da      	str	r2, [r3, #12]
    dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8006c16:	4b25      	ldr	r3, [pc, #148]	; (8006cac <BSP_SDRAM_MspInit+0x244>)
 8006c18:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006c1c:	611a      	str	r2, [r3, #16]
    dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006c1e:	4b23      	ldr	r3, [pc, #140]	; (8006cac <BSP_SDRAM_MspInit+0x244>)
 8006c20:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006c24:	615a      	str	r2, [r3, #20]
    dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8006c26:	4b21      	ldr	r3, [pc, #132]	; (8006cac <BSP_SDRAM_MspInit+0x244>)
 8006c28:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006c2c:	619a      	str	r2, [r3, #24]
    dma_handle.Init.Mode                = DMA_NORMAL;
 8006c2e:	4b1f      	ldr	r3, [pc, #124]	; (8006cac <BSP_SDRAM_MspInit+0x244>)
 8006c30:	2200      	movs	r2, #0
 8006c32:	61da      	str	r2, [r3, #28]
    dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8006c34:	4b1d      	ldr	r3, [pc, #116]	; (8006cac <BSP_SDRAM_MspInit+0x244>)
 8006c36:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006c3a:	621a      	str	r2, [r3, #32]
    dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8006c3c:	4b1b      	ldr	r3, [pc, #108]	; (8006cac <BSP_SDRAM_MspInit+0x244>)
 8006c3e:	2200      	movs	r2, #0
 8006c40:	625a      	str	r2, [r3, #36]	; 0x24
    dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8006c42:	4b1a      	ldr	r3, [pc, #104]	; (8006cac <BSP_SDRAM_MspInit+0x244>)
 8006c44:	2203      	movs	r2, #3
 8006c46:	629a      	str	r2, [r3, #40]	; 0x28
    dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8006c48:	4b18      	ldr	r3, [pc, #96]	; (8006cac <BSP_SDRAM_MspInit+0x244>)
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	62da      	str	r2, [r3, #44]	; 0x2c
    dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE;
 8006c4e:	4b17      	ldr	r3, [pc, #92]	; (8006cac <BSP_SDRAM_MspInit+0x244>)
 8006c50:	2200      	movs	r2, #0
 8006c52:	631a      	str	r2, [r3, #48]	; 0x30

    dma_handle.Instance = SDRAM_DMAx_STREAM;
 8006c54:	4b15      	ldr	r3, [pc, #84]	; (8006cac <BSP_SDRAM_MspInit+0x244>)
 8006c56:	4a16      	ldr	r2, [pc, #88]	; (8006cb0 <BSP_SDRAM_MspInit+0x248>)
 8006c58:	601a      	str	r2, [r3, #0]

    /* Associate the DMA handle */
    __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	4a13      	ldr	r2, [pc, #76]	; (8006cac <BSP_SDRAM_MspInit+0x244>)
 8006c5e:	631a      	str	r2, [r3, #48]	; 0x30
 8006c60:	4a12      	ldr	r2, [pc, #72]	; (8006cac <BSP_SDRAM_MspInit+0x244>)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6393      	str	r3, [r2, #56]	; 0x38

    /* Deinitialize the stream for new transfer */
    HAL_DMA_DeInit(&dma_handle);
 8006c66:	4811      	ldr	r0, [pc, #68]	; (8006cac <BSP_SDRAM_MspInit+0x244>)
 8006c68:	f7f9 feaa 	bl	80009c0 <HAL_DMA_DeInit>

    /* Configure the DMA stream */
    HAL_DMA_Init(&dma_handle);
 8006c6c:	480f      	ldr	r0, [pc, #60]	; (8006cac <BSP_SDRAM_MspInit+0x244>)
 8006c6e:	f7f9 fdf9 	bl	8000864 <HAL_DMA_Init>

    /* NVIC configuration for DMA transfer complete interrupt */
    HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 5, 0);
 8006c72:	2200      	movs	r2, #0
 8006c74:	2105      	movs	r1, #5
 8006c76:	2038      	movs	r0, #56	; 0x38
 8006c78:	f7f9 fdb1 	bl	80007de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8006c7c:	2038      	movs	r0, #56	; 0x38
 8006c7e:	f7f9 fdca 	bl	8000816 <HAL_NVIC_EnableIRQ>

  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 8006c82:	bf00      	nop
 8006c84:	3740      	adds	r7, #64	; 0x40
 8006c86:	46bd      	mov	sp, r7
 8006c88:	bd80      	pop	{r7, pc}
 8006c8a:	bf00      	nop
 8006c8c:	40023800 	.word	0x40023800
 8006c90:	40020800 	.word	0x40020800
 8006c94:	40020c00 	.word	0x40020c00
 8006c98:	40021000 	.word	0x40021000
 8006c9c:	40021400 	.word	0x40021400
 8006ca0:	40021800 	.word	0x40021800
 8006ca4:	40021c00 	.word	0x40021c00
 8006ca8:	40022000 	.word	0x40022000
 8006cac:	20000288 	.word	0x20000288
 8006cb0:	40026410 	.word	0x40026410

08006cb4 <BSP_TS_Init>:
  * @param  ts_SizeX : Maximum X size of the TS area on LCD
  * @param  ts_SizeY : Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b084      	sub	sp, #16
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	4603      	mov	r3, r0
 8006cbc:	460a      	mov	r2, r1
 8006cbe:	80fb      	strh	r3, [r7, #6]
 8006cc0:	4613      	mov	r3, r2
 8006cc2:	80bb      	strh	r3, [r7, #4]
  uint8_t ts_status = TS_OK;
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	73fb      	strb	r3, [r7, #15]
  uint8_t ts_id1, ts_id2 = 0;
 8006cc8:	2300      	movs	r3, #0
 8006cca:	73bb      	strb	r3, [r7, #14]
  /* Note : I2C_Address is un-initialized here, but is not used at all in init function */
  /* but the prototype of Init() is like that in template and should be respected       */

  /* Initialize the communication channel to sensor (I2C) if necessary */
  /* that is initialization is done only once after a power up         */
  ft6x06_ts_drv.Init(I2C_Address);
 8006ccc:	4b25      	ldr	r3, [pc, #148]	; (8006d64 <BSP_TS_Init+0xb0>)
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	4a25      	ldr	r2, [pc, #148]	; (8006d68 <BSP_TS_Init+0xb4>)
 8006cd2:	7812      	ldrb	r2, [r2, #0]
 8006cd4:	b292      	uxth	r2, r2
 8006cd6:	4610      	mov	r0, r2
 8006cd8:	4798      	blx	r3

  ts_id1 = ft6x06_ts_drv.ReadID(TS_I2C_ADDRESS);
 8006cda:	4b22      	ldr	r3, [pc, #136]	; (8006d64 <BSP_TS_Init+0xb0>)
 8006cdc:	685b      	ldr	r3, [r3, #4]
 8006cde:	2054      	movs	r0, #84	; 0x54
 8006ce0:	4798      	blx	r3
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	737b      	strb	r3, [r7, #13]
  if(ts_id1 != FT6206_ID_VALUE)
 8006ce6:	7b7b      	ldrb	r3, [r7, #13]
 8006ce8:	2b11      	cmp	r3, #17
 8006cea:	d009      	beq.n	8006d00 <BSP_TS_Init+0x4c>
  {
    ts_id2 = ft6x06_ts_drv.ReadID(TS_I2C_ADDRESS_A02);
 8006cec:	4b1d      	ldr	r3, [pc, #116]	; (8006d64 <BSP_TS_Init+0xb0>)
 8006cee:	685b      	ldr	r3, [r3, #4]
 8006cf0:	2070      	movs	r0, #112	; 0x70
 8006cf2:	4798      	blx	r3
 8006cf4:	4603      	mov	r3, r0
 8006cf6:	73bb      	strb	r3, [r7, #14]
    I2C_Address    = TS_I2C_ADDRESS_A02;    
 8006cf8:	4b1b      	ldr	r3, [pc, #108]	; (8006d68 <BSP_TS_Init+0xb4>)
 8006cfa:	2270      	movs	r2, #112	; 0x70
 8006cfc:	701a      	strb	r2, [r3, #0]
 8006cfe:	e002      	b.n	8006d06 <BSP_TS_Init+0x52>
  }
  else
  {
    I2C_Address    = TS_I2C_ADDRESS;    
 8006d00:	4b19      	ldr	r3, [pc, #100]	; (8006d68 <BSP_TS_Init+0xb4>)
 8006d02:	2254      	movs	r2, #84	; 0x54
 8006d04:	701a      	strb	r2, [r3, #0]
  }
  
  /* Scan FT6xx6 TouchScreen IC controller ID register by I2C Read       */
  /* Verify this is a FT6206 or FT6336G, otherwise this is an error case */
  if((ts_id1 == FT6206_ID_VALUE) || (ts_id2 == FT6206_ID_VALUE))
 8006d06:	7b7b      	ldrb	r3, [r7, #13]
 8006d08:	2b11      	cmp	r3, #17
 8006d0a:	d002      	beq.n	8006d12 <BSP_TS_Init+0x5e>
 8006d0c:	7bbb      	ldrb	r3, [r7, #14]
 8006d0e:	2b11      	cmp	r3, #17
 8006d10:	d121      	bne.n	8006d56 <BSP_TS_Init+0xa2>
  {
    /* Found FT6206 : Initialize the TS driver structure */
    ts_driver = &ft6x06_ts_drv;
 8006d12:	4b16      	ldr	r3, [pc, #88]	; (8006d6c <BSP_TS_Init+0xb8>)
 8006d14:	4a13      	ldr	r2, [pc, #76]	; (8006d64 <BSP_TS_Init+0xb0>)
 8006d16:	601a      	str	r2, [r3, #0]

    /* Get LCD chosen orientation */
    if(ts_SizeX < ts_SizeY)
 8006d18:	88fa      	ldrh	r2, [r7, #6]
 8006d1a:	88bb      	ldrh	r3, [r7, #4]
 8006d1c:	429a      	cmp	r2, r3
 8006d1e:	d203      	bcs.n	8006d28 <BSP_TS_Init+0x74>
    {
      ts_orientation = TS_SWAP_NONE;                
 8006d20:	4b13      	ldr	r3, [pc, #76]	; (8006d70 <BSP_TS_Init+0xbc>)
 8006d22:	2201      	movs	r2, #1
 8006d24:	701a      	strb	r2, [r3, #0]
 8006d26:	e002      	b.n	8006d2e <BSP_TS_Init+0x7a>
    }
    else
    {
      ts_orientation = TS_SWAP_XY | TS_SWAP_Y;                 
 8006d28:	4b11      	ldr	r3, [pc, #68]	; (8006d70 <BSP_TS_Init+0xbc>)
 8006d2a:	220c      	movs	r2, #12
 8006d2c:	701a      	strb	r2, [r3, #0]
    }

    if(ts_status == TS_OK)
 8006d2e:	7bfb      	ldrb	r3, [r7, #15]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d112      	bne.n	8006d5a <BSP_TS_Init+0xa6>
    {
      /* Software reset the TouchScreen */
      ts_driver->Reset(I2C_Address);
 8006d34:	4b0d      	ldr	r3, [pc, #52]	; (8006d6c <BSP_TS_Init+0xb8>)
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	689b      	ldr	r3, [r3, #8]
 8006d3a:	4a0b      	ldr	r2, [pc, #44]	; (8006d68 <BSP_TS_Init+0xb4>)
 8006d3c:	7812      	ldrb	r2, [r2, #0]
 8006d3e:	b292      	uxth	r2, r2
 8006d40:	4610      	mov	r0, r2
 8006d42:	4798      	blx	r3

      /* Calibrate, Configure and Start the TouchScreen driver */
      ts_driver->Start(I2C_Address);
 8006d44:	4b09      	ldr	r3, [pc, #36]	; (8006d6c <BSP_TS_Init+0xb8>)
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	68db      	ldr	r3, [r3, #12]
 8006d4a:	4a07      	ldr	r2, [pc, #28]	; (8006d68 <BSP_TS_Init+0xb4>)
 8006d4c:	7812      	ldrb	r2, [r2, #0]
 8006d4e:	b292      	uxth	r2, r2
 8006d50:	4610      	mov	r0, r2
 8006d52:	4798      	blx	r3
    if(ts_status == TS_OK)
 8006d54:	e001      	b.n	8006d5a <BSP_TS_Init+0xa6>

    } /* of if(ts_status == TS_OK) */
  }
  else
  {
    ts_status = TS_DEVICE_NOT_FOUND;
 8006d56:	2303      	movs	r3, #3
 8006d58:	73fb      	strb	r3, [r7, #15]
  }

  return (ts_status);
 8006d5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	3710      	adds	r7, #16
 8006d60:	46bd      	mov	sp, r7
 8006d62:	bd80      	pop	{r7, pc}
 8006d64:	20000008 	.word	0x20000008
 8006d68:	2000034d 	.word	0x2000034d
 8006d6c:	20000348 	.word	0x20000348
 8006d70:	2000034c 	.word	0x2000034c

08006d74 <main>:

//static void BSP_LCD_DrawThiccLine(uint16_t x, uint16_t y, uint16_t xx, uint16_t yy, uint8_t thiccness);

/* Private user code ---------------------------------------------------------*/
int main(void)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b082      	sub	sp, #8
 8006d78:	af02      	add	r7, sp, #8


	HAL_Init();
 8006d7a:	f7f9 fbbf 	bl	80004fc <HAL_Init>


	SystemClock_Config();
 8006d7e:	f000 f843 	bl	8006e08 <SystemClock_Config>

	MX_GPIO_Init();
 8006d82:	f000 f8b1 	bl	8006ee8 <MX_GPIO_Init>
	MX_NVIC_Init();
 8006d86:	f000 fc0d 	bl	80075a4 <MX_NVIC_Init>

	UART6_Init();
 8006d8a:	f000 fc1f 	bl	80075cc <UART6_Init>
	UART3_Init();
 8006d8e:	f000 fc61 	bl	8007654 <UART3_Init>
	LTCD_Init();
 8006d92:	f000 fca3 	bl	80076dc <LTCD_Init>

	DMA2D_Init();
 8006d96:	f000 fcd5 	bl	8007744 <DMA2D_Init>

	//BSP_LCD_DrawThiccLine(100, 100, 250, 370, 10);

	debugPrint(&huart6, "\n\rWelcome my dudes\n\r");
 8006d9a:	4915      	ldr	r1, [pc, #84]	; (8006df0 <main+0x7c>)
 8006d9c:	4815      	ldr	r0, [pc, #84]	; (8006df4 <main+0x80>)
 8006d9e:	f000 fd07 	bl	80077b0 <debugPrint>

	debugPrint(&huart3, "\n\rWelcome my dudes\n\r");
 8006da2:	4913      	ldr	r1, [pc, #76]	; (8006df0 <main+0x7c>)
 8006da4:	4814      	ldr	r0, [pc, #80]	; (8006df8 <main+0x84>)
 8006da6:	f000 fd03 	bl	80077b0 <debugPrint>

	BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8006daa:	4814      	ldr	r0, [pc, #80]	; (8006dfc <main+0x88>)
 8006dac:	f7ff fa5a 	bl	8006264 <BSP_LCD_SetTextColor>



	while (1)
	{
		CopyBuffer((uint32_t *)Images[ImageIndex ++], (uint32_t *)LAYER0_ADDRESS, 240, 160, 320, 240);
 8006db0:	4b13      	ldr	r3, [pc, #76]	; (8006e00 <main+0x8c>)
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	1c5a      	adds	r2, r3, #1
 8006db6:	4912      	ldr	r1, [pc, #72]	; (8006e00 <main+0x8c>)
 8006db8:	600a      	str	r2, [r1, #0]
 8006dba:	4a12      	ldr	r2, [pc, #72]	; (8006e04 <main+0x90>)
 8006dbc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8006dc0:	23f0      	movs	r3, #240	; 0xf0
 8006dc2:	9301      	str	r3, [sp, #4]
 8006dc4:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8006dc8:	9300      	str	r3, [sp, #0]
 8006dca:	23a0      	movs	r3, #160	; 0xa0
 8006dcc:	22f0      	movs	r2, #240	; 0xf0
 8006dce:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8006dd2:	f000 fd9b 	bl	800790c <CopyBuffer>

		    if(ImageIndex >= 2)
 8006dd6:	4b0a      	ldr	r3, [pc, #40]	; (8006e00 <main+0x8c>)
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	2b01      	cmp	r3, #1
 8006ddc:	d902      	bls.n	8006de4 <main+0x70>
		    {
		      ImageIndex = 0;
 8006dde:	4b08      	ldr	r3, [pc, #32]	; (8006e00 <main+0x8c>)
 8006de0:	2200      	movs	r2, #0
 8006de2:	601a      	str	r2, [r3, #0]
		    }

		    /* Wait some time before switching to next stage */
		    HAL_Delay(2000);
 8006de4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8006de8:	f7f9 fbfa 	bl	80005e0 <HAL_Delay>
		CopyBuffer((uint32_t *)Images[ImageIndex ++], (uint32_t *)LAYER0_ADDRESS, 240, 160, 320, 240);
 8006dec:	e7e0      	b.n	8006db0 <main+0x3c>
 8006dee:	bf00      	nop
 8006df0:	080a1b38 	.word	0x080a1b38
 8006df4:	20000538 	.word	0x20000538
 8006df8:	200004f8 	.word	0x200004f8
 8006dfc:	ffff0000 	.word	0xffff0000
 8006e00:	200003ec 	.word	0x200003ec
 8006e04:	2000008c 	.word	0x2000008c

08006e08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b096      	sub	sp, #88	; 0x58
 8006e0c:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;
 8006e0e:	2300      	movs	r3, #0
 8006e10:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

  /* Enable Power Control clock */
  __HAL_RCC_PWR_CLK_ENABLE();
 8006e14:	2300      	movs	r3, #0
 8006e16:	60bb      	str	r3, [r7, #8]
 8006e18:	4b31      	ldr	r3, [pc, #196]	; (8006ee0 <SystemClock_Config+0xd8>)
 8006e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e1c:	4a30      	ldr	r2, [pc, #192]	; (8006ee0 <SystemClock_Config+0xd8>)
 8006e1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e22:	6413      	str	r3, [r2, #64]	; 0x40
 8006e24:	4b2e      	ldr	r3, [pc, #184]	; (8006ee0 <SystemClock_Config+0xd8>)
 8006e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e2c:	60bb      	str	r3, [r7, #8]
 8006e2e:	68bb      	ldr	r3, [r7, #8]

  /* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006e30:	2300      	movs	r3, #0
 8006e32:	607b      	str	r3, [r7, #4]
 8006e34:	4b2b      	ldr	r3, [pc, #172]	; (8006ee4 <SystemClock_Config+0xdc>)
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	4a2a      	ldr	r2, [pc, #168]	; (8006ee4 <SystemClock_Config+0xdc>)
 8006e3a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006e3e:	6013      	str	r3, [r2, #0]
 8006e40:	4b28      	ldr	r3, [pc, #160]	; (8006ee4 <SystemClock_Config+0xdc>)
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006e48:	607b      	str	r3, [r7, #4]
 8006e4a:	687b      	ldr	r3, [r7, #4]

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8006e4c:	2301      	movs	r3, #1
 8006e4e:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8006e50:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006e54:	613b      	str	r3, [r7, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006e56:	2302      	movs	r3, #2
 8006e58:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006e5a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006e5e:	62bb      	str	r3, [r7, #40]	; 0x28
#if defined(USE_STM32469I_DISCO_REVA)
  RCC_OscInitStruct.PLL.PLLM = 25;
#else
  RCC_OscInitStruct.PLL.PLLM = 8;
 8006e60:	2308      	movs	r3, #8
 8006e62:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* USE_STM32469I_DISCO_REVA */
  RCC_OscInitStruct.PLL.PLLN = 360;
 8006e64:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8006e68:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8006e6a:	2302      	movs	r3, #2
 8006e6c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8006e6e:	2307      	movs	r3, #7
 8006e70:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLR = 6;
 8006e72:	2306      	movs	r3, #6
 8006e74:	63fb      	str	r3, [r7, #60]	; 0x3c

  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8006e76:	f107 030c 	add.w	r3, r7, #12
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	f7fd f8ec 	bl	8004058 <HAL_RCC_OscConfig>
 8006e80:	4603      	mov	r3, r0
 8006e82:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  if(ret != HAL_OK)
 8006e86:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d000      	beq.n	8006e90 <SystemClock_Config+0x88>
  {
    while(1) { ; }
 8006e8e:	e7fe      	b.n	8006e8e <SystemClock_Config+0x86>
  }

  /* Activate the OverDrive to reach the 180 MHz Frequency */
  ret = HAL_PWREx_EnableOverDrive();
 8006e90:	f7fc fc5c 	bl	800374c <HAL_PWREx_EnableOverDrive>
 8006e94:	4603      	mov	r3, r0
 8006e96:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  if(ret != HAL_OK)
 8006e9a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d000      	beq.n	8006ea4 <SystemClock_Config+0x9c>
  {
    while(1) { ; }
 8006ea2:	e7fe      	b.n	8006ea2 <SystemClock_Config+0x9a>
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8006ea4:	230f      	movs	r3, #15
 8006ea6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006ea8:	2302      	movs	r3, #2
 8006eaa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006eac:	2300      	movs	r3, #0
 8006eae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8006eb0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8006eb4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8006eb6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006eba:	653b      	str	r3, [r7, #80]	; 0x50

  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 8006ebc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006ec0:	2105      	movs	r1, #5
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	f7fc fc92 	bl	80037ec <HAL_RCC_ClockConfig>
 8006ec8:	4603      	mov	r3, r0
 8006eca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  if(ret != HAL_OK)
 8006ece:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d000      	beq.n	8006ed8 <SystemClock_Config+0xd0>
  {
    while(1) { ; }
 8006ed6:	e7fe      	b.n	8006ed6 <SystemClock_Config+0xce>
  }
}
 8006ed8:	bf00      	nop
 8006eda:	3758      	adds	r7, #88	; 0x58
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bd80      	pop	{r7, pc}
 8006ee0:	40023800 	.word	0x40023800
 8006ee4:	40007000 	.word	0x40007000

08006ee8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b08c      	sub	sp, #48	; 0x30
 8006eec:	af00      	add	r7, sp, #0


  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006eee:	2300      	movs	r3, #0
 8006ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ef2:	4b9f      	ldr	r3, [pc, #636]	; (8007170 <MX_GPIO_Init+0x288>)
 8006ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ef6:	4a9e      	ldr	r2, [pc, #632]	; (8007170 <MX_GPIO_Init+0x288>)
 8006ef8:	f043 0310 	orr.w	r3, r3, #16
 8006efc:	6313      	str	r3, [r2, #48]	; 0x30
 8006efe:	4b9c      	ldr	r3, [pc, #624]	; (8007170 <MX_GPIO_Init+0x288>)
 8006f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f02:	f003 0310 	and.w	r3, r3, #16
 8006f06:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f0e:	4b98      	ldr	r3, [pc, #608]	; (8007170 <MX_GPIO_Init+0x288>)
 8006f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f12:	4a97      	ldr	r2, [pc, #604]	; (8007170 <MX_GPIO_Init+0x288>)
 8006f14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f18:	6313      	str	r3, [r2, #48]	; 0x30
 8006f1a:	4b95      	ldr	r3, [pc, #596]	; (8007170 <MX_GPIO_Init+0x288>)
 8006f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f22:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006f26:	2300      	movs	r3, #0
 8006f28:	627b      	str	r3, [r7, #36]	; 0x24
 8006f2a:	4b91      	ldr	r3, [pc, #580]	; (8007170 <MX_GPIO_Init+0x288>)
 8006f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f2e:	4a90      	ldr	r2, [pc, #576]	; (8007170 <MX_GPIO_Init+0x288>)
 8006f30:	f043 0302 	orr.w	r3, r3, #2
 8006f34:	6313      	str	r3, [r2, #48]	; 0x30
 8006f36:	4b8e      	ldr	r3, [pc, #568]	; (8007170 <MX_GPIO_Init+0x288>)
 8006f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f3a:	f003 0302 	and.w	r3, r3, #2
 8006f3e:	627b      	str	r3, [r7, #36]	; 0x24
 8006f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006f42:	2300      	movs	r3, #0
 8006f44:	623b      	str	r3, [r7, #32]
 8006f46:	4b8a      	ldr	r3, [pc, #552]	; (8007170 <MX_GPIO_Init+0x288>)
 8006f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f4a:	4a89      	ldr	r2, [pc, #548]	; (8007170 <MX_GPIO_Init+0x288>)
 8006f4c:	f043 0304 	orr.w	r3, r3, #4
 8006f50:	6313      	str	r3, [r2, #48]	; 0x30
 8006f52:	4b87      	ldr	r3, [pc, #540]	; (8007170 <MX_GPIO_Init+0x288>)
 8006f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f56:	f003 0304 	and.w	r3, r3, #4
 8006f5a:	623b      	str	r3, [r7, #32]
 8006f5c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006f5e:	2300      	movs	r3, #0
 8006f60:	61fb      	str	r3, [r7, #28]
 8006f62:	4b83      	ldr	r3, [pc, #524]	; (8007170 <MX_GPIO_Init+0x288>)
 8006f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f66:	4a82      	ldr	r2, [pc, #520]	; (8007170 <MX_GPIO_Init+0x288>)
 8006f68:	f043 0301 	orr.w	r3, r3, #1
 8006f6c:	6313      	str	r3, [r2, #48]	; 0x30
 8006f6e:	4b80      	ldr	r3, [pc, #512]	; (8007170 <MX_GPIO_Init+0x288>)
 8006f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f72:	f003 0301 	and.w	r3, r3, #1
 8006f76:	61fb      	str	r3, [r7, #28]
 8006f78:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	61bb      	str	r3, [r7, #24]
 8006f7e:	4b7c      	ldr	r3, [pc, #496]	; (8007170 <MX_GPIO_Init+0x288>)
 8006f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f82:	4a7b      	ldr	r2, [pc, #492]	; (8007170 <MX_GPIO_Init+0x288>)
 8006f84:	f043 0308 	orr.w	r3, r3, #8
 8006f88:	6313      	str	r3, [r2, #48]	; 0x30
 8006f8a:	4b79      	ldr	r3, [pc, #484]	; (8007170 <MX_GPIO_Init+0x288>)
 8006f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f8e:	f003 0308 	and.w	r3, r3, #8
 8006f92:	61bb      	str	r3, [r7, #24]
 8006f94:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8006f96:	2300      	movs	r3, #0
 8006f98:	617b      	str	r3, [r7, #20]
 8006f9a:	4b75      	ldr	r3, [pc, #468]	; (8007170 <MX_GPIO_Init+0x288>)
 8006f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f9e:	4a74      	ldr	r2, [pc, #464]	; (8007170 <MX_GPIO_Init+0x288>)
 8006fa0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006fa4:	6313      	str	r3, [r2, #48]	; 0x30
 8006fa6:	4b72      	ldr	r3, [pc, #456]	; (8007170 <MX_GPIO_Init+0x288>)
 8006fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006faa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fae:	617b      	str	r3, [r7, #20]
 8006fb0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	613b      	str	r3, [r7, #16]
 8006fb6:	4b6e      	ldr	r3, [pc, #440]	; (8007170 <MX_GPIO_Init+0x288>)
 8006fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fba:	4a6d      	ldr	r2, [pc, #436]	; (8007170 <MX_GPIO_Init+0x288>)
 8006fbc:	f043 0320 	orr.w	r3, r3, #32
 8006fc0:	6313      	str	r3, [r2, #48]	; 0x30
 8006fc2:	4b6b      	ldr	r3, [pc, #428]	; (8007170 <MX_GPIO_Init+0x288>)
 8006fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fc6:	f003 0320 	and.w	r3, r3, #32
 8006fca:	613b      	str	r3, [r7, #16]
 8006fcc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8006fce:	2300      	movs	r3, #0
 8006fd0:	60fb      	str	r3, [r7, #12]
 8006fd2:	4b67      	ldr	r3, [pc, #412]	; (8007170 <MX_GPIO_Init+0x288>)
 8006fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fd6:	4a66      	ldr	r2, [pc, #408]	; (8007170 <MX_GPIO_Init+0x288>)
 8006fd8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006fdc:	6313      	str	r3, [r2, #48]	; 0x30
 8006fde:	4b64      	ldr	r3, [pc, #400]	; (8007170 <MX_GPIO_Init+0x288>)
 8006fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fe2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006fe6:	60fb      	str	r3, [r7, #12]
 8006fe8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006fea:	2300      	movs	r3, #0
 8006fec:	60bb      	str	r3, [r7, #8]
 8006fee:	4b60      	ldr	r3, [pc, #384]	; (8007170 <MX_GPIO_Init+0x288>)
 8006ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ff2:	4a5f      	ldr	r2, [pc, #380]	; (8007170 <MX_GPIO_Init+0x288>)
 8006ff4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ff8:	6313      	str	r3, [r2, #48]	; 0x30
 8006ffa:	4b5d      	ldr	r3, [pc, #372]	; (8007170 <MX_GPIO_Init+0x288>)
 8006ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ffe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007002:	60bb      	str	r3, [r7, #8]
 8007004:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8007006:	2300      	movs	r3, #0
 8007008:	607b      	str	r3, [r7, #4]
 800700a:	4b59      	ldr	r3, [pc, #356]	; (8007170 <MX_GPIO_Init+0x288>)
 800700c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800700e:	4a58      	ldr	r2, [pc, #352]	; (8007170 <MX_GPIO_Init+0x288>)
 8007010:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007014:	6313      	str	r3, [r2, #48]	; 0x30
 8007016:	4b56      	ldr	r3, [pc, #344]	; (8007170 <MX_GPIO_Init+0x288>)
 8007018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800701a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800701e:	607b      	str	r3, [r7, #4]
 8007020:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SPKR_HP_Pin|AUDIO_RST_Pin, GPIO_PIN_RESET);
 8007022:	2200      	movs	r2, #0
 8007024:	210c      	movs	r1, #12
 8007026:	4853      	ldr	r0, [pc, #332]	; (8007174 <MX_GPIO_Init+0x28c>)
 8007028:	f7fb f888 	bl	800213c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED3_Pin|LED2_Pin, GPIO_PIN_RESET);
 800702c:	2200      	movs	r2, #0
 800702e:	2130      	movs	r1, #48	; 0x30
 8007030:	4851      	ldr	r0, [pc, #324]	; (8007178 <MX_GPIO_Init+0x290>)
 8007032:	f7fb f883 	bl	800213c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 8007036:	2200      	movs	r2, #0
 8007038:	2108      	movs	r1, #8
 800703a:	4850      	ldr	r0, [pc, #320]	; (800717c <MX_GPIO_Init+0x294>)
 800703c:	f7fb f87e 	bl	800213c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8007040:	2200      	movs	r2, #0
 8007042:	2140      	movs	r1, #64	; 0x40
 8007044:	484e      	ldr	r0, [pc, #312]	; (8007180 <MX_GPIO_Init+0x298>)
 8007046:	f7fb f879 	bl	800213c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OTG_FS1_PowerSwitchOn_Pin|EXT_RESET_Pin, GPIO_PIN_RESET);
 800704a:	2200      	movs	r2, #0
 800704c:	2105      	movs	r1, #5
 800704e:	484d      	ldr	r0, [pc, #308]	; (8007184 <MX_GPIO_Init+0x29c>)
 8007050:	f7fb f874 	bl	800213c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8007054:	2200      	movs	r2, #0
 8007056:	2108      	movs	r1, #8
 8007058:	484b      	ldr	r0, [pc, #300]	; (8007188 <MX_GPIO_Init+0x2a0>)
 800705a:	f7fb f86f 	bl	800213c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SAI1_FSA_Pin SAI1_SCKA_Pin */
  GPIO_InitStruct.Pin = SAI1_FSA_Pin|SAI1_SCKA_Pin;
 800705e:	4b4b      	ldr	r3, [pc, #300]	; (800718c <MX_GPIO_Init+0x2a4>)
 8007060:	2230      	movs	r2, #48	; 0x30
 8007062:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007064:	4b49      	ldr	r3, [pc, #292]	; (800718c <MX_GPIO_Init+0x2a4>)
 8007066:	2202      	movs	r2, #2
 8007068:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800706a:	4b48      	ldr	r3, [pc, #288]	; (800718c <MX_GPIO_Init+0x2a4>)
 800706c:	2200      	movs	r2, #0
 800706e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007070:	4b46      	ldr	r3, [pc, #280]	; (800718c <MX_GPIO_Init+0x2a4>)
 8007072:	2200      	movs	r2, #0
 8007074:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8007076:	4b45      	ldr	r3, [pc, #276]	; (800718c <MX_GPIO_Init+0x2a4>)
 8007078:	2206      	movs	r2, #6
 800707a:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800707c:	4943      	ldr	r1, [pc, #268]	; (800718c <MX_GPIO_Init+0x2a4>)
 800707e:	483d      	ldr	r0, [pc, #244]	; (8007174 <MX_GPIO_Init+0x28c>)
 8007080:	f7fa fda4 	bl	8001bcc <HAL_GPIO_Init>

  /*Configure GPIO pins : SPKR_HP_Pin AUDIO_RST_Pin */
  GPIO_InitStruct.Pin = SPKR_HP_Pin|AUDIO_RST_Pin;
 8007084:	4b41      	ldr	r3, [pc, #260]	; (800718c <MX_GPIO_Init+0x2a4>)
 8007086:	220c      	movs	r2, #12
 8007088:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800708a:	4b40      	ldr	r3, [pc, #256]	; (800718c <MX_GPIO_Init+0x2a4>)
 800708c:	2201      	movs	r2, #1
 800708e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007090:	4b3e      	ldr	r3, [pc, #248]	; (800718c <MX_GPIO_Init+0x2a4>)
 8007092:	2200      	movs	r2, #0
 8007094:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007096:	4b3d      	ldr	r3, [pc, #244]	; (800718c <MX_GPIO_Init+0x2a4>)
 8007098:	2200      	movs	r2, #0
 800709a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800709c:	493b      	ldr	r1, [pc, #236]	; (800718c <MX_GPIO_Init+0x2a4>)
 800709e:	4835      	ldr	r0, [pc, #212]	; (8007174 <MX_GPIO_Init+0x28c>)
 80070a0:	f7fa fd94 	bl	8001bcc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_USART6_TX_Pin USART6_RX_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80070a4:	4b39      	ldr	r3, [pc, #228]	; (800718c <MX_GPIO_Init+0x2a4>)
 80070a6:	2240      	movs	r2, #64	; 0x40
 80070a8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80070aa:	4b38      	ldr	r3, [pc, #224]	; (800718c <MX_GPIO_Init+0x2a4>)
 80070ac:	2202      	movs	r2, #2
 80070ae:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070b0:	4b36      	ldr	r3, [pc, #216]	; (800718c <MX_GPIO_Init+0x2a4>)
 80070b2:	2200      	movs	r2, #0
 80070b4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80070b6:	4b35      	ldr	r3, [pc, #212]	; (800718c <MX_GPIO_Init+0x2a4>)
 80070b8:	2203      	movs	r2, #3
 80070ba:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80070bc:	4b33      	ldr	r3, [pc, #204]	; (800718c <MX_GPIO_Init+0x2a4>)
 80070be:	2208      	movs	r2, #8
 80070c0:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80070c2:	4932      	ldr	r1, [pc, #200]	; (800718c <MX_GPIO_Init+0x2a4>)
 80070c4:	4832      	ldr	r0, [pc, #200]	; (8007190 <MX_GPIO_Init+0x2a8>)
 80070c6:	f7fa fd81 	bl	8001bcc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80070ca:	4b30      	ldr	r3, [pc, #192]	; (800718c <MX_GPIO_Init+0x2a4>)
 80070cc:	2280      	movs	r2, #128	; 0x80
 80070ce:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80070d0:	4b2e      	ldr	r3, [pc, #184]	; (800718c <MX_GPIO_Init+0x2a4>)
 80070d2:	2202      	movs	r2, #2
 80070d4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070d6:	4b2d      	ldr	r3, [pc, #180]	; (800718c <MX_GPIO_Init+0x2a4>)
 80070d8:	2200      	movs	r2, #0
 80070da:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80070dc:	4b2b      	ldr	r3, [pc, #172]	; (800718c <MX_GPIO_Init+0x2a4>)
 80070de:	2203      	movs	r2, #3
 80070e0:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80070e2:	4b2a      	ldr	r3, [pc, #168]	; (800718c <MX_GPIO_Init+0x2a4>)
 80070e4:	2208      	movs	r2, #8
 80070e6:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80070e8:	4928      	ldr	r1, [pc, #160]	; (800718c <MX_GPIO_Init+0x2a4>)
 80070ea:	4829      	ldr	r0, [pc, #164]	; (8007190 <MX_GPIO_Init+0x2a8>)
 80070ec:	f7fa fd6e 	bl	8001bcc <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_NBL1_Pin FMC_NBL0_Pin D5_Pin D6_Pin
                           D8_Pin D11_Pin D4_Pin D7_Pin
                           D9_Pin D12_Pin D10_Pin */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|D5_Pin|D6_Pin
 80070f0:	4b26      	ldr	r3, [pc, #152]	; (800718c <MX_GPIO_Init+0x2a4>)
 80070f2:	f64f 7283 	movw	r2, #65411	; 0xff83
 80070f6:	601a      	str	r2, [r3, #0]
                          |D8_Pin|D11_Pin|D4_Pin|D7_Pin
                          |D9_Pin|D12_Pin|D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80070f8:	4b24      	ldr	r3, [pc, #144]	; (800718c <MX_GPIO_Init+0x2a4>)
 80070fa:	2202      	movs	r2, #2
 80070fc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070fe:	4b23      	ldr	r3, [pc, #140]	; (800718c <MX_GPIO_Init+0x2a4>)
 8007100:	2200      	movs	r2, #0
 8007102:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007104:	4b21      	ldr	r3, [pc, #132]	; (800718c <MX_GPIO_Init+0x2a4>)
 8007106:	2203      	movs	r2, #3
 8007108:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800710a:	4b20      	ldr	r3, [pc, #128]	; (800718c <MX_GPIO_Init+0x2a4>)
 800710c:	220c      	movs	r2, #12
 800710e:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007110:	491e      	ldr	r1, [pc, #120]	; (800718c <MX_GPIO_Init+0x2a4>)
 8007112:	4818      	ldr	r0, [pc, #96]	; (8007174 <MX_GPIO_Init+0x28c>)
 8007114:	f7fa fd5a 	bl	8001bcc <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C1_SCL_Pin I2C1_SDA_Pin */
  GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8007118:	4b1c      	ldr	r3, [pc, #112]	; (800718c <MX_GPIO_Init+0x2a4>)
 800711a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800711e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007120:	4b1a      	ldr	r3, [pc, #104]	; (800718c <MX_GPIO_Init+0x2a4>)
 8007122:	2212      	movs	r2, #18
 8007124:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007126:	4b19      	ldr	r3, [pc, #100]	; (800718c <MX_GPIO_Init+0x2a4>)
 8007128:	2201      	movs	r2, #1
 800712a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800712c:	4b17      	ldr	r3, [pc, #92]	; (800718c <MX_GPIO_Init+0x2a4>)
 800712e:	2203      	movs	r2, #3
 8007130:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8007132:	4b16      	ldr	r3, [pc, #88]	; (800718c <MX_GPIO_Init+0x2a4>)
 8007134:	2204      	movs	r2, #4
 8007136:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007138:	4914      	ldr	r1, [pc, #80]	; (800718c <MX_GPIO_Init+0x2a4>)
 800713a:	4812      	ldr	r0, [pc, #72]	; (8007184 <MX_GPIO_Init+0x29c>)
 800713c:	f7fa fd46 	bl	8001bcc <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_CK_Pin */
  GPIO_InitStruct.Pin = I2S3_CK_Pin;
 8007140:	4b12      	ldr	r3, [pc, #72]	; (800718c <MX_GPIO_Init+0x2a4>)
 8007142:	2208      	movs	r2, #8
 8007144:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007146:	4b11      	ldr	r3, [pc, #68]	; (800718c <MX_GPIO_Init+0x2a4>)
 8007148:	2202      	movs	r2, #2
 800714a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800714c:	4b0f      	ldr	r3, [pc, #60]	; (800718c <MX_GPIO_Init+0x2a4>)
 800714e:	2200      	movs	r2, #0
 8007150:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007152:	4b0e      	ldr	r3, [pc, #56]	; (800718c <MX_GPIO_Init+0x2a4>)
 8007154:	2200      	movs	r2, #0
 8007156:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8007158:	4b0c      	ldr	r3, [pc, #48]	; (800718c <MX_GPIO_Init+0x2a4>)
 800715a:	2206      	movs	r2, #6
 800715c:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(I2S3_CK_GPIO_Port, &GPIO_InitStruct);
 800715e:	490b      	ldr	r1, [pc, #44]	; (800718c <MX_GPIO_Init+0x2a4>)
 8007160:	4808      	ldr	r0, [pc, #32]	; (8007184 <MX_GPIO_Init+0x29c>)
 8007162:	f7fa fd33 	bl	8001bcc <HAL_GPIO_Init>

  /*Configure GPIO pins : uSD_CLK_Pin uSD_D3_Pin uSD_D2_Pin uSD_D1_Pin
                           uSD_D0_Pin */
  GPIO_InitStruct.Pin = uSD_CLK_Pin|uSD_D3_Pin|uSD_D2_Pin|uSD_D1_Pin
 8007166:	4b09      	ldr	r3, [pc, #36]	; (800718c <MX_GPIO_Init+0x2a4>)
 8007168:	f44f 52f8 	mov.w	r2, #7936	; 0x1f00
 800716c:	601a      	str	r2, [r3, #0]
 800716e:	e011      	b.n	8007194 <MX_GPIO_Init+0x2ac>
 8007170:	40023800 	.word	0x40023800
 8007174:	40021000 	.word	0x40021000
 8007178:	40020c00 	.word	0x40020c00
 800717c:	40022800 	.word	0x40022800
 8007180:	40021800 	.word	0x40021800
 8007184:	40020400 	.word	0x40020400
 8007188:	40020000 	.word	0x40020000
 800718c:	200003ac 	.word	0x200003ac
 8007190:	40020800 	.word	0x40020800
                          |uSD_D0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007194:	4b9c      	ldr	r3, [pc, #624]	; (8007408 <MX_GPIO_Init+0x520>)
 8007196:	2202      	movs	r2, #2
 8007198:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800719a:	4b9b      	ldr	r3, [pc, #620]	; (8007408 <MX_GPIO_Init+0x520>)
 800719c:	2200      	movs	r2, #0
 800719e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80071a0:	4b99      	ldr	r3, [pc, #612]	; (8007408 <MX_GPIO_Init+0x520>)
 80071a2:	2203      	movs	r2, #3
 80071a4:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80071a6:	4b98      	ldr	r3, [pc, #608]	; (8007408 <MX_GPIO_Init+0x520>)
 80071a8:	220c      	movs	r2, #12
 80071aa:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80071ac:	4996      	ldr	r1, [pc, #600]	; (8007408 <MX_GPIO_Init+0x520>)
 80071ae:	4897      	ldr	r0, [pc, #604]	; (800740c <MX_GPIO_Init+0x524>)
 80071b0:	f7fa fd0c 	bl	8001bcc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS1_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS1_OverCurrent_Pin;
 80071b4:	4b94      	ldr	r3, [pc, #592]	; (8007408 <MX_GPIO_Init+0x520>)
 80071b6:	2280      	movs	r2, #128	; 0x80
 80071b8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80071ba:	4b93      	ldr	r3, [pc, #588]	; (8007408 <MX_GPIO_Init+0x520>)
 80071bc:	4a94      	ldr	r2, [pc, #592]	; (8007410 <MX_GPIO_Init+0x528>)
 80071be:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071c0:	4b91      	ldr	r3, [pc, #580]	; (8007408 <MX_GPIO_Init+0x520>)
 80071c2:	2200      	movs	r2, #0
 80071c4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(OTG_FS1_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80071c6:	4990      	ldr	r1, [pc, #576]	; (8007408 <MX_GPIO_Init+0x520>)
 80071c8:	4892      	ldr	r0, [pc, #584]	; (8007414 <MX_GPIO_Init+0x52c>)
 80071ca:	f7fa fcff 	bl	8001bcc <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_BK1_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin;
 80071ce:	4b8e      	ldr	r3, [pc, #568]	; (8007408 <MX_GPIO_Init+0x520>)
 80071d0:	2240      	movs	r2, #64	; 0x40
 80071d2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80071d4:	4b8c      	ldr	r3, [pc, #560]	; (8007408 <MX_GPIO_Init+0x520>)
 80071d6:	2202      	movs	r2, #2
 80071d8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071da:	4b8b      	ldr	r3, [pc, #556]	; (8007408 <MX_GPIO_Init+0x520>)
 80071dc:	2200      	movs	r2, #0
 80071de:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80071e0:	4b89      	ldr	r3, [pc, #548]	; (8007408 <MX_GPIO_Init+0x520>)
 80071e2:	2203      	movs	r2, #3
 80071e4:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF10_QSPI;
 80071e6:	4b88      	ldr	r3, [pc, #544]	; (8007408 <MX_GPIO_Init+0x520>)
 80071e8:	220a      	movs	r2, #10
 80071ea:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(QSPI_BK1_NCS_GPIO_Port, &GPIO_InitStruct);
 80071ec:	4986      	ldr	r1, [pc, #536]	; (8007408 <MX_GPIO_Init+0x520>)
 80071ee:	4889      	ldr	r0, [pc, #548]	; (8007414 <MX_GPIO_Init+0x52c>)
 80071f0:	f7fa fcec 	bl	8001bcc <HAL_GPIO_Init>

  /*Configure GPIO pins : SDNCAS_Pin SDCLK_Pin A11_Pin A10_Pin
                           PG5 PG4 */
  GPIO_InitStruct.Pin = SDNCAS_Pin|SDCLK_Pin|A11_Pin|A10_Pin
 80071f4:	4b84      	ldr	r3, [pc, #528]	; (8007408 <MX_GPIO_Init+0x520>)
 80071f6:	f248 1233 	movw	r2, #33075	; 0x8133
 80071fa:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80071fc:	4b82      	ldr	r3, [pc, #520]	; (8007408 <MX_GPIO_Init+0x520>)
 80071fe:	2202      	movs	r2, #2
 8007200:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007202:	4b81      	ldr	r3, [pc, #516]	; (8007408 <MX_GPIO_Init+0x520>)
 8007204:	2200      	movs	r2, #0
 8007206:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007208:	4b7f      	ldr	r3, [pc, #508]	; (8007408 <MX_GPIO_Init+0x520>)
 800720a:	2203      	movs	r2, #3
 800720c:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800720e:	4b7e      	ldr	r3, [pc, #504]	; (8007408 <MX_GPIO_Init+0x520>)
 8007210:	220c      	movs	r2, #12
 8007212:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8007214:	497c      	ldr	r1, [pc, #496]	; (8007408 <MX_GPIO_Init+0x520>)
 8007216:	4880      	ldr	r0, [pc, #512]	; (8007418 <MX_GPIO_Init+0x530>)
 8007218:	f7fa fcd8 	bl	8001bcc <HAL_GPIO_Init>

  /*Configure GPIO pin : MIC_DATA_Pin */
  GPIO_InitStruct.Pin = MIC_DATA_Pin;
 800721c:	4b7a      	ldr	r3, [pc, #488]	; (8007408 <MX_GPIO_Init+0x520>)
 800721e:	2240      	movs	r2, #64	; 0x40
 8007220:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007222:	4b79      	ldr	r3, [pc, #484]	; (8007408 <MX_GPIO_Init+0x520>)
 8007224:	2202      	movs	r2, #2
 8007226:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007228:	4b77      	ldr	r3, [pc, #476]	; (8007408 <MX_GPIO_Init+0x520>)
 800722a:	2200      	movs	r2, #0
 800722c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800722e:	4b76      	ldr	r3, [pc, #472]	; (8007408 <MX_GPIO_Init+0x520>)
 8007230:	2200      	movs	r2, #0
 8007232:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8007234:	4b74      	ldr	r3, [pc, #464]	; (8007408 <MX_GPIO_Init+0x520>)
 8007236:	2206      	movs	r2, #6
 8007238:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(MIC_DATA_GPIO_Port, &GPIO_InitStruct);
 800723a:	4973      	ldr	r1, [pc, #460]	; (8007408 <MX_GPIO_Init+0x520>)
 800723c:	4877      	ldr	r0, [pc, #476]	; (800741c <MX_GPIO_Init+0x534>)
 800723e:	f7fa fcc5 	bl	8001bcc <HAL_GPIO_Init>

  /*Configure GPIO pins : D2_Pin D3_Pin D1_Pin D15_Pin
                           D0_Pin D14_Pin D13_Pin */
  GPIO_InitStruct.Pin = D2_Pin|D3_Pin|D1_Pin|D15_Pin
 8007242:	4b71      	ldr	r3, [pc, #452]	; (8007408 <MX_GPIO_Init+0x520>)
 8007244:	f24c 7203 	movw	r2, #50947	; 0xc703
 8007248:	601a      	str	r2, [r3, #0]
                          |D0_Pin|D14_Pin|D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800724a:	4b6f      	ldr	r3, [pc, #444]	; (8007408 <MX_GPIO_Init+0x520>)
 800724c:	2202      	movs	r2, #2
 800724e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007250:	4b6d      	ldr	r3, [pc, #436]	; (8007408 <MX_GPIO_Init+0x520>)
 8007252:	2200      	movs	r2, #0
 8007254:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007256:	4b6c      	ldr	r3, [pc, #432]	; (8007408 <MX_GPIO_Init+0x520>)
 8007258:	2203      	movs	r2, #3
 800725a:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800725c:	4b6a      	ldr	r3, [pc, #424]	; (8007408 <MX_GPIO_Init+0x520>)
 800725e:	220c      	movs	r2, #12
 8007260:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007262:	4969      	ldr	r1, [pc, #420]	; (8007408 <MX_GPIO_Init+0x520>)
 8007264:	486d      	ldr	r0, [pc, #436]	; (800741c <MX_GPIO_Init+0x534>)
 8007266:	f7fa fcb1 	bl	8001bcc <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS1_P_Pin USB_FS1_N_Pin USB_FS1_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS1_P_Pin|USB_FS1_N_Pin|USB_FS1_ID_Pin;
 800726a:	4b67      	ldr	r3, [pc, #412]	; (8007408 <MX_GPIO_Init+0x520>)
 800726c:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 8007270:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007272:	4b65      	ldr	r3, [pc, #404]	; (8007408 <MX_GPIO_Init+0x520>)
 8007274:	2202      	movs	r2, #2
 8007276:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007278:	4b63      	ldr	r3, [pc, #396]	; (8007408 <MX_GPIO_Init+0x520>)
 800727a:	2200      	movs	r2, #0
 800727c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800727e:	4b62      	ldr	r3, [pc, #392]	; (8007408 <MX_GPIO_Init+0x520>)
 8007280:	2203      	movs	r2, #3
 8007282:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007284:	4b60      	ldr	r3, [pc, #384]	; (8007408 <MX_GPIO_Init+0x520>)
 8007286:	220a      	movs	r2, #10
 8007288:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800728a:	495f      	ldr	r1, [pc, #380]	; (8007408 <MX_GPIO_Init+0x520>)
 800728c:	4864      	ldr	r0, [pc, #400]	; (8007420 <MX_GPIO_Init+0x538>)
 800728e:	f7fa fc9d 	bl	8001bcc <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_NBL2_Pin D27_Pin D26_Pin FMC_NBL3_Pin
                           D29_Pin D31_Pin D28_Pin D25_Pin
                           D30_Pin D24_Pin */
  GPIO_InitStruct.Pin = FMC_NBL2_Pin|D27_Pin|D26_Pin|FMC_NBL3_Pin
 8007292:	4b5d      	ldr	r3, [pc, #372]	; (8007408 <MX_GPIO_Init+0x520>)
 8007294:	f240 62ff 	movw	r2, #1791	; 0x6ff
 8007298:	601a      	str	r2, [r3, #0]
                          |D29_Pin|D31_Pin|D28_Pin|D25_Pin
                          |D30_Pin|D24_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800729a:	4b5b      	ldr	r3, [pc, #364]	; (8007408 <MX_GPIO_Init+0x520>)
 800729c:	2202      	movs	r2, #2
 800729e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072a0:	4b59      	ldr	r3, [pc, #356]	; (8007408 <MX_GPIO_Init+0x520>)
 80072a2:	2200      	movs	r2, #0
 80072a4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80072a6:	4b58      	ldr	r3, [pc, #352]	; (8007408 <MX_GPIO_Init+0x520>)
 80072a8:	2203      	movs	r2, #3
 80072aa:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80072ac:	4b56      	ldr	r3, [pc, #344]	; (8007408 <MX_GPIO_Init+0x520>)
 80072ae:	220c      	movs	r2, #12
 80072b0:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80072b2:	4955      	ldr	r1, [pc, #340]	; (8007408 <MX_GPIO_Init+0x520>)
 80072b4:	485b      	ldr	r0, [pc, #364]	; (8007424 <MX_GPIO_Init+0x53c>)
 80072b6:	f7fa fc89 	bl	8001bcc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED3_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED2_Pin;
 80072ba:	4b53      	ldr	r3, [pc, #332]	; (8007408 <MX_GPIO_Init+0x520>)
 80072bc:	2230      	movs	r2, #48	; 0x30
 80072be:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80072c0:	4b51      	ldr	r3, [pc, #324]	; (8007408 <MX_GPIO_Init+0x520>)
 80072c2:	2211      	movs	r2, #17
 80072c4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072c6:	4b50      	ldr	r3, [pc, #320]	; (8007408 <MX_GPIO_Init+0x520>)
 80072c8:	2200      	movs	r2, #0
 80072ca:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80072cc:	4b4e      	ldr	r3, [pc, #312]	; (8007408 <MX_GPIO_Init+0x520>)
 80072ce:	2200      	movs	r2, #0
 80072d0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80072d2:	494d      	ldr	r1, [pc, #308]	; (8007408 <MX_GPIO_Init+0x520>)
 80072d4:	4851      	ldr	r0, [pc, #324]	; (800741c <MX_GPIO_Init+0x534>)
 80072d6:	f7fa fc79 	bl	8001bcc <HAL_GPIO_Init>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
                           A4_Pin A5_Pin A6_Pin A9_Pin
                           A7_Pin A8_Pin SDNMT48LC4M32B2B5_6A_RAS_RAS___Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 80072da:	4b4b      	ldr	r3, [pc, #300]	; (8007408 <MX_GPIO_Init+0x520>)
 80072dc:	f64f 023f 	movw	r2, #63551	; 0xf83f
 80072e0:	601a      	str	r2, [r3, #0]
                          |A4_Pin|A5_Pin|A6_Pin|A9_Pin
                          |A7_Pin|A8_Pin|SDNMT48LC4M32B2B5_6A_RAS_RAS___Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80072e2:	4b49      	ldr	r3, [pc, #292]	; (8007408 <MX_GPIO_Init+0x520>)
 80072e4:	2202      	movs	r2, #2
 80072e6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072e8:	4b47      	ldr	r3, [pc, #284]	; (8007408 <MX_GPIO_Init+0x520>)
 80072ea:	2200      	movs	r2, #0
 80072ec:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80072ee:	4b46      	ldr	r3, [pc, #280]	; (8007408 <MX_GPIO_Init+0x520>)
 80072f0:	2203      	movs	r2, #3
 80072f2:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80072f4:	4b44      	ldr	r3, [pc, #272]	; (8007408 <MX_GPIO_Init+0x520>)
 80072f6:	220c      	movs	r2, #12
 80072f8:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80072fa:	4943      	ldr	r1, [pc, #268]	; (8007408 <MX_GPIO_Init+0x520>)
 80072fc:	484a      	ldr	r0, [pc, #296]	; (8007428 <MX_GPIO_Init+0x540>)
 80072fe:	f7fa fc65 	bl	8001bcc <HAL_GPIO_Init>

  /*Configure GPIO pin : LED4_Pin */
  GPIO_InitStruct.Pin = LED4_Pin;
 8007302:	4b41      	ldr	r3, [pc, #260]	; (8007408 <MX_GPIO_Init+0x520>)
 8007304:	2208      	movs	r2, #8
 8007306:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8007308:	4b3f      	ldr	r3, [pc, #252]	; (8007408 <MX_GPIO_Init+0x520>)
 800730a:	2211      	movs	r2, #17
 800730c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800730e:	4b3e      	ldr	r3, [pc, #248]	; (8007408 <MX_GPIO_Init+0x520>)
 8007310:	2200      	movs	r2, #0
 8007312:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007314:	4b3c      	ldr	r3, [pc, #240]	; (8007408 <MX_GPIO_Init+0x520>)
 8007316:	2200      	movs	r2, #0
 8007318:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED4_GPIO_Port, &GPIO_InitStruct);
 800731a:	493b      	ldr	r1, [pc, #236]	; (8007408 <MX_GPIO_Init+0x520>)
 800731c:	4843      	ldr	r0, [pc, #268]	; (800742c <MX_GPIO_Init+0x544>)
 800731e:	f7fa fc55 	bl	8001bcc <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_CMD_Pin */
  GPIO_InitStruct.Pin = uSD_CMD_Pin;
 8007322:	4b39      	ldr	r3, [pc, #228]	; (8007408 <MX_GPIO_Init+0x520>)
 8007324:	2204      	movs	r2, #4
 8007326:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007328:	4b37      	ldr	r3, [pc, #220]	; (8007408 <MX_GPIO_Init+0x520>)
 800732a:	2202      	movs	r2, #2
 800732c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800732e:	4b36      	ldr	r3, [pc, #216]	; (8007408 <MX_GPIO_Init+0x520>)
 8007330:	2200      	movs	r2, #0
 8007332:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007334:	4b34      	ldr	r3, [pc, #208]	; (8007408 <MX_GPIO_Init+0x520>)
 8007336:	2203      	movs	r2, #3
 8007338:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800733a:	4b33      	ldr	r3, [pc, #204]	; (8007408 <MX_GPIO_Init+0x520>)
 800733c:	220c      	movs	r2, #12
 800733e:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(uSD_CMD_GPIO_Port, &GPIO_InitStruct);
 8007340:	4931      	ldr	r1, [pc, #196]	; (8007408 <MX_GPIO_Init+0x520>)
 8007342:	4836      	ldr	r0, [pc, #216]	; (800741c <MX_GPIO_Init+0x534>)
 8007344:	f7fa fc42 	bl	8001bcc <HAL_GPIO_Init>

  /*Configure GPIO pins : D23_Pin D21_Pin D22_Pin SDNE0_Pin
                           SDCKE0_Pin D20_Pin D17_Pin D19_Pin
                           D16_Pin D18_Pin */
  GPIO_InitStruct.Pin = D23_Pin|D21_Pin|D22_Pin|SDNE0_Pin
 8007348:	4b2f      	ldr	r3, [pc, #188]	; (8007408 <MX_GPIO_Init+0x520>)
 800734a:	f64f 720c 	movw	r2, #65292	; 0xff0c
 800734e:	601a      	str	r2, [r3, #0]
                          |SDCKE0_Pin|D20_Pin|D17_Pin|D19_Pin
                          |D16_Pin|D18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007350:	4b2d      	ldr	r3, [pc, #180]	; (8007408 <MX_GPIO_Init+0x520>)
 8007352:	2202      	movs	r2, #2
 8007354:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007356:	4b2c      	ldr	r3, [pc, #176]	; (8007408 <MX_GPIO_Init+0x520>)
 8007358:	2200      	movs	r2, #0
 800735a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800735c:	4b2a      	ldr	r3, [pc, #168]	; (8007408 <MX_GPIO_Init+0x520>)
 800735e:	2203      	movs	r2, #3
 8007360:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8007362:	4b29      	ldr	r3, [pc, #164]	; (8007408 <MX_GPIO_Init+0x520>)
 8007364:	220c      	movs	r2, #12
 8007366:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8007368:	4927      	ldr	r1, [pc, #156]	; (8007408 <MX_GPIO_Init+0x520>)
 800736a:	4831      	ldr	r0, [pc, #196]	; (8007430 <MX_GPIO_Init+0x548>)
 800736c:	f7fa fc2e 	bl	8001bcc <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS1_Pin */
  GPIO_InitStruct.Pin = VBUS_FS1_Pin;
 8007370:	4b25      	ldr	r3, [pc, #148]	; (8007408 <MX_GPIO_Init+0x520>)
 8007372:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007376:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007378:	4b23      	ldr	r3, [pc, #140]	; (8007408 <MX_GPIO_Init+0x520>)
 800737a:	2202      	movs	r2, #2
 800737c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800737e:	4b22      	ldr	r3, [pc, #136]	; (8007408 <MX_GPIO_Init+0x520>)
 8007380:	2200      	movs	r2, #0
 8007382:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(VBUS_FS1_GPIO_Port, &GPIO_InitStruct);
 8007384:	4920      	ldr	r1, [pc, #128]	; (8007408 <MX_GPIO_Init+0x520>)
 8007386:	4826      	ldr	r0, [pc, #152]	; (8007420 <MX_GPIO_Init+0x538>)
 8007388:	f7fa fc20 	bl	8001bcc <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C2_SCL_Pin I2C2_SDA_Pin */
  GPIO_InitStruct.Pin = I2C2_SCL_Pin|I2C2_SDA_Pin;
 800738c:	4b1e      	ldr	r3, [pc, #120]	; (8007408 <MX_GPIO_Init+0x520>)
 800738e:	2230      	movs	r2, #48	; 0x30
 8007390:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007392:	4b1d      	ldr	r3, [pc, #116]	; (8007408 <MX_GPIO_Init+0x520>)
 8007394:	2212      	movs	r2, #18
 8007396:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007398:	4b1b      	ldr	r3, [pc, #108]	; (8007408 <MX_GPIO_Init+0x520>)
 800739a:	2201      	movs	r2, #1
 800739c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800739e:	4b1a      	ldr	r3, [pc, #104]	; (8007408 <MX_GPIO_Init+0x520>)
 80073a0:	2203      	movs	r2, #3
 80073a2:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80073a4:	4b18      	ldr	r3, [pc, #96]	; (8007408 <MX_GPIO_Init+0x520>)
 80073a6:	2204      	movs	r2, #4
 80073a8:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80073aa:	4917      	ldr	r1, [pc, #92]	; (8007408 <MX_GPIO_Init+0x520>)
 80073ac:	4820      	ldr	r0, [pc, #128]	; (8007430 <MX_GPIO_Init+0x548>)
 80073ae:	f7fa fc0d 	bl	8001bcc <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI1_MCLKA_Pin */
  GPIO_InitStruct.Pin = SAI1_MCLKA_Pin;
 80073b2:	4b15      	ldr	r3, [pc, #84]	; (8007408 <MX_GPIO_Init+0x520>)
 80073b4:	2280      	movs	r2, #128	; 0x80
 80073b6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80073b8:	4b13      	ldr	r3, [pc, #76]	; (8007408 <MX_GPIO_Init+0x520>)
 80073ba:	2202      	movs	r2, #2
 80073bc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80073be:	4b12      	ldr	r3, [pc, #72]	; (8007408 <MX_GPIO_Init+0x520>)
 80073c0:	2200      	movs	r2, #0
 80073c2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80073c4:	4b10      	ldr	r3, [pc, #64]	; (8007408 <MX_GPIO_Init+0x520>)
 80073c6:	2200      	movs	r2, #0
 80073c8:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80073ca:	4b0f      	ldr	r3, [pc, #60]	; (8007408 <MX_GPIO_Init+0x520>)
 80073cc:	2206      	movs	r2, #6
 80073ce:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(SAI1_MCLKA_GPIO_Port, &GPIO_InitStruct);
 80073d0:	490d      	ldr	r1, [pc, #52]	; (8007408 <MX_GPIO_Init+0x520>)
 80073d2:	4811      	ldr	r0, [pc, #68]	; (8007418 <MX_GPIO_Init+0x530>)
 80073d4:	f7fa fbfa 	bl	8001bcc <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 80073d8:	4b0b      	ldr	r3, [pc, #44]	; (8007408 <MX_GPIO_Init+0x520>)
 80073da:	2240      	movs	r2, #64	; 0x40
 80073dc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80073de:	4b0a      	ldr	r3, [pc, #40]	; (8007408 <MX_GPIO_Init+0x520>)
 80073e0:	2211      	movs	r2, #17
 80073e2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80073e4:	4b08      	ldr	r3, [pc, #32]	; (8007408 <MX_GPIO_Init+0x520>)
 80073e6:	2200      	movs	r2, #0
 80073e8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80073ea:	4b07      	ldr	r3, [pc, #28]	; (8007408 <MX_GPIO_Init+0x520>)
 80073ec:	2200      	movs	r2, #0
 80073ee:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 80073f0:	4905      	ldr	r1, [pc, #20]	; (8007408 <MX_GPIO_Init+0x520>)
 80073f2:	4809      	ldr	r0, [pc, #36]	; (8007418 <MX_GPIO_Init+0x530>)
 80073f4:	f7fa fbea 	bl	8001bcc <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_BK1_IO2_Pin QSPI_BK1_IO3_Pin QSPI_CLK_Pin */
  GPIO_InitStruct.Pin = QSPI_BK1_IO2_Pin|QSPI_BK1_IO3_Pin|QSPI_CLK_Pin;
 80073f8:	4b03      	ldr	r3, [pc, #12]	; (8007408 <MX_GPIO_Init+0x520>)
 80073fa:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 80073fe:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007400:	4b01      	ldr	r3, [pc, #4]	; (8007408 <MX_GPIO_Init+0x520>)
 8007402:	2202      	movs	r2, #2
 8007404:	605a      	str	r2, [r3, #4]
 8007406:	e015      	b.n	8007434 <MX_GPIO_Init+0x54c>
 8007408:	200003ac 	.word	0x200003ac
 800740c:	40020800 	.word	0x40020800
 8007410:	10110000 	.word	0x10110000
 8007414:	40020400 	.word	0x40020400
 8007418:	40021800 	.word	0x40021800
 800741c:	40020c00 	.word	0x40020c00
 8007420:	40020000 	.word	0x40020000
 8007424:	40022000 	.word	0x40022000
 8007428:	40021400 	.word	0x40021400
 800742c:	40022800 	.word	0x40022800
 8007430:	40021c00 	.word	0x40021c00
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007434:	4b52      	ldr	r3, [pc, #328]	; (8007580 <MX_GPIO_Init+0x698>)
 8007436:	2200      	movs	r2, #0
 8007438:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800743a:	4b51      	ldr	r3, [pc, #324]	; (8007580 <MX_GPIO_Init+0x698>)
 800743c:	2203      	movs	r2, #3
 800743e:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8007440:	4b4f      	ldr	r3, [pc, #316]	; (8007580 <MX_GPIO_Init+0x698>)
 8007442:	2209      	movs	r2, #9
 8007444:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8007446:	494e      	ldr	r1, [pc, #312]	; (8007580 <MX_GPIO_Init+0x698>)
 8007448:	484e      	ldr	r0, [pc, #312]	; (8007584 <MX_GPIO_Init+0x69c>)
 800744a:	f7fa fbbf 	bl	8001bcc <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_BK1_IO1_Pin QSPI_BK1_IO0_Pin */
  GPIO_InitStruct.Pin = QSPI_BK1_IO1_Pin|QSPI_BK1_IO0_Pin;
 800744e:	4b4c      	ldr	r3, [pc, #304]	; (8007580 <MX_GPIO_Init+0x698>)
 8007450:	f44f 7240 	mov.w	r2, #768	; 0x300
 8007454:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007456:	4b4a      	ldr	r3, [pc, #296]	; (8007580 <MX_GPIO_Init+0x698>)
 8007458:	2202      	movs	r2, #2
 800745a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800745c:	4b48      	ldr	r3, [pc, #288]	; (8007580 <MX_GPIO_Init+0x698>)
 800745e:	2200      	movs	r2, #0
 8007460:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007462:	4b47      	ldr	r3, [pc, #284]	; (8007580 <MX_GPIO_Init+0x698>)
 8007464:	2203      	movs	r2, #3
 8007466:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF10_QSPI;
 8007468:	4b45      	ldr	r3, [pc, #276]	; (8007580 <MX_GPIO_Init+0x698>)
 800746a:	220a      	movs	r2, #10
 800746c:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800746e:	4944      	ldr	r1, [pc, #272]	; (8007580 <MX_GPIO_Init+0x698>)
 8007470:	4844      	ldr	r0, [pc, #272]	; (8007584 <MX_GPIO_Init+0x69c>)
 8007472:	f7fa fbab 	bl	8001bcc <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8007476:	4b42      	ldr	r3, [pc, #264]	; (8007580 <MX_GPIO_Init+0x698>)
 8007478:	2201      	movs	r2, #1
 800747a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800747c:	4b40      	ldr	r3, [pc, #256]	; (8007580 <MX_GPIO_Init+0x698>)
 800747e:	2202      	movs	r2, #2
 8007480:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007482:	4b3f      	ldr	r3, [pc, #252]	; (8007580 <MX_GPIO_Init+0x698>)
 8007484:	2200      	movs	r2, #0
 8007486:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007488:	4b3d      	ldr	r3, [pc, #244]	; (8007580 <MX_GPIO_Init+0x698>)
 800748a:	2203      	movs	r2, #3
 800748c:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800748e:	4b3c      	ldr	r3, [pc, #240]	; (8007580 <MX_GPIO_Init+0x698>)
 8007490:	220c      	movs	r2, #12
 8007492:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8007494:	493a      	ldr	r1, [pc, #232]	; (8007580 <MX_GPIO_Init+0x698>)
 8007496:	483c      	ldr	r0, [pc, #240]	; (8007588 <MX_GPIO_Init+0x6a0>)
 8007498:	f7fa fb98 	bl	8001bcc <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS1_PowerSwitchOn_Pin EXT_RESET_Pin */
  GPIO_InitStruct.Pin = OTG_FS1_PowerSwitchOn_Pin|EXT_RESET_Pin;
 800749c:	4b38      	ldr	r3, [pc, #224]	; (8007580 <MX_GPIO_Init+0x698>)
 800749e:	2205      	movs	r2, #5
 80074a0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80074a2:	4b37      	ldr	r3, [pc, #220]	; (8007580 <MX_GPIO_Init+0x698>)
 80074a4:	2201      	movs	r2, #1
 80074a6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074a8:	4b35      	ldr	r3, [pc, #212]	; (8007580 <MX_GPIO_Init+0x698>)
 80074aa:	2200      	movs	r2, #0
 80074ac:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80074ae:	4b34      	ldr	r3, [pc, #208]	; (8007580 <MX_GPIO_Init+0x698>)
 80074b0:	2200      	movs	r2, #0
 80074b2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80074b4:	4932      	ldr	r1, [pc, #200]	; (8007580 <MX_GPIO_Init+0x698>)
 80074b6:	4835      	ldr	r0, [pc, #212]	; (800758c <MX_GPIO_Init+0x6a4>)
 80074b8:	f7fa fb88 	bl	8001bcc <HAL_GPIO_Init>

  /*Configure GPIO pin : MIC_CK_Pin */
  GPIO_InitStruct.Pin = MIC_CK_Pin;
 80074bc:	4b30      	ldr	r3, [pc, #192]	; (8007580 <MX_GPIO_Init+0x698>)
 80074be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80074c2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80074c4:	4b2e      	ldr	r3, [pc, #184]	; (8007580 <MX_GPIO_Init+0x698>)
 80074c6:	2202      	movs	r2, #2
 80074c8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074ca:	4b2d      	ldr	r3, [pc, #180]	; (8007580 <MX_GPIO_Init+0x698>)
 80074cc:	2200      	movs	r2, #0
 80074ce:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80074d0:	4b2b      	ldr	r3, [pc, #172]	; (8007580 <MX_GPIO_Init+0x698>)
 80074d2:	2200      	movs	r2, #0
 80074d4:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80074d6:	4b2a      	ldr	r3, [pc, #168]	; (8007580 <MX_GPIO_Init+0x698>)
 80074d8:	2202      	movs	r2, #2
 80074da:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(MIC_CK_GPIO_Port, &GPIO_InitStruct);
 80074dc:	4928      	ldr	r1, [pc, #160]	; (8007580 <MX_GPIO_Init+0x698>)
 80074de:	482c      	ldr	r0, [pc, #176]	; (8007590 <MX_GPIO_Init+0x6a8>)
 80074e0:	f7fa fb74 	bl	8001bcc <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 80074e4:	4b26      	ldr	r3, [pc, #152]	; (8007580 <MX_GPIO_Init+0x698>)
 80074e6:	2204      	movs	r2, #4
 80074e8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80074ea:	4b25      	ldr	r3, [pc, #148]	; (8007580 <MX_GPIO_Init+0x698>)
 80074ec:	2200      	movs	r2, #0
 80074ee:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074f0:	4b23      	ldr	r3, [pc, #140]	; (8007580 <MX_GPIO_Init+0x698>)
 80074f2:	2200      	movs	r2, #0
 80074f4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 80074f6:	4922      	ldr	r1, [pc, #136]	; (8007580 <MX_GPIO_Init+0x698>)
 80074f8:	4826      	ldr	r0, [pc, #152]	; (8007594 <MX_GPIO_Init+0x6ac>)
 80074fa:	f7fa fb67 	bl	8001bcc <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 80074fe:	4b20      	ldr	r3, [pc, #128]	; (8007580 <MX_GPIO_Init+0x698>)
 8007500:	2220      	movs	r2, #32
 8007502:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8007504:	4b1e      	ldr	r3, [pc, #120]	; (8007580 <MX_GPIO_Init+0x698>)
 8007506:	4a24      	ldr	r2, [pc, #144]	; (8007598 <MX_GPIO_Init+0x6b0>)
 8007508:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800750a:	4b1d      	ldr	r3, [pc, #116]	; (8007580 <MX_GPIO_Init+0x698>)
 800750c:	2200      	movs	r2, #0
 800750e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8007510:	491b      	ldr	r1, [pc, #108]	; (8007580 <MX_GPIO_Init+0x698>)
 8007512:	4822      	ldr	r0, [pc, #136]	; (800759c <MX_GPIO_Init+0x6b4>)
 8007514:	f7fa fb5a 	bl	8001bcc <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8007518:	4b19      	ldr	r3, [pc, #100]	; (8007580 <MX_GPIO_Init+0x698>)
 800751a:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 800751e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007520:	4b17      	ldr	r3, [pc, #92]	; (8007580 <MX_GPIO_Init+0x698>)
 8007522:	2202      	movs	r2, #2
 8007524:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007526:	4b16      	ldr	r3, [pc, #88]	; (8007580 <MX_GPIO_Init+0x698>)
 8007528:	2200      	movs	r2, #0
 800752a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800752c:	4b14      	ldr	r3, [pc, #80]	; (8007580 <MX_GPIO_Init+0x698>)
 800752e:	2203      	movs	r2, #3
 8007530:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8007532:	4b13      	ldr	r3, [pc, #76]	; (8007580 <MX_GPIO_Init+0x698>)
 8007534:	2207      	movs	r2, #7
 8007536:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007538:	4911      	ldr	r1, [pc, #68]	; (8007580 <MX_GPIO_Init+0x698>)
 800753a:	4814      	ldr	r0, [pc, #80]	; (800758c <MX_GPIO_Init+0x6a4>)
 800753c:	f7fa fb46 	bl	8001bcc <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8007540:	4b0f      	ldr	r3, [pc, #60]	; (8007580 <MX_GPIO_Init+0x698>)
 8007542:	2208      	movs	r2, #8
 8007544:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007546:	4b0e      	ldr	r3, [pc, #56]	; (8007580 <MX_GPIO_Init+0x698>)
 8007548:	2201      	movs	r2, #1
 800754a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800754c:	4b0c      	ldr	r3, [pc, #48]	; (8007580 <MX_GPIO_Init+0x698>)
 800754e:	2200      	movs	r2, #0
 8007550:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007552:	4b0b      	ldr	r3, [pc, #44]	; (8007580 <MX_GPIO_Init+0x698>)
 8007554:	2200      	movs	r2, #0
 8007556:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8007558:	4909      	ldr	r1, [pc, #36]	; (8007580 <MX_GPIO_Init+0x698>)
 800755a:	4811      	ldr	r0, [pc, #68]	; (80075a0 <MX_GPIO_Init+0x6b8>)
 800755c:	f7fa fb36 	bl	8001bcc <HAL_GPIO_Init>

  BSP_LED_Off(LED_GREEN);
 8007560:	2000      	movs	r0, #0
 8007562:	f7fe fadf 	bl	8005b24 <BSP_LED_Off>
  BSP_LED_Off(LED_RED);
 8007566:	2002      	movs	r0, #2
 8007568:	f7fe fadc 	bl	8005b24 <BSP_LED_Off>
  BSP_LED_Off(LED_ORANGE);
 800756c:	2001      	movs	r0, #1
 800756e:	f7fe fad9 	bl	8005b24 <BSP_LED_Off>
  BSP_LED_Off(LED_BLUE);
 8007572:	2003      	movs	r0, #3
 8007574:	f7fe fad6 	bl	8005b24 <BSP_LED_Off>

}
 8007578:	bf00      	nop
 800757a:	3730      	adds	r7, #48	; 0x30
 800757c:	46bd      	mov	sp, r7
 800757e:	bd80      	pop	{r7, pc}
 8007580:	200003ac 	.word	0x200003ac
 8007584:	40021400 	.word	0x40021400
 8007588:	40020800 	.word	0x40020800
 800758c:	40020400 	.word	0x40020400
 8007590:	40020c00 	.word	0x40020c00
 8007594:	40021800 	.word	0x40021800
 8007598:	10110000 	.word	0x10110000
 800759c:	40022400 	.word	0x40022400
 80075a0:	40020000 	.word	0x40020000

080075a4 <MX_NVIC_Init>:

static void MX_NVIC_Init(void)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	af00      	add	r7, sp, #0
	/* USART3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80075a8:	2200      	movs	r2, #0
 80075aa:	2100      	movs	r1, #0
 80075ac:	2027      	movs	r0, #39	; 0x27
 80075ae:	f7f9 f916 	bl	80007de <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART3_IRQn);
 80075b2:	2027      	movs	r0, #39	; 0x27
 80075b4:	f7f9 f92f 	bl	8000816 <HAL_NVIC_EnableIRQ>
	/* USART6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80075b8:	2200      	movs	r2, #0
 80075ba:	2100      	movs	r1, #0
 80075bc:	2047      	movs	r0, #71	; 0x47
 80075be:	f7f9 f90e 	bl	80007de <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART6_IRQn);
 80075c2:	2047      	movs	r0, #71	; 0x47
 80075c4:	f7f9 f927 	bl	8000816 <HAL_NVIC_EnableIRQ>
}
 80075c8:	bf00      	nop
 80075ca:	bd80      	pop	{r7, pc}

080075cc <UART6_Init>:


static void UART6_Init(void)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b082      	sub	sp, #8
 80075d0:	af00      	add	r7, sp, #0

	__HAL_RCC_USART6_CLK_ENABLE();
 80075d2:	2300      	movs	r3, #0
 80075d4:	607b      	str	r3, [r7, #4]
 80075d6:	4b1b      	ldr	r3, [pc, #108]	; (8007644 <UART6_Init+0x78>)
 80075d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075da:	4a1a      	ldr	r2, [pc, #104]	; (8007644 <UART6_Init+0x78>)
 80075dc:	f043 0320 	orr.w	r3, r3, #32
 80075e0:	6453      	str	r3, [r2, #68]	; 0x44
 80075e2:	4b18      	ldr	r3, [pc, #96]	; (8007644 <UART6_Init+0x78>)
 80075e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075e6:	f003 0320 	and.w	r3, r3, #32
 80075ea:	607b      	str	r3, [r7, #4]
 80075ec:	687b      	ldr	r3, [r7, #4]

	huart6.Instance = USART6;
 80075ee:	4b16      	ldr	r3, [pc, #88]	; (8007648 <UART6_Init+0x7c>)
 80075f0:	4a16      	ldr	r2, [pc, #88]	; (800764c <UART6_Init+0x80>)
 80075f2:	601a      	str	r2, [r3, #0]
	huart6.Init.BaudRate = 115200;
 80075f4:	4b14      	ldr	r3, [pc, #80]	; (8007648 <UART6_Init+0x7c>)
 80075f6:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80075fa:	605a      	str	r2, [r3, #4]
	huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80075fc:	4b12      	ldr	r3, [pc, #72]	; (8007648 <UART6_Init+0x7c>)
 80075fe:	2200      	movs	r2, #0
 8007600:	609a      	str	r2, [r3, #8]
	huart6.Init.StopBits = UART_STOPBITS_1;
 8007602:	4b11      	ldr	r3, [pc, #68]	; (8007648 <UART6_Init+0x7c>)
 8007604:	2200      	movs	r2, #0
 8007606:	60da      	str	r2, [r3, #12]
	huart6.Init.Parity = UART_PARITY_NONE;
 8007608:	4b0f      	ldr	r3, [pc, #60]	; (8007648 <UART6_Init+0x7c>)
 800760a:	2200      	movs	r2, #0
 800760c:	611a      	str	r2, [r3, #16]
	huart6.Init.Mode = UART_MODE_TX_RX;
 800760e:	4b0e      	ldr	r3, [pc, #56]	; (8007648 <UART6_Init+0x7c>)
 8007610:	220c      	movs	r2, #12
 8007612:	615a      	str	r2, [r3, #20]
	huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007614:	4b0c      	ldr	r3, [pc, #48]	; (8007648 <UART6_Init+0x7c>)
 8007616:	2200      	movs	r2, #0
 8007618:	619a      	str	r2, [r3, #24]
	huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800761a:	4b0b      	ldr	r3, [pc, #44]	; (8007648 <UART6_Init+0x7c>)
 800761c:	2200      	movs	r2, #0
 800761e:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart6) != HAL_OK)
 8007620:	4809      	ldr	r0, [pc, #36]	; (8007648 <UART6_Init+0x7c>)
 8007622:	f7fc ffe4 	bl	80045ee <HAL_UART_Init>
 8007626:	4603      	mov	r3, r0
 8007628:	2b00      	cmp	r3, #0
 800762a:	d001      	beq.n	8007630 <UART6_Init+0x64>
	{
	  Error_Handler();
 800762c:	f000 f962 	bl	80078f4 <Error_Handler>
	}

	HAL_UART_Receive_IT(&huart6, &databyte, 1);
 8007630:	2201      	movs	r2, #1
 8007632:	4907      	ldr	r1, [pc, #28]	; (8007650 <UART6_Init+0x84>)
 8007634:	4804      	ldr	r0, [pc, #16]	; (8007648 <UART6_Init+0x7c>)
 8007636:	f7fd f8ca 	bl	80047ce <HAL_UART_Receive_IT>

}
 800763a:	bf00      	nop
 800763c:	3708      	adds	r7, #8
 800763e:	46bd      	mov	sp, r7
 8007640:	bd80      	pop	{r7, pc}
 8007642:	bf00      	nop
 8007644:	40023800 	.word	0x40023800
 8007648:	20000538 	.word	0x20000538
 800764c:	40011400 	.word	0x40011400
 8007650:	200003e4 	.word	0x200003e4

08007654 <UART3_Init>:


static void UART3_Init(void)
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b082      	sub	sp, #8
 8007658:	af00      	add	r7, sp, #0

	__HAL_RCC_USART3_CLK_ENABLE();
 800765a:	2300      	movs	r3, #0
 800765c:	607b      	str	r3, [r7, #4]
 800765e:	4b1b      	ldr	r3, [pc, #108]	; (80076cc <UART3_Init+0x78>)
 8007660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007662:	4a1a      	ldr	r2, [pc, #104]	; (80076cc <UART3_Init+0x78>)
 8007664:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007668:	6413      	str	r3, [r2, #64]	; 0x40
 800766a:	4b18      	ldr	r3, [pc, #96]	; (80076cc <UART3_Init+0x78>)
 800766c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800766e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007672:	607b      	str	r3, [r7, #4]
 8007674:	687b      	ldr	r3, [r7, #4]

	huart3.Instance = USART3;
 8007676:	4b16      	ldr	r3, [pc, #88]	; (80076d0 <UART3_Init+0x7c>)
 8007678:	4a16      	ldr	r2, [pc, #88]	; (80076d4 <UART3_Init+0x80>)
 800767a:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 800767c:	4b14      	ldr	r3, [pc, #80]	; (80076d0 <UART3_Init+0x7c>)
 800767e:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007682:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8007684:	4b12      	ldr	r3, [pc, #72]	; (80076d0 <UART3_Init+0x7c>)
 8007686:	2200      	movs	r2, #0
 8007688:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 800768a:	4b11      	ldr	r3, [pc, #68]	; (80076d0 <UART3_Init+0x7c>)
 800768c:	2200      	movs	r2, #0
 800768e:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8007690:	4b0f      	ldr	r3, [pc, #60]	; (80076d0 <UART3_Init+0x7c>)
 8007692:	2200      	movs	r2, #0
 8007694:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8007696:	4b0e      	ldr	r3, [pc, #56]	; (80076d0 <UART3_Init+0x7c>)
 8007698:	220c      	movs	r2, #12
 800769a:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800769c:	4b0c      	ldr	r3, [pc, #48]	; (80076d0 <UART3_Init+0x7c>)
 800769e:	2200      	movs	r2, #0
 80076a0:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80076a2:	4b0b      	ldr	r3, [pc, #44]	; (80076d0 <UART3_Init+0x7c>)
 80076a4:	2200      	movs	r2, #0
 80076a6:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK)
 80076a8:	4809      	ldr	r0, [pc, #36]	; (80076d0 <UART3_Init+0x7c>)
 80076aa:	f7fc ffa0 	bl	80045ee <HAL_UART_Init>
 80076ae:	4603      	mov	r3, r0
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d001      	beq.n	80076b8 <UART3_Init+0x64>
	{
	  Error_Handler();
 80076b4:	f000 f91e 	bl	80078f4 <Error_Handler>
	}

	HAL_UART_Receive_IT(&huart3, &databyte, 1);
 80076b8:	2201      	movs	r2, #1
 80076ba:	4907      	ldr	r1, [pc, #28]	; (80076d8 <UART3_Init+0x84>)
 80076bc:	4804      	ldr	r0, [pc, #16]	; (80076d0 <UART3_Init+0x7c>)
 80076be:	f7fd f886 	bl	80047ce <HAL_UART_Receive_IT>

}
 80076c2:	bf00      	nop
 80076c4:	3708      	adds	r7, #8
 80076c6:	46bd      	mov	sp, r7
 80076c8:	bd80      	pop	{r7, pc}
 80076ca:	bf00      	nop
 80076cc:	40023800 	.word	0x40023800
 80076d0:	200004f8 	.word	0x200004f8
 80076d4:	40004800 	.word	0x40004800
 80076d8:	200003e4 	.word	0x200003e4

080076dc <LTCD_Init>:

static void LTCD_Init(void)
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	af00      	add	r7, sp, #0
	lcd_status = BSP_LCD_Init();
 80076e0:	f7fe fbaf 	bl	8005e42 <BSP_LCD_Init>
 80076e4:	4603      	mov	r3, r0
 80076e6:	461a      	mov	r2, r3
 80076e8:	4b14      	ldr	r3, [pc, #80]	; (800773c <LTCD_Init+0x60>)
 80076ea:	701a      	strb	r2, [r3, #0]

	if(lcd_status != LCD_OK)
 80076ec:	4b13      	ldr	r3, [pc, #76]	; (800773c <LTCD_Init+0x60>)
 80076ee:	781b      	ldrb	r3, [r3, #0]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d001      	beq.n	80076f8 <LTCD_Init+0x1c>
	{
		Error_Handler();
 80076f4:	f000 f8fe 	bl	80078f4 <Error_Handler>
	}

	BSP_LCD_LayerDefaultInit(0, LAYER0_ADDRESS);
 80076f8:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 80076fc:	2000      	movs	r0, #0
 80076fe:	f7fe fd41 	bl	8006184 <BSP_LCD_LayerDefaultInit>
	BSP_LCD_SelectLayer(0);
 8007702:	2000      	movs	r0, #0
 8007704:	f7fe fd9e 	bl	8006244 <BSP_LCD_SelectLayer>

	BSP_TS_Init(DISPLAY_SIZE_X, DISPLAY_SIZE_Y);
 8007708:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 800770c:	f44f 7048 	mov.w	r0, #800	; 0x320
 8007710:	f7ff fad0 	bl	8006cb4 <BSP_TS_Init>
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 8007714:	f04f 30ff 	mov.w	r0, #4294967295
 8007718:	f7fe fdf0 	bl	80062fc <BSP_LCD_Clear>
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 800771c:	f04f 30ff 	mov.w	r0, #4294967295
 8007720:	f7fe fdb8 	bl	8006294 <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8007724:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8007728:	f7fe fd9c 	bl	8006264 <BSP_LCD_SetTextColor>
	BSP_LCD_SetFont(&Font24);
 800772c:	4804      	ldr	r0, [pc, #16]	; (8007740 <LTCD_Init+0x64>)
 800772e:	f7fe fdcb 	bl	80062c8 <BSP_LCD_SetFont>

	BSP_LCD_DisplayOn();
 8007732:	f7fe ff17 	bl	8006564 <BSP_LCD_DisplayOn>
}
 8007736:	bf00      	nop
 8007738:	bd80      	pop	{r7, pc}
 800773a:	bf00      	nop
 800773c:	200003e5 	.word	0x200003e5
 8007740:	20000054 	.word	0x20000054

08007744 <DMA2D_Init>:

static void DMA2D_Init(void)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	af00      	add	r7, sp, #0
	/*##-1- Configure the DMA2D Mode, Color Mode and output offset #############*/
	hdma2d.Init.Mode         = DMA2D_M2M;
 8007748:	4b17      	ldr	r3, [pc, #92]	; (80077a8 <DMA2D_Init+0x64>)
 800774a:	2200      	movs	r2, #0
 800774c:	605a      	str	r2, [r3, #4]
	hdma2d.Init.ColorMode    = DMA2D_ARGB8888;
 800774e:	4b16      	ldr	r3, [pc, #88]	; (80077a8 <DMA2D_Init+0x64>)
 8007750:	2200      	movs	r2, #0
 8007752:	609a      	str	r2, [r3, #8]
	hdma2d.Init.OutputOffset = 800;
 8007754:	4b14      	ldr	r3, [pc, #80]	; (80077a8 <DMA2D_Init+0x64>)
 8007756:	f44f 7248 	mov.w	r2, #800	; 0x320
 800775a:	60da      	str	r2, [r3, #12]

	/*##-2- DMA2D Callbacks Configuration ######################################*/
	hdma2d.XferCpltCallback  = NULL;
 800775c:	4b12      	ldr	r3, [pc, #72]	; (80077a8 <DMA2D_Init+0x64>)
 800775e:	2200      	movs	r2, #0
 8007760:	611a      	str	r2, [r3, #16]

	/*##-3- Foreground Configuration ###########################################*/
	hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8007762:	4b11      	ldr	r3, [pc, #68]	; (80077a8 <DMA2D_Init+0x64>)
 8007764:	2200      	movs	r2, #0
 8007766:	631a      	str	r2, [r3, #48]	; 0x30
	hdma2d.LayerCfg[1].InputAlpha = 0x20;
 8007768:	4b0f      	ldr	r3, [pc, #60]	; (80077a8 <DMA2D_Init+0x64>)
 800776a:	2220      	movs	r2, #32
 800776c:	635a      	str	r2, [r3, #52]	; 0x34
	hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800776e:	4b0e      	ldr	r3, [pc, #56]	; (80077a8 <DMA2D_Init+0x64>)
 8007770:	2200      	movs	r2, #0
 8007772:	62da      	str	r2, [r3, #44]	; 0x2c
	hdma2d.LayerCfg[1].InputOffset = 0;
 8007774:	4b0c      	ldr	r3, [pc, #48]	; (80077a8 <DMA2D_Init+0x64>)
 8007776:	2200      	movs	r2, #0
 8007778:	629a      	str	r2, [r3, #40]	; 0x28

	hdma2d.Instance          = DMA2D;
 800777a:	4b0b      	ldr	r3, [pc, #44]	; (80077a8 <DMA2D_Init+0x64>)
 800777c:	4a0b      	ldr	r2, [pc, #44]	; (80077ac <DMA2D_Init+0x68>)
 800777e:	601a      	str	r2, [r3, #0]

	/* DMA2D Initialization */
	if(HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8007780:	4809      	ldr	r0, [pc, #36]	; (80077a8 <DMA2D_Init+0x64>)
 8007782:	f7f9 fa4f 	bl	8000c24 <HAL_DMA2D_Init>
 8007786:	4603      	mov	r3, r0
 8007788:	2b00      	cmp	r3, #0
 800778a:	d001      	beq.n	8007790 <DMA2D_Init+0x4c>
	{
		Error_Handler();
 800778c:	f000 f8b2 	bl	80078f4 <Error_Handler>
	}
	if(HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8007790:	2101      	movs	r1, #1
 8007792:	4805      	ldr	r0, [pc, #20]	; (80077a8 <DMA2D_Init+0x64>)
 8007794:	f7f9 fbae 	bl	8000ef4 <HAL_DMA2D_ConfigLayer>
 8007798:	4603      	mov	r3, r0
 800779a:	2b00      	cmp	r3, #0
 800779c:	d001      	beq.n	80077a2 <DMA2D_Init+0x5e>
	{
		Error_Handler();
 800779e:	f000 f8a9 	bl	80078f4 <Error_Handler>
	}
}
 80077a2:	bf00      	nop
 80077a4:	bd80      	pop	{r7, pc}
 80077a6:	bf00      	nop
 80077a8:	20000360 	.word	0x20000360
 80077ac:	4002b000 	.word	0x4002b000

080077b0 <debugPrint>:
		BSP_LCD_DrawLine(x , y + yettothicc, xx , yy + yettothicc);
	}
}
*/

void debugPrint(UART_HandleTypeDef *huart, char _out[]){
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b082      	sub	sp, #8
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
 80077b8:	6039      	str	r1, [r7, #0]
 HAL_UART_Transmit(huart, (uint8_t *) _out, strlen(_out), 10);
 80077ba:	6838      	ldr	r0, [r7, #0]
 80077bc:	f7f8 fd1a 	bl	80001f4 <strlen>
 80077c0:	4603      	mov	r3, r0
 80077c2:	b29a      	uxth	r2, r3
 80077c4:	230a      	movs	r3, #10
 80077c6:	6839      	ldr	r1, [r7, #0]
 80077c8:	6878      	ldr	r0, [r7, #4]
 80077ca:	f7fc ff67 	bl	800469c <HAL_UART_Transmit>
}
 80077ce:	bf00      	nop
 80077d0:	3708      	adds	r7, #8
 80077d2:	46bd      	mov	sp, r7
 80077d4:	bd80      	pop	{r7, pc}
	...

080077d8 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b084      	sub	sp, #16
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(huart, &databyte, 1);
 80077e0:	2201      	movs	r2, #1
 80077e2:	493d      	ldr	r1, [pc, #244]	; (80078d8 <HAL_UART_RxCpltCallback+0x100>)
 80077e4:	6878      	ldr	r0, [r7, #4]
 80077e6:	f7fc fff2 	bl	80047ce <HAL_UART_Receive_IT>

	if(huart == &huart3)
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	4a3b      	ldr	r2, [pc, #236]	; (80078dc <HAL_UART_RxCpltCallback+0x104>)
 80077ee:	4293      	cmp	r3, r2
 80077f0:	d163      	bne.n	80078ba <HAL_UART_RxCpltCallback+0xe2>
	{
		if(databyte == '\r')
 80077f2:	4b39      	ldr	r3, [pc, #228]	; (80078d8 <HAL_UART_RxCpltCallback+0x100>)
 80077f4:	781b      	ldrb	r3, [r3, #0]
 80077f6:	2b0d      	cmp	r3, #13
 80077f8:	d134      	bne.n	8007864 <HAL_UART_RxCpltCallback+0x8c>
		{
			BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80077fa:	f04f 30ff 	mov.w	r0, #4294967295
 80077fe:	f7fe fd31 	bl	8006264 <BSP_LCD_SetTextColor>
			BSP_LCD_Clear(LCD_COLOR_WHITE);
 8007802:	f04f 30ff 	mov.w	r0, #4294967295
 8007806:	f7fe fd79 	bl	80062fc <BSP_LCD_Clear>

			BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800780a:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800780e:	f7fe fd29 	bl	8006264 <BSP_LCD_SetTextColor>
			BSP_LCD_DisplayStringAt(100, 50, &data, LEFT_MODE);
 8007812:	2303      	movs	r3, #3
 8007814:	4a32      	ldr	r2, [pc, #200]	; (80078e0 <HAL_UART_RxCpltCallback+0x108>)
 8007816:	2132      	movs	r1, #50	; 0x32
 8007818:	2064      	movs	r0, #100	; 0x64
 800781a:	f7fe fddb 	bl	80063d4 <BSP_LCD_DisplayStringAt>

			BSP_LCD_SetTextColor(currentcolor);
 800781e:	4b31      	ldr	r3, [pc, #196]	; (80078e4 <HAL_UART_RxCpltCallback+0x10c>)
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	4618      	mov	r0, r3
 8007824:	f7fe fd1e 	bl	8006264 <BSP_LCD_SetTextColor>


			HAL_UART_Transmit(huart, &databyte, 1, 100);
 8007828:	2364      	movs	r3, #100	; 0x64
 800782a:	2201      	movs	r2, #1
 800782c:	492a      	ldr	r1, [pc, #168]	; (80078d8 <HAL_UART_RxCpltCallback+0x100>)
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	f7fc ff34 	bl	800469c <HAL_UART_Transmit>
			HAL_UART_Transmit(huart, &NEWLINE, 1, 100);
 8007834:	2364      	movs	r3, #100	; 0x64
 8007836:	2201      	movs	r2, #1
 8007838:	492b      	ldr	r1, [pc, #172]	; (80078e8 <HAL_UART_RxCpltCallback+0x110>)
 800783a:	6878      	ldr	r0, [r7, #4]
 800783c:	f7fc ff2e 	bl	800469c <HAL_UART_Transmit>

			for(int clearbuffer = 0; clearbuffer < 16; clearbuffer ++)
 8007840:	2300      	movs	r3, #0
 8007842:	60fb      	str	r3, [r7, #12]
 8007844:	e00a      	b.n	800785c <HAL_UART_RxCpltCallback+0x84>
			{
				data[clearbuffer] = 0x00;
 8007846:	4a26      	ldr	r2, [pc, #152]	; (80078e0 <HAL_UART_RxCpltCallback+0x108>)
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	4413      	add	r3, r2
 800784c:	2200      	movs	r2, #0
 800784e:	701a      	strb	r2, [r3, #0]
				dataint = 0;
 8007850:	4b26      	ldr	r3, [pc, #152]	; (80078ec <HAL_UART_RxCpltCallback+0x114>)
 8007852:	2200      	movs	r2, #0
 8007854:	701a      	strb	r2, [r3, #0]
			for(int clearbuffer = 0; clearbuffer < 16; clearbuffer ++)
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	3301      	adds	r3, #1
 800785a:	60fb      	str	r3, [r7, #12]
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	2b0f      	cmp	r3, #15
 8007860:	ddf1      	ble.n	8007846 <HAL_UART_RxCpltCallback+0x6e>
	else if(huart == &huart6)
	{
		HAL_UART_Transmit(huart, &databyte, 1, 100);
	}

}
 8007862:	e034      	b.n	80078ce <HAL_UART_RxCpltCallback+0xf6>
		else if(databyte == BACKSPACE)
 8007864:	4b1c      	ldr	r3, [pc, #112]	; (80078d8 <HAL_UART_RxCpltCallback+0x100>)
 8007866:	781b      	ldrb	r3, [r3, #0]
 8007868:	2b7f      	cmp	r3, #127	; 0x7f
 800786a:	d112      	bne.n	8007892 <HAL_UART_RxCpltCallback+0xba>
			dataint--;
 800786c:	4b1f      	ldr	r3, [pc, #124]	; (80078ec <HAL_UART_RxCpltCallback+0x114>)
 800786e:	781b      	ldrb	r3, [r3, #0]
 8007870:	3b01      	subs	r3, #1
 8007872:	b2da      	uxtb	r2, r3
 8007874:	4b1d      	ldr	r3, [pc, #116]	; (80078ec <HAL_UART_RxCpltCallback+0x114>)
 8007876:	701a      	strb	r2, [r3, #0]
			data[dataint] = 0x00;
 8007878:	4b1c      	ldr	r3, [pc, #112]	; (80078ec <HAL_UART_RxCpltCallback+0x114>)
 800787a:	781b      	ldrb	r3, [r3, #0]
 800787c:	461a      	mov	r2, r3
 800787e:	4b18      	ldr	r3, [pc, #96]	; (80078e0 <HAL_UART_RxCpltCallback+0x108>)
 8007880:	2100      	movs	r1, #0
 8007882:	5499      	strb	r1, [r3, r2]
			HAL_UART_Transmit(huart, '\127', 1, 100);
 8007884:	2364      	movs	r3, #100	; 0x64
 8007886:	2201      	movs	r2, #1
 8007888:	2157      	movs	r1, #87	; 0x57
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	f7fc ff06 	bl	800469c <HAL_UART_Transmit>
}
 8007890:	e01d      	b.n	80078ce <HAL_UART_RxCpltCallback+0xf6>
			HAL_UART_Transmit(huart, &databyte, 1, 100);
 8007892:	2364      	movs	r3, #100	; 0x64
 8007894:	2201      	movs	r2, #1
 8007896:	4910      	ldr	r1, [pc, #64]	; (80078d8 <HAL_UART_RxCpltCallback+0x100>)
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	f7fc feff 	bl	800469c <HAL_UART_Transmit>
			data[dataint] = databyte;
 800789e:	4b13      	ldr	r3, [pc, #76]	; (80078ec <HAL_UART_RxCpltCallback+0x114>)
 80078a0:	781b      	ldrb	r3, [r3, #0]
 80078a2:	461a      	mov	r2, r3
 80078a4:	4b0c      	ldr	r3, [pc, #48]	; (80078d8 <HAL_UART_RxCpltCallback+0x100>)
 80078a6:	7819      	ldrb	r1, [r3, #0]
 80078a8:	4b0d      	ldr	r3, [pc, #52]	; (80078e0 <HAL_UART_RxCpltCallback+0x108>)
 80078aa:	5499      	strb	r1, [r3, r2]
			dataint++;
 80078ac:	4b0f      	ldr	r3, [pc, #60]	; (80078ec <HAL_UART_RxCpltCallback+0x114>)
 80078ae:	781b      	ldrb	r3, [r3, #0]
 80078b0:	3301      	adds	r3, #1
 80078b2:	b2da      	uxtb	r2, r3
 80078b4:	4b0d      	ldr	r3, [pc, #52]	; (80078ec <HAL_UART_RxCpltCallback+0x114>)
 80078b6:	701a      	strb	r2, [r3, #0]
}
 80078b8:	e009      	b.n	80078ce <HAL_UART_RxCpltCallback+0xf6>
	else if(huart == &huart6)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	4a0c      	ldr	r2, [pc, #48]	; (80078f0 <HAL_UART_RxCpltCallback+0x118>)
 80078be:	4293      	cmp	r3, r2
 80078c0:	d105      	bne.n	80078ce <HAL_UART_RxCpltCallback+0xf6>
		HAL_UART_Transmit(huart, &databyte, 1, 100);
 80078c2:	2364      	movs	r3, #100	; 0x64
 80078c4:	2201      	movs	r2, #1
 80078c6:	4904      	ldr	r1, [pc, #16]	; (80078d8 <HAL_UART_RxCpltCallback+0x100>)
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	f7fc fee7 	bl	800469c <HAL_UART_Transmit>
}
 80078ce:	bf00      	nop
 80078d0:	3710      	adds	r7, #16
 80078d2:	46bd      	mov	sp, r7
 80078d4:	bd80      	pop	{r7, pc}
 80078d6:	bf00      	nop
 80078d8:	200003e4 	.word	0x200003e4
 80078dc:	200004f8 	.word	0x200004f8
 80078e0:	200003c4 	.word	0x200003c4
 80078e4:	200003e8 	.word	0x200003e8
 80078e8:	20000088 	.word	0x20000088
 80078ec:	200003c0 	.word	0x200003c0
 80078f0:	20000538 	.word	0x20000538

080078f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	while (1)
	{
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_5);
 80078f8:	2120      	movs	r1, #32
 80078fa:	4803      	ldr	r0, [pc, #12]	; (8007908 <Error_Handler+0x14>)
 80078fc:	f7fa fc37 	bl	800216e <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8007900:	2064      	movs	r0, #100	; 0x64
 8007902:	f7f8 fe6d 	bl	80005e0 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_5);
 8007906:	e7f7      	b.n	80078f8 <Error_Handler+0x4>
 8007908:	40020c00 	.word	0x40020c00

0800790c <CopyBuffer>:

  /* USER CODE END Error_Handler_Debug */
}

static void CopyBuffer(uint32_t *pSrc, uint32_t *pDst, uint16_t x, uint16_t y, uint16_t xsize, uint16_t ysize)
{
 800790c:	b580      	push	{r7, lr}
 800790e:	b088      	sub	sp, #32
 8007910:	af02      	add	r7, sp, #8
 8007912:	60f8      	str	r0, [r7, #12]
 8007914:	60b9      	str	r1, [r7, #8]
 8007916:	4611      	mov	r1, r2
 8007918:	461a      	mov	r2, r3
 800791a:	460b      	mov	r3, r1
 800791c:	80fb      	strh	r3, [r7, #6]
 800791e:	4613      	mov	r3, r2
 8007920:	80bb      	strh	r3, [r7, #4]

  uint32_t destination = (uint32_t)pDst + (y * 800 + x) * 4;
 8007922:	88bb      	ldrh	r3, [r7, #4]
 8007924:	f44f 7248 	mov.w	r2, #800	; 0x320
 8007928:	fb02 f203 	mul.w	r2, r2, r3
 800792c:	88fb      	ldrh	r3, [r7, #6]
 800792e:	4413      	add	r3, r2
 8007930:	009b      	lsls	r3, r3, #2
 8007932:	461a      	mov	r2, r3
 8007934:	68bb      	ldr	r3, [r7, #8]
 8007936:	4413      	add	r3, r2
 8007938:	617b      	str	r3, [r7, #20]
  uint32_t source      = (uint32_t)pSrc;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	613b      	str	r3, [r7, #16]

  hdma2d.Init.OutputOffset = 800 - xsize;
 800793e:	8c3b      	ldrh	r3, [r7, #32]
 8007940:	f5c3 7348 	rsb	r3, r3, #800	; 0x320
 8007944:	461a      	mov	r2, r3
 8007946:	4b0f      	ldr	r3, [pc, #60]	; (8007984 <CopyBuffer+0x78>)
 8007948:	60da      	str	r2, [r3, #12]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800794a:	480e      	ldr	r0, [pc, #56]	; (8007984 <CopyBuffer+0x78>)
 800794c:	f7f9 f96a 	bl	8000c24 <HAL_DMA2D_Init>
 8007950:	4603      	mov	r3, r0
 8007952:	2b00      	cmp	r3, #0
 8007954:	d001      	beq.n	800795a <CopyBuffer+0x4e>
  	{
  		Error_Handler();
 8007956:	f7ff ffcd 	bl	80078f4 <Error_Handler>
  	}


  if (HAL_DMA2D_Start(&hdma2d, source, destination, xsize, ysize) == HAL_OK)
 800795a:	8c3a      	ldrh	r2, [r7, #32]
 800795c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800795e:	9300      	str	r3, [sp, #0]
 8007960:	4613      	mov	r3, r2
 8007962:	697a      	ldr	r2, [r7, #20]
 8007964:	6939      	ldr	r1, [r7, #16]
 8007966:	4807      	ldr	r0, [pc, #28]	; (8007984 <CopyBuffer+0x78>)
 8007968:	f7f9 f9af 	bl	8000cca <HAL_DMA2D_Start>
 800796c:	4603      	mov	r3, r0
 800796e:	2b00      	cmp	r3, #0
 8007970:	d103      	bne.n	800797a <CopyBuffer+0x6e>
  {
    /* Polling For DMA transfer */
    HAL_DMA2D_PollForTransfer(&hdma2d, 100);
 8007972:	2164      	movs	r1, #100	; 0x64
 8007974:	4803      	ldr	r0, [pc, #12]	; (8007984 <CopyBuffer+0x78>)
 8007976:	f7f9 f9d3 	bl	8000d20 <HAL_DMA2D_PollForTransfer>
  }

}
 800797a:	bf00      	nop
 800797c:	3718      	adds	r7, #24
 800797e:	46bd      	mov	sp, r7
 8007980:	bd80      	pop	{r7, pc}
 8007982:	bf00      	nop
 8007984:	20000360 	.word	0x20000360

08007988 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007988:	b480      	push	{r7}
 800798a:	b083      	sub	sp, #12
 800798c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800798e:	2300      	movs	r3, #0
 8007990:	607b      	str	r3, [r7, #4]
 8007992:	4b10      	ldr	r3, [pc, #64]	; (80079d4 <HAL_MspInit+0x4c>)
 8007994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007996:	4a0f      	ldr	r2, [pc, #60]	; (80079d4 <HAL_MspInit+0x4c>)
 8007998:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800799c:	6453      	str	r3, [r2, #68]	; 0x44
 800799e:	4b0d      	ldr	r3, [pc, #52]	; (80079d4 <HAL_MspInit+0x4c>)
 80079a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80079a6:	607b      	str	r3, [r7, #4]
 80079a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80079aa:	2300      	movs	r3, #0
 80079ac:	603b      	str	r3, [r7, #0]
 80079ae:	4b09      	ldr	r3, [pc, #36]	; (80079d4 <HAL_MspInit+0x4c>)
 80079b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079b2:	4a08      	ldr	r2, [pc, #32]	; (80079d4 <HAL_MspInit+0x4c>)
 80079b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80079b8:	6413      	str	r3, [r2, #64]	; 0x40
 80079ba:	4b06      	ldr	r3, [pc, #24]	; (80079d4 <HAL_MspInit+0x4c>)
 80079bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80079c2:	603b      	str	r3, [r7, #0]
 80079c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80079c6:	bf00      	nop
 80079c8:	370c      	adds	r7, #12
 80079ca:	46bd      	mov	sp, r7
 80079cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d0:	4770      	bx	lr
 80079d2:	bf00      	nop
 80079d4:	40023800 	.word	0x40023800

080079d8 <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b08a      	sub	sp, #40	; 0x28
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80079e0:	f107 0314 	add.w	r3, r7, #20
 80079e4:	2200      	movs	r2, #0
 80079e6:	601a      	str	r2, [r3, #0]
 80079e8:	605a      	str	r2, [r3, #4]
 80079ea:	609a      	str	r2, [r3, #8]
 80079ec:	60da      	str	r2, [r3, #12]
 80079ee:	611a      	str	r2, [r3, #16]
  if(hdsi->Instance==DSI)
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	4a19      	ldr	r2, [pc, #100]	; (8007a5c <HAL_DSI_MspInit+0x84>)
 80079f6:	4293      	cmp	r3, r2
 80079f8:	d12b      	bne.n	8007a52 <HAL_DSI_MspInit+0x7a>
  {
  /* USER CODE BEGIN DSI_MspInit 0 */

  /* USER CODE END DSI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 80079fa:	2300      	movs	r3, #0
 80079fc:	613b      	str	r3, [r7, #16]
 80079fe:	4b18      	ldr	r3, [pc, #96]	; (8007a60 <HAL_DSI_MspInit+0x88>)
 8007a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a02:	4a17      	ldr	r2, [pc, #92]	; (8007a60 <HAL_DSI_MspInit+0x88>)
 8007a04:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007a08:	6453      	str	r3, [r2, #68]	; 0x44
 8007a0a:	4b15      	ldr	r3, [pc, #84]	; (8007a60 <HAL_DSI_MspInit+0x88>)
 8007a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a0e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007a12:	613b      	str	r3, [r7, #16]
 8007a14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8007a16:	2300      	movs	r3, #0
 8007a18:	60fb      	str	r3, [r7, #12]
 8007a1a:	4b11      	ldr	r3, [pc, #68]	; (8007a60 <HAL_DSI_MspInit+0x88>)
 8007a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a1e:	4a10      	ldr	r2, [pc, #64]	; (8007a60 <HAL_DSI_MspInit+0x88>)
 8007a20:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007a24:	6313      	str	r3, [r2, #48]	; 0x30
 8007a26:	4b0e      	ldr	r3, [pc, #56]	; (8007a60 <HAL_DSI_MspInit+0x88>)
 8007a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007a2e:	60fb      	str	r3, [r7, #12]
 8007a30:	68fb      	ldr	r3, [r7, #12]
    /**DSIHOST GPIO Configuration
    PJ2     ------> DSIHOST_TE
    */
    GPIO_InitStruct.Pin = DSI_TE_Pin;
 8007a32:	2304      	movs	r3, #4
 8007a34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a36:	2302      	movs	r3, #2
 8007a38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007a3e:	2300      	movs	r3, #0
 8007a40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 8007a42:	230d      	movs	r3, #13
 8007a44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DSI_TE_GPIO_Port, &GPIO_InitStruct);
 8007a46:	f107 0314 	add.w	r3, r7, #20
 8007a4a:	4619      	mov	r1, r3
 8007a4c:	4805      	ldr	r0, [pc, #20]	; (8007a64 <HAL_DSI_MspInit+0x8c>)
 8007a4e:	f7fa f8bd 	bl	8001bcc <HAL_GPIO_Init>
  /* USER CODE BEGIN DSI_MspInit 1 */

  /* USER CODE END DSI_MspInit 1 */
  }

}
 8007a52:	bf00      	nop
 8007a54:	3728      	adds	r7, #40	; 0x28
 8007a56:	46bd      	mov	sp, r7
 8007a58:	bd80      	pop	{r7, pc}
 8007a5a:	bf00      	nop
 8007a5c:	40016c00 	.word	0x40016c00
 8007a60:	40023800 	.word	0x40023800
 8007a64:	40022400 	.word	0x40022400

08007a68 <HAL_DSI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspDeInit(DSI_HandleTypeDef* hdsi)
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b082      	sub	sp, #8
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
  if(hdsi->Instance==DSI)
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	4a08      	ldr	r2, [pc, #32]	; (8007a98 <HAL_DSI_MspDeInit+0x30>)
 8007a76:	4293      	cmp	r3, r2
 8007a78:	d109      	bne.n	8007a8e <HAL_DSI_MspDeInit+0x26>
  {
  /* USER CODE BEGIN DSI_MspDeInit 0 */

  /* USER CODE END DSI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_DSI_CLK_DISABLE();
 8007a7a:	4b08      	ldr	r3, [pc, #32]	; (8007a9c <HAL_DSI_MspDeInit+0x34>)
 8007a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a7e:	4a07      	ldr	r2, [pc, #28]	; (8007a9c <HAL_DSI_MspDeInit+0x34>)
 8007a80:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8007a84:	6453      	str	r3, [r2, #68]	; 0x44

    /**DSIHOST GPIO Configuration
    PJ2     ------> DSIHOST_TE
    */
    HAL_GPIO_DeInit(DSI_TE_GPIO_Port, DSI_TE_Pin);
 8007a86:	2104      	movs	r1, #4
 8007a88:	4805      	ldr	r0, [pc, #20]	; (8007aa0 <HAL_DSI_MspDeInit+0x38>)
 8007a8a:	f7fa fa4b 	bl	8001f24 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN DSI_MspDeInit 1 */

  /* USER CODE END DSI_MspDeInit 1 */
  }

}
 8007a8e:	bf00      	nop
 8007a90:	3708      	adds	r7, #8
 8007a92:	46bd      	mov	sp, r7
 8007a94:	bd80      	pop	{r7, pc}
 8007a96:	bf00      	nop
 8007a98:	40016c00 	.word	0x40016c00
 8007a9c:	40023800 	.word	0x40023800
 8007aa0:	40022400 	.word	0x40022400

08007aa4 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8007aa4:	b480      	push	{r7}
 8007aa6:	b085      	sub	sp, #20
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
  if(hltdc->Instance==LTDC)
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	4a0b      	ldr	r2, [pc, #44]	; (8007ae0 <HAL_LTDC_MspInit+0x3c>)
 8007ab2:	4293      	cmp	r3, r2
 8007ab4:	d10d      	bne.n	8007ad2 <HAL_LTDC_MspInit+0x2e>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	60fb      	str	r3, [r7, #12]
 8007aba:	4b0a      	ldr	r3, [pc, #40]	; (8007ae4 <HAL_LTDC_MspInit+0x40>)
 8007abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007abe:	4a09      	ldr	r2, [pc, #36]	; (8007ae4 <HAL_LTDC_MspInit+0x40>)
 8007ac0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007ac4:	6453      	str	r3, [r2, #68]	; 0x44
 8007ac6:	4b07      	ldr	r3, [pc, #28]	; (8007ae4 <HAL_LTDC_MspInit+0x40>)
 8007ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007aca:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007ace:	60fb      	str	r3, [r7, #12]
 8007ad0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8007ad2:	bf00      	nop
 8007ad4:	3714      	adds	r7, #20
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007adc:	4770      	bx	lr
 8007ade:	bf00      	nop
 8007ae0:	40016800 	.word	0x40016800
 8007ae4:	40023800 	.word	0x40023800

08007ae8 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler, but only if no RTOS defines it.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8007aec:	f7f8 fd58 	bl	80005a0 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 8007af0:	f7f8 feab 	bl	800084a <HAL_SYSTICK_IRQHandler>
#ifdef USE_RTOS_SYSTICK
	osSystickHandler();
#endif
}
 8007af4:	bf00      	nop
 8007af6:	bd80      	pop	{r7, pc}

08007af8 <USART6_IRQHandler>:

void USART6_IRQHandler(void)
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	af00      	add	r7, sp, #0

  HAL_UART_IRQHandler(&huart6);
 8007afc:	4802      	ldr	r0, [pc, #8]	; (8007b08 <USART6_IRQHandler+0x10>)
 8007afe:	f7fc febb 	bl	8004878 <HAL_UART_IRQHandler>

}
 8007b02:	bf00      	nop
 8007b04:	bd80      	pop	{r7, pc}
 8007b06:	bf00      	nop
 8007b08:	20000538 	.word	0x20000538

08007b0c <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	af00      	add	r7, sp, #0

  HAL_UART_IRQHandler(&huart3);
 8007b10:	4802      	ldr	r0, [pc, #8]	; (8007b1c <USART3_IRQHandler+0x10>)
 8007b12:	f7fc feb1 	bl	8004878 <HAL_UART_IRQHandler>

}
 8007b16:	bf00      	nop
 8007b18:	bd80      	pop	{r7, pc}
 8007b1a:	bf00      	nop
 8007b1c:	200004f8 	.word	0x200004f8

08007b20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007b20:	b480      	push	{r7}
 8007b22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007b24:	4b16      	ldr	r3, [pc, #88]	; (8007b80 <SystemInit+0x60>)
 8007b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b2a:	4a15      	ldr	r2, [pc, #84]	; (8007b80 <SystemInit+0x60>)
 8007b2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007b30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8007b34:	4b13      	ldr	r3, [pc, #76]	; (8007b84 <SystemInit+0x64>)
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	4a12      	ldr	r2, [pc, #72]	; (8007b84 <SystemInit+0x64>)
 8007b3a:	f043 0301 	orr.w	r3, r3, #1
 8007b3e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8007b40:	4b10      	ldr	r3, [pc, #64]	; (8007b84 <SystemInit+0x64>)
 8007b42:	2200      	movs	r2, #0
 8007b44:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8007b46:	4b0f      	ldr	r3, [pc, #60]	; (8007b84 <SystemInit+0x64>)
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	4a0e      	ldr	r2, [pc, #56]	; (8007b84 <SystemInit+0x64>)
 8007b4c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8007b50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b54:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8007b56:	4b0b      	ldr	r3, [pc, #44]	; (8007b84 <SystemInit+0x64>)
 8007b58:	4a0b      	ldr	r2, [pc, #44]	; (8007b88 <SystemInit+0x68>)
 8007b5a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8007b5c:	4b09      	ldr	r3, [pc, #36]	; (8007b84 <SystemInit+0x64>)
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	4a08      	ldr	r2, [pc, #32]	; (8007b84 <SystemInit+0x64>)
 8007b62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007b66:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8007b68:	4b06      	ldr	r3, [pc, #24]	; (8007b84 <SystemInit+0x64>)
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007b6e:	4b04      	ldr	r3, [pc, #16]	; (8007b80 <SystemInit+0x60>)
 8007b70:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007b74:	609a      	str	r2, [r3, #8]
#endif
}
 8007b76:	bf00      	nop
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7e:	4770      	bx	lr
 8007b80:	e000ed00 	.word	0xe000ed00
 8007b84:	40023800 	.word	0x40023800
 8007b88:	24003010 	.word	0x24003010

08007b8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8007b8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007bc4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8007b90:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8007b92:	e003      	b.n	8007b9c <LoopCopyDataInit>

08007b94 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8007b94:	4b0c      	ldr	r3, [pc, #48]	; (8007bc8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8007b96:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8007b98:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8007b9a:	3104      	adds	r1, #4

08007b9c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8007b9c:	480b      	ldr	r0, [pc, #44]	; (8007bcc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8007b9e:	4b0c      	ldr	r3, [pc, #48]	; (8007bd0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8007ba0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8007ba2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8007ba4:	d3f6      	bcc.n	8007b94 <CopyDataInit>
  ldr  r2, =_sbss
 8007ba6:	4a0b      	ldr	r2, [pc, #44]	; (8007bd4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8007ba8:	e002      	b.n	8007bb0 <LoopFillZerobss>

08007baa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8007baa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8007bac:	f842 3b04 	str.w	r3, [r2], #4

08007bb0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8007bb0:	4b09      	ldr	r3, [pc, #36]	; (8007bd8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8007bb2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8007bb4:	d3f9      	bcc.n	8007baa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8007bb6:	f7ff ffb3 	bl	8007b20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007bba:	f000 f811 	bl	8007be0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007bbe:	f7ff f8d9 	bl	8006d74 <main>
  bx  lr    
 8007bc2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8007bc4:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8007bc8:	080a1b78 	.word	0x080a1b78
  ldr  r0, =_sdata
 8007bcc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8007bd0:	20000098 	.word	0x20000098
  ldr  r2, =_sbss
 8007bd4:	20000098 	.word	0x20000098
  ldr  r3, = _ebss
 8007bd8:	20000578 	.word	0x20000578

08007bdc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007bdc:	e7fe      	b.n	8007bdc <ADC_IRQHandler>
	...

08007be0 <__libc_init_array>:
 8007be0:	b570      	push	{r4, r5, r6, lr}
 8007be2:	4d0d      	ldr	r5, [pc, #52]	; (8007c18 <__libc_init_array+0x38>)
 8007be4:	4c0d      	ldr	r4, [pc, #52]	; (8007c1c <__libc_init_array+0x3c>)
 8007be6:	1b64      	subs	r4, r4, r5
 8007be8:	10a4      	asrs	r4, r4, #2
 8007bea:	2600      	movs	r6, #0
 8007bec:	42a6      	cmp	r6, r4
 8007bee:	d109      	bne.n	8007c04 <__libc_init_array+0x24>
 8007bf0:	4d0b      	ldr	r5, [pc, #44]	; (8007c20 <__libc_init_array+0x40>)
 8007bf2:	4c0c      	ldr	r4, [pc, #48]	; (8007c24 <__libc_init_array+0x44>)
 8007bf4:	f000 f818 	bl	8007c28 <_init>
 8007bf8:	1b64      	subs	r4, r4, r5
 8007bfa:	10a4      	asrs	r4, r4, #2
 8007bfc:	2600      	movs	r6, #0
 8007bfe:	42a6      	cmp	r6, r4
 8007c00:	d105      	bne.n	8007c0e <__libc_init_array+0x2e>
 8007c02:	bd70      	pop	{r4, r5, r6, pc}
 8007c04:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c08:	4798      	blx	r3
 8007c0a:	3601      	adds	r6, #1
 8007c0c:	e7ee      	b.n	8007bec <__libc_init_array+0xc>
 8007c0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c12:	4798      	blx	r3
 8007c14:	3601      	adds	r6, #1
 8007c16:	e7f2      	b.n	8007bfe <__libc_init_array+0x1e>
 8007c18:	080a1b70 	.word	0x080a1b70
 8007c1c:	080a1b70 	.word	0x080a1b70
 8007c20:	080a1b70 	.word	0x080a1b70
 8007c24:	080a1b74 	.word	0x080a1b74

08007c28 <_init>:
 8007c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c2a:	bf00      	nop
 8007c2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c2e:	bc08      	pop	{r3}
 8007c30:	469e      	mov	lr, r3
 8007c32:	4770      	bx	lr

08007c34 <_fini>:
 8007c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c36:	bf00      	nop
 8007c38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c3a:	bc08      	pop	{r3}
 8007c3c:	469e      	mov	lr, r3
 8007c3e:	4770      	bx	lr
