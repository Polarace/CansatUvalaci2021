
CanSat-basestation-v1.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e4c  080001b4  080001b4  000101b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00099f18  08008000  08008000  00018000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080a1f18  080a1f18  000b1f18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080a1f20  080a1f20  000b1f20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080a1f24  080a1f24  000b1f24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000008c  20000000  080a1f28  000c0000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  000c008c  2**0
                  CONTENTS
  8 .bss          00000444  2000008c  2000008c  000c008c  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  200004d0  200004d0  000c008c  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  000c008c  2**0
                  CONTENTS, READONLY
 11 .debug_info   0001a094  00000000  00000000  000c00bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00003634  00000000  00000000  000da150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000013c8  00000000  00000000  000dd788  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00001250  00000000  00000000  000deb50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00007593  00000000  00000000  000dfda0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0002219a  00000000  00000000  000e7333  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00125e36  00000000  00000000  001094cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  0022f303  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000052c8  00000000  00000000  0022f358  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b4 <__do_global_dtors_aux>:
 80001b4:	b510      	push	{r4, lr}
 80001b6:	4c05      	ldr	r4, [pc, #20]	; (80001cc <__do_global_dtors_aux+0x18>)
 80001b8:	7823      	ldrb	r3, [r4, #0]
 80001ba:	b933      	cbnz	r3, 80001ca <__do_global_dtors_aux+0x16>
 80001bc:	4b04      	ldr	r3, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x1c>)
 80001be:	b113      	cbz	r3, 80001c6 <__do_global_dtors_aux+0x12>
 80001c0:	4804      	ldr	r0, [pc, #16]	; (80001d4 <__do_global_dtors_aux+0x20>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	2301      	movs	r3, #1
 80001c8:	7023      	strb	r3, [r4, #0]
 80001ca:	bd10      	pop	{r4, pc}
 80001cc:	2000008c 	.word	0x2000008c
 80001d0:	00000000 	.word	0x00000000
 80001d4:	08007fe8 	.word	0x08007fe8

080001d8 <frame_dummy>:
 80001d8:	b508      	push	{r3, lr}
 80001da:	4b03      	ldr	r3, [pc, #12]	; (80001e8 <frame_dummy+0x10>)
 80001dc:	b11b      	cbz	r3, 80001e6 <frame_dummy+0xe>
 80001de:	4903      	ldr	r1, [pc, #12]	; (80001ec <frame_dummy+0x14>)
 80001e0:	4803      	ldr	r0, [pc, #12]	; (80001f0 <frame_dummy+0x18>)
 80001e2:	f3af 8000 	nop.w
 80001e6:	bd08      	pop	{r3, pc}
 80001e8:	00000000 	.word	0x00000000
 80001ec:	20000090 	.word	0x20000090
 80001f0:	08007fe8 	.word	0x08007fe8

080001f4 <__aeabi_uldivmod>:
 80001f4:	b953      	cbnz	r3, 800020c <__aeabi_uldivmod+0x18>
 80001f6:	b94a      	cbnz	r2, 800020c <__aeabi_uldivmod+0x18>
 80001f8:	2900      	cmp	r1, #0
 80001fa:	bf08      	it	eq
 80001fc:	2800      	cmpeq	r0, #0
 80001fe:	bf1c      	itt	ne
 8000200:	f04f 31ff 	movne.w	r1, #4294967295
 8000204:	f04f 30ff 	movne.w	r0, #4294967295
 8000208:	f000 b96e 	b.w	80004e8 <__aeabi_idiv0>
 800020c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000210:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000214:	f000 f806 	bl	8000224 <__udivmoddi4>
 8000218:	f8dd e004 	ldr.w	lr, [sp, #4]
 800021c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000220:	b004      	add	sp, #16
 8000222:	4770      	bx	lr

08000224 <__udivmoddi4>:
 8000224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000228:	9d08      	ldr	r5, [sp, #32]
 800022a:	4604      	mov	r4, r0
 800022c:	468c      	mov	ip, r1
 800022e:	2b00      	cmp	r3, #0
 8000230:	f040 8083 	bne.w	800033a <__udivmoddi4+0x116>
 8000234:	428a      	cmp	r2, r1
 8000236:	4617      	mov	r7, r2
 8000238:	d947      	bls.n	80002ca <__udivmoddi4+0xa6>
 800023a:	fab2 f282 	clz	r2, r2
 800023e:	b142      	cbz	r2, 8000252 <__udivmoddi4+0x2e>
 8000240:	f1c2 0020 	rsb	r0, r2, #32
 8000244:	fa24 f000 	lsr.w	r0, r4, r0
 8000248:	4091      	lsls	r1, r2
 800024a:	4097      	lsls	r7, r2
 800024c:	ea40 0c01 	orr.w	ip, r0, r1
 8000250:	4094      	lsls	r4, r2
 8000252:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000256:	0c23      	lsrs	r3, r4, #16
 8000258:	fbbc f6f8 	udiv	r6, ip, r8
 800025c:	fa1f fe87 	uxth.w	lr, r7
 8000260:	fb08 c116 	mls	r1, r8, r6, ip
 8000264:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000268:	fb06 f10e 	mul.w	r1, r6, lr
 800026c:	4299      	cmp	r1, r3
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x60>
 8000270:	18fb      	adds	r3, r7, r3
 8000272:	f106 30ff 	add.w	r0, r6, #4294967295
 8000276:	f080 8119 	bcs.w	80004ac <__udivmoddi4+0x288>
 800027a:	4299      	cmp	r1, r3
 800027c:	f240 8116 	bls.w	80004ac <__udivmoddi4+0x288>
 8000280:	3e02      	subs	r6, #2
 8000282:	443b      	add	r3, r7
 8000284:	1a5b      	subs	r3, r3, r1
 8000286:	b2a4      	uxth	r4, r4
 8000288:	fbb3 f0f8 	udiv	r0, r3, r8
 800028c:	fb08 3310 	mls	r3, r8, r0, r3
 8000290:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000294:	fb00 fe0e 	mul.w	lr, r0, lr
 8000298:	45a6      	cmp	lr, r4
 800029a:	d909      	bls.n	80002b0 <__udivmoddi4+0x8c>
 800029c:	193c      	adds	r4, r7, r4
 800029e:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a2:	f080 8105 	bcs.w	80004b0 <__udivmoddi4+0x28c>
 80002a6:	45a6      	cmp	lr, r4
 80002a8:	f240 8102 	bls.w	80004b0 <__udivmoddi4+0x28c>
 80002ac:	3802      	subs	r0, #2
 80002ae:	443c      	add	r4, r7
 80002b0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b4:	eba4 040e 	sub.w	r4, r4, lr
 80002b8:	2600      	movs	r6, #0
 80002ba:	b11d      	cbz	r5, 80002c4 <__udivmoddi4+0xa0>
 80002bc:	40d4      	lsrs	r4, r2
 80002be:	2300      	movs	r3, #0
 80002c0:	e9c5 4300 	strd	r4, r3, [r5]
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	b902      	cbnz	r2, 80002ce <__udivmoddi4+0xaa>
 80002cc:	deff      	udf	#255	; 0xff
 80002ce:	fab2 f282 	clz	r2, r2
 80002d2:	2a00      	cmp	r2, #0
 80002d4:	d150      	bne.n	8000378 <__udivmoddi4+0x154>
 80002d6:	1bcb      	subs	r3, r1, r7
 80002d8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002dc:	fa1f f887 	uxth.w	r8, r7
 80002e0:	2601      	movs	r6, #1
 80002e2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002e6:	0c21      	lsrs	r1, r4, #16
 80002e8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002ec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002f0:	fb08 f30c 	mul.w	r3, r8, ip
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d907      	bls.n	8000308 <__udivmoddi4+0xe4>
 80002f8:	1879      	adds	r1, r7, r1
 80002fa:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002fe:	d202      	bcs.n	8000306 <__udivmoddi4+0xe2>
 8000300:	428b      	cmp	r3, r1
 8000302:	f200 80e9 	bhi.w	80004d8 <__udivmoddi4+0x2b4>
 8000306:	4684      	mov	ip, r0
 8000308:	1ac9      	subs	r1, r1, r3
 800030a:	b2a3      	uxth	r3, r4
 800030c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000310:	fb0e 1110 	mls	r1, lr, r0, r1
 8000314:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000318:	fb08 f800 	mul.w	r8, r8, r0
 800031c:	45a0      	cmp	r8, r4
 800031e:	d907      	bls.n	8000330 <__udivmoddi4+0x10c>
 8000320:	193c      	adds	r4, r7, r4
 8000322:	f100 33ff 	add.w	r3, r0, #4294967295
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x10a>
 8000328:	45a0      	cmp	r8, r4
 800032a:	f200 80d9 	bhi.w	80004e0 <__udivmoddi4+0x2bc>
 800032e:	4618      	mov	r0, r3
 8000330:	eba4 0408 	sub.w	r4, r4, r8
 8000334:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000338:	e7bf      	b.n	80002ba <__udivmoddi4+0x96>
 800033a:	428b      	cmp	r3, r1
 800033c:	d909      	bls.n	8000352 <__udivmoddi4+0x12e>
 800033e:	2d00      	cmp	r5, #0
 8000340:	f000 80b1 	beq.w	80004a6 <__udivmoddi4+0x282>
 8000344:	2600      	movs	r6, #0
 8000346:	e9c5 0100 	strd	r0, r1, [r5]
 800034a:	4630      	mov	r0, r6
 800034c:	4631      	mov	r1, r6
 800034e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000352:	fab3 f683 	clz	r6, r3
 8000356:	2e00      	cmp	r6, #0
 8000358:	d14a      	bne.n	80003f0 <__udivmoddi4+0x1cc>
 800035a:	428b      	cmp	r3, r1
 800035c:	d302      	bcc.n	8000364 <__udivmoddi4+0x140>
 800035e:	4282      	cmp	r2, r0
 8000360:	f200 80b8 	bhi.w	80004d4 <__udivmoddi4+0x2b0>
 8000364:	1a84      	subs	r4, r0, r2
 8000366:	eb61 0103 	sbc.w	r1, r1, r3
 800036a:	2001      	movs	r0, #1
 800036c:	468c      	mov	ip, r1
 800036e:	2d00      	cmp	r5, #0
 8000370:	d0a8      	beq.n	80002c4 <__udivmoddi4+0xa0>
 8000372:	e9c5 4c00 	strd	r4, ip, [r5]
 8000376:	e7a5      	b.n	80002c4 <__udivmoddi4+0xa0>
 8000378:	f1c2 0320 	rsb	r3, r2, #32
 800037c:	fa20 f603 	lsr.w	r6, r0, r3
 8000380:	4097      	lsls	r7, r2
 8000382:	fa01 f002 	lsl.w	r0, r1, r2
 8000386:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800038a:	40d9      	lsrs	r1, r3
 800038c:	4330      	orrs	r0, r6
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	fbb1 f6fe 	udiv	r6, r1, lr
 8000394:	fa1f f887 	uxth.w	r8, r7
 8000398:	fb0e 1116 	mls	r1, lr, r6, r1
 800039c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003a0:	fb06 f108 	mul.w	r1, r6, r8
 80003a4:	4299      	cmp	r1, r3
 80003a6:	fa04 f402 	lsl.w	r4, r4, r2
 80003aa:	d909      	bls.n	80003c0 <__udivmoddi4+0x19c>
 80003ac:	18fb      	adds	r3, r7, r3
 80003ae:	f106 3cff 	add.w	ip, r6, #4294967295
 80003b2:	f080 808d 	bcs.w	80004d0 <__udivmoddi4+0x2ac>
 80003b6:	4299      	cmp	r1, r3
 80003b8:	f240 808a 	bls.w	80004d0 <__udivmoddi4+0x2ac>
 80003bc:	3e02      	subs	r6, #2
 80003be:	443b      	add	r3, r7
 80003c0:	1a5b      	subs	r3, r3, r1
 80003c2:	b281      	uxth	r1, r0
 80003c4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003c8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d0:	fb00 f308 	mul.w	r3, r0, r8
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d907      	bls.n	80003e8 <__udivmoddi4+0x1c4>
 80003d8:	1879      	adds	r1, r7, r1
 80003da:	f100 3cff 	add.w	ip, r0, #4294967295
 80003de:	d273      	bcs.n	80004c8 <__udivmoddi4+0x2a4>
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d971      	bls.n	80004c8 <__udivmoddi4+0x2a4>
 80003e4:	3802      	subs	r0, #2
 80003e6:	4439      	add	r1, r7
 80003e8:	1acb      	subs	r3, r1, r3
 80003ea:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ee:	e778      	b.n	80002e2 <__udivmoddi4+0xbe>
 80003f0:	f1c6 0c20 	rsb	ip, r6, #32
 80003f4:	fa03 f406 	lsl.w	r4, r3, r6
 80003f8:	fa22 f30c 	lsr.w	r3, r2, ip
 80003fc:	431c      	orrs	r4, r3
 80003fe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000402:	fa01 f306 	lsl.w	r3, r1, r6
 8000406:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800040a:	fa21 f10c 	lsr.w	r1, r1, ip
 800040e:	431f      	orrs	r7, r3
 8000410:	0c3b      	lsrs	r3, r7, #16
 8000412:	fbb1 f9fe 	udiv	r9, r1, lr
 8000416:	fa1f f884 	uxth.w	r8, r4
 800041a:	fb0e 1119 	mls	r1, lr, r9, r1
 800041e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000422:	fb09 fa08 	mul.w	sl, r9, r8
 8000426:	458a      	cmp	sl, r1
 8000428:	fa02 f206 	lsl.w	r2, r2, r6
 800042c:	fa00 f306 	lsl.w	r3, r0, r6
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x220>
 8000432:	1861      	adds	r1, r4, r1
 8000434:	f109 30ff 	add.w	r0, r9, #4294967295
 8000438:	d248      	bcs.n	80004cc <__udivmoddi4+0x2a8>
 800043a:	458a      	cmp	sl, r1
 800043c:	d946      	bls.n	80004cc <__udivmoddi4+0x2a8>
 800043e:	f1a9 0902 	sub.w	r9, r9, #2
 8000442:	4421      	add	r1, r4
 8000444:	eba1 010a 	sub.w	r1, r1, sl
 8000448:	b2bf      	uxth	r7, r7
 800044a:	fbb1 f0fe 	udiv	r0, r1, lr
 800044e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000452:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000456:	fb00 f808 	mul.w	r8, r0, r8
 800045a:	45b8      	cmp	r8, r7
 800045c:	d907      	bls.n	800046e <__udivmoddi4+0x24a>
 800045e:	19e7      	adds	r7, r4, r7
 8000460:	f100 31ff 	add.w	r1, r0, #4294967295
 8000464:	d22e      	bcs.n	80004c4 <__udivmoddi4+0x2a0>
 8000466:	45b8      	cmp	r8, r7
 8000468:	d92c      	bls.n	80004c4 <__udivmoddi4+0x2a0>
 800046a:	3802      	subs	r0, #2
 800046c:	4427      	add	r7, r4
 800046e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000472:	eba7 0708 	sub.w	r7, r7, r8
 8000476:	fba0 8902 	umull	r8, r9, r0, r2
 800047a:	454f      	cmp	r7, r9
 800047c:	46c6      	mov	lr, r8
 800047e:	4649      	mov	r1, r9
 8000480:	d31a      	bcc.n	80004b8 <__udivmoddi4+0x294>
 8000482:	d017      	beq.n	80004b4 <__udivmoddi4+0x290>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x27a>
 8000486:	ebb3 020e 	subs.w	r2, r3, lr
 800048a:	eb67 0701 	sbc.w	r7, r7, r1
 800048e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000492:	40f2      	lsrs	r2, r6
 8000494:	ea4c 0202 	orr.w	r2, ip, r2
 8000498:	40f7      	lsrs	r7, r6
 800049a:	e9c5 2700 	strd	r2, r7, [r5]
 800049e:	2600      	movs	r6, #0
 80004a0:	4631      	mov	r1, r6
 80004a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004a6:	462e      	mov	r6, r5
 80004a8:	4628      	mov	r0, r5
 80004aa:	e70b      	b.n	80002c4 <__udivmoddi4+0xa0>
 80004ac:	4606      	mov	r6, r0
 80004ae:	e6e9      	b.n	8000284 <__udivmoddi4+0x60>
 80004b0:	4618      	mov	r0, r3
 80004b2:	e6fd      	b.n	80002b0 <__udivmoddi4+0x8c>
 80004b4:	4543      	cmp	r3, r8
 80004b6:	d2e5      	bcs.n	8000484 <__udivmoddi4+0x260>
 80004b8:	ebb8 0e02 	subs.w	lr, r8, r2
 80004bc:	eb69 0104 	sbc.w	r1, r9, r4
 80004c0:	3801      	subs	r0, #1
 80004c2:	e7df      	b.n	8000484 <__udivmoddi4+0x260>
 80004c4:	4608      	mov	r0, r1
 80004c6:	e7d2      	b.n	800046e <__udivmoddi4+0x24a>
 80004c8:	4660      	mov	r0, ip
 80004ca:	e78d      	b.n	80003e8 <__udivmoddi4+0x1c4>
 80004cc:	4681      	mov	r9, r0
 80004ce:	e7b9      	b.n	8000444 <__udivmoddi4+0x220>
 80004d0:	4666      	mov	r6, ip
 80004d2:	e775      	b.n	80003c0 <__udivmoddi4+0x19c>
 80004d4:	4630      	mov	r0, r6
 80004d6:	e74a      	b.n	800036e <__udivmoddi4+0x14a>
 80004d8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004dc:	4439      	add	r1, r7
 80004de:	e713      	b.n	8000308 <__udivmoddi4+0xe4>
 80004e0:	3802      	subs	r0, #2
 80004e2:	443c      	add	r4, r7
 80004e4:	e724      	b.n	8000330 <__udivmoddi4+0x10c>
 80004e6:	bf00      	nop

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004f0:	4b0e      	ldr	r3, [pc, #56]	; (800052c <HAL_Init+0x40>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	4a0d      	ldr	r2, [pc, #52]	; (800052c <HAL_Init+0x40>)
 80004f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004fc:	4b0b      	ldr	r3, [pc, #44]	; (800052c <HAL_Init+0x40>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	4a0a      	ldr	r2, [pc, #40]	; (800052c <HAL_Init+0x40>)
 8000502:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000506:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000508:	4b08      	ldr	r3, [pc, #32]	; (800052c <HAL_Init+0x40>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	4a07      	ldr	r2, [pc, #28]	; (800052c <HAL_Init+0x40>)
 800050e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000512:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000514:	2003      	movs	r0, #3
 8000516:	f000 f94f 	bl	80007b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800051a:	200f      	movs	r0, #15
 800051c:	f000 f808 	bl	8000530 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000520:	f007 fc1c 	bl	8007d5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000524:	2300      	movs	r3, #0
}
 8000526:	4618      	mov	r0, r3
 8000528:	bd80      	pop	{r7, pc}
 800052a:	bf00      	nop
 800052c:	40023c00 	.word	0x40023c00

08000530 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000538:	4b12      	ldr	r3, [pc, #72]	; (8000584 <HAL_InitTick+0x54>)
 800053a:	681a      	ldr	r2, [r3, #0]
 800053c:	4b12      	ldr	r3, [pc, #72]	; (8000588 <HAL_InitTick+0x58>)
 800053e:	781b      	ldrb	r3, [r3, #0]
 8000540:	4619      	mov	r1, r3
 8000542:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000546:	fbb3 f3f1 	udiv	r3, r3, r1
 800054a:	fbb2 f3f3 	udiv	r3, r2, r3
 800054e:	4618      	mov	r0, r3
 8000550:	f000 f967 	bl	8000822 <HAL_SYSTICK_Config>
 8000554:	4603      	mov	r3, r0
 8000556:	2b00      	cmp	r3, #0
 8000558:	d001      	beq.n	800055e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800055a:	2301      	movs	r3, #1
 800055c:	e00e      	b.n	800057c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	2b0f      	cmp	r3, #15
 8000562:	d80a      	bhi.n	800057a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000564:	2200      	movs	r2, #0
 8000566:	6879      	ldr	r1, [r7, #4]
 8000568:	f04f 30ff 	mov.w	r0, #4294967295
 800056c:	f000 f92f 	bl	80007ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000570:	4a06      	ldr	r2, [pc, #24]	; (800058c <HAL_InitTick+0x5c>)
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000576:	2300      	movs	r3, #0
 8000578:	e000      	b.n	800057c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800057a:	2301      	movs	r3, #1
}
 800057c:	4618      	mov	r0, r3
 800057e:	3708      	adds	r7, #8
 8000580:	46bd      	mov	sp, r7
 8000582:	bd80      	pop	{r7, pc}
 8000584:	20000088 	.word	0x20000088
 8000588:	20000004 	.word	0x20000004
 800058c:	20000000 	.word	0x20000000

08000590 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000590:	b480      	push	{r7}
 8000592:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000594:	4b06      	ldr	r3, [pc, #24]	; (80005b0 <HAL_IncTick+0x20>)
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	461a      	mov	r2, r3
 800059a:	4b06      	ldr	r3, [pc, #24]	; (80005b4 <HAL_IncTick+0x24>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	4413      	add	r3, r2
 80005a0:	4a04      	ldr	r2, [pc, #16]	; (80005b4 <HAL_IncTick+0x24>)
 80005a2:	6013      	str	r3, [r2, #0]
}
 80005a4:	bf00      	nop
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop
 80005b0:	20000004 	.word	0x20000004
 80005b4:	20000388 	.word	0x20000388

080005b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
  return uwTick;
 80005bc:	4b03      	ldr	r3, [pc, #12]	; (80005cc <HAL_GetTick+0x14>)
 80005be:	681b      	ldr	r3, [r3, #0]
}
 80005c0:	4618      	mov	r0, r3
 80005c2:	46bd      	mov	sp, r7
 80005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop
 80005cc:	20000388 	.word	0x20000388

080005d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b084      	sub	sp, #16
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005d8:	f7ff ffee 	bl	80005b8 <HAL_GetTick>
 80005dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005e2:	68fb      	ldr	r3, [r7, #12]
 80005e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005e8:	d005      	beq.n	80005f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80005ea:	4b0a      	ldr	r3, [pc, #40]	; (8000614 <HAL_Delay+0x44>)
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	461a      	mov	r2, r3
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	4413      	add	r3, r2
 80005f4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80005f6:	bf00      	nop
 80005f8:	f7ff ffde 	bl	80005b8 <HAL_GetTick>
 80005fc:	4602      	mov	r2, r0
 80005fe:	68bb      	ldr	r3, [r7, #8]
 8000600:	1ad3      	subs	r3, r2, r3
 8000602:	68fa      	ldr	r2, [r7, #12]
 8000604:	429a      	cmp	r2, r3
 8000606:	d8f7      	bhi.n	80005f8 <HAL_Delay+0x28>
  {
  }
}
 8000608:	bf00      	nop
 800060a:	bf00      	nop
 800060c:	3710      	adds	r7, #16
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	20000004 	.word	0x20000004

08000618 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000618:	b480      	push	{r7}
 800061a:	b085      	sub	sp, #20
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	f003 0307 	and.w	r3, r3, #7
 8000626:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000628:	4b0c      	ldr	r3, [pc, #48]	; (800065c <__NVIC_SetPriorityGrouping+0x44>)
 800062a:	68db      	ldr	r3, [r3, #12]
 800062c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800062e:	68ba      	ldr	r2, [r7, #8]
 8000630:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000634:	4013      	ands	r3, r2
 8000636:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000638:	68fb      	ldr	r3, [r7, #12]
 800063a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800063c:	68bb      	ldr	r3, [r7, #8]
 800063e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000640:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000644:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000648:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800064a:	4a04      	ldr	r2, [pc, #16]	; (800065c <__NVIC_SetPriorityGrouping+0x44>)
 800064c:	68bb      	ldr	r3, [r7, #8]
 800064e:	60d3      	str	r3, [r2, #12]
}
 8000650:	bf00      	nop
 8000652:	3714      	adds	r7, #20
 8000654:	46bd      	mov	sp, r7
 8000656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065a:	4770      	bx	lr
 800065c:	e000ed00 	.word	0xe000ed00

08000660 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000664:	4b04      	ldr	r3, [pc, #16]	; (8000678 <__NVIC_GetPriorityGrouping+0x18>)
 8000666:	68db      	ldr	r3, [r3, #12]
 8000668:	0a1b      	lsrs	r3, r3, #8
 800066a:	f003 0307 	and.w	r3, r3, #7
}
 800066e:	4618      	mov	r0, r3
 8000670:	46bd      	mov	sp, r7
 8000672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000676:	4770      	bx	lr
 8000678:	e000ed00 	.word	0xe000ed00

0800067c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800067c:	b480      	push	{r7}
 800067e:	b083      	sub	sp, #12
 8000680:	af00      	add	r7, sp, #0
 8000682:	4603      	mov	r3, r0
 8000684:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800068a:	2b00      	cmp	r3, #0
 800068c:	db0b      	blt.n	80006a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800068e:	79fb      	ldrb	r3, [r7, #7]
 8000690:	f003 021f 	and.w	r2, r3, #31
 8000694:	4907      	ldr	r1, [pc, #28]	; (80006b4 <__NVIC_EnableIRQ+0x38>)
 8000696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800069a:	095b      	lsrs	r3, r3, #5
 800069c:	2001      	movs	r0, #1
 800069e:	fa00 f202 	lsl.w	r2, r0, r2
 80006a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80006a6:	bf00      	nop
 80006a8:	370c      	adds	r7, #12
 80006aa:	46bd      	mov	sp, r7
 80006ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop
 80006b4:	e000e100 	.word	0xe000e100

080006b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006b8:	b480      	push	{r7}
 80006ba:	b083      	sub	sp, #12
 80006bc:	af00      	add	r7, sp, #0
 80006be:	4603      	mov	r3, r0
 80006c0:	6039      	str	r1, [r7, #0]
 80006c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	db0a      	blt.n	80006e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006cc:	683b      	ldr	r3, [r7, #0]
 80006ce:	b2da      	uxtb	r2, r3
 80006d0:	490c      	ldr	r1, [pc, #48]	; (8000704 <__NVIC_SetPriority+0x4c>)
 80006d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006d6:	0112      	lsls	r2, r2, #4
 80006d8:	b2d2      	uxtb	r2, r2
 80006da:	440b      	add	r3, r1
 80006dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006e0:	e00a      	b.n	80006f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006e2:	683b      	ldr	r3, [r7, #0]
 80006e4:	b2da      	uxtb	r2, r3
 80006e6:	4908      	ldr	r1, [pc, #32]	; (8000708 <__NVIC_SetPriority+0x50>)
 80006e8:	79fb      	ldrb	r3, [r7, #7]
 80006ea:	f003 030f 	and.w	r3, r3, #15
 80006ee:	3b04      	subs	r3, #4
 80006f0:	0112      	lsls	r2, r2, #4
 80006f2:	b2d2      	uxtb	r2, r2
 80006f4:	440b      	add	r3, r1
 80006f6:	761a      	strb	r2, [r3, #24]
}
 80006f8:	bf00      	nop
 80006fa:	370c      	adds	r7, #12
 80006fc:	46bd      	mov	sp, r7
 80006fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000702:	4770      	bx	lr
 8000704:	e000e100 	.word	0xe000e100
 8000708:	e000ed00 	.word	0xe000ed00

0800070c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800070c:	b480      	push	{r7}
 800070e:	b089      	sub	sp, #36	; 0x24
 8000710:	af00      	add	r7, sp, #0
 8000712:	60f8      	str	r0, [r7, #12]
 8000714:	60b9      	str	r1, [r7, #8]
 8000716:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	f003 0307 	and.w	r3, r3, #7
 800071e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000720:	69fb      	ldr	r3, [r7, #28]
 8000722:	f1c3 0307 	rsb	r3, r3, #7
 8000726:	2b04      	cmp	r3, #4
 8000728:	bf28      	it	cs
 800072a:	2304      	movcs	r3, #4
 800072c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800072e:	69fb      	ldr	r3, [r7, #28]
 8000730:	3304      	adds	r3, #4
 8000732:	2b06      	cmp	r3, #6
 8000734:	d902      	bls.n	800073c <NVIC_EncodePriority+0x30>
 8000736:	69fb      	ldr	r3, [r7, #28]
 8000738:	3b03      	subs	r3, #3
 800073a:	e000      	b.n	800073e <NVIC_EncodePriority+0x32>
 800073c:	2300      	movs	r3, #0
 800073e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000740:	f04f 32ff 	mov.w	r2, #4294967295
 8000744:	69bb      	ldr	r3, [r7, #24]
 8000746:	fa02 f303 	lsl.w	r3, r2, r3
 800074a:	43da      	mvns	r2, r3
 800074c:	68bb      	ldr	r3, [r7, #8]
 800074e:	401a      	ands	r2, r3
 8000750:	697b      	ldr	r3, [r7, #20]
 8000752:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000754:	f04f 31ff 	mov.w	r1, #4294967295
 8000758:	697b      	ldr	r3, [r7, #20]
 800075a:	fa01 f303 	lsl.w	r3, r1, r3
 800075e:	43d9      	mvns	r1, r3
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000764:	4313      	orrs	r3, r2
         );
}
 8000766:	4618      	mov	r0, r3
 8000768:	3724      	adds	r7, #36	; 0x24
 800076a:	46bd      	mov	sp, r7
 800076c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000770:	4770      	bx	lr
	...

08000774 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	3b01      	subs	r3, #1
 8000780:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000784:	d301      	bcc.n	800078a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000786:	2301      	movs	r3, #1
 8000788:	e00f      	b.n	80007aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800078a:	4a0a      	ldr	r2, [pc, #40]	; (80007b4 <SysTick_Config+0x40>)
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	3b01      	subs	r3, #1
 8000790:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000792:	210f      	movs	r1, #15
 8000794:	f04f 30ff 	mov.w	r0, #4294967295
 8000798:	f7ff ff8e 	bl	80006b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800079c:	4b05      	ldr	r3, [pc, #20]	; (80007b4 <SysTick_Config+0x40>)
 800079e:	2200      	movs	r2, #0
 80007a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007a2:	4b04      	ldr	r3, [pc, #16]	; (80007b4 <SysTick_Config+0x40>)
 80007a4:	2207      	movs	r2, #7
 80007a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007a8:	2300      	movs	r3, #0
}
 80007aa:	4618      	mov	r0, r3
 80007ac:	3708      	adds	r7, #8
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	e000e010 	.word	0xe000e010

080007b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007c0:	6878      	ldr	r0, [r7, #4]
 80007c2:	f7ff ff29 	bl	8000618 <__NVIC_SetPriorityGrouping>
}
 80007c6:	bf00      	nop
 80007c8:	3708      	adds	r7, #8
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}

080007ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007ce:	b580      	push	{r7, lr}
 80007d0:	b086      	sub	sp, #24
 80007d2:	af00      	add	r7, sp, #0
 80007d4:	4603      	mov	r3, r0
 80007d6:	60b9      	str	r1, [r7, #8]
 80007d8:	607a      	str	r2, [r7, #4]
 80007da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007dc:	2300      	movs	r3, #0
 80007de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007e0:	f7ff ff3e 	bl	8000660 <__NVIC_GetPriorityGrouping>
 80007e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007e6:	687a      	ldr	r2, [r7, #4]
 80007e8:	68b9      	ldr	r1, [r7, #8]
 80007ea:	6978      	ldr	r0, [r7, #20]
 80007ec:	f7ff ff8e 	bl	800070c <NVIC_EncodePriority>
 80007f0:	4602      	mov	r2, r0
 80007f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007f6:	4611      	mov	r1, r2
 80007f8:	4618      	mov	r0, r3
 80007fa:	f7ff ff5d 	bl	80006b8 <__NVIC_SetPriority>
}
 80007fe:	bf00      	nop
 8000800:	3718      	adds	r7, #24
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}

08000806 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000806:	b580      	push	{r7, lr}
 8000808:	b082      	sub	sp, #8
 800080a:	af00      	add	r7, sp, #0
 800080c:	4603      	mov	r3, r0
 800080e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000810:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000814:	4618      	mov	r0, r3
 8000816:	f7ff ff31 	bl	800067c <__NVIC_EnableIRQ>
}
 800081a:	bf00      	nop
 800081c:	3708      	adds	r7, #8
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}

08000822 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000822:	b580      	push	{r7, lr}
 8000824:	b082      	sub	sp, #8
 8000826:	af00      	add	r7, sp, #0
 8000828:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800082a:	6878      	ldr	r0, [r7, #4]
 800082c:	f7ff ffa2 	bl	8000774 <SysTick_Config>
 8000830:	4603      	mov	r3, r0
}
 8000832:	4618      	mov	r0, r3
 8000834:	3708      	adds	r7, #8
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}

0800083a <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 800083a:	b580      	push	{r7, lr}
 800083c:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 800083e:	f000 f802 	bl	8000846 <HAL_SYSTICK_Callback>
}
 8000842:	bf00      	nop
 8000844:	bd80      	pop	{r7, pc}

08000846 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000846:	b480      	push	{r7}
 8000848:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 800084a:	bf00      	nop
 800084c:	46bd      	mov	sp, r7
 800084e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000852:	4770      	bx	lr

08000854 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b086      	sub	sp, #24
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800085c:	2300      	movs	r3, #0
 800085e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000860:	f7ff feaa 	bl	80005b8 <HAL_GetTick>
 8000864:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	2b00      	cmp	r3, #0
 800086a:	d101      	bne.n	8000870 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800086c:	2301      	movs	r3, #1
 800086e:	e099      	b.n	80009a4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	2200      	movs	r2, #0
 8000874:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	2202      	movs	r2, #2
 800087c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	681a      	ldr	r2, [r3, #0]
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	f022 0201 	bic.w	r2, r2, #1
 800088e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000890:	e00f      	b.n	80008b2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000892:	f7ff fe91 	bl	80005b8 <HAL_GetTick>
 8000896:	4602      	mov	r2, r0
 8000898:	693b      	ldr	r3, [r7, #16]
 800089a:	1ad3      	subs	r3, r2, r3
 800089c:	2b05      	cmp	r3, #5
 800089e:	d908      	bls.n	80008b2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	2220      	movs	r2, #32
 80008a4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	2203      	movs	r2, #3
 80008aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80008ae:	2303      	movs	r3, #3
 80008b0:	e078      	b.n	80009a4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	f003 0301 	and.w	r3, r3, #1
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d1e8      	bne.n	8000892 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80008c8:	697a      	ldr	r2, [r7, #20]
 80008ca:	4b38      	ldr	r3, [pc, #224]	; (80009ac <HAL_DMA_Init+0x158>)
 80008cc:	4013      	ands	r3, r2
 80008ce:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	685a      	ldr	r2, [r3, #4]
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	689b      	ldr	r3, [r3, #8]
 80008d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80008de:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	691b      	ldr	r3, [r3, #16]
 80008e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80008ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	699b      	ldr	r3, [r3, #24]
 80008f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80008f6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	6a1b      	ldr	r3, [r3, #32]
 80008fc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80008fe:	697a      	ldr	r2, [r7, #20]
 8000900:	4313      	orrs	r3, r2
 8000902:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000908:	2b04      	cmp	r3, #4
 800090a:	d107      	bne.n	800091c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000914:	4313      	orrs	r3, r2
 8000916:	697a      	ldr	r2, [r7, #20]
 8000918:	4313      	orrs	r3, r2
 800091a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	697a      	ldr	r2, [r7, #20]
 8000922:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	695b      	ldr	r3, [r3, #20]
 800092a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800092c:	697b      	ldr	r3, [r7, #20]
 800092e:	f023 0307 	bic.w	r3, r3, #7
 8000932:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000938:	697a      	ldr	r2, [r7, #20]
 800093a:	4313      	orrs	r3, r2
 800093c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000942:	2b04      	cmp	r3, #4
 8000944:	d117      	bne.n	8000976 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800094a:	697a      	ldr	r2, [r7, #20]
 800094c:	4313      	orrs	r3, r2
 800094e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000954:	2b00      	cmp	r3, #0
 8000956:	d00e      	beq.n	8000976 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000958:	6878      	ldr	r0, [r7, #4]
 800095a:	f000 f8df 	bl	8000b1c <DMA_CheckFifoParam>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d008      	beq.n	8000976 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	2240      	movs	r2, #64	; 0x40
 8000968:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	2201      	movs	r2, #1
 800096e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8000972:	2301      	movs	r3, #1
 8000974:	e016      	b.n	80009a4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	697a      	ldr	r2, [r7, #20]
 800097c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800097e:	6878      	ldr	r0, [r7, #4]
 8000980:	f000 f896 	bl	8000ab0 <DMA_CalcBaseAndBitshift>
 8000984:	4603      	mov	r3, r0
 8000986:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800098c:	223f      	movs	r2, #63	; 0x3f
 800098e:	409a      	lsls	r2, r3
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	2200      	movs	r2, #0
 8000998:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	2201      	movs	r2, #1
 800099e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80009a2:	2300      	movs	r3, #0
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	3718      	adds	r7, #24
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	f010803f 	.word	0xf010803f

080009b0 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b084      	sub	sp, #16
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d101      	bne.n	80009c2 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80009be:	2301      	movs	r3, #1
 80009c0:	e050      	b.n	8000a64 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80009c8:	b2db      	uxtb	r3, r3
 80009ca:	2b02      	cmp	r3, #2
 80009cc:	d101      	bne.n	80009d2 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80009ce:	2302      	movs	r3, #2
 80009d0:	e048      	b.n	8000a64 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	681a      	ldr	r2, [r3, #0]
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	f022 0201 	bic.w	r2, r2, #1
 80009e0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	2200      	movs	r2, #0
 80009e8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	2200      	movs	r2, #0
 80009f0:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	2200      	movs	r2, #0
 80009f8:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	2200      	movs	r2, #0
 8000a00:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	2200      	movs	r2, #0
 8000a08:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	2221      	movs	r2, #33	; 0x21
 8000a10:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000a12:	6878      	ldr	r0, [r7, #4]
 8000a14:	f000 f84c 	bl	8000ab0 <DMA_CalcBaseAndBitshift>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	2200      	movs	r2, #0
 8000a20:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	2200      	movs	r2, #0
 8000a26:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	2200      	movs	r2, #0
 8000a32:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	2200      	movs	r2, #0
 8000a38:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a44:	223f      	movs	r2, #63	; 0x3f
 8000a46:	409a      	lsls	r2, r3
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	2200      	movs	r2, #0
 8000a50:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	2200      	movs	r2, #0
 8000a56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8000a62:	2300      	movs	r3, #0
}
 8000a64:	4618      	mov	r0, r3
 8000a66:	3710      	adds	r7, #16
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}

08000a6c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b083      	sub	sp, #12
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000a7a:	b2db      	uxtb	r3, r3
 8000a7c:	2b02      	cmp	r3, #2
 8000a7e:	d004      	beq.n	8000a8a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	2280      	movs	r2, #128	; 0x80
 8000a84:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000a86:	2301      	movs	r3, #1
 8000a88:	e00c      	b.n	8000aa4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	2205      	movs	r2, #5
 8000a8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	681a      	ldr	r2, [r3, #0]
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	f022 0201 	bic.w	r2, r2, #1
 8000aa0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000aa2:	2300      	movs	r3, #0
}
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	370c      	adds	r7, #12
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aae:	4770      	bx	lr

08000ab0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b085      	sub	sp, #20
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	b2db      	uxtb	r3, r3
 8000abe:	3b10      	subs	r3, #16
 8000ac0:	4a14      	ldr	r2, [pc, #80]	; (8000b14 <DMA_CalcBaseAndBitshift+0x64>)
 8000ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ac6:	091b      	lsrs	r3, r3, #4
 8000ac8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000aca:	4a13      	ldr	r2, [pc, #76]	; (8000b18 <DMA_CalcBaseAndBitshift+0x68>)
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	4413      	add	r3, r2
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	461a      	mov	r2, r3
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	2b03      	cmp	r3, #3
 8000adc:	d909      	bls.n	8000af2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000ae6:	f023 0303 	bic.w	r3, r3, #3
 8000aea:	1d1a      	adds	r2, r3, #4
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	659a      	str	r2, [r3, #88]	; 0x58
 8000af0:	e007      	b.n	8000b02 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000afa:	f023 0303 	bic.w	r3, r3, #3
 8000afe:	687a      	ldr	r2, [r7, #4]
 8000b00:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	3714      	adds	r7, #20
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop
 8000b14:	aaaaaaab 	.word	0xaaaaaaab
 8000b18:	08008000 	.word	0x08008000

08000b1c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b085      	sub	sp, #20
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000b24:	2300      	movs	r3, #0
 8000b26:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b2c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	699b      	ldr	r3, [r3, #24]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d11f      	bne.n	8000b76 <DMA_CheckFifoParam+0x5a>
 8000b36:	68bb      	ldr	r3, [r7, #8]
 8000b38:	2b03      	cmp	r3, #3
 8000b3a:	d856      	bhi.n	8000bea <DMA_CheckFifoParam+0xce>
 8000b3c:	a201      	add	r2, pc, #4	; (adr r2, 8000b44 <DMA_CheckFifoParam+0x28>)
 8000b3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b42:	bf00      	nop
 8000b44:	08000b55 	.word	0x08000b55
 8000b48:	08000b67 	.word	0x08000b67
 8000b4c:	08000b55 	.word	0x08000b55
 8000b50:	08000beb 	.word	0x08000beb
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b58:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d046      	beq.n	8000bee <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8000b60:	2301      	movs	r3, #1
 8000b62:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000b64:	e043      	b.n	8000bee <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b6a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000b6e:	d140      	bne.n	8000bf2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8000b70:	2301      	movs	r3, #1
 8000b72:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000b74:	e03d      	b.n	8000bf2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	699b      	ldr	r3, [r3, #24]
 8000b7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000b7e:	d121      	bne.n	8000bc4 <DMA_CheckFifoParam+0xa8>
 8000b80:	68bb      	ldr	r3, [r7, #8]
 8000b82:	2b03      	cmp	r3, #3
 8000b84:	d837      	bhi.n	8000bf6 <DMA_CheckFifoParam+0xda>
 8000b86:	a201      	add	r2, pc, #4	; (adr r2, 8000b8c <DMA_CheckFifoParam+0x70>)
 8000b88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b8c:	08000b9d 	.word	0x08000b9d
 8000b90:	08000ba3 	.word	0x08000ba3
 8000b94:	08000b9d 	.word	0x08000b9d
 8000b98:	08000bb5 	.word	0x08000bb5
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	73fb      	strb	r3, [r7, #15]
      break;
 8000ba0:	e030      	b.n	8000c04 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ba6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d025      	beq.n	8000bfa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000bb2:	e022      	b.n	8000bfa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bb8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000bbc:	d11f      	bne.n	8000bfe <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8000bc2:	e01c      	b.n	8000bfe <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8000bc4:	68bb      	ldr	r3, [r7, #8]
 8000bc6:	2b02      	cmp	r3, #2
 8000bc8:	d903      	bls.n	8000bd2 <DMA_CheckFifoParam+0xb6>
 8000bca:	68bb      	ldr	r3, [r7, #8]
 8000bcc:	2b03      	cmp	r3, #3
 8000bce:	d003      	beq.n	8000bd8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8000bd0:	e018      	b.n	8000c04 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	73fb      	strb	r3, [r7, #15]
      break;
 8000bd6:	e015      	b.n	8000c04 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bdc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d00e      	beq.n	8000c02 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8000be4:	2301      	movs	r3, #1
 8000be6:	73fb      	strb	r3, [r7, #15]
      break;
 8000be8:	e00b      	b.n	8000c02 <DMA_CheckFifoParam+0xe6>
      break;
 8000bea:	bf00      	nop
 8000bec:	e00a      	b.n	8000c04 <DMA_CheckFifoParam+0xe8>
      break;
 8000bee:	bf00      	nop
 8000bf0:	e008      	b.n	8000c04 <DMA_CheckFifoParam+0xe8>
      break;
 8000bf2:	bf00      	nop
 8000bf4:	e006      	b.n	8000c04 <DMA_CheckFifoParam+0xe8>
      break;
 8000bf6:	bf00      	nop
 8000bf8:	e004      	b.n	8000c04 <DMA_CheckFifoParam+0xe8>
      break;
 8000bfa:	bf00      	nop
 8000bfc:	e002      	b.n	8000c04 <DMA_CheckFifoParam+0xe8>
      break;   
 8000bfe:	bf00      	nop
 8000c00:	e000      	b.n	8000c04 <DMA_CheckFifoParam+0xe8>
      break;
 8000c02:	bf00      	nop
    }
  } 
  
  return status; 
 8000c04:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	3714      	adds	r7, #20
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop

08000c14 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d101      	bne.n	8000c26 <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8000c22:	2301      	movs	r3, #1
 8000c24:	e03b      	b.n	8000c9e <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000c2c:	b2db      	uxtb	r3, r3
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d106      	bne.n	8000c40 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	2200      	movs	r2, #0
 8000c36:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8000c3a:	6878      	ldr	r0, [r7, #4]
 8000c3c:	f000 f833 	bl	8000ca6 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	2202      	movs	r2, #2
 8000c44:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	685a      	ldr	r2, [r3, #4]
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	430a      	orrs	r2, r1
 8000c5c:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c64:	f023 0107 	bic.w	r1, r3, #7
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	689a      	ldr	r2, [r3, #8]
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	430a      	orrs	r2, r1
 8000c72:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c7a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000c7e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000c82:	687a      	ldr	r2, [r7, #4]
 8000c84:	68d1      	ldr	r1, [r2, #12]
 8000c86:	687a      	ldr	r2, [r7, #4]
 8000c88:	6812      	ldr	r2, [r2, #0]
 8000c8a:	430b      	orrs	r3, r1
 8000c8c:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	2200      	movs	r2, #0
 8000c92:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	2201      	movs	r2, #1
 8000c98:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8000c9c:	2300      	movs	r3, #0
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	3708      	adds	r7, #8
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}

08000ca6 <HAL_DMA2D_MspInit>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8000ca6:	b480      	push	{r7}
 8000ca8:	b083      	sub	sp, #12
 8000caa:	af00      	add	r7, sp, #0
 8000cac:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
 8000cae:	bf00      	nop
 8000cb0:	370c      	adds	r7, #12
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr

08000cba <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8000cba:	b580      	push	{r7, lr}
 8000cbc:	b086      	sub	sp, #24
 8000cbe:	af02      	add	r7, sp, #8
 8000cc0:	60f8      	str	r0, [r7, #12]
 8000cc2:	60b9      	str	r1, [r7, #8]
 8000cc4:	607a      	str	r2, [r7, #4]
 8000cc6:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000cce:	2b01      	cmp	r3, #1
 8000cd0:	d101      	bne.n	8000cd6 <HAL_DMA2D_Start+0x1c>
 8000cd2:	2302      	movs	r3, #2
 8000cd4:	e018      	b.n	8000d08 <HAL_DMA2D_Start+0x4e>
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	2201      	movs	r2, #1
 8000cda:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	2202      	movs	r2, #2
 8000ce2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8000ce6:	69bb      	ldr	r3, [r7, #24]
 8000ce8:	9300      	str	r3, [sp, #0]
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	687a      	ldr	r2, [r7, #4]
 8000cee:	68b9      	ldr	r1, [r7, #8]
 8000cf0:	68f8      	ldr	r0, [r7, #12]
 8000cf2:	f000 f989 	bl	8001008 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	681a      	ldr	r2, [r3, #0]
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	f042 0201 	orr.w	r2, r2, #1
 8000d04:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8000d06:	2300      	movs	r3, #0
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	3710      	adds	r7, #16
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}

08000d10 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b086      	sub	sp, #24
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
 8000d18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	f003 0301 	and.w	r3, r3, #1
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d056      	beq.n	8000dda <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 8000d2c:	f7ff fc44 	bl	80005b8 <HAL_GetTick>
 8000d30:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8000d32:	e04b      	b.n	8000dcc <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	685b      	ldr	r3, [r3, #4]
 8000d3a:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d023      	beq.n	8000d8e <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	f003 0320 	and.w	r3, r3, #32
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d005      	beq.n	8000d5c <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d54:	f043 0202 	orr.w	r2, r3, #2
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	f003 0301 	and.w	r3, r3, #1
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d005      	beq.n	8000d72 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d6a:	f043 0201 	orr.w	r2, r3, #1
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	2221      	movs	r2, #33	; 0x21
 8000d78:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	2204      	movs	r2, #4
 8000d7e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	2200      	movs	r2, #0
 8000d86:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	e0a5      	b.n	8000eda <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d94:	d01a      	beq.n	8000dcc <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8000d96:	f7ff fc0f 	bl	80005b8 <HAL_GetTick>
 8000d9a:	4602      	mov	r2, r0
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	1ad3      	subs	r3, r2, r3
 8000da0:	683a      	ldr	r2, [r7, #0]
 8000da2:	429a      	cmp	r2, r3
 8000da4:	d302      	bcc.n	8000dac <HAL_DMA2D_PollForTransfer+0x9c>
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d10f      	bne.n	8000dcc <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000db0:	f043 0220 	orr.w	r2, r3, #32
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	2203      	movs	r2, #3
 8000dbc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8000dc8:	2303      	movs	r3, #3
 8000dca:	e086      	b.n	8000eda <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	f003 0302 	and.w	r3, r3, #2
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d0ac      	beq.n	8000d34 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	69db      	ldr	r3, [r3, #28]
 8000de0:	f003 0320 	and.w	r3, r3, #32
 8000de4:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dec:	f003 0320 	and.w	r3, r3, #32
 8000df0:	693a      	ldr	r2, [r7, #16]
 8000df2:	4313      	orrs	r3, r2
 8000df4:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8000df6:	693b      	ldr	r3, [r7, #16]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d061      	beq.n	8000ec0 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8000dfc:	f7ff fbdc 	bl	80005b8 <HAL_GetTick>
 8000e00:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8000e02:	e056      	b.n	8000eb2 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d02e      	beq.n	8000e74 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	f003 0308 	and.w	r3, r3, #8
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d005      	beq.n	8000e2c <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e24:	f043 0204 	orr.w	r2, r3, #4
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	f003 0320 	and.w	r3, r3, #32
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d005      	beq.n	8000e42 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e3a:	f043 0202 	orr.w	r2, r3, #2
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	f003 0301 	and.w	r3, r3, #1
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d005      	beq.n	8000e58 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e50:	f043 0201 	orr.w	r2, r3, #1
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	2229      	movs	r2, #41	; 0x29
 8000e5e:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	2204      	movs	r2, #4
 8000e64:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8000e70:	2301      	movs	r3, #1
 8000e72:	e032      	b.n	8000eda <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e7a:	d01a      	beq.n	8000eb2 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8000e7c:	f7ff fb9c 	bl	80005b8 <HAL_GetTick>
 8000e80:	4602      	mov	r2, r0
 8000e82:	697b      	ldr	r3, [r7, #20]
 8000e84:	1ad3      	subs	r3, r2, r3
 8000e86:	683a      	ldr	r2, [r7, #0]
 8000e88:	429a      	cmp	r2, r3
 8000e8a:	d302      	bcc.n	8000e92 <HAL_DMA2D_PollForTransfer+0x182>
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d10f      	bne.n	8000eb2 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e96:	f043 0220 	orr.w	r2, r3, #32
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	2203      	movs	r2, #3
 8000ea2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8000eae:	2303      	movs	r3, #3
 8000eb0:	e013      	b.n	8000eda <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	f003 0310 	and.w	r3, r3, #16
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d0a1      	beq.n	8000e04 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	2212      	movs	r2, #18
 8000ec6:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	2201      	movs	r2, #1
 8000ecc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8000ed8:	2300      	movs	r3, #0
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	3718      	adds	r7, #24
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
	...

08000ee4 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b087      	sub	sp, #28
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000efc:	2b01      	cmp	r3, #1
 8000efe:	d101      	bne.n	8000f04 <HAL_DMA2D_ConfigLayer+0x20>
 8000f00:	2302      	movs	r3, #2
 8000f02:	e079      	b.n	8000ff8 <HAL_DMA2D_ConfigLayer+0x114>
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	2201      	movs	r2, #1
 8000f08:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2202      	movs	r2, #2
 8000f10:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	011b      	lsls	r3, r3, #4
 8000f18:	3318      	adds	r3, #24
 8000f1a:	687a      	ldr	r2, [r7, #4]
 8000f1c:	4413      	add	r3, r2
 8000f1e:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8000f20:	693b      	ldr	r3, [r7, #16]
 8000f22:	685a      	ldr	r2, [r3, #4]
 8000f24:	693b      	ldr	r3, [r7, #16]
 8000f26:	689b      	ldr	r3, [r3, #8]
 8000f28:	041b      	lsls	r3, r3, #16
 8000f2a:	4313      	orrs	r3, r2
 8000f2c:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8000f2e:	4b35      	ldr	r3, [pc, #212]	; (8001004 <HAL_DMA2D_ConfigLayer+0x120>)
 8000f30:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8000f32:	693b      	ldr	r3, [r7, #16]
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	2b0a      	cmp	r3, #10
 8000f38:	d003      	beq.n	8000f42 <HAL_DMA2D_ConfigLayer+0x5e>
 8000f3a:	693b      	ldr	r3, [r7, #16]
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	2b09      	cmp	r3, #9
 8000f40:	d107      	bne.n	8000f52 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8000f42:	693b      	ldr	r3, [r7, #16]
 8000f44:	68db      	ldr	r3, [r3, #12]
 8000f46:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8000f4a:	697a      	ldr	r2, [r7, #20]
 8000f4c:	4313      	orrs	r3, r2
 8000f4e:	617b      	str	r3, [r7, #20]
 8000f50:	e005      	b.n	8000f5e <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8000f52:	693b      	ldr	r3, [r7, #16]
 8000f54:	68db      	ldr	r3, [r3, #12]
 8000f56:	061b      	lsls	r3, r3, #24
 8000f58:	697a      	ldr	r2, [r7, #20]
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d120      	bne.n	8000fa6 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	43db      	mvns	r3, r3
 8000f6e:	ea02 0103 	and.w	r1, r2, r3
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	697a      	ldr	r2, [r7, #20]
 8000f78:	430a      	orrs	r2, r1
 8000f7a:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	693a      	ldr	r2, [r7, #16]
 8000f82:	6812      	ldr	r2, [r2, #0]
 8000f84:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8000f86:	693b      	ldr	r3, [r7, #16]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	2b0a      	cmp	r3, #10
 8000f8c:	d003      	beq.n	8000f96 <HAL_DMA2D_ConfigLayer+0xb2>
 8000f8e:	693b      	ldr	r3, [r7, #16]
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	2b09      	cmp	r3, #9
 8000f94:	d127      	bne.n	8000fe6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8000f96:	693b      	ldr	r3, [r7, #16]
 8000f98:	68da      	ldr	r2, [r3, #12]
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8000fa2:	629a      	str	r2, [r3, #40]	; 0x28
 8000fa4:	e01f      	b.n	8000fe6 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	69da      	ldr	r2, [r3, #28]
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	43db      	mvns	r3, r3
 8000fb0:	ea02 0103 	and.w	r1, r2, r3
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	697a      	ldr	r2, [r7, #20]
 8000fba:	430a      	orrs	r2, r1
 8000fbc:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	693a      	ldr	r2, [r7, #16]
 8000fc4:	6812      	ldr	r2, [r2, #0]
 8000fc6:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8000fc8:	693b      	ldr	r3, [r7, #16]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	2b0a      	cmp	r3, #10
 8000fce:	d003      	beq.n	8000fd8 <HAL_DMA2D_ConfigLayer+0xf4>
 8000fd0:	693b      	ldr	r3, [r7, #16]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	2b09      	cmp	r3, #9
 8000fd6:	d106      	bne.n	8000fe6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8000fd8:	693b      	ldr	r3, [r7, #16]
 8000fda:	68da      	ldr	r2, [r3, #12]
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8000fe4:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	2201      	movs	r2, #1
 8000fea:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8000ff6:	2300      	movs	r3, #0
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	371c      	adds	r7, #28
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr
 8001004:	ff03000f 	.word	0xff03000f

08001008 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8001008:	b480      	push	{r7}
 800100a:	b08b      	sub	sp, #44	; 0x2c
 800100c:	af00      	add	r7, sp, #0
 800100e:	60f8      	str	r0, [r7, #12]
 8001010:	60b9      	str	r1, [r7, #8]
 8001012:	607a      	str	r2, [r7, #4]
 8001014:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800101c:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	041a      	lsls	r2, r3, #16
 8001024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001026:	431a      	orrs	r2, r3
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	430a      	orrs	r2, r1
 800102e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	687a      	ldr	r2, [r7, #4]
 8001036:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001040:	d174      	bne.n	800112c <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8001042:	68bb      	ldr	r3, [r7, #8]
 8001044:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8001048:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800104a:	68bb      	ldr	r3, [r7, #8]
 800104c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001050:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8001052:	68bb      	ldr	r3, [r7, #8]
 8001054:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8001058:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 800105a:	68bb      	ldr	r3, [r7, #8]
 800105c:	b2db      	uxtb	r3, r3
 800105e:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	689b      	ldr	r3, [r3, #8]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d108      	bne.n	800107a <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8001068:	69ba      	ldr	r2, [r7, #24]
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	431a      	orrs	r2, r3
 800106e:	6a3b      	ldr	r3, [r7, #32]
 8001070:	4313      	orrs	r3, r2
 8001072:	697a      	ldr	r2, [r7, #20]
 8001074:	4313      	orrs	r3, r2
 8001076:	627b      	str	r3, [r7, #36]	; 0x24
 8001078:	e053      	b.n	8001122 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	689b      	ldr	r3, [r3, #8]
 800107e:	2b01      	cmp	r3, #1
 8001080:	d106      	bne.n	8001090 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8001082:	69ba      	ldr	r2, [r7, #24]
 8001084:	69fb      	ldr	r3, [r7, #28]
 8001086:	4313      	orrs	r3, r2
 8001088:	697a      	ldr	r2, [r7, #20]
 800108a:	4313      	orrs	r3, r2
 800108c:	627b      	str	r3, [r7, #36]	; 0x24
 800108e:	e048      	b.n	8001122 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	689b      	ldr	r3, [r3, #8]
 8001094:	2b02      	cmp	r3, #2
 8001096:	d111      	bne.n	80010bc <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8001098:	69fb      	ldr	r3, [r7, #28]
 800109a:	0cdb      	lsrs	r3, r3, #19
 800109c:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 800109e:	69bb      	ldr	r3, [r7, #24]
 80010a0:	0a9b      	lsrs	r3, r3, #10
 80010a2:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	08db      	lsrs	r3, r3, #3
 80010a8:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80010aa:	69bb      	ldr	r3, [r7, #24]
 80010ac:	015a      	lsls	r2, r3, #5
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	02db      	lsls	r3, r3, #11
 80010b2:	4313      	orrs	r3, r2
 80010b4:	697a      	ldr	r2, [r7, #20]
 80010b6:	4313      	orrs	r3, r2
 80010b8:	627b      	str	r3, [r7, #36]	; 0x24
 80010ba:	e032      	b.n	8001122 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	689b      	ldr	r3, [r3, #8]
 80010c0:	2b03      	cmp	r3, #3
 80010c2:	d117      	bne.n	80010f4 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 80010c4:	6a3b      	ldr	r3, [r7, #32]
 80010c6:	0fdb      	lsrs	r3, r3, #31
 80010c8:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	0cdb      	lsrs	r3, r3, #19
 80010ce:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 80010d0:	69bb      	ldr	r3, [r7, #24]
 80010d2:	0adb      	lsrs	r3, r3, #11
 80010d4:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	08db      	lsrs	r3, r3, #3
 80010da:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80010dc:	69bb      	ldr	r3, [r7, #24]
 80010de:	015a      	lsls	r2, r3, #5
 80010e0:	69fb      	ldr	r3, [r7, #28]
 80010e2:	029b      	lsls	r3, r3, #10
 80010e4:	431a      	orrs	r2, r3
 80010e6:	6a3b      	ldr	r3, [r7, #32]
 80010e8:	03db      	lsls	r3, r3, #15
 80010ea:	4313      	orrs	r3, r2
 80010ec:	697a      	ldr	r2, [r7, #20]
 80010ee:	4313      	orrs	r3, r2
 80010f0:	627b      	str	r3, [r7, #36]	; 0x24
 80010f2:	e016      	b.n	8001122 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 80010f4:	6a3b      	ldr	r3, [r7, #32]
 80010f6:	0f1b      	lsrs	r3, r3, #28
 80010f8:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	0d1b      	lsrs	r3, r3, #20
 80010fe:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8001100:	69bb      	ldr	r3, [r7, #24]
 8001102:	0b1b      	lsrs	r3, r3, #12
 8001104:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	091b      	lsrs	r3, r3, #4
 800110a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 800110c:	69bb      	ldr	r3, [r7, #24]
 800110e:	011a      	lsls	r2, r3, #4
 8001110:	69fb      	ldr	r3, [r7, #28]
 8001112:	021b      	lsls	r3, r3, #8
 8001114:	431a      	orrs	r2, r3
 8001116:	6a3b      	ldr	r3, [r7, #32]
 8001118:	031b      	lsls	r3, r3, #12
 800111a:	4313      	orrs	r3, r2
 800111c:	697a      	ldr	r2, [r7, #20]
 800111e:	4313      	orrs	r3, r2
 8001120:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001128:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 800112a:	e003      	b.n	8001134 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	68ba      	ldr	r2, [r7, #8]
 8001132:	60da      	str	r2, [r3, #12]
}
 8001134:	bf00      	nop
 8001136:	372c      	adds	r7, #44	; 0x2c
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr

08001140 <DSI_ConfigPacketHeader>:
static void DSI_ConfigPacketHeader(DSI_TypeDef *DSIx,
                                   uint32_t ChannelID,
                                   uint32_t DataType,
                                   uint32_t Data0,
                                   uint32_t Data1)
{
 8001140:	b480      	push	{r7}
 8001142:	b085      	sub	sp, #20
 8001144:	af00      	add	r7, sp, #0
 8001146:	60f8      	str	r0, [r7, #12]
 8001148:	60b9      	str	r1, [r7, #8]
 800114a:	607a      	str	r2, [r7, #4]
 800114c:	603b      	str	r3, [r7, #0]
  /* Update the DSI packet header with new information */
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800114e:	68bb      	ldr	r3, [r7, #8]
 8001150:	019a      	lsls	r2, r3, #6
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	431a      	orrs	r2, r3
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	021b      	lsls	r3, r3, #8
 800115a:	431a      	orrs	r2, r3
 800115c:	69bb      	ldr	r3, [r7, #24]
 800115e:	041b      	lsls	r3, r3, #16
 8001160:	431a      	orrs	r2, r3
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8001166:	bf00      	nop
 8001168:	3714      	adds	r7, #20
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr

08001172 <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 8001172:	b580      	push	{r7, lr}
 8001174:	b086      	sub	sp, #24
 8001176:	af00      	add	r7, sp, #0
 8001178:	60f8      	str	r0, [r7, #12]
 800117a:	60b9      	str	r1, [r7, #8]
 800117c:	607a      	str	r2, [r7, #4]
 800117e:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8001180:	f7ff fa1a 	bl	80005b8 <HAL_GetTick>
 8001184:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8001186:	e009      	b.n	800119c <DSI_ShortWrite+0x2a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > DSI_TIMEOUT_VALUE)
 8001188:	f7ff fa16 	bl	80005b8 <HAL_GetTick>
 800118c:	4602      	mov	r2, r0
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	1ad3      	subs	r3, r2, r3
 8001192:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001196:	d901      	bls.n	800119c <DSI_ShortWrite+0x2a>
    {
      return HAL_TIMEOUT;
 8001198:	2303      	movs	r3, #3
 800119a:	e015      	b.n	80011c8 <DSI_ShortWrite+0x56>
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80011a2:	f003 0301 	and.w	r3, r3, #1
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d0ee      	beq.n	8001188 <DSI_ShortWrite+0x16>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 80011aa:	68bb      	ldr	r3, [r7, #8]
 80011ac:	019a      	lsls	r2, r3, #6
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	431a      	orrs	r2, r3
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	021b      	lsls	r3, r3, #8
 80011b6:	ea42 0103 	orr.w	r1, r2, r3
 80011ba:	6a3b      	ldr	r3, [r7, #32]
 80011bc:	041a      	lsls	r2, r3, #16
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	430a      	orrs	r2, r1
 80011c4:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 80011c6:	2300      	movs	r3, #0
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	3718      	adds	r7, #24
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}

080011d0 <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b088      	sub	sp, #32
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t unitIntervalx4;
  uint32_t tempIDF;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d101      	bne.n	80011e4 <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 80011e0:	2301      	movs	r3, #1
 80011e2:	e108      	b.n	80013f6 <HAL_DSI_Init+0x226>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	7c5b      	ldrb	r3, [r3, #17]
 80011e8:	b2db      	uxtb	r3, r3
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d102      	bne.n	80011f4 <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 80011ee:	6878      	ldr	r0, [r7, #4]
 80011f0:	f006 fddc 	bl	8007dac <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2203      	movs	r2, #3
 80011f8:	745a      	strb	r2, [r3, #17]

  /**************** Turn on the regulator and enable the DSI PLL ****************/

  /* Enable the regulator */
  __HAL_DSI_REG_ENABLE(hdsi);
 80011fa:	2300      	movs	r3, #0
 80011fc:	613b      	str	r3, [r7, #16]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800120e:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 800121a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800121e:	613b      	str	r3, [r7, #16]
 8001220:	693b      	ldr	r3, [r7, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001222:	f7ff f9c9 	bl	80005b8 <HAL_GetTick>
 8001226:	61f8      	str	r0, [r7, #28]

  /* Wait until the regulator is ready */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8001228:	e009      	b.n	800123e <HAL_DSI_Init+0x6e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800122a:	f7ff f9c5 	bl	80005b8 <HAL_GetTick>
 800122e:	4602      	mov	r2, r0
 8001230:	69fb      	ldr	r3, [r7, #28]
 8001232:	1ad3      	subs	r3, r2, r3
 8001234:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001238:	d901      	bls.n	800123e <HAL_DSI_Init+0x6e>
    {
      return HAL_TIMEOUT;
 800123a:	2303      	movs	r3, #3
 800123c:	e0db      	b.n	80013f6 <HAL_DSI_Init+0x226>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001246:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800124a:	2b00      	cmp	r3, #0
 800124c:	d0ed      	beq.n	800122a <HAL_DSI_Init+0x5a>
    }
  }

  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8001256:	687a      	ldr	r2, [r7, #4]
 8001258:	6812      	ldr	r2, [r2, #0]
 800125a:	f423 335e 	bic.w	r3, r3, #227328	; 0x37800
 800125e:	f423 73fe 	bic.w	r3, r3, #508	; 0x1fc
 8001262:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	009a      	lsls	r2, r3, #2
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	02db      	lsls	r3, r3, #11
 800127a:	431a      	orrs	r2, r3
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	689b      	ldr	r3, [r3, #8]
 8001280:	041b      	lsls	r3, r3, #16
 8001282:	431a      	orrs	r2, r3
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	430a      	orrs	r2, r1
 800128a:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 800128e:	2300      	movs	r3, #0
 8001290:	60fb      	str	r3, [r7, #12]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f042 0201 	orr.w	r2, r2, #1
 80012a2:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 80012ae:	f003 0301 	and.w	r3, r3, #1
 80012b2:	60fb      	str	r3, [r7, #12]
 80012b4:	68fb      	ldr	r3, [r7, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80012b6:	f7ff f97f 	bl	80005b8 <HAL_GetTick>
 80012ba:	61f8      	str	r0, [r7, #28]

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 80012bc:	e009      	b.n	80012d2 <HAL_DSI_Init+0x102>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80012be:	f7ff f97b 	bl	80005b8 <HAL_GetTick>
 80012c2:	4602      	mov	r2, r0
 80012c4:	69fb      	ldr	r3, [r7, #28]
 80012c6:	1ad3      	subs	r3, r2, r3
 80012c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80012cc:	d901      	bls.n	80012d2 <HAL_DSI_Init+0x102>
    {
      return HAL_TIMEOUT;
 80012ce:	2303      	movs	r3, #3
 80012d0:	e091      	b.n	80013f6 <HAL_DSI_Init+0x226>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80012da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d0ed      	beq.n	80012be <HAL_DSI_Init+0xee>
  }

  /*************************** Set the PHY parameters ***************************/

  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f042 0206 	orr.w	r2, r2, #6
 80012f2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f022 0203 	bic.w	r2, r2, #3
 8001306:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	431a      	orrs	r2, r3
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f042 0201 	orr.w	r2, r2, #1
 8001320:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f022 0203 	bic.w	r2, r2, #3
 8001334:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	68da      	ldr	r2, [r3, #12]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	430a      	orrs	r2, r1
 800134a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /************************ Set the DSI clock parameters ************************/

  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	689a      	ldr	r2, [r3, #8]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800135c:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	6899      	ldr	r1, [r3, #8]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	689a      	ldr	r2, [r3, #8]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	430a      	orrs	r2, r1
 800136e:	609a      	str	r2, [r3, #8]

  /* Calculate the bit period in high-speed mode in unit of 0.25 ns (UIX4) */
  /* The equation is : UIX4 = IntegerPart( (1000/F_PHY_Mhz) * 4 )          */
  /* Where : F_PHY_Mhz = (NDIV * HSE_Mhz) / (IDF * ODF)                    */
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d002      	beq.n	800137e <HAL_DSI_Init+0x1ae>
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	e000      	b.n	8001380 <HAL_DSI_Init+0x1b0>
 800137e:	2301      	movs	r3, #1
 8001380:	61bb      	str	r3, [r7, #24]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8001382:	69bb      	ldr	r3, [r7, #24]
 8001384:	4a1e      	ldr	r2, [pc, #120]	; (8001400 <HAL_DSI_Init+0x230>)
 8001386:	fb02 f203 	mul.w	r2, r2, r3
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	689b      	ldr	r3, [r3, #8]
 800138e:	f003 0303 	and.w	r3, r3, #3
 8001392:	409a      	lsls	r2, r3
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 800139c:	fb01 f303 	mul.w	r3, r1, r3
 80013a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80013a4:	617b      	str	r3, [r7, #20]

  /* Set the bit period in high-speed mode */
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80013b6:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	697a      	ldr	r2, [r7, #20]
 80013c8:	430a      	orrs	r2, r1
 80013ca:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	2200      	movs	r2, #0
 80013d4:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	2200      	movs	r2, #0
 80013de:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hdsi->ErrorMsk = 0U;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2200      	movs	r2, #0
 80013e6:	619a      	str	r2, [r3, #24]

  /* Initialise the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2200      	movs	r2, #0
 80013ec:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2201      	movs	r2, #1
 80013f2:	745a      	strb	r2, [r3, #17]

  return HAL_OK;
 80013f4:	2300      	movs	r3, #0
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	3720      	adds	r7, #32
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	003d0900 	.word	0x003d0900

08001404 <HAL_DSI_DeInit>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_DeInit(DSI_HandleTypeDef *hdsi)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b086      	sub	sp, #24
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d101      	bne.n	8001416 <HAL_DSI_DeInit+0x12>
  {
    return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
 8001414:	e066      	b.n	80014e4 <HAL_DSI_DeInit+0xe0>
  }

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2203      	movs	r2, #3
 800141a:	745a      	strb	r2, [r3, #17]

  /* Disable the DSI wrapper */
  __HAL_DSI_WRAPPER_DISABLE(hdsi);
 800141c:	2300      	movs	r3, #0
 800141e:	617b      	str	r3, [r7, #20]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f022 0208 	bic.w	r2, r2, #8
 8001430:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800143c:	f003 0308 	and.w	r3, r3, #8
 8001440:	617b      	str	r3, [r7, #20]
 8001442:	697b      	ldr	r3, [r7, #20]

  /* Disable the DSI host */
  __HAL_DSI_DISABLE(hdsi);
 8001444:	2300      	movs	r3, #0
 8001446:	613b      	str	r3, [r7, #16]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	685a      	ldr	r2, [r3, #4]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f022 0201 	bic.w	r2, r2, #1
 8001456:	605a      	str	r2, [r3, #4]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	f003 0301 	and.w	r3, r3, #1
 8001462:	613b      	str	r3, [r7, #16]
 8001464:	693b      	ldr	r3, [r7, #16]

  /* D-PHY clock and digital disable */
  hdsi->Instance->PCTLR &= ~(DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f022 0206 	bic.w	r2, r2, #6
 8001476:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Turn off the DSI PLL */
  __HAL_DSI_PLL_DISABLE(hdsi);
 800147a:	2300      	movs	r3, #0
 800147c:	60fb      	str	r3, [r7, #12]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f022 0201 	bic.w	r2, r2, #1
 800148e:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 800149a:	f003 0301 	and.w	r3, r3, #1
 800149e:	60fb      	str	r3, [r7, #12]
 80014a0:	68fb      	ldr	r3, [r7, #12]

  /* Disable the regulator */
  __HAL_DSI_REG_DISABLE(hdsi);
 80014a2:	2300      	movs	r3, #0
 80014a4:	60bb      	str	r3, [r7, #8]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80014b6:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 80014c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80014c6:	60bb      	str	r3, [r7, #8]
 80014c8:	68bb      	ldr	r3, [r7, #8]
  }
  /* DeInit the low level hardware */
  hdsi->MspDeInitCallback(hdsi);
#else
  /* DeInit the low level hardware */
  HAL_DSI_MspDeInit(hdsi);
 80014ca:	6878      	ldr	r0, [r7, #4]
 80014cc:	f006 fcb6 	bl	8007e3c <HAL_DSI_MspDeInit>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Initialise the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2200      	movs	r2, #0
 80014d4:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_RESET;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2200      	movs	r2, #0
 80014da:	745a      	strb	r2, [r3, #17]

  /* Release Lock */
  __HAL_UNLOCK(hdsi);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2200      	movs	r2, #0
 80014e0:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80014e2:	2300      	movs	r3, #0
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	3718      	adds	r7, #24
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}

080014ec <HAL_DSI_ConfigVideoMode>:
  * @param  VidCfg pointer to a DSI_VidCfgTypeDef structure that contains
  *                the DSI video mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigVideoMode(DSI_HandleTypeDef *hdsi, DSI_VidCfgTypeDef *VidCfg)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
 80014f4:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	7c1b      	ldrb	r3, [r3, #16]
 80014fa:	2b01      	cmp	r3, #1
 80014fc:	d101      	bne.n	8001502 <HAL_DSI_ConfigVideoMode+0x16>
 80014fe:	2302      	movs	r3, #2
 8001500:	e1f6      	b.n	80018f0 <HAL_DSI_ConfigVideoMode+0x404>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2201      	movs	r2, #1
 8001506:	741a      	strb	r2, [r3, #16]
  {
    assert_param(IS_DSI_LOOSELY_PACKED(VidCfg->LooselyPacked));
  }

  /* Select video mode by resetting CMDM and DSIM bits */
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f022 0201 	bic.w	r2, r2, #1
 8001516:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f022 0201 	bic.w	r2, r2, #1
 8001528:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the video mode transmission type */
  hdsi->Instance->VMCR &= ~DSI_VMCR_VMT;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f022 0203 	bic.w	r2, r2, #3
 800153a:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->Mode;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	68da      	ldr	r2, [r3, #12]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	430a      	orrs	r2, r1
 800154c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Configure the video packet size */
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001554:	687a      	ldr	r2, [r7, #4]
 8001556:	6812      	ldr	r2, [r2, #0]
 8001558:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800155c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001560:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	691a      	ldr	r2, [r3, #16]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	430a      	orrs	r2, r1
 8001572:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the chunks number to be transmitted through the DSI link */
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157a:	687a      	ldr	r2, [r7, #4]
 800157c:	6812      	ldr	r2, [r2, #0]
 800157e:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8001582:	f023 031f 	bic.w	r3, r3, #31
 8001586:	6413      	str	r3, [r2, #64]	; 0x40
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	695a      	ldr	r2, [r3, #20]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	430a      	orrs	r2, r1
 8001598:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the size of the null packet */
  hdsi->Instance->VNPCR &= ~DSI_VNPCR_NPSIZE;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015a0:	687a      	ldr	r2, [r7, #4]
 80015a2:	6812      	ldr	r2, [r2, #0]
 80015a4:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 80015a8:	f023 031f 	bic.w	r3, r3, #31
 80015ac:	6453      	str	r3, [r2, #68]	; 0x44
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	699a      	ldr	r2, [r3, #24]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	430a      	orrs	r2, r1
 80015be:	645a      	str	r2, [r3, #68]	; 0x44

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	68da      	ldr	r2, [r3, #12]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f022 0203 	bic.w	r2, r2, #3
 80015ce:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	68d9      	ldr	r1, [r3, #12]
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	430a      	orrs	r2, r1
 80015e0:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	695a      	ldr	r2, [r3, #20]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f022 0207 	bic.w	r2, r2, #7
 80015f0:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	6959      	ldr	r1, [r3, #20]
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	6a1b      	ldr	r3, [r3, #32]
 8001600:	431a      	orrs	r2, r3
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	69db      	ldr	r3, [r3, #28]
 8001606:	431a      	orrs	r2, r3
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	430a      	orrs	r2, r1
 800160e:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	691a      	ldr	r2, [r3, #16]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f022 020f 	bic.w	r2, r2, #15
 800161e:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= VidCfg->ColorCoding;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	6919      	ldr	r1, [r3, #16]
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	685a      	ldr	r2, [r3, #4]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	430a      	orrs	r2, r1
 8001630:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f022 020e 	bic.w	r2, r2, #14
 8001642:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	005a      	lsls	r2, r3, #1
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	430a      	orrs	r2, r1
 800165a:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Enable/disable the loosely packed variant to 18-bit configuration */
  if (VidCfg->ColorCoding == DSI_RGB666)
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	2b03      	cmp	r3, #3
 8001664:	d110      	bne.n	8001688 <HAL_DSI_ConfigVideoMode+0x19c>
  {
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	691a      	ldr	r2, [r3, #16]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001674:	611a      	str	r2, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	6919      	ldr	r1, [r3, #16]
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	689a      	ldr	r2, [r3, #8]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	430a      	orrs	r2, r1
 8001686:	611a      	str	r2, [r3, #16]
  }

  /* Set the Horizontal Synchronization Active (HSA) in lane byte clock cycles */
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800168e:	687a      	ldr	r2, [r7, #4]
 8001690:	6812      	ldr	r2, [r2, #0]
 8001692:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8001696:	f023 030f 	bic.w	r3, r3, #15
 800169a:	6493      	str	r3, [r2, #72]	; 0x48
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	6c99      	ldr	r1, [r3, #72]	; 0x48
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	430a      	orrs	r2, r1
 80016ac:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set the Horizontal Back Porch (HBP) in lane byte clock cycles */
  hdsi->Instance->VHBPCR &= ~DSI_VHBPCR_HBP;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016b4:	687a      	ldr	r2, [r7, #4]
 80016b6:	6812      	ldr	r2, [r2, #0]
 80016b8:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80016bc:	f023 030f 	bic.w	r3, r3, #15
 80016c0:	64d3      	str	r3, [r2, #76]	; 0x4c
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	430a      	orrs	r2, r1
 80016d2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the total line time (HLINE=HSA+HBP+HACT+HFP) in lane byte clock cycles */
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80016da:	687a      	ldr	r2, [r7, #4]
 80016dc:	6812      	ldr	r2, [r2, #0]
 80016de:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80016e2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80016e6:	6513      	str	r3, [r2, #80]	; 0x50
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	430a      	orrs	r2, r1
 80016f8:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Vertical Synchronization Active (VSA) */
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001700:	687a      	ldr	r2, [r7, #4]
 8001702:	6812      	ldr	r2, [r2, #0]
 8001704:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001708:	f023 0303 	bic.w	r3, r3, #3
 800170c:	6553      	str	r3, [r2, #84]	; 0x54
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	430a      	orrs	r2, r1
 800171e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Vertical Back Porch (VBP)*/
  hdsi->Instance->VVBPCR &= ~DSI_VVBPCR_VBP;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001726:	687a      	ldr	r2, [r7, #4]
 8001728:	6812      	ldr	r2, [r2, #0]
 800172a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800172e:	f023 0303 	bic.w	r3, r3, #3
 8001732:	6593      	str	r3, [r2, #88]	; 0x58
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	430a      	orrs	r2, r1
 8001744:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the Vertical Front Porch (VFP)*/
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800174c:	687a      	ldr	r2, [r7, #4]
 800174e:	6812      	ldr	r2, [r2, #0]
 8001750:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001754:	f023 0303 	bic.w	r3, r3, #3
 8001758:	65d3      	str	r3, [r2, #92]	; 0x5c
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	430a      	orrs	r2, r1
 800176a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set the Vertical Active period*/
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001772:	687a      	ldr	r2, [r7, #4]
 8001774:	6812      	ldr	r2, [r2, #0]
 8001776:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800177a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800177e:	6613      	str	r3, [r2, #96]	; 0x60
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	430a      	orrs	r2, r1
 8001790:	661a      	str	r2, [r3, #96]	; 0x60

  /* Configure the command transmission mode */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPCE;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80017a0:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	430a      	orrs	r2, r1
 80017b2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Low power largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_LPSIZE;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	699a      	ldr	r2, [r3, #24]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 80017c2:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	6999      	ldr	r1, [r3, #24]
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017ce:	041a      	lsls	r2, r3, #16
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	430a      	orrs	r2, r1
 80017d6:	619a      	str	r2, [r3, #24]

  /* Low power VACT largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_VLPSIZE;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	699a      	ldr	r2, [r3, #24]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80017e6:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	6999      	ldr	r1, [r3, #24]
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	430a      	orrs	r2, r1
 80017f8:	619a      	str	r2, [r3, #24]

  /* Enable LP transition in HFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHFPE;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001808:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	430a      	orrs	r2, r1
 800181a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in HBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHBPE;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800182a:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	430a      	orrs	r2, r1
 800183c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VACT period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVAE;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800184c:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	430a      	orrs	r2, r1
 800185e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800186e:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	430a      	orrs	r2, r1
 8001880:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVBPE;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001890:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	430a      	orrs	r2, r1
 80018a2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in vertical sync period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVSAE;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80018b2:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalSyncActiveEnable;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	430a      	orrs	r2, r1
 80018c4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the request for an acknowledge response at the end of a frame */
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80018d4:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	430a      	orrs	r2, r1
 80018e6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2200      	movs	r2, #0
 80018ec:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80018ee:	2300      	movs	r3, #0
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	370c      	adds	r7, #12
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr

080018fc <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b085      	sub	sp, #20
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
 8001904:	6039      	str	r1, [r7, #0]
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	7c1b      	ldrb	r3, [r3, #16]
 800190a:	2b01      	cmp	r3, #1
 800190c:	d101      	bne.n	8001912 <HAL_DSI_ConfigPhyTimer+0x16>
 800190e:	2302      	movs	r3, #2
 8001910:	e058      	b.n	80019c4 <HAL_DSI_ConfigPhyTimer+0xc8>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2201      	movs	r2, #1
 8001916:	741a      	strb	r2, [r3, #16]

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	4293      	cmp	r3, r2
 8001922:	bf38      	it	cc
 8001924:	4613      	movcc	r3, r2
 8001926:	60fb      	str	r3, [r7, #12]
     This timings are configured by the HS2LP_TIME and LP2HS_TIME in the DSI Host Clock Lane Timer Configuration Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f002 22fc 	and.w	r2, r2, #4227922944	; 0xfc00fc00
 8001938:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	041a      	lsls	r2, r3, #16
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	431a      	orrs	r2, r3
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	430a      	orrs	r2, r1
 8001952:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8001966:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	691a      	ldr	r2, [r3, #16]
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	68db      	ldr	r3, [r3, #12]
 800197a:	041b      	lsls	r3, r3, #16
 800197c:	431a      	orrs	r2, r3
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	061b      	lsls	r3, r3, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8001984:	431a      	orrs	r2, r3
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	430a      	orrs	r2, r1
 800198c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80019a0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	695b      	ldr	r3, [r3, #20]
 80019b0:	021a      	lsls	r2, r3, #8
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	430a      	orrs	r2, r1
 80019b8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2200      	movs	r2, #0
 80019c0:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80019c2:	2300      	movs	r3, #0
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3714      	adds	r7, #20
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr

080019d0 <HAL_DSI_Start>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b085      	sub	sp, #20
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	7c1b      	ldrb	r3, [r3, #16]
 80019dc:	2b01      	cmp	r3, #1
 80019de:	d101      	bne.n	80019e4 <HAL_DSI_Start+0x14>
 80019e0:	2302      	movs	r3, #2
 80019e2:	e02b      	b.n	8001a3c <HAL_DSI_Start+0x6c>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2201      	movs	r2, #1
 80019e8:	741a      	strb	r2, [r3, #16]

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 80019ea:	2300      	movs	r3, #0
 80019ec:	60fb      	str	r3, [r7, #12]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	685a      	ldr	r2, [r3, #4]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f042 0201 	orr.w	r2, r2, #1
 80019fc:	605a      	str	r2, [r3, #4]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f003 0301 	and.w	r3, r3, #1
 8001a08:	60fb      	str	r3, [r7, #12]
 8001a0a:	68fb      	ldr	r3, [r7, #12]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	60bb      	str	r3, [r7, #8]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f042 0208 	orr.w	r2, r2, #8
 8001a20:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8001a2c:	f003 0308 	and.w	r3, r3, #8
 8001a30:	60bb      	str	r3, [r7, #8]
 8001a32:	68bb      	ldr	r3, [r7, #8]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2200      	movs	r2, #0
 8001a38:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8001a3a:	2300      	movs	r3, #0
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3714      	adds	r7, #20
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr

08001a48 <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b088      	sub	sp, #32
 8001a4c:	af02      	add	r7, sp, #8
 8001a4e:	60f8      	str	r0, [r7, #12]
 8001a50:	60b9      	str	r1, [r7, #8]
 8001a52:	607a      	str	r2, [r7, #4]
 8001a54:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	7c1b      	ldrb	r3, [r3, #16]
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	d101      	bne.n	8001a62 <HAL_DSI_ShortWrite+0x1a>
 8001a5e:	2302      	movs	r3, #2
 8001a60:	e010      	b.n	8001a84 <HAL_DSI_ShortWrite+0x3c>
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	2201      	movs	r2, #1
 8001a66:	741a      	strb	r2, [r3, #16]

   status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 8001a68:	6a3b      	ldr	r3, [r7, #32]
 8001a6a:	9300      	str	r3, [sp, #0]
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	687a      	ldr	r2, [r7, #4]
 8001a70:	68b9      	ldr	r1, [r7, #8]
 8001a72:	68f8      	ldr	r0, [r7, #12]
 8001a74:	f7ff fb7d 	bl	8001172 <DSI_ShortWrite>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	75fb      	strb	r3, [r7, #23]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	2200      	movs	r2, #0
 8001a80:	741a      	strb	r2, [r3, #16]

  return status;
 8001a82:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	3718      	adds	r7, #24
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}

08001a8c <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b08c      	sub	sp, #48	; 0x30
 8001a90:	af02      	add	r7, sp, #8
 8001a92:	60f8      	str	r0, [r7, #12]
 8001a94:	60b9      	str	r1, [r7, #8]
 8001a96:	607a      	str	r2, [r7, #4]
 8001a98:	603b      	str	r3, [r7, #0]
  uint32_t uicounter, nbBytes, count;
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;
 8001a9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a9c:	61bb      	str	r3, [r7, #24]

  /* Process locked */
  __HAL_LOCK(hdsi);
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	7c1b      	ldrb	r3, [r3, #16]
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d101      	bne.n	8001aaa <HAL_DSI_LongWrite+0x1e>
 8001aa6:	2302      	movs	r3, #2
 8001aa8:	e084      	b.n	8001bb4 <HAL_DSI_LongWrite+0x128>
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	2201      	movs	r2, #1
 8001aae:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ab0:	f7fe fd82 	bl	80005b8 <HAL_GetTick>
 8001ab4:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8001ab6:	e00c      	b.n	8001ad2 <HAL_DSI_LongWrite+0x46>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8001ab8:	f7fe fd7e 	bl	80005b8 <HAL_GetTick>
 8001abc:	4602      	mov	r2, r0
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001ac6:	d904      	bls.n	8001ad2 <HAL_DSI_LongWrite+0x46>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	2200      	movs	r2, #0
 8001acc:	741a      	strb	r2, [r3, #16]

      return HAL_TIMEOUT;
 8001ace:	2303      	movs	r3, #3
 8001ad0:	e070      	b.n	8001bb4 <HAL_DSI_LongWrite+0x128>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ad8:	f003 0301 	and.w	r3, r3, #1
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d0eb      	beq.n	8001ab8 <HAL_DSI_LongWrite+0x2c>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
 8001ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ae2:	61fb      	str	r3, [r7, #28]
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	2b03      	cmp	r3, #3
 8001ae8:	bf28      	it	cs
 8001aea:	2303      	movcs	r3, #3
 8001aec:	613b      	str	r3, [r7, #16]

  for (count = 0U; count < nbBytes; count++)
 8001aee:	2300      	movs	r3, #0
 8001af0:	623b      	str	r3, [r7, #32]
 8001af2:	e00f      	b.n	8001b14 <HAL_DSI_LongWrite+0x88>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 8001af4:	69ba      	ldr	r2, [r7, #24]
 8001af6:	6a3b      	ldr	r3, [r7, #32]
 8001af8:	4413      	add	r3, r2
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	461a      	mov	r2, r3
 8001afe:	6a3b      	ldr	r3, [r7, #32]
 8001b00:	3301      	adds	r3, #1
 8001b02:	00db      	lsls	r3, r3, #3
 8001b04:	fa02 f303 	lsl.w	r3, r2, r3
 8001b08:	69fa      	ldr	r2, [r7, #28]
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	61fb      	str	r3, [r7, #28]
  for (count = 0U; count < nbBytes; count++)
 8001b0e:	6a3b      	ldr	r3, [r7, #32]
 8001b10:	3301      	adds	r3, #1
 8001b12:	623b      	str	r3, [r7, #32]
 8001b14:	6a3a      	ldr	r2, [r7, #32]
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d3eb      	bcc.n	8001af4 <HAL_DSI_LongWrite+0x68>
  }
  hdsi->Instance->GPDR = fifoword;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	69fa      	ldr	r2, [r7, #28]
 8001b22:	671a      	str	r2, [r3, #112]	; 0x70

  uicounter = NbParams - nbBytes;
 8001b24:	683a      	ldr	r2, [r7, #0]
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	627b      	str	r3, [r7, #36]	; 0x24
  pparams += nbBytes;
 8001b2c:	69ba      	ldr	r2, [r7, #24]
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	4413      	add	r3, r2
 8001b32:	61bb      	str	r3, [r7, #24]
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 8001b34:	e028      	b.n	8001b88 <HAL_DSI_LongWrite+0xfc>
  {
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8001b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b38:	2b04      	cmp	r3, #4
 8001b3a:	bf28      	it	cs
 8001b3c:	2304      	movcs	r3, #4
 8001b3e:	613b      	str	r3, [r7, #16]
    fifoword = 0U;
 8001b40:	2300      	movs	r3, #0
 8001b42:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 8001b44:	2300      	movs	r3, #0
 8001b46:	623b      	str	r3, [r7, #32]
 8001b48:	e00e      	b.n	8001b68 <HAL_DSI_LongWrite+0xdc>
    {
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8001b4a:	69ba      	ldr	r2, [r7, #24]
 8001b4c:	6a3b      	ldr	r3, [r7, #32]
 8001b4e:	4413      	add	r3, r2
 8001b50:	781b      	ldrb	r3, [r3, #0]
 8001b52:	461a      	mov	r2, r3
 8001b54:	6a3b      	ldr	r3, [r7, #32]
 8001b56:	00db      	lsls	r3, r3, #3
 8001b58:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5c:	69fa      	ldr	r2, [r7, #28]
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 8001b62:	6a3b      	ldr	r3, [r7, #32]
 8001b64:	3301      	adds	r3, #1
 8001b66:	623b      	str	r3, [r7, #32]
 8001b68:	6a3a      	ldr	r2, [r7, #32]
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d3ec      	bcc.n	8001b4a <HAL_DSI_LongWrite+0xbe>
    }
    hdsi->Instance->GPDR = fifoword;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	69fa      	ldr	r2, [r7, #28]
 8001b76:	671a      	str	r2, [r3, #112]	; 0x70

    uicounter -= nbBytes;
 8001b78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	627b      	str	r3, [r7, #36]	; 0x24
    pparams += nbBytes;
 8001b80:	69ba      	ldr	r2, [r7, #24]
 8001b82:	693b      	ldr	r3, [r7, #16]
 8001b84:	4413      	add	r3, r2
 8001b86:	61bb      	str	r3, [r7, #24]
  while (uicounter != 0U)
 8001b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d1d3      	bne.n	8001b36 <HAL_DSI_LongWrite+0xaa>
  }

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	6818      	ldr	r0, [r3, #0]
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	3301      	adds	r3, #1
  DSI_ConfigPacketHeader(hdsi->Instance,
 8001b96:	b2da      	uxtb	r2, r3
                         (((NbParams + 1U) & 0xFF00U) >> 8U));
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	3301      	adds	r3, #1
 8001b9c:	0a1b      	lsrs	r3, r3, #8
  DSI_ConfigPacketHeader(hdsi->Instance,
 8001b9e:	b2db      	uxtb	r3, r3
 8001ba0:	9300      	str	r3, [sp, #0]
 8001ba2:	4613      	mov	r3, r2
 8001ba4:	687a      	ldr	r2, [r7, #4]
 8001ba6:	68b9      	ldr	r1, [r7, #8]
 8001ba8:	f7ff faca 	bl	8001140 <DSI_ConfigPacketHeader>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	2200      	movs	r2, #0
 8001bb0:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8001bb2:	2300      	movs	r3, #0
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3728      	adds	r7, #40	; 0x28
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}

08001bbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b089      	sub	sp, #36	; 0x24
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
 8001bc4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	61fb      	str	r3, [r7, #28]
 8001bd6:	e177      	b.n	8001ec8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001bd8:	2201      	movs	r2, #1
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001be0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	697a      	ldr	r2, [r7, #20]
 8001be8:	4013      	ands	r3, r2
 8001bea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001bec:	693a      	ldr	r2, [r7, #16]
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	f040 8166 	bne.w	8001ec2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	2b02      	cmp	r3, #2
 8001bfc:	d003      	beq.n	8001c06 <HAL_GPIO_Init+0x4a>
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	2b12      	cmp	r3, #18
 8001c04:	d123      	bne.n	8001c4e <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	08da      	lsrs	r2, r3, #3
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	3208      	adds	r2, #8
 8001c0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	f003 0307 	and.w	r3, r3, #7
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	220f      	movs	r2, #15
 8001c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c22:	43db      	mvns	r3, r3
 8001c24:	69ba      	ldr	r2, [r7, #24]
 8001c26:	4013      	ands	r3, r2
 8001c28:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	691a      	ldr	r2, [r3, #16]
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	f003 0307 	and.w	r3, r3, #7
 8001c34:	009b      	lsls	r3, r3, #2
 8001c36:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3a:	69ba      	ldr	r2, [r7, #24]
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c40:	69fb      	ldr	r3, [r7, #28]
 8001c42:	08da      	lsrs	r2, r3, #3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	3208      	adds	r2, #8
 8001c48:	69b9      	ldr	r1, [r7, #24]
 8001c4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c54:	69fb      	ldr	r3, [r7, #28]
 8001c56:	005b      	lsls	r3, r3, #1
 8001c58:	2203      	movs	r2, #3
 8001c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5e:	43db      	mvns	r3, r3
 8001c60:	69ba      	ldr	r2, [r7, #24]
 8001c62:	4013      	ands	r3, r2
 8001c64:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	f003 0203 	and.w	r2, r3, #3
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	005b      	lsls	r3, r3, #1
 8001c72:	fa02 f303 	lsl.w	r3, r2, r3
 8001c76:	69ba      	ldr	r2, [r7, #24]
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	69ba      	ldr	r2, [r7, #24]
 8001c80:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d00b      	beq.n	8001ca2 <HAL_GPIO_Init+0xe6>
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	2b02      	cmp	r3, #2
 8001c90:	d007      	beq.n	8001ca2 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c96:	2b11      	cmp	r3, #17
 8001c98:	d003      	beq.n	8001ca2 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	2b12      	cmp	r3, #18
 8001ca0:	d130      	bne.n	8001d04 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ca8:	69fb      	ldr	r3, [r7, #28]
 8001caa:	005b      	lsls	r3, r3, #1
 8001cac:	2203      	movs	r2, #3
 8001cae:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb2:	43db      	mvns	r3, r3
 8001cb4:	69ba      	ldr	r2, [r7, #24]
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	68da      	ldr	r2, [r3, #12]
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	005b      	lsls	r3, r3, #1
 8001cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc6:	69ba      	ldr	r2, [r7, #24]
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	69ba      	ldr	r2, [r7, #24]
 8001cd0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cd8:	2201      	movs	r2, #1
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce0:	43db      	mvns	r3, r3
 8001ce2:	69ba      	ldr	r2, [r7, #24]
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	091b      	lsrs	r3, r3, #4
 8001cee:	f003 0201 	and.w	r2, r3, #1
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf8:	69ba      	ldr	r2, [r7, #24]
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	69ba      	ldr	r2, [r7, #24]
 8001d02:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	005b      	lsls	r3, r3, #1
 8001d0e:	2203      	movs	r2, #3
 8001d10:	fa02 f303 	lsl.w	r3, r2, r3
 8001d14:	43db      	mvns	r3, r3
 8001d16:	69ba      	ldr	r2, [r7, #24]
 8001d18:	4013      	ands	r3, r2
 8001d1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	689a      	ldr	r2, [r3, #8]
 8001d20:	69fb      	ldr	r3, [r7, #28]
 8001d22:	005b      	lsls	r3, r3, #1
 8001d24:	fa02 f303 	lsl.w	r3, r2, r3
 8001d28:	69ba      	ldr	r2, [r7, #24]
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	69ba      	ldr	r2, [r7, #24]
 8001d32:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	f000 80c0 	beq.w	8001ec2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d42:	2300      	movs	r3, #0
 8001d44:	60fb      	str	r3, [r7, #12]
 8001d46:	4b66      	ldr	r3, [pc, #408]	; (8001ee0 <HAL_GPIO_Init+0x324>)
 8001d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d4a:	4a65      	ldr	r2, [pc, #404]	; (8001ee0 <HAL_GPIO_Init+0x324>)
 8001d4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d50:	6453      	str	r3, [r2, #68]	; 0x44
 8001d52:	4b63      	ldr	r3, [pc, #396]	; (8001ee0 <HAL_GPIO_Init+0x324>)
 8001d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d5a:	60fb      	str	r3, [r7, #12]
 8001d5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d5e:	4a61      	ldr	r2, [pc, #388]	; (8001ee4 <HAL_GPIO_Init+0x328>)
 8001d60:	69fb      	ldr	r3, [r7, #28]
 8001d62:	089b      	lsrs	r3, r3, #2
 8001d64:	3302      	adds	r3, #2
 8001d66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d6c:	69fb      	ldr	r3, [r7, #28]
 8001d6e:	f003 0303 	and.w	r3, r3, #3
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	220f      	movs	r2, #15
 8001d76:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7a:	43db      	mvns	r3, r3
 8001d7c:	69ba      	ldr	r2, [r7, #24]
 8001d7e:	4013      	ands	r3, r2
 8001d80:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4a58      	ldr	r2, [pc, #352]	; (8001ee8 <HAL_GPIO_Init+0x32c>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d037      	beq.n	8001dfa <HAL_GPIO_Init+0x23e>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4a57      	ldr	r2, [pc, #348]	; (8001eec <HAL_GPIO_Init+0x330>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d031      	beq.n	8001df6 <HAL_GPIO_Init+0x23a>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4a56      	ldr	r2, [pc, #344]	; (8001ef0 <HAL_GPIO_Init+0x334>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d02b      	beq.n	8001df2 <HAL_GPIO_Init+0x236>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4a55      	ldr	r2, [pc, #340]	; (8001ef4 <HAL_GPIO_Init+0x338>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d025      	beq.n	8001dee <HAL_GPIO_Init+0x232>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4a54      	ldr	r2, [pc, #336]	; (8001ef8 <HAL_GPIO_Init+0x33c>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d01f      	beq.n	8001dea <HAL_GPIO_Init+0x22e>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4a53      	ldr	r2, [pc, #332]	; (8001efc <HAL_GPIO_Init+0x340>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d019      	beq.n	8001de6 <HAL_GPIO_Init+0x22a>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4a52      	ldr	r2, [pc, #328]	; (8001f00 <HAL_GPIO_Init+0x344>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d013      	beq.n	8001de2 <HAL_GPIO_Init+0x226>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	4a51      	ldr	r2, [pc, #324]	; (8001f04 <HAL_GPIO_Init+0x348>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d00d      	beq.n	8001dde <HAL_GPIO_Init+0x222>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	4a50      	ldr	r2, [pc, #320]	; (8001f08 <HAL_GPIO_Init+0x34c>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d007      	beq.n	8001dda <HAL_GPIO_Init+0x21e>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	4a4f      	ldr	r2, [pc, #316]	; (8001f0c <HAL_GPIO_Init+0x350>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d101      	bne.n	8001dd6 <HAL_GPIO_Init+0x21a>
 8001dd2:	2309      	movs	r3, #9
 8001dd4:	e012      	b.n	8001dfc <HAL_GPIO_Init+0x240>
 8001dd6:	230a      	movs	r3, #10
 8001dd8:	e010      	b.n	8001dfc <HAL_GPIO_Init+0x240>
 8001dda:	2308      	movs	r3, #8
 8001ddc:	e00e      	b.n	8001dfc <HAL_GPIO_Init+0x240>
 8001dde:	2307      	movs	r3, #7
 8001de0:	e00c      	b.n	8001dfc <HAL_GPIO_Init+0x240>
 8001de2:	2306      	movs	r3, #6
 8001de4:	e00a      	b.n	8001dfc <HAL_GPIO_Init+0x240>
 8001de6:	2305      	movs	r3, #5
 8001de8:	e008      	b.n	8001dfc <HAL_GPIO_Init+0x240>
 8001dea:	2304      	movs	r3, #4
 8001dec:	e006      	b.n	8001dfc <HAL_GPIO_Init+0x240>
 8001dee:	2303      	movs	r3, #3
 8001df0:	e004      	b.n	8001dfc <HAL_GPIO_Init+0x240>
 8001df2:	2302      	movs	r3, #2
 8001df4:	e002      	b.n	8001dfc <HAL_GPIO_Init+0x240>
 8001df6:	2301      	movs	r3, #1
 8001df8:	e000      	b.n	8001dfc <HAL_GPIO_Init+0x240>
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	69fa      	ldr	r2, [r7, #28]
 8001dfe:	f002 0203 	and.w	r2, r2, #3
 8001e02:	0092      	lsls	r2, r2, #2
 8001e04:	4093      	lsls	r3, r2
 8001e06:	69ba      	ldr	r2, [r7, #24]
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e0c:	4935      	ldr	r1, [pc, #212]	; (8001ee4 <HAL_GPIO_Init+0x328>)
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	089b      	lsrs	r3, r3, #2
 8001e12:	3302      	adds	r3, #2
 8001e14:	69ba      	ldr	r2, [r7, #24]
 8001e16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e1a:	4b3d      	ldr	r3, [pc, #244]	; (8001f10 <HAL_GPIO_Init+0x354>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	43db      	mvns	r3, r3
 8001e24:	69ba      	ldr	r2, [r7, #24]
 8001e26:	4013      	ands	r3, r2
 8001e28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d003      	beq.n	8001e3e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001e36:	69ba      	ldr	r2, [r7, #24]
 8001e38:	693b      	ldr	r3, [r7, #16]
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e3e:	4a34      	ldr	r2, [pc, #208]	; (8001f10 <HAL_GPIO_Init+0x354>)
 8001e40:	69bb      	ldr	r3, [r7, #24]
 8001e42:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001e44:	4b32      	ldr	r3, [pc, #200]	; (8001f10 <HAL_GPIO_Init+0x354>)
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	43db      	mvns	r3, r3
 8001e4e:	69ba      	ldr	r2, [r7, #24]
 8001e50:	4013      	ands	r3, r2
 8001e52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d003      	beq.n	8001e68 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001e60:	69ba      	ldr	r2, [r7, #24]
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	4313      	orrs	r3, r2
 8001e66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e68:	4a29      	ldr	r2, [pc, #164]	; (8001f10 <HAL_GPIO_Init+0x354>)
 8001e6a:	69bb      	ldr	r3, [r7, #24]
 8001e6c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e6e:	4b28      	ldr	r3, [pc, #160]	; (8001f10 <HAL_GPIO_Init+0x354>)
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	43db      	mvns	r3, r3
 8001e78:	69ba      	ldr	r2, [r7, #24]
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d003      	beq.n	8001e92 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001e8a:	69ba      	ldr	r2, [r7, #24]
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e92:	4a1f      	ldr	r2, [pc, #124]	; (8001f10 <HAL_GPIO_Init+0x354>)
 8001e94:	69bb      	ldr	r3, [r7, #24]
 8001e96:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e98:	4b1d      	ldr	r3, [pc, #116]	; (8001f10 <HAL_GPIO_Init+0x354>)
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	43db      	mvns	r3, r3
 8001ea2:	69ba      	ldr	r2, [r7, #24]
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d003      	beq.n	8001ebc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001eb4:	69ba      	ldr	r2, [r7, #24]
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ebc:	4a14      	ldr	r2, [pc, #80]	; (8001f10 <HAL_GPIO_Init+0x354>)
 8001ebe:	69bb      	ldr	r3, [r7, #24]
 8001ec0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	3301      	adds	r3, #1
 8001ec6:	61fb      	str	r3, [r7, #28]
 8001ec8:	69fb      	ldr	r3, [r7, #28]
 8001eca:	2b0f      	cmp	r3, #15
 8001ecc:	f67f ae84 	bls.w	8001bd8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ed0:	bf00      	nop
 8001ed2:	bf00      	nop
 8001ed4:	3724      	adds	r7, #36	; 0x24
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr
 8001ede:	bf00      	nop
 8001ee0:	40023800 	.word	0x40023800
 8001ee4:	40013800 	.word	0x40013800
 8001ee8:	40020000 	.word	0x40020000
 8001eec:	40020400 	.word	0x40020400
 8001ef0:	40020800 	.word	0x40020800
 8001ef4:	40020c00 	.word	0x40020c00
 8001ef8:	40021000 	.word	0x40021000
 8001efc:	40021400 	.word	0x40021400
 8001f00:	40021800 	.word	0x40021800
 8001f04:	40021c00 	.word	0x40021c00
 8001f08:	40022000 	.word	0x40022000
 8001f0c:	40022400 	.word	0x40022400
 8001f10:	40013c00 	.word	0x40013c00

08001f14 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b087      	sub	sp, #28
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
 8001f1c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8001f22:	2300      	movs	r3, #0
 8001f24:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8001f26:	2300      	movs	r3, #0
 8001f28:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	617b      	str	r3, [r7, #20]
 8001f2e:	e0d9      	b.n	80020e4 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f30:	2201      	movs	r2, #1
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	fa02 f303 	lsl.w	r3, r2, r3
 8001f38:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8001f3a:	683a      	ldr	r2, [r7, #0]
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	4013      	ands	r3, r2
 8001f40:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8001f42:	68fa      	ldr	r2, [r7, #12]
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	429a      	cmp	r2, r3
 8001f48:	f040 80c9 	bne.w	80020de <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8001f4c:	4a6b      	ldr	r2, [pc, #428]	; (80020fc <HAL_GPIO_DeInit+0x1e8>)
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	089b      	lsrs	r3, r3, #2
 8001f52:	3302      	adds	r3, #2
 8001f54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f58:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	f003 0303 	and.w	r3, r3, #3
 8001f60:	009b      	lsls	r3, r3, #2
 8001f62:	220f      	movs	r2, #15
 8001f64:	fa02 f303 	lsl.w	r3, r2, r3
 8001f68:	68ba      	ldr	r2, [r7, #8]
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	4a63      	ldr	r2, [pc, #396]	; (8002100 <HAL_GPIO_DeInit+0x1ec>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d037      	beq.n	8001fe6 <HAL_GPIO_DeInit+0xd2>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4a62      	ldr	r2, [pc, #392]	; (8002104 <HAL_GPIO_DeInit+0x1f0>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d031      	beq.n	8001fe2 <HAL_GPIO_DeInit+0xce>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4a61      	ldr	r2, [pc, #388]	; (8002108 <HAL_GPIO_DeInit+0x1f4>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d02b      	beq.n	8001fde <HAL_GPIO_DeInit+0xca>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4a60      	ldr	r2, [pc, #384]	; (800210c <HAL_GPIO_DeInit+0x1f8>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d025      	beq.n	8001fda <HAL_GPIO_DeInit+0xc6>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4a5f      	ldr	r2, [pc, #380]	; (8002110 <HAL_GPIO_DeInit+0x1fc>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d01f      	beq.n	8001fd6 <HAL_GPIO_DeInit+0xc2>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4a5e      	ldr	r2, [pc, #376]	; (8002114 <HAL_GPIO_DeInit+0x200>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d019      	beq.n	8001fd2 <HAL_GPIO_DeInit+0xbe>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4a5d      	ldr	r2, [pc, #372]	; (8002118 <HAL_GPIO_DeInit+0x204>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d013      	beq.n	8001fce <HAL_GPIO_DeInit+0xba>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4a5c      	ldr	r2, [pc, #368]	; (800211c <HAL_GPIO_DeInit+0x208>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d00d      	beq.n	8001fca <HAL_GPIO_DeInit+0xb6>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4a5b      	ldr	r2, [pc, #364]	; (8002120 <HAL_GPIO_DeInit+0x20c>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d007      	beq.n	8001fc6 <HAL_GPIO_DeInit+0xb2>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4a5a      	ldr	r2, [pc, #360]	; (8002124 <HAL_GPIO_DeInit+0x210>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d101      	bne.n	8001fc2 <HAL_GPIO_DeInit+0xae>
 8001fbe:	2309      	movs	r3, #9
 8001fc0:	e012      	b.n	8001fe8 <HAL_GPIO_DeInit+0xd4>
 8001fc2:	230a      	movs	r3, #10
 8001fc4:	e010      	b.n	8001fe8 <HAL_GPIO_DeInit+0xd4>
 8001fc6:	2308      	movs	r3, #8
 8001fc8:	e00e      	b.n	8001fe8 <HAL_GPIO_DeInit+0xd4>
 8001fca:	2307      	movs	r3, #7
 8001fcc:	e00c      	b.n	8001fe8 <HAL_GPIO_DeInit+0xd4>
 8001fce:	2306      	movs	r3, #6
 8001fd0:	e00a      	b.n	8001fe8 <HAL_GPIO_DeInit+0xd4>
 8001fd2:	2305      	movs	r3, #5
 8001fd4:	e008      	b.n	8001fe8 <HAL_GPIO_DeInit+0xd4>
 8001fd6:	2304      	movs	r3, #4
 8001fd8:	e006      	b.n	8001fe8 <HAL_GPIO_DeInit+0xd4>
 8001fda:	2303      	movs	r3, #3
 8001fdc:	e004      	b.n	8001fe8 <HAL_GPIO_DeInit+0xd4>
 8001fde:	2302      	movs	r3, #2
 8001fe0:	e002      	b.n	8001fe8 <HAL_GPIO_DeInit+0xd4>
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e000      	b.n	8001fe8 <HAL_GPIO_DeInit+0xd4>
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	697a      	ldr	r2, [r7, #20]
 8001fea:	f002 0203 	and.w	r2, r2, #3
 8001fee:	0092      	lsls	r2, r2, #2
 8001ff0:	4093      	lsls	r3, r2
 8001ff2:	68ba      	ldr	r2, [r7, #8]
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d132      	bne.n	800205e <HAL_GPIO_DeInit+0x14a>
      {
        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	f003 0303 	and.w	r3, r3, #3
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	220f      	movs	r2, #15
 8002002:	fa02 f303 	lsl.w	r3, r2, r3
 8002006:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002008:	4a3c      	ldr	r2, [pc, #240]	; (80020fc <HAL_GPIO_DeInit+0x1e8>)
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	089b      	lsrs	r3, r3, #2
 800200e:	3302      	adds	r3, #2
 8002010:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	43da      	mvns	r2, r3
 8002018:	4838      	ldr	r0, [pc, #224]	; (80020fc <HAL_GPIO_DeInit+0x1e8>)
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	089b      	lsrs	r3, r3, #2
 800201e:	400a      	ands	r2, r1
 8002020:	3302      	adds	r3, #2
 8002022:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002026:	4b40      	ldr	r3, [pc, #256]	; (8002128 <HAL_GPIO_DeInit+0x214>)
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	43db      	mvns	r3, r3
 800202e:	493e      	ldr	r1, [pc, #248]	; (8002128 <HAL_GPIO_DeInit+0x214>)
 8002030:	4013      	ands	r3, r2
 8002032:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002034:	4b3c      	ldr	r3, [pc, #240]	; (8002128 <HAL_GPIO_DeInit+0x214>)
 8002036:	685a      	ldr	r2, [r3, #4]
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	43db      	mvns	r3, r3
 800203c:	493a      	ldr	r1, [pc, #232]	; (8002128 <HAL_GPIO_DeInit+0x214>)
 800203e:	4013      	ands	r3, r2
 8002040:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002042:	4b39      	ldr	r3, [pc, #228]	; (8002128 <HAL_GPIO_DeInit+0x214>)
 8002044:	689a      	ldr	r2, [r3, #8]
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	43db      	mvns	r3, r3
 800204a:	4937      	ldr	r1, [pc, #220]	; (8002128 <HAL_GPIO_DeInit+0x214>)
 800204c:	4013      	ands	r3, r2
 800204e:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002050:	4b35      	ldr	r3, [pc, #212]	; (8002128 <HAL_GPIO_DeInit+0x214>)
 8002052:	68da      	ldr	r2, [r3, #12]
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	43db      	mvns	r3, r3
 8002058:	4933      	ldr	r1, [pc, #204]	; (8002128 <HAL_GPIO_DeInit+0x214>)
 800205a:	4013      	ands	r3, r2
 800205c:	60cb      	str	r3, [r1, #12]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	005b      	lsls	r3, r3, #1
 8002066:	2103      	movs	r1, #3
 8002068:	fa01 f303 	lsl.w	r3, r1, r3
 800206c:	43db      	mvns	r3, r3
 800206e:	401a      	ands	r2, r3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	08da      	lsrs	r2, r3, #3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	3208      	adds	r2, #8
 800207c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	f003 0307 	and.w	r3, r3, #7
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	220f      	movs	r2, #15
 800208a:	fa02 f303 	lsl.w	r3, r2, r3
 800208e:	43db      	mvns	r3, r3
 8002090:	697a      	ldr	r2, [r7, #20]
 8002092:	08d2      	lsrs	r2, r2, #3
 8002094:	4019      	ands	r1, r3
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	3208      	adds	r2, #8
 800209a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	689a      	ldr	r2, [r3, #8]
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	005b      	lsls	r3, r3, #1
 80020a6:	2103      	movs	r1, #3
 80020a8:	fa01 f303 	lsl.w	r3, r1, r3
 80020ac:	43db      	mvns	r3, r3
 80020ae:	401a      	ands	r2, r3
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	685a      	ldr	r2, [r3, #4]
 80020b8:	2101      	movs	r1, #1
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	fa01 f303 	lsl.w	r3, r1, r3
 80020c0:	43db      	mvns	r3, r3
 80020c2:	401a      	ands	r2, r3
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	68da      	ldr	r2, [r3, #12]
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	005b      	lsls	r3, r3, #1
 80020d0:	2103      	movs	r1, #3
 80020d2:	fa01 f303 	lsl.w	r3, r1, r3
 80020d6:	43db      	mvns	r3, r3
 80020d8:	401a      	ands	r2, r3
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	60da      	str	r2, [r3, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	3301      	adds	r3, #1
 80020e2:	617b      	str	r3, [r7, #20]
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	2b0f      	cmp	r3, #15
 80020e8:	f67f af22 	bls.w	8001f30 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80020ec:	bf00      	nop
 80020ee:	bf00      	nop
 80020f0:	371c      	adds	r7, #28
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr
 80020fa:	bf00      	nop
 80020fc:	40013800 	.word	0x40013800
 8002100:	40020000 	.word	0x40020000
 8002104:	40020400 	.word	0x40020400
 8002108:	40020800 	.word	0x40020800
 800210c:	40020c00 	.word	0x40020c00
 8002110:	40021000 	.word	0x40021000
 8002114:	40021400 	.word	0x40021400
 8002118:	40021800 	.word	0x40021800
 800211c:	40021c00 	.word	0x40021c00
 8002120:	40022000 	.word	0x40022000
 8002124:	40022400 	.word	0x40022400
 8002128:	40013c00 	.word	0x40013c00

0800212c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800212c:	b480      	push	{r7}
 800212e:	b083      	sub	sp, #12
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
 8002134:	460b      	mov	r3, r1
 8002136:	807b      	strh	r3, [r7, #2]
 8002138:	4613      	mov	r3, r2
 800213a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800213c:	787b      	ldrb	r3, [r7, #1]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d003      	beq.n	800214a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002142:	887a      	ldrh	r2, [r7, #2]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002148:	e003      	b.n	8002152 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800214a:	887b      	ldrh	r3, [r7, #2]
 800214c:	041a      	lsls	r2, r3, #16
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	619a      	str	r2, [r3, #24]
}
 8002152:	bf00      	nop
 8002154:	370c      	adds	r7, #12
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr

0800215e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800215e:	b480      	push	{r7}
 8002160:	b083      	sub	sp, #12
 8002162:	af00      	add	r7, sp, #0
 8002164:	6078      	str	r0, [r7, #4]
 8002166:	460b      	mov	r3, r1
 8002168:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	695a      	ldr	r2, [r3, #20]
 800216e:	887b      	ldrh	r3, [r7, #2]
 8002170:	401a      	ands	r2, r3
 8002172:	887b      	ldrh	r3, [r7, #2]
 8002174:	429a      	cmp	r2, r3
 8002176:	d104      	bne.n	8002182 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002178:	887b      	ldrh	r3, [r7, #2]
 800217a:	041a      	lsls	r2, r3, #16
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8002180:	e002      	b.n	8002188 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8002182:	887a      	ldrh	r2, [r7, #2]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	619a      	str	r2, [r3, #24]
}
 8002188:	bf00      	nop
 800218a:	370c      	adds	r7, #12
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr

08002194 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b084      	sub	sp, #16
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d101      	bne.n	80021a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e11b      	b.n	80023de <HAL_I2C_Init+0x24a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d106      	bne.n	80021c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2200      	movs	r2, #0
 80021b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f000 f94d 	bl	800245a <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2224      	movs	r2, #36	; 0x24
 80021c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f022 0201 	bic.w	r2, r2, #1
 80021d6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80021d8:	f001 fcd0 	bl	8003b7c <HAL_RCC_GetPCLK1Freq>
 80021dc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	4a81      	ldr	r2, [pc, #516]	; (80023e8 <HAL_I2C_Init+0x254>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d807      	bhi.n	80021f8 <HAL_I2C_Init+0x64>
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	4a80      	ldr	r2, [pc, #512]	; (80023ec <HAL_I2C_Init+0x258>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	bf94      	ite	ls
 80021f0:	2301      	movls	r3, #1
 80021f2:	2300      	movhi	r3, #0
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	e006      	b.n	8002206 <HAL_I2C_Init+0x72>
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	4a7d      	ldr	r2, [pc, #500]	; (80023f0 <HAL_I2C_Init+0x25c>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	bf94      	ite	ls
 8002200:	2301      	movls	r3, #1
 8002202:	2300      	movhi	r3, #0
 8002204:	b2db      	uxtb	r3, r3
 8002206:	2b00      	cmp	r3, #0
 8002208:	d001      	beq.n	800220e <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e0e7      	b.n	80023de <HAL_I2C_Init+0x24a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	4a78      	ldr	r2, [pc, #480]	; (80023f4 <HAL_I2C_Init+0x260>)
 8002212:	fba2 2303 	umull	r2, r3, r2, r3
 8002216:	0c9b      	lsrs	r3, r3, #18
 8002218:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	68ba      	ldr	r2, [r7, #8]
 800222a:	430a      	orrs	r2, r1
 800222c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	6a1b      	ldr	r3, [r3, #32]
 8002234:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	4a6a      	ldr	r2, [pc, #424]	; (80023e8 <HAL_I2C_Init+0x254>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d802      	bhi.n	8002248 <HAL_I2C_Init+0xb4>
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	3301      	adds	r3, #1
 8002246:	e009      	b.n	800225c <HAL_I2C_Init+0xc8>
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800224e:	fb02 f303 	mul.w	r3, r2, r3
 8002252:	4a69      	ldr	r2, [pc, #420]	; (80023f8 <HAL_I2C_Init+0x264>)
 8002254:	fba2 2303 	umull	r2, r3, r2, r3
 8002258:	099b      	lsrs	r3, r3, #6
 800225a:	3301      	adds	r3, #1
 800225c:	687a      	ldr	r2, [r7, #4]
 800225e:	6812      	ldr	r2, [r2, #0]
 8002260:	430b      	orrs	r3, r1
 8002262:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	69db      	ldr	r3, [r3, #28]
 800226a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800226e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	495c      	ldr	r1, [pc, #368]	; (80023e8 <HAL_I2C_Init+0x254>)
 8002278:	428b      	cmp	r3, r1
 800227a:	d819      	bhi.n	80022b0 <HAL_I2C_Init+0x11c>
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	1e59      	subs	r1, r3, #1
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	005b      	lsls	r3, r3, #1
 8002286:	fbb1 f3f3 	udiv	r3, r1, r3
 800228a:	1c59      	adds	r1, r3, #1
 800228c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002290:	400b      	ands	r3, r1
 8002292:	2b00      	cmp	r3, #0
 8002294:	d00a      	beq.n	80022ac <HAL_I2C_Init+0x118>
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	1e59      	subs	r1, r3, #1
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	005b      	lsls	r3, r3, #1
 80022a0:	fbb1 f3f3 	udiv	r3, r1, r3
 80022a4:	3301      	adds	r3, #1
 80022a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022aa:	e051      	b.n	8002350 <HAL_I2C_Init+0x1bc>
 80022ac:	2304      	movs	r3, #4
 80022ae:	e04f      	b.n	8002350 <HAL_I2C_Init+0x1bc>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d111      	bne.n	80022dc <HAL_I2C_Init+0x148>
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	1e58      	subs	r0, r3, #1
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6859      	ldr	r1, [r3, #4]
 80022c0:	460b      	mov	r3, r1
 80022c2:	005b      	lsls	r3, r3, #1
 80022c4:	440b      	add	r3, r1
 80022c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80022ca:	3301      	adds	r3, #1
 80022cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	bf0c      	ite	eq
 80022d4:	2301      	moveq	r3, #1
 80022d6:	2300      	movne	r3, #0
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	e012      	b.n	8002302 <HAL_I2C_Init+0x16e>
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	1e58      	subs	r0, r3, #1
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6859      	ldr	r1, [r3, #4]
 80022e4:	460b      	mov	r3, r1
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	440b      	add	r3, r1
 80022ea:	0099      	lsls	r1, r3, #2
 80022ec:	440b      	add	r3, r1
 80022ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80022f2:	3301      	adds	r3, #1
 80022f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	bf0c      	ite	eq
 80022fc:	2301      	moveq	r3, #1
 80022fe:	2300      	movne	r3, #0
 8002300:	b2db      	uxtb	r3, r3
 8002302:	2b00      	cmp	r3, #0
 8002304:	d001      	beq.n	800230a <HAL_I2C_Init+0x176>
 8002306:	2301      	movs	r3, #1
 8002308:	e022      	b.n	8002350 <HAL_I2C_Init+0x1bc>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d10e      	bne.n	8002330 <HAL_I2C_Init+0x19c>
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	1e58      	subs	r0, r3, #1
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6859      	ldr	r1, [r3, #4]
 800231a:	460b      	mov	r3, r1
 800231c:	005b      	lsls	r3, r3, #1
 800231e:	440b      	add	r3, r1
 8002320:	fbb0 f3f3 	udiv	r3, r0, r3
 8002324:	3301      	adds	r3, #1
 8002326:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800232a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800232e:	e00f      	b.n	8002350 <HAL_I2C_Init+0x1bc>
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	1e58      	subs	r0, r3, #1
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6859      	ldr	r1, [r3, #4]
 8002338:	460b      	mov	r3, r1
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	440b      	add	r3, r1
 800233e:	0099      	lsls	r1, r3, #2
 8002340:	440b      	add	r3, r1
 8002342:	fbb0 f3f3 	udiv	r3, r0, r3
 8002346:	3301      	adds	r3, #1
 8002348:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800234c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002350:	6879      	ldr	r1, [r7, #4]
 8002352:	6809      	ldr	r1, [r1, #0]
 8002354:	4313      	orrs	r3, r2
 8002356:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	69da      	ldr	r2, [r3, #28]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6a1b      	ldr	r3, [r3, #32]
 800236a:	431a      	orrs	r2, r3
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	430a      	orrs	r2, r1
 8002372:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800237e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	6911      	ldr	r1, [r2, #16]
 8002386:	687a      	ldr	r2, [r7, #4]
 8002388:	68d2      	ldr	r2, [r2, #12]
 800238a:	4311      	orrs	r1, r2
 800238c:	687a      	ldr	r2, [r7, #4]
 800238e:	6812      	ldr	r2, [r2, #0]
 8002390:	430b      	orrs	r3, r1
 8002392:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	68db      	ldr	r3, [r3, #12]
 800239a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	695a      	ldr	r2, [r3, #20]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	699b      	ldr	r3, [r3, #24]
 80023a6:	431a      	orrs	r2, r3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	430a      	orrs	r2, r1
 80023ae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f042 0201 	orr.w	r2, r2, #1
 80023be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2200      	movs	r2, #0
 80023c4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2220      	movs	r2, #32
 80023ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2200      	movs	r2, #0
 80023d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2200      	movs	r2, #0
 80023d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80023dc:	2300      	movs	r3, #0
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3710      	adds	r7, #16
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	000186a0 	.word	0x000186a0
 80023ec:	001e847f 	.word	0x001e847f
 80023f0:	003d08ff 	.word	0x003d08ff
 80023f4:	431bde83 	.word	0x431bde83
 80023f8:	10624dd3 	.word	0x10624dd3

080023fc <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b082      	sub	sp, #8
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d101      	bne.n	800240e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e021      	b.n	8002452 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2224      	movs	r2, #36	; 0x24
 8002412:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f022 0201 	bic.w	r2, r2, #1
 8002424:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8002426:	6878      	ldr	r0, [r7, #4]
 8002428:	f000 f821 	bl	800246e <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2200      	movs	r2, #0
 8002430:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2200      	movs	r2, #0
 8002436:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2200      	movs	r2, #0
 800243e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2200      	movs	r2, #0
 8002444:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2200      	movs	r2, #0
 800244c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002450:	2300      	movs	r3, #0
}
 8002452:	4618      	mov	r0, r3
 8002454:	3708      	adds	r7, #8
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}

0800245a <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800245a:	b480      	push	{r7}
 800245c:	b083      	sub	sp, #12
 800245e:	af00      	add	r7, sp, #0
 8002460:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8002462:	bf00      	nop
 8002464:	370c      	adds	r7, #12
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr

0800246e <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 800246e:	b480      	push	{r7}
 8002470:	b083      	sub	sp, #12
 8002472:	af00      	add	r7, sp, #0
 8002474:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8002476:	bf00      	nop
 8002478:	370c      	adds	r7, #12
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr
	...

08002484 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b088      	sub	sp, #32
 8002488:	af02      	add	r7, sp, #8
 800248a:	60f8      	str	r0, [r7, #12]
 800248c:	4608      	mov	r0, r1
 800248e:	4611      	mov	r1, r2
 8002490:	461a      	mov	r2, r3
 8002492:	4603      	mov	r3, r0
 8002494:	817b      	strh	r3, [r7, #10]
 8002496:	460b      	mov	r3, r1
 8002498:	813b      	strh	r3, [r7, #8]
 800249a:	4613      	mov	r3, r2
 800249c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800249e:	f7fe f88b 	bl	80005b8 <HAL_GetTick>
 80024a2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024aa:	b2db      	uxtb	r3, r3
 80024ac:	2b20      	cmp	r3, #32
 80024ae:	f040 80d9 	bne.w	8002664 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	9300      	str	r3, [sp, #0]
 80024b6:	2319      	movs	r3, #25
 80024b8:	2201      	movs	r2, #1
 80024ba:	496d      	ldr	r1, [pc, #436]	; (8002670 <HAL_I2C_Mem_Write+0x1ec>)
 80024bc:	68f8      	ldr	r0, [r7, #12]
 80024be:	f000 fc69 	bl	8002d94 <I2C_WaitOnFlagUntilTimeout>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d001      	beq.n	80024cc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80024c8:	2302      	movs	r3, #2
 80024ca:	e0cc      	b.n	8002666 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	d101      	bne.n	80024da <HAL_I2C_Mem_Write+0x56>
 80024d6:	2302      	movs	r3, #2
 80024d8:	e0c5      	b.n	8002666 <HAL_I2C_Mem_Write+0x1e2>
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	2201      	movs	r2, #1
 80024de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 0301 	and.w	r3, r3, #1
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d007      	beq.n	8002500 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f042 0201 	orr.w	r2, r2, #1
 80024fe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800250e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2221      	movs	r2, #33	; 0x21
 8002514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	2240      	movs	r2, #64	; 0x40
 800251c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	2200      	movs	r2, #0
 8002524:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	6a3a      	ldr	r2, [r7, #32]
 800252a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002530:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002536:	b29a      	uxth	r2, r3
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	4a4d      	ldr	r2, [pc, #308]	; (8002674 <HAL_I2C_Mem_Write+0x1f0>)
 8002540:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002542:	88f8      	ldrh	r0, [r7, #6]
 8002544:	893a      	ldrh	r2, [r7, #8]
 8002546:	8979      	ldrh	r1, [r7, #10]
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	9301      	str	r3, [sp, #4]
 800254c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800254e:	9300      	str	r3, [sp, #0]
 8002550:	4603      	mov	r3, r0
 8002552:	68f8      	ldr	r0, [r7, #12]
 8002554:	f000 fac4 	bl	8002ae0 <I2C_RequestMemoryWrite>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	d052      	beq.n	8002604 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e081      	b.n	8002666 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002562:	697a      	ldr	r2, [r7, #20]
 8002564:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002566:	68f8      	ldr	r0, [r7, #12]
 8002568:	f000 fcea 	bl	8002f40 <I2C_WaitOnTXEFlagUntilTimeout>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d00d      	beq.n	800258e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002576:	2b04      	cmp	r3, #4
 8002578:	d107      	bne.n	800258a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002588:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	e06b      	b.n	8002666 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002592:	781a      	ldrb	r2, [r3, #0]
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800259e:	1c5a      	adds	r2, r3, #1
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025a8:	3b01      	subs	r3, #1
 80025aa:	b29a      	uxth	r2, r3
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025b4:	b29b      	uxth	r3, r3
 80025b6:	3b01      	subs	r3, #1
 80025b8:	b29a      	uxth	r2, r3
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	695b      	ldr	r3, [r3, #20]
 80025c4:	f003 0304 	and.w	r3, r3, #4
 80025c8:	2b04      	cmp	r3, #4
 80025ca:	d11b      	bne.n	8002604 <HAL_I2C_Mem_Write+0x180>
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d017      	beq.n	8002604 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d8:	781a      	ldrb	r2, [r3, #0]
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e4:	1c5a      	adds	r2, r3, #1
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025ee:	3b01      	subs	r3, #1
 80025f0:	b29a      	uxth	r2, r3
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025fa:	b29b      	uxth	r3, r3
 80025fc:	3b01      	subs	r3, #1
 80025fe:	b29a      	uxth	r2, r3
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002608:	2b00      	cmp	r3, #0
 800260a:	d1aa      	bne.n	8002562 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800260c:	697a      	ldr	r2, [r7, #20]
 800260e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002610:	68f8      	ldr	r0, [r7, #12]
 8002612:	f000 fcd6 	bl	8002fc2 <I2C_WaitOnBTFFlagUntilTimeout>
 8002616:	4603      	mov	r3, r0
 8002618:	2b00      	cmp	r3, #0
 800261a:	d00d      	beq.n	8002638 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002620:	2b04      	cmp	r3, #4
 8002622:	d107      	bne.n	8002634 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002632:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	e016      	b.n	8002666 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002646:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	2220      	movs	r2, #32
 800264c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	2200      	movs	r2, #0
 8002654:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	2200      	movs	r2, #0
 800265c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002660:	2300      	movs	r3, #0
 8002662:	e000      	b.n	8002666 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002664:	2302      	movs	r3, #2
  }
}
 8002666:	4618      	mov	r0, r3
 8002668:	3718      	adds	r7, #24
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	00100002 	.word	0x00100002
 8002674:	ffff0000 	.word	0xffff0000

08002678 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b08c      	sub	sp, #48	; 0x30
 800267c:	af02      	add	r7, sp, #8
 800267e:	60f8      	str	r0, [r7, #12]
 8002680:	4608      	mov	r0, r1
 8002682:	4611      	mov	r1, r2
 8002684:	461a      	mov	r2, r3
 8002686:	4603      	mov	r3, r0
 8002688:	817b      	strh	r3, [r7, #10]
 800268a:	460b      	mov	r3, r1
 800268c:	813b      	strh	r3, [r7, #8]
 800268e:	4613      	mov	r3, r2
 8002690:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002692:	f7fd ff91 	bl	80005b8 <HAL_GetTick>
 8002696:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	2b20      	cmp	r3, #32
 80026a2:	f040 8208 	bne.w	8002ab6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80026a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a8:	9300      	str	r3, [sp, #0]
 80026aa:	2319      	movs	r3, #25
 80026ac:	2201      	movs	r2, #1
 80026ae:	497b      	ldr	r1, [pc, #492]	; (800289c <HAL_I2C_Mem_Read+0x224>)
 80026b0:	68f8      	ldr	r0, [r7, #12]
 80026b2:	f000 fb6f 	bl	8002d94 <I2C_WaitOnFlagUntilTimeout>
 80026b6:	4603      	mov	r3, r0
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d001      	beq.n	80026c0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80026bc:	2302      	movs	r3, #2
 80026be:	e1fb      	b.n	8002ab8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d101      	bne.n	80026ce <HAL_I2C_Mem_Read+0x56>
 80026ca:	2302      	movs	r3, #2
 80026cc:	e1f4      	b.n	8002ab8 <HAL_I2C_Mem_Read+0x440>
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2201      	movs	r2, #1
 80026d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 0301 	and.w	r3, r3, #1
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d007      	beq.n	80026f4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f042 0201 	orr.w	r2, r2, #1
 80026f2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002702:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2222      	movs	r2, #34	; 0x22
 8002708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	2240      	movs	r2, #64	; 0x40
 8002710:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	2200      	movs	r2, #0
 8002718:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800271e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002724:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800272a:	b29a      	uxth	r2, r3
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	4a5b      	ldr	r2, [pc, #364]	; (80028a0 <HAL_I2C_Mem_Read+0x228>)
 8002734:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002736:	88f8      	ldrh	r0, [r7, #6]
 8002738:	893a      	ldrh	r2, [r7, #8]
 800273a:	8979      	ldrh	r1, [r7, #10]
 800273c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273e:	9301      	str	r3, [sp, #4]
 8002740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002742:	9300      	str	r3, [sp, #0]
 8002744:	4603      	mov	r3, r0
 8002746:	68f8      	ldr	r0, [r7, #12]
 8002748:	f000 fa54 	bl	8002bf4 <I2C_RequestMemoryRead>
 800274c:	4603      	mov	r3, r0
 800274e:	2b00      	cmp	r3, #0
 8002750:	d001      	beq.n	8002756 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e1b0      	b.n	8002ab8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800275a:	2b00      	cmp	r3, #0
 800275c:	d113      	bne.n	8002786 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800275e:	2300      	movs	r3, #0
 8002760:	623b      	str	r3, [r7, #32]
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	695b      	ldr	r3, [r3, #20]
 8002768:	623b      	str	r3, [r7, #32]
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	699b      	ldr	r3, [r3, #24]
 8002770:	623b      	str	r3, [r7, #32]
 8002772:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002782:	601a      	str	r2, [r3, #0]
 8002784:	e184      	b.n	8002a90 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800278a:	2b01      	cmp	r3, #1
 800278c:	d11b      	bne.n	80027c6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800279c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800279e:	2300      	movs	r3, #0
 80027a0:	61fb      	str	r3, [r7, #28]
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	695b      	ldr	r3, [r3, #20]
 80027a8:	61fb      	str	r3, [r7, #28]
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	699b      	ldr	r3, [r3, #24]
 80027b0:	61fb      	str	r3, [r7, #28]
 80027b2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027c2:	601a      	str	r2, [r3, #0]
 80027c4:	e164      	b.n	8002a90 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027ca:	2b02      	cmp	r3, #2
 80027cc:	d11b      	bne.n	8002806 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027dc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80027ec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027ee:	2300      	movs	r3, #0
 80027f0:	61bb      	str	r3, [r7, #24]
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	695b      	ldr	r3, [r3, #20]
 80027f8:	61bb      	str	r3, [r7, #24]
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	699b      	ldr	r3, [r3, #24]
 8002800:	61bb      	str	r3, [r7, #24]
 8002802:	69bb      	ldr	r3, [r7, #24]
 8002804:	e144      	b.n	8002a90 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002806:	2300      	movs	r3, #0
 8002808:	617b      	str	r3, [r7, #20]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	695b      	ldr	r3, [r3, #20]
 8002810:	617b      	str	r3, [r7, #20]
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	699b      	ldr	r3, [r3, #24]
 8002818:	617b      	str	r3, [r7, #20]
 800281a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800281c:	e138      	b.n	8002a90 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002822:	2b03      	cmp	r3, #3
 8002824:	f200 80f1 	bhi.w	8002a0a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800282c:	2b01      	cmp	r3, #1
 800282e:	d123      	bne.n	8002878 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002830:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002832:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002834:	68f8      	ldr	r0, [r7, #12]
 8002836:	f000 fc05 	bl	8003044 <I2C_WaitOnRXNEFlagUntilTimeout>
 800283a:	4603      	mov	r3, r0
 800283c:	2b00      	cmp	r3, #0
 800283e:	d001      	beq.n	8002844 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	e139      	b.n	8002ab8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	691a      	ldr	r2, [r3, #16]
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800284e:	b2d2      	uxtb	r2, r2
 8002850:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002856:	1c5a      	adds	r2, r3, #1
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002860:	3b01      	subs	r3, #1
 8002862:	b29a      	uxth	r2, r3
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800286c:	b29b      	uxth	r3, r3
 800286e:	3b01      	subs	r3, #1
 8002870:	b29a      	uxth	r2, r3
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002876:	e10b      	b.n	8002a90 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800287c:	2b02      	cmp	r3, #2
 800287e:	d14e      	bne.n	800291e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002882:	9300      	str	r3, [sp, #0]
 8002884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002886:	2200      	movs	r2, #0
 8002888:	4906      	ldr	r1, [pc, #24]	; (80028a4 <HAL_I2C_Mem_Read+0x22c>)
 800288a:	68f8      	ldr	r0, [r7, #12]
 800288c:	f000 fa82 	bl	8002d94 <I2C_WaitOnFlagUntilTimeout>
 8002890:	4603      	mov	r3, r0
 8002892:	2b00      	cmp	r3, #0
 8002894:	d008      	beq.n	80028a8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e10e      	b.n	8002ab8 <HAL_I2C_Mem_Read+0x440>
 800289a:	bf00      	nop
 800289c:	00100002 	.word	0x00100002
 80028a0:	ffff0000 	.word	0xffff0000
 80028a4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	691a      	ldr	r2, [r3, #16]
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c2:	b2d2      	uxtb	r2, r2
 80028c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ca:	1c5a      	adds	r2, r3, #1
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028d4:	3b01      	subs	r3, #1
 80028d6:	b29a      	uxth	r2, r3
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028e0:	b29b      	uxth	r3, r3
 80028e2:	3b01      	subs	r3, #1
 80028e4:	b29a      	uxth	r2, r3
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	691a      	ldr	r2, [r3, #16]
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f4:	b2d2      	uxtb	r2, r2
 80028f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028fc:	1c5a      	adds	r2, r3, #1
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002906:	3b01      	subs	r3, #1
 8002908:	b29a      	uxth	r2, r3
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002912:	b29b      	uxth	r3, r3
 8002914:	3b01      	subs	r3, #1
 8002916:	b29a      	uxth	r2, r3
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800291c:	e0b8      	b.n	8002a90 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800291e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002920:	9300      	str	r3, [sp, #0]
 8002922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002924:	2200      	movs	r2, #0
 8002926:	4966      	ldr	r1, [pc, #408]	; (8002ac0 <HAL_I2C_Mem_Read+0x448>)
 8002928:	68f8      	ldr	r0, [r7, #12]
 800292a:	f000 fa33 	bl	8002d94 <I2C_WaitOnFlagUntilTimeout>
 800292e:	4603      	mov	r3, r0
 8002930:	2b00      	cmp	r3, #0
 8002932:	d001      	beq.n	8002938 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	e0bf      	b.n	8002ab8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002946:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	691a      	ldr	r2, [r3, #16]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002952:	b2d2      	uxtb	r2, r2
 8002954:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800295a:	1c5a      	adds	r2, r3, #1
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002964:	3b01      	subs	r3, #1
 8002966:	b29a      	uxth	r2, r3
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002970:	b29b      	uxth	r3, r3
 8002972:	3b01      	subs	r3, #1
 8002974:	b29a      	uxth	r2, r3
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800297a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297c:	9300      	str	r3, [sp, #0]
 800297e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002980:	2200      	movs	r2, #0
 8002982:	494f      	ldr	r1, [pc, #316]	; (8002ac0 <HAL_I2C_Mem_Read+0x448>)
 8002984:	68f8      	ldr	r0, [r7, #12]
 8002986:	f000 fa05 	bl	8002d94 <I2C_WaitOnFlagUntilTimeout>
 800298a:	4603      	mov	r3, r0
 800298c:	2b00      	cmp	r3, #0
 800298e:	d001      	beq.n	8002994 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	e091      	b.n	8002ab8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	691a      	ldr	r2, [r3, #16]
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ae:	b2d2      	uxtb	r2, r2
 80029b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b6:	1c5a      	adds	r2, r3, #1
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029c0:	3b01      	subs	r3, #1
 80029c2:	b29a      	uxth	r2, r3
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029cc:	b29b      	uxth	r3, r3
 80029ce:	3b01      	subs	r3, #1
 80029d0:	b29a      	uxth	r2, r3
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	691a      	ldr	r2, [r3, #16]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e0:	b2d2      	uxtb	r2, r2
 80029e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e8:	1c5a      	adds	r2, r3, #1
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029f2:	3b01      	subs	r3, #1
 80029f4:	b29a      	uxth	r2, r3
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029fe:	b29b      	uxth	r3, r3
 8002a00:	3b01      	subs	r3, #1
 8002a02:	b29a      	uxth	r2, r3
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002a08:	e042      	b.n	8002a90 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a0c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002a0e:	68f8      	ldr	r0, [r7, #12]
 8002a10:	f000 fb18 	bl	8003044 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d001      	beq.n	8002a1e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e04c      	b.n	8002ab8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	691a      	ldr	r2, [r3, #16]
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a28:	b2d2      	uxtb	r2, r2
 8002a2a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a30:	1c5a      	adds	r2, r3, #1
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a3a:	3b01      	subs	r3, #1
 8002a3c:	b29a      	uxth	r2, r3
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a46:	b29b      	uxth	r3, r3
 8002a48:	3b01      	subs	r3, #1
 8002a4a:	b29a      	uxth	r2, r3
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	695b      	ldr	r3, [r3, #20]
 8002a56:	f003 0304 	and.w	r3, r3, #4
 8002a5a:	2b04      	cmp	r3, #4
 8002a5c:	d118      	bne.n	8002a90 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	691a      	ldr	r2, [r3, #16]
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a68:	b2d2      	uxtb	r2, r2
 8002a6a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a70:	1c5a      	adds	r2, r3, #1
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a7a:	3b01      	subs	r3, #1
 8002a7c:	b29a      	uxth	r2, r3
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a86:	b29b      	uxth	r3, r3
 8002a88:	3b01      	subs	r3, #1
 8002a8a:	b29a      	uxth	r2, r3
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	f47f aec2 	bne.w	800281e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2220      	movs	r2, #32
 8002a9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	2200      	movs	r2, #0
 8002aae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	e000      	b.n	8002ab8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002ab6:	2302      	movs	r3, #2
  }
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	3728      	adds	r7, #40	; 0x28
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}
 8002ac0:	00010004 	.word	0x00010004

08002ac4 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b083      	sub	sp, #12
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ad2:	b2db      	uxtb	r3, r3
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	370c      	adds	r7, #12
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr

08002ae0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b088      	sub	sp, #32
 8002ae4:	af02      	add	r7, sp, #8
 8002ae6:	60f8      	str	r0, [r7, #12]
 8002ae8:	4608      	mov	r0, r1
 8002aea:	4611      	mov	r1, r2
 8002aec:	461a      	mov	r2, r3
 8002aee:	4603      	mov	r3, r0
 8002af0:	817b      	strh	r3, [r7, #10]
 8002af2:	460b      	mov	r3, r1
 8002af4:	813b      	strh	r3, [r7, #8]
 8002af6:	4613      	mov	r3, r2
 8002af8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b08:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b0c:	9300      	str	r3, [sp, #0]
 8002b0e:	6a3b      	ldr	r3, [r7, #32]
 8002b10:	2200      	movs	r2, #0
 8002b12:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002b16:	68f8      	ldr	r0, [r7, #12]
 8002b18:	f000 f93c 	bl	8002d94 <I2C_WaitOnFlagUntilTimeout>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d001      	beq.n	8002b26 <I2C_RequestMemoryWrite+0x46>
  {
    return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e05f      	b.n	8002be6 <I2C_RequestMemoryWrite+0x106>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002b26:	897b      	ldrh	r3, [r7, #10]
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	461a      	mov	r2, r3
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002b34:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b38:	6a3a      	ldr	r2, [r7, #32]
 8002b3a:	492d      	ldr	r1, [pc, #180]	; (8002bf0 <I2C_RequestMemoryWrite+0x110>)
 8002b3c:	68f8      	ldr	r0, [r7, #12]
 8002b3e:	f000 f980 	bl	8002e42 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b42:	4603      	mov	r3, r0
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d001      	beq.n	8002b4c <I2C_RequestMemoryWrite+0x6c>
  {
    return HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e04c      	b.n	8002be6 <I2C_RequestMemoryWrite+0x106>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	617b      	str	r3, [r7, #20]
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	695b      	ldr	r3, [r3, #20]
 8002b56:	617b      	str	r3, [r7, #20]
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	699b      	ldr	r3, [r3, #24]
 8002b5e:	617b      	str	r3, [r7, #20]
 8002b60:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b64:	6a39      	ldr	r1, [r7, #32]
 8002b66:	68f8      	ldr	r0, [r7, #12]
 8002b68:	f000 f9ea 	bl	8002f40 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d00d      	beq.n	8002b8e <I2C_RequestMemoryWrite+0xae>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b76:	2b04      	cmp	r3, #4
 8002b78:	d107      	bne.n	8002b8a <I2C_RequestMemoryWrite+0xaa>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b88:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e02b      	b.n	8002be6 <I2C_RequestMemoryWrite+0x106>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002b8e:	88fb      	ldrh	r3, [r7, #6]
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d105      	bne.n	8002ba0 <I2C_RequestMemoryWrite+0xc0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002b94:	893b      	ldrh	r3, [r7, #8]
 8002b96:	b2da      	uxtb	r2, r3
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	611a      	str	r2, [r3, #16]
 8002b9e:	e021      	b.n	8002be4 <I2C_RequestMemoryWrite+0x104>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002ba0:	893b      	ldrh	r3, [r7, #8]
 8002ba2:	0a1b      	lsrs	r3, r3, #8
 8002ba4:	b29b      	uxth	r3, r3
 8002ba6:	b2da      	uxtb	r2, r3
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bb0:	6a39      	ldr	r1, [r7, #32]
 8002bb2:	68f8      	ldr	r0, [r7, #12]
 8002bb4:	f000 f9c4 	bl	8002f40 <I2C_WaitOnTXEFlagUntilTimeout>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d00d      	beq.n	8002bda <I2C_RequestMemoryWrite+0xfa>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc2:	2b04      	cmp	r3, #4
 8002bc4:	d107      	bne.n	8002bd6 <I2C_RequestMemoryWrite+0xf6>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bd4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e005      	b.n	8002be6 <I2C_RequestMemoryWrite+0x106>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002bda:	893b      	ldrh	r3, [r7, #8]
 8002bdc:	b2da      	uxtb	r2, r3
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002be4:	2300      	movs	r3, #0
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3718      	adds	r7, #24
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	00010002 	.word	0x00010002

08002bf4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b088      	sub	sp, #32
 8002bf8:	af02      	add	r7, sp, #8
 8002bfa:	60f8      	str	r0, [r7, #12]
 8002bfc:	4608      	mov	r0, r1
 8002bfe:	4611      	mov	r1, r2
 8002c00:	461a      	mov	r2, r3
 8002c02:	4603      	mov	r3, r0
 8002c04:	817b      	strh	r3, [r7, #10]
 8002c06:	460b      	mov	r3, r1
 8002c08:	813b      	strh	r3, [r7, #8]
 8002c0a:	4613      	mov	r3, r2
 8002c0c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002c1c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c2c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c30:	9300      	str	r3, [sp, #0]
 8002c32:	6a3b      	ldr	r3, [r7, #32]
 8002c34:	2200      	movs	r2, #0
 8002c36:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002c3a:	68f8      	ldr	r0, [r7, #12]
 8002c3c:	f000 f8aa 	bl	8002d94 <I2C_WaitOnFlagUntilTimeout>
 8002c40:	4603      	mov	r3, r0
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d001      	beq.n	8002c4a <I2C_RequestMemoryRead+0x56>
  {
    return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e09e      	b.n	8002d88 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002c4a:	897b      	ldrh	r3, [r7, #10]
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	461a      	mov	r2, r3
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002c58:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5c:	6a3a      	ldr	r2, [r7, #32]
 8002c5e:	494c      	ldr	r1, [pc, #304]	; (8002d90 <I2C_RequestMemoryRead+0x19c>)
 8002c60:	68f8      	ldr	r0, [r7, #12]
 8002c62:	f000 f8ee 	bl	8002e42 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c66:	4603      	mov	r3, r0
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d001      	beq.n	8002c70 <I2C_RequestMemoryRead+0x7c>
  {
    return HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	e08b      	b.n	8002d88 <I2C_RequestMemoryRead+0x194>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c70:	2300      	movs	r3, #0
 8002c72:	617b      	str	r3, [r7, #20]
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	695b      	ldr	r3, [r3, #20]
 8002c7a:	617b      	str	r3, [r7, #20]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	699b      	ldr	r3, [r3, #24]
 8002c82:	617b      	str	r3, [r7, #20]
 8002c84:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c88:	6a39      	ldr	r1, [r7, #32]
 8002c8a:	68f8      	ldr	r0, [r7, #12]
 8002c8c:	f000 f958 	bl	8002f40 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c90:	4603      	mov	r3, r0
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d00d      	beq.n	8002cb2 <I2C_RequestMemoryRead+0xbe>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9a:	2b04      	cmp	r3, #4
 8002c9c:	d107      	bne.n	8002cae <I2C_RequestMemoryRead+0xba>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cac:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e06a      	b.n	8002d88 <I2C_RequestMemoryRead+0x194>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002cb2:	88fb      	ldrh	r3, [r7, #6]
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d105      	bne.n	8002cc4 <I2C_RequestMemoryRead+0xd0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002cb8:	893b      	ldrh	r3, [r7, #8]
 8002cba:	b2da      	uxtb	r2, r3
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	611a      	str	r2, [r3, #16]
 8002cc2:	e021      	b.n	8002d08 <I2C_RequestMemoryRead+0x114>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002cc4:	893b      	ldrh	r3, [r7, #8]
 8002cc6:	0a1b      	lsrs	r3, r3, #8
 8002cc8:	b29b      	uxth	r3, r3
 8002cca:	b2da      	uxtb	r2, r3
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cd4:	6a39      	ldr	r1, [r7, #32]
 8002cd6:	68f8      	ldr	r0, [r7, #12]
 8002cd8:	f000 f932 	bl	8002f40 <I2C_WaitOnTXEFlagUntilTimeout>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d00d      	beq.n	8002cfe <I2C_RequestMemoryRead+0x10a>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce6:	2b04      	cmp	r3, #4
 8002ce8:	d107      	bne.n	8002cfa <I2C_RequestMemoryRead+0x106>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cf8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e044      	b.n	8002d88 <I2C_RequestMemoryRead+0x194>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002cfe:	893b      	ldrh	r3, [r7, #8]
 8002d00:	b2da      	uxtb	r2, r3
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d0a:	6a39      	ldr	r1, [r7, #32]
 8002d0c:	68f8      	ldr	r0, [r7, #12]
 8002d0e:	f000 f917 	bl	8002f40 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d12:	4603      	mov	r3, r0
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d00d      	beq.n	8002d34 <I2C_RequestMemoryRead+0x140>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1c:	2b04      	cmp	r3, #4
 8002d1e:	d107      	bne.n	8002d30 <I2C_RequestMemoryRead+0x13c>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d2e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	e029      	b.n	8002d88 <I2C_RequestMemoryRead+0x194>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d42:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d46:	9300      	str	r3, [sp, #0]
 8002d48:	6a3b      	ldr	r3, [r7, #32]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002d50:	68f8      	ldr	r0, [r7, #12]
 8002d52:	f000 f81f 	bl	8002d94 <I2C_WaitOnFlagUntilTimeout>
 8002d56:	4603      	mov	r3, r0
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d001      	beq.n	8002d60 <I2C_RequestMemoryRead+0x16c>
  {
    return HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e013      	b.n	8002d88 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002d60:	897b      	ldrh	r3, [r7, #10]
 8002d62:	b2db      	uxtb	r3, r3
 8002d64:	f043 0301 	orr.w	r3, r3, #1
 8002d68:	b2da      	uxtb	r2, r3
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d72:	6a3a      	ldr	r2, [r7, #32]
 8002d74:	4906      	ldr	r1, [pc, #24]	; (8002d90 <I2C_RequestMemoryRead+0x19c>)
 8002d76:	68f8      	ldr	r0, [r7, #12]
 8002d78:	f000 f863 	bl	8002e42 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d001      	beq.n	8002d86 <I2C_RequestMemoryRead+0x192>
  {
    return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e000      	b.n	8002d88 <I2C_RequestMemoryRead+0x194>
  }

  return HAL_OK;
 8002d86:	2300      	movs	r3, #0
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	3718      	adds	r7, #24
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}
 8002d90:	00010002 	.word	0x00010002

08002d94 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b084      	sub	sp, #16
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	60f8      	str	r0, [r7, #12]
 8002d9c:	60b9      	str	r1, [r7, #8]
 8002d9e:	603b      	str	r3, [r7, #0]
 8002da0:	4613      	mov	r3, r2
 8002da2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002da4:	e025      	b.n	8002df2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dac:	d021      	beq.n	8002df2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dae:	f7fd fc03 	bl	80005b8 <HAL_GetTick>
 8002db2:	4602      	mov	r2, r0
 8002db4:	69bb      	ldr	r3, [r7, #24]
 8002db6:	1ad3      	subs	r3, r2, r3
 8002db8:	683a      	ldr	r2, [r7, #0]
 8002dba:	429a      	cmp	r2, r3
 8002dbc:	d302      	bcc.n	8002dc4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d116      	bne.n	8002df2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2220      	movs	r2, #32
 8002dce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dde:	f043 0220 	orr.w	r2, r3, #32
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2200      	movs	r2, #0
 8002dea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e023      	b.n	8002e3a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	0c1b      	lsrs	r3, r3, #16
 8002df6:	b2db      	uxtb	r3, r3
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d10d      	bne.n	8002e18 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	695b      	ldr	r3, [r3, #20]
 8002e02:	43da      	mvns	r2, r3
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	4013      	ands	r3, r2
 8002e08:	b29b      	uxth	r3, r3
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	bf0c      	ite	eq
 8002e0e:	2301      	moveq	r3, #1
 8002e10:	2300      	movne	r3, #0
 8002e12:	b2db      	uxtb	r3, r3
 8002e14:	461a      	mov	r2, r3
 8002e16:	e00c      	b.n	8002e32 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	699b      	ldr	r3, [r3, #24]
 8002e1e:	43da      	mvns	r2, r3
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	4013      	ands	r3, r2
 8002e24:	b29b      	uxth	r3, r3
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	bf0c      	ite	eq
 8002e2a:	2301      	moveq	r3, #1
 8002e2c:	2300      	movne	r3, #0
 8002e2e:	b2db      	uxtb	r3, r3
 8002e30:	461a      	mov	r2, r3
 8002e32:	79fb      	ldrb	r3, [r7, #7]
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d0b6      	beq.n	8002da6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e38:	2300      	movs	r3, #0
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3710      	adds	r7, #16
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}

08002e42 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002e42:	b580      	push	{r7, lr}
 8002e44:	b084      	sub	sp, #16
 8002e46:	af00      	add	r7, sp, #0
 8002e48:	60f8      	str	r0, [r7, #12]
 8002e4a:	60b9      	str	r1, [r7, #8]
 8002e4c:	607a      	str	r2, [r7, #4]
 8002e4e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e50:	e051      	b.n	8002ef6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	695b      	ldr	r3, [r3, #20]
 8002e58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e60:	d123      	bne.n	8002eaa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e70:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002e7a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2220      	movs	r2, #32
 8002e86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e96:	f043 0204 	orr.w	r2, r3, #4
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e046      	b.n	8002f38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eb0:	d021      	beq.n	8002ef6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002eb2:	f7fd fb81 	bl	80005b8 <HAL_GetTick>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	1ad3      	subs	r3, r2, r3
 8002ebc:	687a      	ldr	r2, [r7, #4]
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	d302      	bcc.n	8002ec8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d116      	bne.n	8002ef6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2220      	movs	r2, #32
 8002ed2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee2:	f043 0220 	orr.w	r2, r3, #32
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2200      	movs	r2, #0
 8002eee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e020      	b.n	8002f38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	0c1b      	lsrs	r3, r3, #16
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d10c      	bne.n	8002f1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	695b      	ldr	r3, [r3, #20]
 8002f06:	43da      	mvns	r2, r3
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	b29b      	uxth	r3, r3
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	bf14      	ite	ne
 8002f12:	2301      	movne	r3, #1
 8002f14:	2300      	moveq	r3, #0
 8002f16:	b2db      	uxtb	r3, r3
 8002f18:	e00b      	b.n	8002f32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	699b      	ldr	r3, [r3, #24]
 8002f20:	43da      	mvns	r2, r3
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	4013      	ands	r3, r2
 8002f26:	b29b      	uxth	r3, r3
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	bf14      	ite	ne
 8002f2c:	2301      	movne	r3, #1
 8002f2e:	2300      	moveq	r3, #0
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d18d      	bne.n	8002e52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002f36:	2300      	movs	r3, #0
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	3710      	adds	r7, #16
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}

08002f40 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b084      	sub	sp, #16
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	60f8      	str	r0, [r7, #12]
 8002f48:	60b9      	str	r1, [r7, #8]
 8002f4a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f4c:	e02d      	b.n	8002faa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f4e:	68f8      	ldr	r0, [r7, #12]
 8002f50:	f000 f8ce 	bl	80030f0 <I2C_IsAcknowledgeFailed>
 8002f54:	4603      	mov	r3, r0
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d001      	beq.n	8002f5e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e02d      	b.n	8002fba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f64:	d021      	beq.n	8002faa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f66:	f7fd fb27 	bl	80005b8 <HAL_GetTick>
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	1ad3      	subs	r3, r2, r3
 8002f70:	68ba      	ldr	r2, [r7, #8]
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d302      	bcc.n	8002f7c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d116      	bne.n	8002faa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2220      	movs	r2, #32
 8002f86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f96:	f043 0220 	orr.w	r2, r3, #32
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e007      	b.n	8002fba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	695b      	ldr	r3, [r3, #20]
 8002fb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fb4:	2b80      	cmp	r3, #128	; 0x80
 8002fb6:	d1ca      	bne.n	8002f4e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002fb8:	2300      	movs	r3, #0
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3710      	adds	r7, #16
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}

08002fc2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002fc2:	b580      	push	{r7, lr}
 8002fc4:	b084      	sub	sp, #16
 8002fc6:	af00      	add	r7, sp, #0
 8002fc8:	60f8      	str	r0, [r7, #12]
 8002fca:	60b9      	str	r1, [r7, #8]
 8002fcc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002fce:	e02d      	b.n	800302c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002fd0:	68f8      	ldr	r0, [r7, #12]
 8002fd2:	f000 f88d 	bl	80030f0 <I2C_IsAcknowledgeFailed>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d001      	beq.n	8002fe0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e02d      	b.n	800303c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fe6:	d021      	beq.n	800302c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fe8:	f7fd fae6 	bl	80005b8 <HAL_GetTick>
 8002fec:	4602      	mov	r2, r0
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	68ba      	ldr	r2, [r7, #8]
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d302      	bcc.n	8002ffe <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d116      	bne.n	800302c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2200      	movs	r2, #0
 8003002:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2220      	movs	r2, #32
 8003008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2200      	movs	r2, #0
 8003010:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003018:	f043 0220 	orr.w	r2, r3, #32
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2200      	movs	r2, #0
 8003024:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	e007      	b.n	800303c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	695b      	ldr	r3, [r3, #20]
 8003032:	f003 0304 	and.w	r3, r3, #4
 8003036:	2b04      	cmp	r3, #4
 8003038:	d1ca      	bne.n	8002fd0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800303a:	2300      	movs	r3, #0
}
 800303c:	4618      	mov	r0, r3
 800303e:	3710      	adds	r7, #16
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}

08003044 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b084      	sub	sp, #16
 8003048:	af00      	add	r7, sp, #0
 800304a:	60f8      	str	r0, [r7, #12]
 800304c:	60b9      	str	r1, [r7, #8]
 800304e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003050:	e042      	b.n	80030d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	695b      	ldr	r3, [r3, #20]
 8003058:	f003 0310 	and.w	r3, r3, #16
 800305c:	2b10      	cmp	r3, #16
 800305e:	d119      	bne.n	8003094 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f06f 0210 	mvn.w	r2, #16
 8003068:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2200      	movs	r2, #0
 800306e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2220      	movs	r2, #32
 8003074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2200      	movs	r2, #0
 800307c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2200      	movs	r2, #0
 800308c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	e029      	b.n	80030e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003094:	f7fd fa90 	bl	80005b8 <HAL_GetTick>
 8003098:	4602      	mov	r2, r0
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	1ad3      	subs	r3, r2, r3
 800309e:	68ba      	ldr	r2, [r7, #8]
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d302      	bcc.n	80030aa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d116      	bne.n	80030d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2200      	movs	r2, #0
 80030ae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2220      	movs	r2, #32
 80030b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2200      	movs	r2, #0
 80030bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c4:	f043 0220 	orr.w	r2, r3, #32
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2200      	movs	r2, #0
 80030d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	e007      	b.n	80030e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	695b      	ldr	r3, [r3, #20]
 80030de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030e2:	2b40      	cmp	r3, #64	; 0x40
 80030e4:	d1b5      	bne.n	8003052 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80030e6:	2300      	movs	r3, #0
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	3710      	adds	r7, #16
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}

080030f0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b083      	sub	sp, #12
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	695b      	ldr	r3, [r3, #20]
 80030fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003102:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003106:	d11b      	bne.n	8003140 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003110:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2200      	movs	r2, #0
 8003116:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2220      	movs	r2, #32
 800311c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2200      	movs	r2, #0
 8003124:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312c:	f043 0204 	orr.w	r2, r3, #4
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2200      	movs	r2, #0
 8003138:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	e000      	b.n	8003142 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003140:	2300      	movs	r3, #0
}
 8003142:	4618      	mov	r0, r3
 8003144:	370c      	adds	r7, #12
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr
	...

08003150 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b084      	sub	sp, #16
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d101      	bne.n	8003162 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e0bf      	b.n	80032e2 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8003168:	b2db      	uxtb	r3, r3
 800316a:	2b00      	cmp	r3, #0
 800316c:	d106      	bne.n	800317c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2200      	movs	r2, #0
 8003172:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	f004 fe7e 	bl	8007e78 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2202      	movs	r2, #2
 8003180:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	699a      	ldr	r2, [r3, #24]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8003192:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	6999      	ldr	r1, [r3, #24]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	685a      	ldr	r2, [r3, #4]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80031a8:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	691b      	ldr	r3, [r3, #16]
 80031ae:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	430a      	orrs	r2, r1
 80031b6:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	6899      	ldr	r1, [r3, #8]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	4b4a      	ldr	r3, [pc, #296]	; (80032ec <HAL_LTDC_Init+0x19c>)
 80031c4:	400b      	ands	r3, r1
 80031c6:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	695b      	ldr	r3, [r3, #20]
 80031cc:	041b      	lsls	r3, r3, #16
 80031ce:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	6899      	ldr	r1, [r3, #8]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	699a      	ldr	r2, [r3, #24]
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	431a      	orrs	r2, r3
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	430a      	orrs	r2, r1
 80031e4:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	68d9      	ldr	r1, [r3, #12]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	4b3e      	ldr	r3, [pc, #248]	; (80032ec <HAL_LTDC_Init+0x19c>)
 80031f2:	400b      	ands	r3, r1
 80031f4:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	69db      	ldr	r3, [r3, #28]
 80031fa:	041b      	lsls	r3, r3, #16
 80031fc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	68d9      	ldr	r1, [r3, #12]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6a1a      	ldr	r2, [r3, #32]
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	431a      	orrs	r2, r3
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	430a      	orrs	r2, r1
 8003212:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	6919      	ldr	r1, [r3, #16]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	4b33      	ldr	r3, [pc, #204]	; (80032ec <HAL_LTDC_Init+0x19c>)
 8003220:	400b      	ands	r3, r1
 8003222:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003228:	041b      	lsls	r3, r3, #16
 800322a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	6919      	ldr	r1, [r3, #16]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	431a      	orrs	r2, r3
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	430a      	orrs	r2, r1
 8003240:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	6959      	ldr	r1, [r3, #20]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	4b27      	ldr	r3, [pc, #156]	; (80032ec <HAL_LTDC_Init+0x19c>)
 800324e:	400b      	ands	r3, r1
 8003250:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003256:	041b      	lsls	r3, r3, #16
 8003258:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	6959      	ldr	r1, [r3, #20]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	431a      	orrs	r2, r3
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	430a      	orrs	r2, r1
 800326e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003276:	021b      	lsls	r3, r3, #8
 8003278:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003280:	041b      	lsls	r3, r3, #16
 8003282:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8003292:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800329a:	68ba      	ldr	r2, [r7, #8]
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	4313      	orrs	r3, r2
 80032a0:	687a      	ldr	r2, [r7, #4]
 80032a2:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80032a6:	431a      	orrs	r2, r3
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	430a      	orrs	r2, r1
 80032ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f042 0206 	orr.w	r2, r2, #6
 80032be:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	699a      	ldr	r2, [r3, #24]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f042 0201 	orr.w	r2, r2, #1
 80032ce:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2200      	movs	r2, #0
 80032d4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2201      	movs	r2, #1
 80032dc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80032e0:	2300      	movs	r3, #0
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3710      	adds	r7, #16
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}
 80032ea:	bf00      	nop
 80032ec:	f000f800 	.word	0xf000f800

080032f0 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80032f0:	b5b0      	push	{r4, r5, r7, lr}
 80032f2:	b084      	sub	sp, #16
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	60f8      	str	r0, [r7, #12]
 80032f8:	60b9      	str	r1, [r7, #8]
 80032fa:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8003302:	2b01      	cmp	r3, #1
 8003304:	d101      	bne.n	800330a <HAL_LTDC_ConfigLayer+0x1a>
 8003306:	2302      	movs	r3, #2
 8003308:	e02c      	b.n	8003364 <HAL_LTDC_ConfigLayer+0x74>
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2201      	movs	r2, #1
 800330e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2202      	movs	r2, #2
 8003316:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800331a:	68fa      	ldr	r2, [r7, #12]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2134      	movs	r1, #52	; 0x34
 8003320:	fb01 f303 	mul.w	r3, r1, r3
 8003324:	4413      	add	r3, r2
 8003326:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	4614      	mov	r4, r2
 800332e:	461d      	mov	r5, r3
 8003330:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003332:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003334:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003336:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003338:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800333a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800333c:	682b      	ldr	r3, [r5, #0]
 800333e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003340:	687a      	ldr	r2, [r7, #4]
 8003342:	68b9      	ldr	r1, [r7, #8]
 8003344:	68f8      	ldr	r0, [r7, #12]
 8003346:	f000 f811 	bl	800336c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	2201      	movs	r2, #1
 8003350:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2201      	movs	r2, #1
 8003356:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2200      	movs	r2, #0
 800335e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8003362:	2300      	movs	r3, #0
}
 8003364:	4618      	mov	r0, r3
 8003366:	3710      	adds	r7, #16
 8003368:	46bd      	mov	sp, r7
 800336a:	bdb0      	pop	{r4, r5, r7, pc}

0800336c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800336c:	b480      	push	{r7}
 800336e:	b089      	sub	sp, #36	; 0x24
 8003370:	af00      	add	r7, sp, #0
 8003372:	60f8      	str	r0, [r7, #12]
 8003374:	60b9      	str	r1, [r7, #8]
 8003376:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	685a      	ldr	r2, [r3, #4]
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	68db      	ldr	r3, [r3, #12]
 8003382:	0c1b      	lsrs	r3, r3, #16
 8003384:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003388:	4413      	add	r3, r2
 800338a:	041b      	lsls	r3, r3, #16
 800338c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	461a      	mov	r2, r3
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	01db      	lsls	r3, r3, #7
 8003398:	4413      	add	r3, r2
 800339a:	3384      	adds	r3, #132	; 0x84
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	68fa      	ldr	r2, [r7, #12]
 80033a0:	6812      	ldr	r2, [r2, #0]
 80033a2:	4611      	mov	r1, r2
 80033a4:	687a      	ldr	r2, [r7, #4]
 80033a6:	01d2      	lsls	r2, r2, #7
 80033a8:	440a      	add	r2, r1
 80033aa:	3284      	adds	r2, #132	; 0x84
 80033ac:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80033b0:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	0c1b      	lsrs	r3, r3, #16
 80033be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033c2:	4413      	add	r3, r2
 80033c4:	1c5a      	adds	r2, r3, #1
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4619      	mov	r1, r3
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	01db      	lsls	r3, r3, #7
 80033d0:	440b      	add	r3, r1
 80033d2:	3384      	adds	r3, #132	; 0x84
 80033d4:	4619      	mov	r1, r3
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	4313      	orrs	r3, r2
 80033da:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	68da      	ldr	r2, [r3, #12]
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	68db      	ldr	r3, [r3, #12]
 80033e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80033ea:	4413      	add	r3, r2
 80033ec:	041b      	lsls	r3, r3, #16
 80033ee:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	461a      	mov	r2, r3
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	01db      	lsls	r3, r3, #7
 80033fa:	4413      	add	r3, r2
 80033fc:	3384      	adds	r3, #132	; 0x84
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	68fa      	ldr	r2, [r7, #12]
 8003402:	6812      	ldr	r2, [r2, #0]
 8003404:	4611      	mov	r1, r2
 8003406:	687a      	ldr	r2, [r7, #4]
 8003408:	01d2      	lsls	r2, r2, #7
 800340a:	440a      	add	r2, r1
 800340c:	3284      	adds	r2, #132	; 0x84
 800340e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003412:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	689a      	ldr	r2, [r3, #8]
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	68db      	ldr	r3, [r3, #12]
 800341e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003422:	4413      	add	r3, r2
 8003424:	1c5a      	adds	r2, r3, #1
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4619      	mov	r1, r3
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	01db      	lsls	r3, r3, #7
 8003430:	440b      	add	r3, r1
 8003432:	3384      	adds	r3, #132	; 0x84
 8003434:	4619      	mov	r1, r3
 8003436:	69fb      	ldr	r3, [r7, #28]
 8003438:	4313      	orrs	r3, r2
 800343a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	461a      	mov	r2, r3
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	01db      	lsls	r3, r3, #7
 8003446:	4413      	add	r3, r2
 8003448:	3384      	adds	r3, #132	; 0x84
 800344a:	691b      	ldr	r3, [r3, #16]
 800344c:	68fa      	ldr	r2, [r7, #12]
 800344e:	6812      	ldr	r2, [r2, #0]
 8003450:	4611      	mov	r1, r2
 8003452:	687a      	ldr	r2, [r7, #4]
 8003454:	01d2      	lsls	r2, r2, #7
 8003456:	440a      	add	r2, r1
 8003458:	3284      	adds	r2, #132	; 0x84
 800345a:	f023 0307 	bic.w	r3, r3, #7
 800345e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	461a      	mov	r2, r3
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	01db      	lsls	r3, r3, #7
 800346a:	4413      	add	r3, r2
 800346c:	3384      	adds	r3, #132	; 0x84
 800346e:	461a      	mov	r2, r3
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	691b      	ldr	r3, [r3, #16]
 8003474:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800347c:	021b      	lsls	r3, r3, #8
 800347e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003486:	041b      	lsls	r3, r3, #16
 8003488:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	699b      	ldr	r3, [r3, #24]
 800348e:	061b      	lsls	r3, r3, #24
 8003490:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	461a      	mov	r2, r3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	01db      	lsls	r3, r3, #7
 800349c:	4413      	add	r3, r2
 800349e:	3384      	adds	r3, #132	; 0x84
 80034a0:	699b      	ldr	r3, [r3, #24]
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	461a      	mov	r2, r3
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	01db      	lsls	r3, r3, #7
 80034ac:	4413      	add	r3, r2
 80034ae:	3384      	adds	r3, #132	; 0x84
 80034b0:	461a      	mov	r2, r3
 80034b2:	2300      	movs	r3, #0
 80034b4:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80034bc:	461a      	mov	r2, r3
 80034be:	69fb      	ldr	r3, [r7, #28]
 80034c0:	431a      	orrs	r2, r3
 80034c2:	69bb      	ldr	r3, [r7, #24]
 80034c4:	431a      	orrs	r2, r3
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4619      	mov	r1, r3
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	01db      	lsls	r3, r3, #7
 80034d0:	440b      	add	r3, r1
 80034d2:	3384      	adds	r3, #132	; 0x84
 80034d4:	4619      	mov	r1, r3
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	4313      	orrs	r3, r2
 80034da:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	461a      	mov	r2, r3
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	01db      	lsls	r3, r3, #7
 80034e6:	4413      	add	r3, r2
 80034e8:	3384      	adds	r3, #132	; 0x84
 80034ea:	695b      	ldr	r3, [r3, #20]
 80034ec:	68fa      	ldr	r2, [r7, #12]
 80034ee:	6812      	ldr	r2, [r2, #0]
 80034f0:	4611      	mov	r1, r2
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	01d2      	lsls	r2, r2, #7
 80034f6:	440a      	add	r2, r1
 80034f8:	3284      	adds	r2, #132	; 0x84
 80034fa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80034fe:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	461a      	mov	r2, r3
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	01db      	lsls	r3, r3, #7
 800350a:	4413      	add	r3, r2
 800350c:	3384      	adds	r3, #132	; 0x84
 800350e:	461a      	mov	r2, r3
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	695b      	ldr	r3, [r3, #20]
 8003514:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	461a      	mov	r2, r3
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	01db      	lsls	r3, r3, #7
 8003520:	4413      	add	r3, r2
 8003522:	3384      	adds	r3, #132	; 0x84
 8003524:	69db      	ldr	r3, [r3, #28]
 8003526:	68fa      	ldr	r2, [r7, #12]
 8003528:	6812      	ldr	r2, [r2, #0]
 800352a:	4611      	mov	r1, r2
 800352c:	687a      	ldr	r2, [r7, #4]
 800352e:	01d2      	lsls	r2, r2, #7
 8003530:	440a      	add	r2, r1
 8003532:	3284      	adds	r2, #132	; 0x84
 8003534:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003538:	f023 0307 	bic.w	r3, r3, #7
 800353c:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	69da      	ldr	r2, [r3, #28]
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	6a1b      	ldr	r3, [r3, #32]
 8003546:	68f9      	ldr	r1, [r7, #12]
 8003548:	6809      	ldr	r1, [r1, #0]
 800354a:	4608      	mov	r0, r1
 800354c:	6879      	ldr	r1, [r7, #4]
 800354e:	01c9      	lsls	r1, r1, #7
 8003550:	4401      	add	r1, r0
 8003552:	3184      	adds	r1, #132	; 0x84
 8003554:	4313      	orrs	r3, r2
 8003556:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	461a      	mov	r2, r3
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	01db      	lsls	r3, r3, #7
 8003562:	4413      	add	r3, r2
 8003564:	3384      	adds	r3, #132	; 0x84
 8003566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	461a      	mov	r2, r3
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	01db      	lsls	r3, r3, #7
 8003572:	4413      	add	r3, r2
 8003574:	3384      	adds	r3, #132	; 0x84
 8003576:	461a      	mov	r2, r3
 8003578:	2300      	movs	r3, #0
 800357a:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	461a      	mov	r2, r3
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	01db      	lsls	r3, r3, #7
 8003586:	4413      	add	r3, r2
 8003588:	3384      	adds	r3, #132	; 0x84
 800358a:	461a      	mov	r2, r3
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003590:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	691b      	ldr	r3, [r3, #16]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d102      	bne.n	80035a0 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 800359a:	2304      	movs	r3, #4
 800359c:	61fb      	str	r3, [r7, #28]
 800359e:	e01b      	b.n	80035d8 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	691b      	ldr	r3, [r3, #16]
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d102      	bne.n	80035ae <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 80035a8:	2303      	movs	r3, #3
 80035aa:	61fb      	str	r3, [r7, #28]
 80035ac:	e014      	b.n	80035d8 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	691b      	ldr	r3, [r3, #16]
 80035b2:	2b04      	cmp	r3, #4
 80035b4:	d00b      	beq.n	80035ce <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80035ba:	2b02      	cmp	r3, #2
 80035bc:	d007      	beq.n	80035ce <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80035c2:	2b03      	cmp	r3, #3
 80035c4:	d003      	beq.n	80035ce <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80035ca:	2b07      	cmp	r3, #7
 80035cc:	d102      	bne.n	80035d4 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80035ce:	2302      	movs	r3, #2
 80035d0:	61fb      	str	r3, [r7, #28]
 80035d2:	e001      	b.n	80035d8 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80035d4:	2301      	movs	r3, #1
 80035d6:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	461a      	mov	r2, r3
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	01db      	lsls	r3, r3, #7
 80035e2:	4413      	add	r3, r2
 80035e4:	3384      	adds	r3, #132	; 0x84
 80035e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035e8:	68fa      	ldr	r2, [r7, #12]
 80035ea:	6812      	ldr	r2, [r2, #0]
 80035ec:	4611      	mov	r1, r2
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	01d2      	lsls	r2, r2, #7
 80035f2:	440a      	add	r2, r1
 80035f4:	3284      	adds	r2, #132	; 0x84
 80035f6:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80035fa:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003600:	69fa      	ldr	r2, [r7, #28]
 8003602:	fb02 f303 	mul.w	r3, r2, r3
 8003606:	041a      	lsls	r2, r3, #16
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	6859      	ldr	r1, [r3, #4]
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	1acb      	subs	r3, r1, r3
 8003612:	69f9      	ldr	r1, [r7, #28]
 8003614:	fb01 f303 	mul.w	r3, r1, r3
 8003618:	3303      	adds	r3, #3
 800361a:	68f9      	ldr	r1, [r7, #12]
 800361c:	6809      	ldr	r1, [r1, #0]
 800361e:	4608      	mov	r0, r1
 8003620:	6879      	ldr	r1, [r7, #4]
 8003622:	01c9      	lsls	r1, r1, #7
 8003624:	4401      	add	r1, r0
 8003626:	3184      	adds	r1, #132	; 0x84
 8003628:	4313      	orrs	r3, r2
 800362a:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	461a      	mov	r2, r3
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	01db      	lsls	r3, r3, #7
 8003636:	4413      	add	r3, r2
 8003638:	3384      	adds	r3, #132	; 0x84
 800363a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800363c:	68fa      	ldr	r2, [r7, #12]
 800363e:	6812      	ldr	r2, [r2, #0]
 8003640:	4611      	mov	r1, r2
 8003642:	687a      	ldr	r2, [r7, #4]
 8003644:	01d2      	lsls	r2, r2, #7
 8003646:	440a      	add	r2, r1
 8003648:	3284      	adds	r2, #132	; 0x84
 800364a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800364e:	f023 0307 	bic.w	r3, r3, #7
 8003652:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	461a      	mov	r2, r3
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	01db      	lsls	r3, r3, #7
 800365e:	4413      	add	r3, r2
 8003660:	3384      	adds	r3, #132	; 0x84
 8003662:	461a      	mov	r2, r3
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003668:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	461a      	mov	r2, r3
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	01db      	lsls	r3, r3, #7
 8003674:	4413      	add	r3, r2
 8003676:	3384      	adds	r3, #132	; 0x84
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	68fa      	ldr	r2, [r7, #12]
 800367c:	6812      	ldr	r2, [r2, #0]
 800367e:	4611      	mov	r1, r2
 8003680:	687a      	ldr	r2, [r7, #4]
 8003682:	01d2      	lsls	r2, r2, #7
 8003684:	440a      	add	r2, r1
 8003686:	3284      	adds	r2, #132	; 0x84
 8003688:	f043 0301 	orr.w	r3, r3, #1
 800368c:	6013      	str	r3, [r2, #0]
}
 800368e:	bf00      	nop
 8003690:	3724      	adds	r7, #36	; 0x24
 8003692:	46bd      	mov	sp, r7
 8003694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003698:	4770      	bx	lr

0800369a <HAL_LTDCEx_StructInitFromVideoConfig>:
  * @note   The implementation of this function is taking into account the LTDC
  *         polarities inversion as described in the current LTDC specification
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDCEx_StructInitFromVideoConfig(LTDC_HandleTypeDef *hltdc, DSI_VidCfgTypeDef *VidCfg)
{
 800369a:	b480      	push	{r7}
 800369c:	b083      	sub	sp, #12
 800369e:	af00      	add	r7, sp, #0
 80036a0:	6078      	str	r0, [r7, #4]
 80036a2:	6039      	str	r1, [r7, #0]

  /* The following polarity is inverted:
                     LTDC_DEPOLARITY_AL <-> LTDC_DEPOLARITY_AH */

  /* Note 1 : Code in line w/ Current LTDC specification */
  hltdc->Init.DEPolarity = (VidCfg->DEPolarity == DSI_DATA_ENABLE_ACTIVE_HIGH) ? LTDC_DEPOLARITY_AL : LTDC_DEPOLARITY_AH;
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d101      	bne.n	80036b0 <HAL_LTDCEx_StructInitFromVideoConfig+0x16>
 80036ac:	2200      	movs	r2, #0
 80036ae:	e001      	b.n	80036b4 <HAL_LTDCEx_StructInitFromVideoConfig+0x1a>
 80036b0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	60da      	str	r2, [r3, #12]
  hltdc->Init.VSPolarity = (VidCfg->VSPolarity == DSI_VSYNC_ACTIVE_HIGH) ? LTDC_VSPOLARITY_AH : LTDC_VSPOLARITY_AL;
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	6a1b      	ldr	r3, [r3, #32]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d102      	bne.n	80036c6 <HAL_LTDCEx_StructInitFromVideoConfig+0x2c>
 80036c0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80036c4:	e000      	b.n	80036c8 <HAL_LTDCEx_StructInitFromVideoConfig+0x2e>
 80036c6:	2200      	movs	r2, #0
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	609a      	str	r2, [r3, #8]
  hltdc->Init.HSPolarity = (VidCfg->HSPolarity == DSI_HSYNC_ACTIVE_HIGH) ? LTDC_HSPOLARITY_AH : LTDC_HSPOLARITY_AL;
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	69db      	ldr	r3, [r3, #28]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d102      	bne.n	80036da <HAL_LTDCEx_StructInitFromVideoConfig+0x40>
 80036d4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80036d8:	e000      	b.n	80036dc <HAL_LTDCEx_StructInitFromVideoConfig+0x42>
 80036da:	2200      	movs	r2, #0
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	605a      	str	r2, [r3, #4]
  /* hltdc->Init.DEPolarity = VidCfg->DEPolarity << 29;
     hltdc->Init.VSPolarity = VidCfg->VSPolarity << 29;
     hltdc->Init.HSPolarity = VidCfg->HSPolarity << 29; */

  /* Retrieve vertical timing parameters from DSI */
  hltdc->Init.VerticalSync       = VidCfg->VerticalSyncActive - 1U;
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036e4:	1e5a      	subs	r2, r3, #1
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	619a      	str	r2, [r3, #24]
  hltdc->Init.AccumulatedVBP     = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch - 1U;
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036f2:	4413      	add	r3, r2
 80036f4:	1e5a      	subs	r2, r3, #1
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	621a      	str	r2, [r3, #32]
  hltdc->Init.AccumulatedActiveH = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + VidCfg->VerticalActive - 1U;
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003702:	441a      	add	r2, r3
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003708:	4413      	add	r3, r2
 800370a:	1e5a      	subs	r2, r3, #1
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc->Init.TotalHeigh         = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + VidCfg->VerticalActive + VidCfg->VerticalFrontPorch - 1U;
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003718:	441a      	add	r2, r3
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371e:	441a      	add	r2, r3
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003724:	4413      	add	r3, r2
 8003726:	1e5a      	subs	r2, r3, #1
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800372c:	2300      	movs	r3, #0
}
 800372e:	4618      	mov	r0, r3
 8003730:	370c      	adds	r7, #12
 8003732:	46bd      	mov	sp, r7
 8003734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003738:	4770      	bx	lr
	...

0800373c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b082      	sub	sp, #8
 8003740:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003742:	2300      	movs	r3, #0
 8003744:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003746:	2300      	movs	r3, #0
 8003748:	603b      	str	r3, [r7, #0]
 800374a:	4b20      	ldr	r3, [pc, #128]	; (80037cc <HAL_PWREx_EnableOverDrive+0x90>)
 800374c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374e:	4a1f      	ldr	r2, [pc, #124]	; (80037cc <HAL_PWREx_EnableOverDrive+0x90>)
 8003750:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003754:	6413      	str	r3, [r2, #64]	; 0x40
 8003756:	4b1d      	ldr	r3, [pc, #116]	; (80037cc <HAL_PWREx_EnableOverDrive+0x90>)
 8003758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800375e:	603b      	str	r3, [r7, #0]
 8003760:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003762:	4b1b      	ldr	r3, [pc, #108]	; (80037d0 <HAL_PWREx_EnableOverDrive+0x94>)
 8003764:	2201      	movs	r2, #1
 8003766:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003768:	f7fc ff26 	bl	80005b8 <HAL_GetTick>
 800376c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800376e:	e009      	b.n	8003784 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003770:	f7fc ff22 	bl	80005b8 <HAL_GetTick>
 8003774:	4602      	mov	r2, r0
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	1ad3      	subs	r3, r2, r3
 800377a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800377e:	d901      	bls.n	8003784 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003780:	2303      	movs	r3, #3
 8003782:	e01f      	b.n	80037c4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003784:	4b13      	ldr	r3, [pc, #76]	; (80037d4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800378c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003790:	d1ee      	bne.n	8003770 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003792:	4b11      	ldr	r3, [pc, #68]	; (80037d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003794:	2201      	movs	r2, #1
 8003796:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003798:	f7fc ff0e 	bl	80005b8 <HAL_GetTick>
 800379c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800379e:	e009      	b.n	80037b4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80037a0:	f7fc ff0a 	bl	80005b8 <HAL_GetTick>
 80037a4:	4602      	mov	r2, r0
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	1ad3      	subs	r3, r2, r3
 80037aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80037ae:	d901      	bls.n	80037b4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80037b0:	2303      	movs	r3, #3
 80037b2:	e007      	b.n	80037c4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80037b4:	4b07      	ldr	r3, [pc, #28]	; (80037d4 <HAL_PWREx_EnableOverDrive+0x98>)
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80037c0:	d1ee      	bne.n	80037a0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80037c2:	2300      	movs	r3, #0
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	3708      	adds	r7, #8
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}
 80037cc:	40023800 	.word	0x40023800
 80037d0:	420e0040 	.word	0x420e0040
 80037d4:	40007000 	.word	0x40007000
 80037d8:	420e0044 	.word	0x420e0044

080037dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b084      	sub	sp, #16
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
 80037e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d101      	bne.n	80037f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	e0ca      	b.n	8003986 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80037f0:	4b67      	ldr	r3, [pc, #412]	; (8003990 <HAL_RCC_ClockConfig+0x1b4>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 030f 	and.w	r3, r3, #15
 80037f8:	683a      	ldr	r2, [r7, #0]
 80037fa:	429a      	cmp	r2, r3
 80037fc:	d90c      	bls.n	8003818 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037fe:	4b64      	ldr	r3, [pc, #400]	; (8003990 <HAL_RCC_ClockConfig+0x1b4>)
 8003800:	683a      	ldr	r2, [r7, #0]
 8003802:	b2d2      	uxtb	r2, r2
 8003804:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003806:	4b62      	ldr	r3, [pc, #392]	; (8003990 <HAL_RCC_ClockConfig+0x1b4>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 030f 	and.w	r3, r3, #15
 800380e:	683a      	ldr	r2, [r7, #0]
 8003810:	429a      	cmp	r2, r3
 8003812:	d001      	beq.n	8003818 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	e0b6      	b.n	8003986 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 0302 	and.w	r3, r3, #2
 8003820:	2b00      	cmp	r3, #0
 8003822:	d020      	beq.n	8003866 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f003 0304 	and.w	r3, r3, #4
 800382c:	2b00      	cmp	r3, #0
 800382e:	d005      	beq.n	800383c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003830:	4b58      	ldr	r3, [pc, #352]	; (8003994 <HAL_RCC_ClockConfig+0x1b8>)
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	4a57      	ldr	r2, [pc, #348]	; (8003994 <HAL_RCC_ClockConfig+0x1b8>)
 8003836:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800383a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f003 0308 	and.w	r3, r3, #8
 8003844:	2b00      	cmp	r3, #0
 8003846:	d005      	beq.n	8003854 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003848:	4b52      	ldr	r3, [pc, #328]	; (8003994 <HAL_RCC_ClockConfig+0x1b8>)
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	4a51      	ldr	r2, [pc, #324]	; (8003994 <HAL_RCC_ClockConfig+0x1b8>)
 800384e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003852:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003854:	4b4f      	ldr	r3, [pc, #316]	; (8003994 <HAL_RCC_ClockConfig+0x1b8>)
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	494c      	ldr	r1, [pc, #304]	; (8003994 <HAL_RCC_ClockConfig+0x1b8>)
 8003862:	4313      	orrs	r3, r2
 8003864:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 0301 	and.w	r3, r3, #1
 800386e:	2b00      	cmp	r3, #0
 8003870:	d044      	beq.n	80038fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	2b01      	cmp	r3, #1
 8003878:	d107      	bne.n	800388a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800387a:	4b46      	ldr	r3, [pc, #280]	; (8003994 <HAL_RCC_ClockConfig+0x1b8>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003882:	2b00      	cmp	r3, #0
 8003884:	d119      	bne.n	80038ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e07d      	b.n	8003986 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	2b02      	cmp	r3, #2
 8003890:	d003      	beq.n	800389a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003896:	2b03      	cmp	r3, #3
 8003898:	d107      	bne.n	80038aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800389a:	4b3e      	ldr	r3, [pc, #248]	; (8003994 <HAL_RCC_ClockConfig+0x1b8>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d109      	bne.n	80038ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	e06d      	b.n	8003986 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038aa:	4b3a      	ldr	r3, [pc, #232]	; (8003994 <HAL_RCC_ClockConfig+0x1b8>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f003 0302 	and.w	r3, r3, #2
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d101      	bne.n	80038ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e065      	b.n	8003986 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038ba:	4b36      	ldr	r3, [pc, #216]	; (8003994 <HAL_RCC_ClockConfig+0x1b8>)
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	f023 0203 	bic.w	r2, r3, #3
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	4933      	ldr	r1, [pc, #204]	; (8003994 <HAL_RCC_ClockConfig+0x1b8>)
 80038c8:	4313      	orrs	r3, r2
 80038ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038cc:	f7fc fe74 	bl	80005b8 <HAL_GetTick>
 80038d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038d2:	e00a      	b.n	80038ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038d4:	f7fc fe70 	bl	80005b8 <HAL_GetTick>
 80038d8:	4602      	mov	r2, r0
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	1ad3      	subs	r3, r2, r3
 80038de:	f241 3288 	movw	r2, #5000	; 0x1388
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d901      	bls.n	80038ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80038e6:	2303      	movs	r3, #3
 80038e8:	e04d      	b.n	8003986 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038ea:	4b2a      	ldr	r3, [pc, #168]	; (8003994 <HAL_RCC_ClockConfig+0x1b8>)
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	f003 020c 	and.w	r2, r3, #12
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	009b      	lsls	r3, r3, #2
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d1eb      	bne.n	80038d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80038fc:	4b24      	ldr	r3, [pc, #144]	; (8003990 <HAL_RCC_ClockConfig+0x1b4>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f003 030f 	and.w	r3, r3, #15
 8003904:	683a      	ldr	r2, [r7, #0]
 8003906:	429a      	cmp	r2, r3
 8003908:	d20c      	bcs.n	8003924 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800390a:	4b21      	ldr	r3, [pc, #132]	; (8003990 <HAL_RCC_ClockConfig+0x1b4>)
 800390c:	683a      	ldr	r2, [r7, #0]
 800390e:	b2d2      	uxtb	r2, r2
 8003910:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003912:	4b1f      	ldr	r3, [pc, #124]	; (8003990 <HAL_RCC_ClockConfig+0x1b4>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 030f 	and.w	r3, r3, #15
 800391a:	683a      	ldr	r2, [r7, #0]
 800391c:	429a      	cmp	r2, r3
 800391e:	d001      	beq.n	8003924 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	e030      	b.n	8003986 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f003 0304 	and.w	r3, r3, #4
 800392c:	2b00      	cmp	r3, #0
 800392e:	d008      	beq.n	8003942 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003930:	4b18      	ldr	r3, [pc, #96]	; (8003994 <HAL_RCC_ClockConfig+0x1b8>)
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	68db      	ldr	r3, [r3, #12]
 800393c:	4915      	ldr	r1, [pc, #84]	; (8003994 <HAL_RCC_ClockConfig+0x1b8>)
 800393e:	4313      	orrs	r3, r2
 8003940:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 0308 	and.w	r3, r3, #8
 800394a:	2b00      	cmp	r3, #0
 800394c:	d009      	beq.n	8003962 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800394e:	4b11      	ldr	r3, [pc, #68]	; (8003994 <HAL_RCC_ClockConfig+0x1b8>)
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	691b      	ldr	r3, [r3, #16]
 800395a:	00db      	lsls	r3, r3, #3
 800395c:	490d      	ldr	r1, [pc, #52]	; (8003994 <HAL_RCC_ClockConfig+0x1b8>)
 800395e:	4313      	orrs	r3, r2
 8003960:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003962:	f000 f81d 	bl	80039a0 <HAL_RCC_GetSysClockFreq>
 8003966:	4602      	mov	r2, r0
 8003968:	4b0a      	ldr	r3, [pc, #40]	; (8003994 <HAL_RCC_ClockConfig+0x1b8>)
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	091b      	lsrs	r3, r3, #4
 800396e:	f003 030f 	and.w	r3, r3, #15
 8003972:	4909      	ldr	r1, [pc, #36]	; (8003998 <HAL_RCC_ClockConfig+0x1bc>)
 8003974:	5ccb      	ldrb	r3, [r1, r3]
 8003976:	fa22 f303 	lsr.w	r3, r2, r3
 800397a:	4a08      	ldr	r2, [pc, #32]	; (800399c <HAL_RCC_ClockConfig+0x1c0>)
 800397c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 800397e:	200f      	movs	r0, #15
 8003980:	f7fc fdd6 	bl	8000530 <HAL_InitTick>

  return HAL_OK;
 8003984:	2300      	movs	r3, #0
}
 8003986:	4618      	mov	r0, r3
 8003988:	3710      	adds	r7, #16
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}
 800398e:	bf00      	nop
 8003990:	40023c00 	.word	0x40023c00
 8003994:	40023800 	.word	0x40023800
 8003998:	080a1f00 	.word	0x080a1f00
 800399c:	20000088 	.word	0x20000088

080039a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039a0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80039a4:	b084      	sub	sp, #16
 80039a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80039a8:	2300      	movs	r3, #0
 80039aa:	607b      	str	r3, [r7, #4]
 80039ac:	2300      	movs	r3, #0
 80039ae:	60fb      	str	r3, [r7, #12]
 80039b0:	2300      	movs	r3, #0
 80039b2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80039b4:	2300      	movs	r3, #0
 80039b6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80039b8:	4b67      	ldr	r3, [pc, #412]	; (8003b58 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	f003 030c 	and.w	r3, r3, #12
 80039c0:	2b08      	cmp	r3, #8
 80039c2:	d00d      	beq.n	80039e0 <HAL_RCC_GetSysClockFreq+0x40>
 80039c4:	2b08      	cmp	r3, #8
 80039c6:	f200 80bd 	bhi.w	8003b44 <HAL_RCC_GetSysClockFreq+0x1a4>
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d002      	beq.n	80039d4 <HAL_RCC_GetSysClockFreq+0x34>
 80039ce:	2b04      	cmp	r3, #4
 80039d0:	d003      	beq.n	80039da <HAL_RCC_GetSysClockFreq+0x3a>
 80039d2:	e0b7      	b.n	8003b44 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80039d4:	4b61      	ldr	r3, [pc, #388]	; (8003b5c <HAL_RCC_GetSysClockFreq+0x1bc>)
 80039d6:	60bb      	str	r3, [r7, #8]
       break;
 80039d8:	e0b7      	b.n	8003b4a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80039da:	4b61      	ldr	r3, [pc, #388]	; (8003b60 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80039dc:	60bb      	str	r3, [r7, #8]
      break;
 80039de:	e0b4      	b.n	8003b4a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80039e0:	4b5d      	ldr	r3, [pc, #372]	; (8003b58 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80039e8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80039ea:	4b5b      	ldr	r3, [pc, #364]	; (8003b58 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d04d      	beq.n	8003a92 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039f6:	4b58      	ldr	r3, [pc, #352]	; (8003b58 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	099b      	lsrs	r3, r3, #6
 80039fc:	461a      	mov	r2, r3
 80039fe:	f04f 0300 	mov.w	r3, #0
 8003a02:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003a06:	f04f 0100 	mov.w	r1, #0
 8003a0a:	ea02 0800 	and.w	r8, r2, r0
 8003a0e:	ea03 0901 	and.w	r9, r3, r1
 8003a12:	4640      	mov	r0, r8
 8003a14:	4649      	mov	r1, r9
 8003a16:	f04f 0200 	mov.w	r2, #0
 8003a1a:	f04f 0300 	mov.w	r3, #0
 8003a1e:	014b      	lsls	r3, r1, #5
 8003a20:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003a24:	0142      	lsls	r2, r0, #5
 8003a26:	4610      	mov	r0, r2
 8003a28:	4619      	mov	r1, r3
 8003a2a:	ebb0 0008 	subs.w	r0, r0, r8
 8003a2e:	eb61 0109 	sbc.w	r1, r1, r9
 8003a32:	f04f 0200 	mov.w	r2, #0
 8003a36:	f04f 0300 	mov.w	r3, #0
 8003a3a:	018b      	lsls	r3, r1, #6
 8003a3c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003a40:	0182      	lsls	r2, r0, #6
 8003a42:	1a12      	subs	r2, r2, r0
 8003a44:	eb63 0301 	sbc.w	r3, r3, r1
 8003a48:	f04f 0000 	mov.w	r0, #0
 8003a4c:	f04f 0100 	mov.w	r1, #0
 8003a50:	00d9      	lsls	r1, r3, #3
 8003a52:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003a56:	00d0      	lsls	r0, r2, #3
 8003a58:	4602      	mov	r2, r0
 8003a5a:	460b      	mov	r3, r1
 8003a5c:	eb12 0208 	adds.w	r2, r2, r8
 8003a60:	eb43 0309 	adc.w	r3, r3, r9
 8003a64:	f04f 0000 	mov.w	r0, #0
 8003a68:	f04f 0100 	mov.w	r1, #0
 8003a6c:	0259      	lsls	r1, r3, #9
 8003a6e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003a72:	0250      	lsls	r0, r2, #9
 8003a74:	4602      	mov	r2, r0
 8003a76:	460b      	mov	r3, r1
 8003a78:	4610      	mov	r0, r2
 8003a7a:	4619      	mov	r1, r3
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	461a      	mov	r2, r3
 8003a80:	f04f 0300 	mov.w	r3, #0
 8003a84:	f7fc fbb6 	bl	80001f4 <__aeabi_uldivmod>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	460b      	mov	r3, r1
 8003a8c:	4613      	mov	r3, r2
 8003a8e:	60fb      	str	r3, [r7, #12]
 8003a90:	e04a      	b.n	8003b28 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a92:	4b31      	ldr	r3, [pc, #196]	; (8003b58 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	099b      	lsrs	r3, r3, #6
 8003a98:	461a      	mov	r2, r3
 8003a9a:	f04f 0300 	mov.w	r3, #0
 8003a9e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003aa2:	f04f 0100 	mov.w	r1, #0
 8003aa6:	ea02 0400 	and.w	r4, r2, r0
 8003aaa:	ea03 0501 	and.w	r5, r3, r1
 8003aae:	4620      	mov	r0, r4
 8003ab0:	4629      	mov	r1, r5
 8003ab2:	f04f 0200 	mov.w	r2, #0
 8003ab6:	f04f 0300 	mov.w	r3, #0
 8003aba:	014b      	lsls	r3, r1, #5
 8003abc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003ac0:	0142      	lsls	r2, r0, #5
 8003ac2:	4610      	mov	r0, r2
 8003ac4:	4619      	mov	r1, r3
 8003ac6:	1b00      	subs	r0, r0, r4
 8003ac8:	eb61 0105 	sbc.w	r1, r1, r5
 8003acc:	f04f 0200 	mov.w	r2, #0
 8003ad0:	f04f 0300 	mov.w	r3, #0
 8003ad4:	018b      	lsls	r3, r1, #6
 8003ad6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003ada:	0182      	lsls	r2, r0, #6
 8003adc:	1a12      	subs	r2, r2, r0
 8003ade:	eb63 0301 	sbc.w	r3, r3, r1
 8003ae2:	f04f 0000 	mov.w	r0, #0
 8003ae6:	f04f 0100 	mov.w	r1, #0
 8003aea:	00d9      	lsls	r1, r3, #3
 8003aec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003af0:	00d0      	lsls	r0, r2, #3
 8003af2:	4602      	mov	r2, r0
 8003af4:	460b      	mov	r3, r1
 8003af6:	1912      	adds	r2, r2, r4
 8003af8:	eb45 0303 	adc.w	r3, r5, r3
 8003afc:	f04f 0000 	mov.w	r0, #0
 8003b00:	f04f 0100 	mov.w	r1, #0
 8003b04:	0299      	lsls	r1, r3, #10
 8003b06:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003b0a:	0290      	lsls	r0, r2, #10
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	460b      	mov	r3, r1
 8003b10:	4610      	mov	r0, r2
 8003b12:	4619      	mov	r1, r3
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	461a      	mov	r2, r3
 8003b18:	f04f 0300 	mov.w	r3, #0
 8003b1c:	f7fc fb6a 	bl	80001f4 <__aeabi_uldivmod>
 8003b20:	4602      	mov	r2, r0
 8003b22:	460b      	mov	r3, r1
 8003b24:	4613      	mov	r3, r2
 8003b26:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003b28:	4b0b      	ldr	r3, [pc, #44]	; (8003b58 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	0c1b      	lsrs	r3, r3, #16
 8003b2e:	f003 0303 	and.w	r3, r3, #3
 8003b32:	3301      	adds	r3, #1
 8003b34:	005b      	lsls	r3, r3, #1
 8003b36:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003b38:	68fa      	ldr	r2, [r7, #12]
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b40:	60bb      	str	r3, [r7, #8]
      break;
 8003b42:	e002      	b.n	8003b4a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b44:	4b05      	ldr	r3, [pc, #20]	; (8003b5c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003b46:	60bb      	str	r3, [r7, #8]
      break;
 8003b48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b4a:	68bb      	ldr	r3, [r7, #8]
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	3710      	adds	r7, #16
 8003b50:	46bd      	mov	sp, r7
 8003b52:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003b56:	bf00      	nop
 8003b58:	40023800 	.word	0x40023800
 8003b5c:	00f42400 	.word	0x00f42400
 8003b60:	007a1200 	.word	0x007a1200

08003b64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b64:	b480      	push	{r7}
 8003b66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b68:	4b03      	ldr	r3, [pc, #12]	; (8003b78 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b74:	4770      	bx	lr
 8003b76:	bf00      	nop
 8003b78:	20000088 	.word	0x20000088

08003b7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003b80:	f7ff fff0 	bl	8003b64 <HAL_RCC_GetHCLKFreq>
 8003b84:	4602      	mov	r2, r0
 8003b86:	4b05      	ldr	r3, [pc, #20]	; (8003b9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	0a9b      	lsrs	r3, r3, #10
 8003b8c:	f003 0307 	and.w	r3, r3, #7
 8003b90:	4903      	ldr	r1, [pc, #12]	; (8003ba0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b92:	5ccb      	ldrb	r3, [r1, r3]
 8003b94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	bd80      	pop	{r7, pc}
 8003b9c:	40023800 	.word	0x40023800
 8003ba0:	080a1f10 	.word	0x080a1f10

08003ba4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003ba8:	f7ff ffdc 	bl	8003b64 <HAL_RCC_GetHCLKFreq>
 8003bac:	4602      	mov	r2, r0
 8003bae:	4b05      	ldr	r3, [pc, #20]	; (8003bc4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	0b5b      	lsrs	r3, r3, #13
 8003bb4:	f003 0307 	and.w	r3, r3, #7
 8003bb8:	4903      	ldr	r1, [pc, #12]	; (8003bc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003bba:	5ccb      	ldrb	r3, [r1, r3]
 8003bbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	bd80      	pop	{r7, pc}
 8003bc4:	40023800 	.word	0x40023800
 8003bc8:	080a1f10 	.word	0x080a1f10

08003bcc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b088      	sub	sp, #32
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	61fb      	str	r3, [r7, #28]
  uint32_t tmpreg1 = 0U;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	61bb      	str	r3, [r7, #24]
  uint32_t pllsaip = 0U;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	617b      	str	r3, [r7, #20]
  uint32_t pllsaiq = 0U;
 8003be0:	2300      	movs	r3, #0
 8003be2:	613b      	str	r3, [r7, #16]
  uint32_t pllsair = 0U;
 8003be4:	2300      	movs	r3, #0
 8003be6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*--------------------------- CLK48 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d00a      	beq.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003bf4:	4b66      	ldr	r3, [pc, #408]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003bf6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003bfa:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c02:	4963      	ldr	r1, [pc, #396]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003c04:	4313      	orrs	r3, r2
 8003c06:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d00a      	beq.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8003c16:	4b5e      	ldr	r3, [pc, #376]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003c18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c1c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c24:	495a      	ldr	r1, [pc, #360]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003c26:	4313      	orrs	r3, r2
 8003c28:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f003 0301 	and.w	r3, r3, #1
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d10b      	bne.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d105      	bne.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d075      	beq.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003c50:	4b50      	ldr	r3, [pc, #320]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8003c52:	2200      	movs	r2, #0
 8003c54:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003c56:	f7fc fcaf 	bl	80005b8 <HAL_GetTick>
 8003c5a:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003c5c:	e008      	b.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003c5e:	f7fc fcab 	bl	80005b8 <HAL_GetTick>
 8003c62:	4602      	mov	r2, r0
 8003c64:	69fb      	ldr	r3, [r7, #28]
 8003c66:	1ad3      	subs	r3, r2, r3
 8003c68:	2b02      	cmp	r3, #2
 8003c6a:	d901      	bls.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c6c:	2303      	movs	r3, #3
 8003c6e:	e1dc      	b.n	800402a <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003c70:	4b47      	ldr	r3, [pc, #284]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d1f0      	bne.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x92>
    }

    /*---------------------- I2S configuration -------------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f003 0301 	and.w	r3, r3, #1
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d009      	beq.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0xd0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	019a      	lsls	r2, r3, #6
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	071b      	lsls	r3, r3, #28
 8003c94:	493e      	ldr	r1, [pc, #248]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003c96:	4313      	orrs	r3, r2
 8003c98:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f003 0302 	and.w	r3, r3, #2
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d01f      	beq.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x11c>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003ca8:	4b39      	ldr	r3, [pc, #228]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003caa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cae:	0f1b      	lsrs	r3, r3, #28
 8003cb0:	f003 0307 	and.w	r3, r3, #7
 8003cb4:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	019a      	lsls	r2, r3, #6
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	68db      	ldr	r3, [r3, #12]
 8003cc0:	061b      	lsls	r3, r3, #24
 8003cc2:	431a      	orrs	r2, r3
 8003cc4:	69bb      	ldr	r3, [r7, #24]
 8003cc6:	071b      	lsls	r3, r3, #28
 8003cc8:	4931      	ldr	r1, [pc, #196]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003cd0:	4b2f      	ldr	r3, [pc, #188]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003cd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cd6:	f023 021f 	bic.w	r2, r3, #31
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6a1b      	ldr	r3, [r3, #32]
 8003cde:	3b01      	subs	r3, #1
 8003ce0:	492b      	ldr	r1, [pc, #172]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d00d      	beq.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x144>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	019a      	lsls	r2, r3, #6
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	68db      	ldr	r3, [r3, #12]
 8003cfe:	061b      	lsls	r3, r3, #24
 8003d00:	431a      	orrs	r2, r3
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	071b      	lsls	r3, r3, #28
 8003d08:	4921      	ldr	r1, [pc, #132]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003d10:	4b20      	ldr	r3, [pc, #128]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8003d12:	2201      	movs	r2, #1
 8003d14:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003d16:	f7fc fc4f 	bl	80005b8 <HAL_GetTick>
 8003d1a:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003d1c:	e008      	b.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003d1e:	f7fc fc4b 	bl	80005b8 <HAL_GetTick>
 8003d22:	4602      	mov	r2, r0
 8003d24:	69fb      	ldr	r3, [r7, #28]
 8003d26:	1ad3      	subs	r3, r2, r3
 8003d28:	2b02      	cmp	r3, #2
 8003d2a:	d901      	bls.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d2c:	2303      	movs	r3, #3
 8003d2e:	e17c      	b.n	800402a <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003d30:	4b17      	ldr	r3, [pc, #92]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d0f0      	beq.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x152>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f003 0304 	and.w	r3, r3, #4
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d112      	bne.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d10c      	bne.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f003 0380 	and.w	r3, r3, #128	; 0x80
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	f000 80ce 	beq.w	8003efe <HAL_RCCEx_PeriphCLKConfig+0x332>
      (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)))
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 8003d66:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d6a:	f040 80c8 	bne.w	8003efe <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003d6e:	4b0a      	ldr	r3, [pc, #40]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003d70:	2200      	movs	r2, #0
 8003d72:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003d74:	f7fc fc20 	bl	80005b8 <HAL_GetTick>
 8003d78:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003d7a:	e00f      	b.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003d7c:	f7fc fc1c 	bl	80005b8 <HAL_GetTick>
 8003d80:	4602      	mov	r2, r0
 8003d82:	69fb      	ldr	r3, [r7, #28]
 8003d84:	1ad3      	subs	r3, r2, r3
 8003d86:	2b02      	cmp	r3, #2
 8003d88:	d908      	bls.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d8a:	2303      	movs	r3, #3
 8003d8c:	e14d      	b.n	800402a <HAL_RCCEx_PeriphCLKConfig+0x45e>
 8003d8e:	bf00      	nop
 8003d90:	40023800 	.word	0x40023800
 8003d94:	42470068 	.word	0x42470068
 8003d98:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003d9c:	4ba5      	ldr	r3, [pc, #660]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003da4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003da8:	d0e8      	beq.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f003 0304 	and.w	r3, r3, #4
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d02e      	beq.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8003db6:	4b9f      	ldr	r3, [pc, #636]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003db8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dbc:	0c1b      	lsrs	r3, r3, #16
 8003dbe:	f003 0303 	and.w	r3, r3, #3
 8003dc2:	3301      	adds	r3, #1
 8003dc4:	005b      	lsls	r3, r3, #1
 8003dc6:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003dc8:	4b9a      	ldr	r3, [pc, #616]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dce:	0f1b      	lsrs	r3, r3, #28
 8003dd0:	f003 0307 	and.w	r3, r3, #7
 8003dd4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	691b      	ldr	r3, [r3, #16]
 8003dda:	019a      	lsls	r2, r3, #6
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	085b      	lsrs	r3, r3, #1
 8003de0:	3b01      	subs	r3, #1
 8003de2:	041b      	lsls	r3, r3, #16
 8003de4:	431a      	orrs	r2, r3
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	699b      	ldr	r3, [r3, #24]
 8003dea:	061b      	lsls	r3, r3, #24
 8003dec:	431a      	orrs	r2, r3
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	071b      	lsls	r3, r3, #28
 8003df2:	4990      	ldr	r1, [pc, #576]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003df4:	4313      	orrs	r3, r2
 8003df6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003dfa:	4b8e      	ldr	r3, [pc, #568]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003dfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e00:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e08:	3b01      	subs	r3, #1
 8003e0a:	021b      	lsls	r3, r3, #8
 8003e0c:	4989      	ldr	r1, [pc, #548]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 0308 	and.w	r3, r3, #8
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d02c      	beq.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8003e20:	4b84      	ldr	r3, [pc, #528]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e26:	0c1b      	lsrs	r3, r3, #16
 8003e28:	f003 0303 	and.w	r3, r3, #3
 8003e2c:	3301      	adds	r3, #1
 8003e2e:	005b      	lsls	r3, r3, #1
 8003e30:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003e32:	4b80      	ldr	r3, [pc, #512]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003e34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e38:	0e1b      	lsrs	r3, r3, #24
 8003e3a:	f003 030f 	and.w	r3, r3, #15
 8003e3e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	691b      	ldr	r3, [r3, #16]
 8003e44:	019a      	lsls	r2, r3, #6
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	085b      	lsrs	r3, r3, #1
 8003e4a:	3b01      	subs	r3, #1
 8003e4c:	041b      	lsls	r3, r3, #16
 8003e4e:	431a      	orrs	r2, r3
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	061b      	lsls	r3, r3, #24
 8003e54:	431a      	orrs	r2, r3
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	69db      	ldr	r3, [r3, #28]
 8003e5a:	071b      	lsls	r3, r3, #28
 8003e5c:	4975      	ldr	r1, [pc, #468]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003e64:	4b73      	ldr	r3, [pc, #460]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003e66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e6a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e72:	4970      	ldr	r1, [pc, #448]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003e74:	4313      	orrs	r3, r2
 8003e76:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- CLK48 configuration ------------------------*/
    /* Configure the PLLSAI when it is used as clock source for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d024      	beq.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x304>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 8003e8a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e8e:	d11f      	bne.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x304>
    {
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));

      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003e90:	4b68      	ldr	r3, [pc, #416]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003e92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e96:	0e1b      	lsrs	r3, r3, #24
 8003e98:	f003 030f 	and.w	r3, r3, #15
 8003e9c:	613b      	str	r3, [r7, #16]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003e9e:	4b65      	ldr	r3, [pc, #404]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003ea0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ea4:	0f1b      	lsrs	r3, r3, #28
 8003ea6:	f003 0307 	and.w	r3, r3, #7
 8003eaa:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	691b      	ldr	r3, [r3, #16]
 8003eb0:	019a      	lsls	r2, r3, #6
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	695b      	ldr	r3, [r3, #20]
 8003eb6:	085b      	lsrs	r3, r3, #1
 8003eb8:	3b01      	subs	r3, #1
 8003eba:	041b      	lsls	r3, r3, #16
 8003ebc:	431a      	orrs	r2, r3
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	061b      	lsls	r3, r3, #24
 8003ec2:	431a      	orrs	r2, r3
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	071b      	lsls	r3, r3, #28
 8003ec8:	495a      	ldr	r1, [pc, #360]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003ed0:	4b59      	ldr	r3, [pc, #356]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003ed6:	f7fc fb6f 	bl	80005b8 <HAL_GetTick>
 8003eda:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003edc:	e008      	b.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x324>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003ede:	f7fc fb6b 	bl	80005b8 <HAL_GetTick>
 8003ee2:	4602      	mov	r2, r0
 8003ee4:	69fb      	ldr	r3, [r7, #28]
 8003ee6:	1ad3      	subs	r3, r2, r3
 8003ee8:	2b02      	cmp	r3, #2
 8003eea:	d901      	bls.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x324>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003eec:	2303      	movs	r3, #3
 8003eee:	e09c      	b.n	800402a <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003ef0:	4b50      	ldr	r3, [pc, #320]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ef8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003efc:	d1ef      	bne.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x312>
  }

  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f003 0320 	and.w	r3, r3, #32
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	f000 8083 	beq.w	8004012 <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	60bb      	str	r3, [r7, #8]
 8003f10:	4b48      	ldr	r3, [pc, #288]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f14:	4a47      	ldr	r2, [pc, #284]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003f16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f1a:	6413      	str	r3, [r2, #64]	; 0x40
 8003f1c:	4b45      	ldr	r3, [pc, #276]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f24:	60bb      	str	r3, [r7, #8]
 8003f26:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003f28:	4b44      	ldr	r3, [pc, #272]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a43      	ldr	r2, [pc, #268]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8003f2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f32:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003f34:	f7fc fb40 	bl	80005b8 <HAL_GetTick>
 8003f38:	61f8      	str	r0, [r7, #28]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003f3a:	e008      	b.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003f3c:	f7fc fb3c 	bl	80005b8 <HAL_GetTick>
 8003f40:	4602      	mov	r2, r0
 8003f42:	69fb      	ldr	r3, [r7, #28]
 8003f44:	1ad3      	subs	r3, r2, r3
 8003f46:	2b02      	cmp	r3, #2
 8003f48:	d901      	bls.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x382>
      {
        return HAL_TIMEOUT;
 8003f4a:	2303      	movs	r3, #3
 8003f4c:	e06d      	b.n	800402a <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003f4e:	4b3b      	ldr	r3, [pc, #236]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d0f0      	beq.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x370>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003f5a:	4b36      	ldr	r3, [pc, #216]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003f5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f62:	61bb      	str	r3, [r7, #24]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003f64:	69bb      	ldr	r3, [r7, #24]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d02f      	beq.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f72:	69ba      	ldr	r2, [r7, #24]
 8003f74:	429a      	cmp	r2, r3
 8003f76:	d028      	beq.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f78:	4b2e      	ldr	r3, [pc, #184]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003f7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f80:	61bb      	str	r3, [r7, #24]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003f82:	4b2f      	ldr	r3, [pc, #188]	; (8004040 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003f84:	2201      	movs	r2, #1
 8003f86:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003f88:	4b2d      	ldr	r3, [pc, #180]	; (8004040 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003f8e:	4a29      	ldr	r2, [pc, #164]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003f90:	69bb      	ldr	r3, [r7, #24]
 8003f92:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003f94:	4b27      	ldr	r3, [pc, #156]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003f96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f98:	f003 0301 	and.w	r3, r3, #1
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	d114      	bne.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003fa0:	f7fc fb0a 	bl	80005b8 <HAL_GetTick>
 8003fa4:	61f8      	str	r0, [r7, #28]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fa6:	e00a      	b.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x3f2>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fa8:	f7fc fb06 	bl	80005b8 <HAL_GetTick>
 8003fac:	4602      	mov	r2, r0
 8003fae:	69fb      	ldr	r3, [r7, #28]
 8003fb0:	1ad3      	subs	r3, r2, r3
 8003fb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d901      	bls.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x3f2>
          {
            return HAL_TIMEOUT;
 8003fba:	2303      	movs	r3, #3
 8003fbc:	e035      	b.n	800402a <HAL_RCCEx_PeriphCLKConfig+0x45e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fbe:	4b1d      	ldr	r3, [pc, #116]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003fc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fc2:	f003 0302 	and.w	r3, r3, #2
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d0ee      	beq.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fd2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003fd6:	d10d      	bne.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8003fd8:	4b16      	ldr	r3, [pc, #88]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fe4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003fe8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fec:	4911      	ldr	r1, [pc, #68]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	608b      	str	r3, [r1, #8]
 8003ff2:	e005      	b.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x434>
 8003ff4:	4b0f      	ldr	r3, [pc, #60]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	4a0e      	ldr	r2, [pc, #56]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003ffa:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003ffe:	6093      	str	r3, [r2, #8]
 8004000:	4b0c      	ldr	r3, [pc, #48]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8004002:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004008:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800400c:	4909      	ldr	r1, [pc, #36]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800400e:	4313      	orrs	r3, r2
 8004010:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 0310 	and.w	r3, r3, #16
 800401a:	2b00      	cmp	r3, #0
 800401c:	d004      	beq.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8004024:	4b07      	ldr	r3, [pc, #28]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x478>)
 8004026:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8004028:	2300      	movs	r3, #0
}
 800402a:	4618      	mov	r0, r3
 800402c:	3720      	adds	r7, #32
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}
 8004032:	bf00      	nop
 8004034:	40023800 	.word	0x40023800
 8004038:	42470070 	.word	0x42470070
 800403c:	40007000 	.word	0x40007000
 8004040:	42470e40 	.word	0x42470e40
 8004044:	424711e0 	.word	0x424711e0

08004048 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b086      	sub	sp, #24
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004050:	2300      	movs	r3, #0
 8004052:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 0301 	and.w	r3, r3, #1
 800405c:	2b00      	cmp	r3, #0
 800405e:	d075      	beq.n	800414c <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004060:	4ba2      	ldr	r3, [pc, #648]	; (80042ec <HAL_RCC_OscConfig+0x2a4>)
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	f003 030c 	and.w	r3, r3, #12
 8004068:	2b04      	cmp	r3, #4
 800406a:	d00c      	beq.n	8004086 <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800406c:	4b9f      	ldr	r3, [pc, #636]	; (80042ec <HAL_RCC_OscConfig+0x2a4>)
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004074:	2b08      	cmp	r3, #8
 8004076:	d112      	bne.n	800409e <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004078:	4b9c      	ldr	r3, [pc, #624]	; (80042ec <HAL_RCC_OscConfig+0x2a4>)
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004080:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004084:	d10b      	bne.n	800409e <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004086:	4b99      	ldr	r3, [pc, #612]	; (80042ec <HAL_RCC_OscConfig+0x2a4>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800408e:	2b00      	cmp	r3, #0
 8004090:	d05b      	beq.n	800414a <HAL_RCC_OscConfig+0x102>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d157      	bne.n	800414a <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	e20b      	b.n	80044b6 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040a6:	d106      	bne.n	80040b6 <HAL_RCC_OscConfig+0x6e>
 80040a8:	4b90      	ldr	r3, [pc, #576]	; (80042ec <HAL_RCC_OscConfig+0x2a4>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a8f      	ldr	r2, [pc, #572]	; (80042ec <HAL_RCC_OscConfig+0x2a4>)
 80040ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040b2:	6013      	str	r3, [r2, #0]
 80040b4:	e01d      	b.n	80040f2 <HAL_RCC_OscConfig+0xaa>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040be:	d10c      	bne.n	80040da <HAL_RCC_OscConfig+0x92>
 80040c0:	4b8a      	ldr	r3, [pc, #552]	; (80042ec <HAL_RCC_OscConfig+0x2a4>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a89      	ldr	r2, [pc, #548]	; (80042ec <HAL_RCC_OscConfig+0x2a4>)
 80040c6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040ca:	6013      	str	r3, [r2, #0]
 80040cc:	4b87      	ldr	r3, [pc, #540]	; (80042ec <HAL_RCC_OscConfig+0x2a4>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a86      	ldr	r2, [pc, #536]	; (80042ec <HAL_RCC_OscConfig+0x2a4>)
 80040d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040d6:	6013      	str	r3, [r2, #0]
 80040d8:	e00b      	b.n	80040f2 <HAL_RCC_OscConfig+0xaa>
 80040da:	4b84      	ldr	r3, [pc, #528]	; (80042ec <HAL_RCC_OscConfig+0x2a4>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a83      	ldr	r2, [pc, #524]	; (80042ec <HAL_RCC_OscConfig+0x2a4>)
 80040e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040e4:	6013      	str	r3, [r2, #0]
 80040e6:	4b81      	ldr	r3, [pc, #516]	; (80042ec <HAL_RCC_OscConfig+0x2a4>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a80      	ldr	r2, [pc, #512]	; (80042ec <HAL_RCC_OscConfig+0x2a4>)
 80040ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040f0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d013      	beq.n	8004122 <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040fa:	f7fc fa5d 	bl	80005b8 <HAL_GetTick>
 80040fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004100:	e008      	b.n	8004114 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004102:	f7fc fa59 	bl	80005b8 <HAL_GetTick>
 8004106:	4602      	mov	r2, r0
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	1ad3      	subs	r3, r2, r3
 800410c:	2b64      	cmp	r3, #100	; 0x64
 800410e:	d901      	bls.n	8004114 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 8004110:	2303      	movs	r3, #3
 8004112:	e1d0      	b.n	80044b6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004114:	4b75      	ldr	r3, [pc, #468]	; (80042ec <HAL_RCC_OscConfig+0x2a4>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800411c:	2b00      	cmp	r3, #0
 800411e:	d0f0      	beq.n	8004102 <HAL_RCC_OscConfig+0xba>
 8004120:	e014      	b.n	800414c <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004122:	f7fc fa49 	bl	80005b8 <HAL_GetTick>
 8004126:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004128:	e008      	b.n	800413c <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800412a:	f7fc fa45 	bl	80005b8 <HAL_GetTick>
 800412e:	4602      	mov	r2, r0
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	1ad3      	subs	r3, r2, r3
 8004134:	2b64      	cmp	r3, #100	; 0x64
 8004136:	d901      	bls.n	800413c <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 8004138:	2303      	movs	r3, #3
 800413a:	e1bc      	b.n	80044b6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800413c:	4b6b      	ldr	r3, [pc, #428]	; (80042ec <HAL_RCC_OscConfig+0x2a4>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004144:	2b00      	cmp	r3, #0
 8004146:	d1f0      	bne.n	800412a <HAL_RCC_OscConfig+0xe2>
 8004148:	e000      	b.n	800414c <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800414a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f003 0302 	and.w	r3, r3, #2
 8004154:	2b00      	cmp	r3, #0
 8004156:	d063      	beq.n	8004220 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004158:	4b64      	ldr	r3, [pc, #400]	; (80042ec <HAL_RCC_OscConfig+0x2a4>)
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	f003 030c 	and.w	r3, r3, #12
 8004160:	2b00      	cmp	r3, #0
 8004162:	d00b      	beq.n	800417c <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004164:	4b61      	ldr	r3, [pc, #388]	; (80042ec <HAL_RCC_OscConfig+0x2a4>)
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800416c:	2b08      	cmp	r3, #8
 800416e:	d11c      	bne.n	80041aa <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004170:	4b5e      	ldr	r3, [pc, #376]	; (80042ec <HAL_RCC_OscConfig+0x2a4>)
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004178:	2b00      	cmp	r3, #0
 800417a:	d116      	bne.n	80041aa <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800417c:	4b5b      	ldr	r3, [pc, #364]	; (80042ec <HAL_RCC_OscConfig+0x2a4>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f003 0302 	and.w	r3, r3, #2
 8004184:	2b00      	cmp	r3, #0
 8004186:	d005      	beq.n	8004194 <HAL_RCC_OscConfig+0x14c>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	68db      	ldr	r3, [r3, #12]
 800418c:	2b01      	cmp	r3, #1
 800418e:	d001      	beq.n	8004194 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 8004190:	2301      	movs	r3, #1
 8004192:	e190      	b.n	80044b6 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004194:	4b55      	ldr	r3, [pc, #340]	; (80042ec <HAL_RCC_OscConfig+0x2a4>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	691b      	ldr	r3, [r3, #16]
 80041a0:	00db      	lsls	r3, r3, #3
 80041a2:	4952      	ldr	r1, [pc, #328]	; (80042ec <HAL_RCC_OscConfig+0x2a4>)
 80041a4:	4313      	orrs	r3, r2
 80041a6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041a8:	e03a      	b.n	8004220 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	68db      	ldr	r3, [r3, #12]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d020      	beq.n	80041f4 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041b2:	4b4f      	ldr	r3, [pc, #316]	; (80042f0 <HAL_RCC_OscConfig+0x2a8>)
 80041b4:	2201      	movs	r2, #1
 80041b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041b8:	f7fc f9fe 	bl	80005b8 <HAL_GetTick>
 80041bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041be:	e008      	b.n	80041d2 <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041c0:	f7fc f9fa 	bl	80005b8 <HAL_GetTick>
 80041c4:	4602      	mov	r2, r0
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	1ad3      	subs	r3, r2, r3
 80041ca:	2b02      	cmp	r3, #2
 80041cc:	d901      	bls.n	80041d2 <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 80041ce:	2303      	movs	r3, #3
 80041d0:	e171      	b.n	80044b6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041d2:	4b46      	ldr	r3, [pc, #280]	; (80042ec <HAL_RCC_OscConfig+0x2a4>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f003 0302 	and.w	r3, r3, #2
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d0f0      	beq.n	80041c0 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041de:	4b43      	ldr	r3, [pc, #268]	; (80042ec <HAL_RCC_OscConfig+0x2a4>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	691b      	ldr	r3, [r3, #16]
 80041ea:	00db      	lsls	r3, r3, #3
 80041ec:	493f      	ldr	r1, [pc, #252]	; (80042ec <HAL_RCC_OscConfig+0x2a4>)
 80041ee:	4313      	orrs	r3, r2
 80041f0:	600b      	str	r3, [r1, #0]
 80041f2:	e015      	b.n	8004220 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041f4:	4b3e      	ldr	r3, [pc, #248]	; (80042f0 <HAL_RCC_OscConfig+0x2a8>)
 80041f6:	2200      	movs	r2, #0
 80041f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041fa:	f7fc f9dd 	bl	80005b8 <HAL_GetTick>
 80041fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004200:	e008      	b.n	8004214 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004202:	f7fc f9d9 	bl	80005b8 <HAL_GetTick>
 8004206:	4602      	mov	r2, r0
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	1ad3      	subs	r3, r2, r3
 800420c:	2b02      	cmp	r3, #2
 800420e:	d901      	bls.n	8004214 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8004210:	2303      	movs	r3, #3
 8004212:	e150      	b.n	80044b6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004214:	4b35      	ldr	r3, [pc, #212]	; (80042ec <HAL_RCC_OscConfig+0x2a4>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 0302 	and.w	r3, r3, #2
 800421c:	2b00      	cmp	r3, #0
 800421e:	d1f0      	bne.n	8004202 <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 0308 	and.w	r3, r3, #8
 8004228:	2b00      	cmp	r3, #0
 800422a:	d030      	beq.n	800428e <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	695b      	ldr	r3, [r3, #20]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d016      	beq.n	8004262 <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004234:	4b2f      	ldr	r3, [pc, #188]	; (80042f4 <HAL_RCC_OscConfig+0x2ac>)
 8004236:	2201      	movs	r2, #1
 8004238:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800423a:	f7fc f9bd 	bl	80005b8 <HAL_GetTick>
 800423e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004240:	e008      	b.n	8004254 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004242:	f7fc f9b9 	bl	80005b8 <HAL_GetTick>
 8004246:	4602      	mov	r2, r0
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	1ad3      	subs	r3, r2, r3
 800424c:	2b02      	cmp	r3, #2
 800424e:	d901      	bls.n	8004254 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 8004250:	2303      	movs	r3, #3
 8004252:	e130      	b.n	80044b6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004254:	4b25      	ldr	r3, [pc, #148]	; (80042ec <HAL_RCC_OscConfig+0x2a4>)
 8004256:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004258:	f003 0302 	and.w	r3, r3, #2
 800425c:	2b00      	cmp	r3, #0
 800425e:	d0f0      	beq.n	8004242 <HAL_RCC_OscConfig+0x1fa>
 8004260:	e015      	b.n	800428e <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004262:	4b24      	ldr	r3, [pc, #144]	; (80042f4 <HAL_RCC_OscConfig+0x2ac>)
 8004264:	2200      	movs	r2, #0
 8004266:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004268:	f7fc f9a6 	bl	80005b8 <HAL_GetTick>
 800426c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800426e:	e008      	b.n	8004282 <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004270:	f7fc f9a2 	bl	80005b8 <HAL_GetTick>
 8004274:	4602      	mov	r2, r0
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	1ad3      	subs	r3, r2, r3
 800427a:	2b02      	cmp	r3, #2
 800427c:	d901      	bls.n	8004282 <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 800427e:	2303      	movs	r3, #3
 8004280:	e119      	b.n	80044b6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004282:	4b1a      	ldr	r3, [pc, #104]	; (80042ec <HAL_RCC_OscConfig+0x2a4>)
 8004284:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004286:	f003 0302 	and.w	r3, r3, #2
 800428a:	2b00      	cmp	r3, #0
 800428c:	d1f0      	bne.n	8004270 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f003 0304 	and.w	r3, r3, #4
 8004296:	2b00      	cmp	r3, #0
 8004298:	f000 809f 	beq.w	80043da <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 800429c:	2300      	movs	r3, #0
 800429e:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042a0:	4b12      	ldr	r3, [pc, #72]	; (80042ec <HAL_RCC_OscConfig+0x2a4>)
 80042a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d10f      	bne.n	80042cc <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042ac:	2300      	movs	r3, #0
 80042ae:	60fb      	str	r3, [r7, #12]
 80042b0:	4b0e      	ldr	r3, [pc, #56]	; (80042ec <HAL_RCC_OscConfig+0x2a4>)
 80042b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b4:	4a0d      	ldr	r2, [pc, #52]	; (80042ec <HAL_RCC_OscConfig+0x2a4>)
 80042b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042ba:	6413      	str	r3, [r2, #64]	; 0x40
 80042bc:	4b0b      	ldr	r3, [pc, #44]	; (80042ec <HAL_RCC_OscConfig+0x2a4>)
 80042be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042c4:	60fb      	str	r3, [r7, #12]
 80042c6:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80042c8:	2301      	movs	r3, #1
 80042ca:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042cc:	4b0a      	ldr	r3, [pc, #40]	; (80042f8 <HAL_RCC_OscConfig+0x2b0>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d120      	bne.n	800431a <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80042d8:	4b07      	ldr	r3, [pc, #28]	; (80042f8 <HAL_RCC_OscConfig+0x2b0>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a06      	ldr	r2, [pc, #24]	; (80042f8 <HAL_RCC_OscConfig+0x2b0>)
 80042de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042e2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042e4:	f7fc f968 	bl	80005b8 <HAL_GetTick>
 80042e8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042ea:	e010      	b.n	800430e <HAL_RCC_OscConfig+0x2c6>
 80042ec:	40023800 	.word	0x40023800
 80042f0:	42470000 	.word	0x42470000
 80042f4:	42470e80 	.word	0x42470e80
 80042f8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042fc:	f7fc f95c 	bl	80005b8 <HAL_GetTick>
 8004300:	4602      	mov	r2, r0
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	1ad3      	subs	r3, r2, r3
 8004306:	2b02      	cmp	r3, #2
 8004308:	d901      	bls.n	800430e <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 800430a:	2303      	movs	r3, #3
 800430c:	e0d3      	b.n	80044b6 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800430e:	4b6c      	ldr	r3, [pc, #432]	; (80044c0 <HAL_RCC_OscConfig+0x478>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004316:	2b00      	cmp	r3, #0
 8004318:	d0f0      	beq.n	80042fc <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	689b      	ldr	r3, [r3, #8]
 800431e:	2b01      	cmp	r3, #1
 8004320:	d106      	bne.n	8004330 <HAL_RCC_OscConfig+0x2e8>
 8004322:	4b68      	ldr	r3, [pc, #416]	; (80044c4 <HAL_RCC_OscConfig+0x47c>)
 8004324:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004326:	4a67      	ldr	r2, [pc, #412]	; (80044c4 <HAL_RCC_OscConfig+0x47c>)
 8004328:	f043 0301 	orr.w	r3, r3, #1
 800432c:	6713      	str	r3, [r2, #112]	; 0x70
 800432e:	e01c      	b.n	800436a <HAL_RCC_OscConfig+0x322>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	2b05      	cmp	r3, #5
 8004336:	d10c      	bne.n	8004352 <HAL_RCC_OscConfig+0x30a>
 8004338:	4b62      	ldr	r3, [pc, #392]	; (80044c4 <HAL_RCC_OscConfig+0x47c>)
 800433a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800433c:	4a61      	ldr	r2, [pc, #388]	; (80044c4 <HAL_RCC_OscConfig+0x47c>)
 800433e:	f043 0304 	orr.w	r3, r3, #4
 8004342:	6713      	str	r3, [r2, #112]	; 0x70
 8004344:	4b5f      	ldr	r3, [pc, #380]	; (80044c4 <HAL_RCC_OscConfig+0x47c>)
 8004346:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004348:	4a5e      	ldr	r2, [pc, #376]	; (80044c4 <HAL_RCC_OscConfig+0x47c>)
 800434a:	f043 0301 	orr.w	r3, r3, #1
 800434e:	6713      	str	r3, [r2, #112]	; 0x70
 8004350:	e00b      	b.n	800436a <HAL_RCC_OscConfig+0x322>
 8004352:	4b5c      	ldr	r3, [pc, #368]	; (80044c4 <HAL_RCC_OscConfig+0x47c>)
 8004354:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004356:	4a5b      	ldr	r2, [pc, #364]	; (80044c4 <HAL_RCC_OscConfig+0x47c>)
 8004358:	f023 0301 	bic.w	r3, r3, #1
 800435c:	6713      	str	r3, [r2, #112]	; 0x70
 800435e:	4b59      	ldr	r3, [pc, #356]	; (80044c4 <HAL_RCC_OscConfig+0x47c>)
 8004360:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004362:	4a58      	ldr	r2, [pc, #352]	; (80044c4 <HAL_RCC_OscConfig+0x47c>)
 8004364:	f023 0304 	bic.w	r3, r3, #4
 8004368:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d015      	beq.n	800439e <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004372:	f7fc f921 	bl	80005b8 <HAL_GetTick>
 8004376:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004378:	e00a      	b.n	8004390 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800437a:	f7fc f91d 	bl	80005b8 <HAL_GetTick>
 800437e:	4602      	mov	r2, r0
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	1ad3      	subs	r3, r2, r3
 8004384:	f241 3288 	movw	r2, #5000	; 0x1388
 8004388:	4293      	cmp	r3, r2
 800438a:	d901      	bls.n	8004390 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 800438c:	2303      	movs	r3, #3
 800438e:	e092      	b.n	80044b6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004390:	4b4c      	ldr	r3, [pc, #304]	; (80044c4 <HAL_RCC_OscConfig+0x47c>)
 8004392:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004394:	f003 0302 	and.w	r3, r3, #2
 8004398:	2b00      	cmp	r3, #0
 800439a:	d0ee      	beq.n	800437a <HAL_RCC_OscConfig+0x332>
 800439c:	e014      	b.n	80043c8 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800439e:	f7fc f90b 	bl	80005b8 <HAL_GetTick>
 80043a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043a4:	e00a      	b.n	80043bc <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043a6:	f7fc f907 	bl	80005b8 <HAL_GetTick>
 80043aa:	4602      	mov	r2, r0
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	1ad3      	subs	r3, r2, r3
 80043b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d901      	bls.n	80043bc <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 80043b8:	2303      	movs	r3, #3
 80043ba:	e07c      	b.n	80044b6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043bc:	4b41      	ldr	r3, [pc, #260]	; (80044c4 <HAL_RCC_OscConfig+0x47c>)
 80043be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043c0:	f003 0302 	and.w	r3, r3, #2
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d1ee      	bne.n	80043a6 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80043c8:	7dfb      	ldrb	r3, [r7, #23]
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	d105      	bne.n	80043da <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043ce:	4b3d      	ldr	r3, [pc, #244]	; (80044c4 <HAL_RCC_OscConfig+0x47c>)
 80043d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d2:	4a3c      	ldr	r2, [pc, #240]	; (80044c4 <HAL_RCC_OscConfig+0x47c>)
 80043d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043d8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	699b      	ldr	r3, [r3, #24]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d068      	beq.n	80044b4 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80043e2:	4b38      	ldr	r3, [pc, #224]	; (80044c4 <HAL_RCC_OscConfig+0x47c>)
 80043e4:	689b      	ldr	r3, [r3, #8]
 80043e6:	f003 030c 	and.w	r3, r3, #12
 80043ea:	2b08      	cmp	r3, #8
 80043ec:	d060      	beq.n	80044b0 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	699b      	ldr	r3, [r3, #24]
 80043f2:	2b02      	cmp	r3, #2
 80043f4:	d145      	bne.n	8004482 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043f6:	4b34      	ldr	r3, [pc, #208]	; (80044c8 <HAL_RCC_OscConfig+0x480>)
 80043f8:	2200      	movs	r2, #0
 80043fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043fc:	f7fc f8dc 	bl	80005b8 <HAL_GetTick>
 8004400:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004402:	e008      	b.n	8004416 <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004404:	f7fc f8d8 	bl	80005b8 <HAL_GetTick>
 8004408:	4602      	mov	r2, r0
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	1ad3      	subs	r3, r2, r3
 800440e:	2b02      	cmp	r3, #2
 8004410:	d901      	bls.n	8004416 <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 8004412:	2303      	movs	r3, #3
 8004414:	e04f      	b.n	80044b6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004416:	4b2b      	ldr	r3, [pc, #172]	; (80044c4 <HAL_RCC_OscConfig+0x47c>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800441e:	2b00      	cmp	r3, #0
 8004420:	d1f0      	bne.n	8004404 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	69da      	ldr	r2, [r3, #28]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6a1b      	ldr	r3, [r3, #32]
 800442a:	431a      	orrs	r2, r3
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004430:	019b      	lsls	r3, r3, #6
 8004432:	431a      	orrs	r2, r3
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004438:	085b      	lsrs	r3, r3, #1
 800443a:	3b01      	subs	r3, #1
 800443c:	041b      	lsls	r3, r3, #16
 800443e:	431a      	orrs	r2, r3
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004444:	061b      	lsls	r3, r3, #24
 8004446:	431a      	orrs	r2, r3
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800444c:	071b      	lsls	r3, r3, #28
 800444e:	491d      	ldr	r1, [pc, #116]	; (80044c4 <HAL_RCC_OscConfig+0x47c>)
 8004450:	4313      	orrs	r3, r2
 8004452:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004454:	4b1c      	ldr	r3, [pc, #112]	; (80044c8 <HAL_RCC_OscConfig+0x480>)
 8004456:	2201      	movs	r2, #1
 8004458:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800445a:	f7fc f8ad 	bl	80005b8 <HAL_GetTick>
 800445e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004460:	e008      	b.n	8004474 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004462:	f7fc f8a9 	bl	80005b8 <HAL_GetTick>
 8004466:	4602      	mov	r2, r0
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	1ad3      	subs	r3, r2, r3
 800446c:	2b02      	cmp	r3, #2
 800446e:	d901      	bls.n	8004474 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8004470:	2303      	movs	r3, #3
 8004472:	e020      	b.n	80044b6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004474:	4b13      	ldr	r3, [pc, #76]	; (80044c4 <HAL_RCC_OscConfig+0x47c>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800447c:	2b00      	cmp	r3, #0
 800447e:	d0f0      	beq.n	8004462 <HAL_RCC_OscConfig+0x41a>
 8004480:	e018      	b.n	80044b4 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004482:	4b11      	ldr	r3, [pc, #68]	; (80044c8 <HAL_RCC_OscConfig+0x480>)
 8004484:	2200      	movs	r2, #0
 8004486:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004488:	f7fc f896 	bl	80005b8 <HAL_GetTick>
 800448c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800448e:	e008      	b.n	80044a2 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004490:	f7fc f892 	bl	80005b8 <HAL_GetTick>
 8004494:	4602      	mov	r2, r0
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	1ad3      	subs	r3, r2, r3
 800449a:	2b02      	cmp	r3, #2
 800449c:	d901      	bls.n	80044a2 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800449e:	2303      	movs	r3, #3
 80044a0:	e009      	b.n	80044b6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044a2:	4b08      	ldr	r3, [pc, #32]	; (80044c4 <HAL_RCC_OscConfig+0x47c>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d1f0      	bne.n	8004490 <HAL_RCC_OscConfig+0x448>
 80044ae:	e001      	b.n	80044b4 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80044b0:	2301      	movs	r3, #1
 80044b2:	e000      	b.n	80044b6 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 80044b4:	2300      	movs	r3, #0
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	3718      	adds	r7, #24
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}
 80044be:	bf00      	nop
 80044c0:	40007000 	.word	0x40007000
 80044c4:	40023800 	.word	0x40023800
 80044c8:	42470060 	.word	0x42470060

080044cc <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b082      	sub	sp, #8
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
 80044d4:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d101      	bne.n	80044e0 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80044dc:	2301      	movs	r3, #1
 80044de:	e025      	b.n	800452c <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80044e6:	b2db      	uxtb	r3, r3
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d106      	bne.n	80044fa <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2200      	movs	r2, #0
 80044f0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80044f4:	6878      	ldr	r0, [r7, #4]
 80044f6:	f000 f81d 	bl	8004534 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2202      	movs	r2, #2
 80044fe:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681a      	ldr	r2, [r3, #0]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	3304      	adds	r3, #4
 800450a:	4619      	mov	r1, r3
 800450c:	4610      	mov	r0, r2
 800450e:	f000 fe2f 	bl	8005170 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6818      	ldr	r0, [r3, #0]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	461a      	mov	r2, r3
 800451c:	6839      	ldr	r1, [r7, #0]
 800451e:	f000 fe9a 	bl	8005256 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2201      	movs	r2, #1
 8004526:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 800452a:	2300      	movs	r3, #0
}
 800452c:	4618      	mov	r0, r3
 800452e:	3708      	adds	r7, #8
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}

08004534 <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 8004534:	b480      	push	{r7}
 8004536:	b083      	sub	sp, #12
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsdram);
  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */ 
}
 800453c:	bf00      	nop
 800453e:	370c      	adds	r7, #12
 8004540:	46bd      	mov	sp, r7
 8004542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004546:	4770      	bx	lr

08004548 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b084      	sub	sp, #16
 800454c:	af00      	add	r7, sp, #0
 800454e:	60f8      	str	r0, [r7, #12]
 8004550:	60b9      	str	r1, [r7, #8]
 8004552:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800455a:	b2db      	uxtb	r3, r3
 800455c:	2b02      	cmp	r3, #2
 800455e:	d101      	bne.n	8004564 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8004560:	2302      	movs	r3, #2
 8004562:	e018      	b.n	8004596 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2202      	movs	r2, #2
 8004568:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	687a      	ldr	r2, [r7, #4]
 8004572:	68b9      	ldr	r1, [r7, #8]
 8004574:	4618      	mov	r0, r3
 8004576:	f000 feed 	bl	8005354 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	2b02      	cmp	r3, #2
 8004580:	d104      	bne.n	800458c <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2205      	movs	r2, #5
 8004586:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800458a:	e003      	b.n	8004594 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2201      	movs	r2, #1
 8004590:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8004594:	2300      	movs	r3, #0
}
 8004596:	4618      	mov	r0, r3
 8004598:	3710      	adds	r7, #16
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}

0800459e <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800459e:	b580      	push	{r7, lr}
 80045a0:	b082      	sub	sp, #8
 80045a2:	af00      	add	r7, sp, #0
 80045a4:	6078      	str	r0, [r7, #4]
 80045a6:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80045ae:	b2db      	uxtb	r3, r3
 80045b0:	2b02      	cmp	r3, #2
 80045b2:	d101      	bne.n	80045b8 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 80045b4:	2302      	movs	r3, #2
 80045b6:	e00e      	b.n	80045d6 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2202      	movs	r2, #2
 80045bc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	6839      	ldr	r1, [r7, #0]
 80045c6:	4618      	mov	r0, r3
 80045c8:	f000 ff00 	bl	80053cc <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2201      	movs	r2, #1
 80045d0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 80045d4:	2300      	movs	r3, #0
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	3708      	adds	r7, #8
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}

080045de <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045de:	b580      	push	{r7, lr}
 80045e0:	b082      	sub	sp, #8
 80045e2:	af00      	add	r7, sp, #0
 80045e4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d101      	bne.n	80045f0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045ec:	2301      	movs	r3, #1
 80045ee:	e03f      	b.n	8004670 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80045f6:	b2db      	uxtb	r3, r3
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d106      	bne.n	800460a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2200      	movs	r2, #0
 8004600:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004604:	6878      	ldr	r0, [r7, #4]
 8004606:	f000 f837 	bl	8004678 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2224      	movs	r2, #36	; 0x24
 800460e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	68da      	ldr	r2, [r3, #12]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004620:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f000 fb9a 	bl	8004d5c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	691a      	ldr	r2, [r3, #16]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004636:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	695a      	ldr	r2, [r3, #20]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004646:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	68da      	ldr	r2, [r3, #12]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004656:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2200      	movs	r2, #0
 800465c:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2220      	movs	r2, #32
 8004662:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2220      	movs	r2, #32
 800466a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800466e:	2300      	movs	r3, #0
}
 8004670:	4618      	mov	r0, r3
 8004672:	3708      	adds	r7, #8
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}

08004678 <HAL_UART_MspInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8004678:	b480      	push	{r7}
 800467a:	b083      	sub	sp, #12
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspInit could be implemented in the user file
   */
}
 8004680:	bf00      	nop
 8004682:	370c      	adds	r7, #12
 8004684:	46bd      	mov	sp, r7
 8004686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468a:	4770      	bx	lr

0800468c <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b088      	sub	sp, #32
 8004690:	af02      	add	r7, sp, #8
 8004692:	60f8      	str	r0, [r7, #12]
 8004694:	60b9      	str	r1, [r7, #8]
 8004696:	603b      	str	r3, [r7, #0]
 8004698:	4613      	mov	r3, r2
 800469a:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800469c:	2300      	movs	r3, #0
 800469e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80046a6:	b2db      	uxtb	r3, r3
 80046a8:	2b20      	cmp	r3, #32
 80046aa:	f040 8083 	bne.w	80047b4 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d002      	beq.n	80046ba <HAL_UART_Transmit+0x2e>
 80046b4:	88fb      	ldrh	r3, [r7, #6]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d101      	bne.n	80046be <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80046ba:	2301      	movs	r3, #1
 80046bc:	e07b      	b.n	80047b6 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80046c4:	2b01      	cmp	r3, #1
 80046c6:	d101      	bne.n	80046cc <HAL_UART_Transmit+0x40>
 80046c8:	2302      	movs	r3, #2
 80046ca:	e074      	b.n	80047b6 <HAL_UART_Transmit+0x12a>
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	2201      	movs	r2, #1
 80046d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	2200      	movs	r2, #0
 80046d8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2221      	movs	r2, #33	; 0x21
 80046de:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80046e2:	f7fb ff69 	bl	80005b8 <HAL_GetTick>
 80046e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	88fa      	ldrh	r2, [r7, #6]
 80046ec:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	88fa      	ldrh	r2, [r7, #6]
 80046f2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80046f4:	e042      	b.n	800477c <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80046fa:	b29b      	uxth	r3, r3
 80046fc:	3b01      	subs	r3, #1
 80046fe:	b29a      	uxth	r2, r3
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800470c:	d122      	bne.n	8004754 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	9300      	str	r3, [sp, #0]
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	2200      	movs	r2, #0
 8004716:	2180      	movs	r1, #128	; 0x80
 8004718:	68f8      	ldr	r0, [r7, #12]
 800471a:	f000 f9b3 	bl	8004a84 <UART_WaitOnFlagUntilTimeout>
 800471e:	4603      	mov	r3, r0
 8004720:	2b00      	cmp	r3, #0
 8004722:	d001      	beq.n	8004728 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8004724:	2303      	movs	r3, #3
 8004726:	e046      	b.n	80047b6 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	881b      	ldrh	r3, [r3, #0]
 8004730:	461a      	mov	r2, r3
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800473a:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	691b      	ldr	r3, [r3, #16]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d103      	bne.n	800474c <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	3302      	adds	r3, #2
 8004748:	60bb      	str	r3, [r7, #8]
 800474a:	e017      	b.n	800477c <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	3301      	adds	r3, #1
 8004750:	60bb      	str	r3, [r7, #8]
 8004752:	e013      	b.n	800477c <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	9300      	str	r3, [sp, #0]
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	2200      	movs	r2, #0
 800475c:	2180      	movs	r1, #128	; 0x80
 800475e:	68f8      	ldr	r0, [r7, #12]
 8004760:	f000 f990 	bl	8004a84 <UART_WaitOnFlagUntilTimeout>
 8004764:	4603      	mov	r3, r0
 8004766:	2b00      	cmp	r3, #0
 8004768:	d001      	beq.n	800476e <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 800476a:	2303      	movs	r3, #3
 800476c:	e023      	b.n	80047b6 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	1c5a      	adds	r2, r3, #1
 8004772:	60ba      	str	r2, [r7, #8]
 8004774:	781a      	ldrb	r2, [r3, #0]
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004780:	b29b      	uxth	r3, r3
 8004782:	2b00      	cmp	r3, #0
 8004784:	d1b7      	bne.n	80046f6 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	9300      	str	r3, [sp, #0]
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	2200      	movs	r2, #0
 800478e:	2140      	movs	r1, #64	; 0x40
 8004790:	68f8      	ldr	r0, [r7, #12]
 8004792:	f000 f977 	bl	8004a84 <UART_WaitOnFlagUntilTimeout>
 8004796:	4603      	mov	r3, r0
 8004798:	2b00      	cmp	r3, #0
 800479a:	d001      	beq.n	80047a0 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800479c:	2303      	movs	r3, #3
 800479e:	e00a      	b.n	80047b6 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	2220      	movs	r2, #32
 80047a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	2200      	movs	r2, #0
 80047ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80047b0:	2300      	movs	r3, #0
 80047b2:	e000      	b.n	80047b6 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80047b4:	2302      	movs	r3, #2
  }
}
 80047b6:	4618      	mov	r0, r3
 80047b8:	3718      	adds	r7, #24
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}

080047be <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80047be:	b480      	push	{r7}
 80047c0:	b085      	sub	sp, #20
 80047c2:	af00      	add	r7, sp, #0
 80047c4:	60f8      	str	r0, [r7, #12]
 80047c6:	60b9      	str	r1, [r7, #8]
 80047c8:	4613      	mov	r3, r2
 80047ca:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80047d2:	b2db      	uxtb	r3, r3
 80047d4:	2b20      	cmp	r3, #32
 80047d6:	d140      	bne.n	800485a <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d002      	beq.n	80047e4 <HAL_UART_Receive_IT+0x26>
 80047de:	88fb      	ldrh	r3, [r7, #6]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d101      	bne.n	80047e8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80047e4:	2301      	movs	r3, #1
 80047e6:	e039      	b.n	800485c <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80047ee:	2b01      	cmp	r3, #1
 80047f0:	d101      	bne.n	80047f6 <HAL_UART_Receive_IT+0x38>
 80047f2:	2302      	movs	r3, #2
 80047f4:	e032      	b.n	800485c <HAL_UART_Receive_IT+0x9e>
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	2201      	movs	r2, #1
 80047fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	68ba      	ldr	r2, [r7, #8]
 8004802:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	88fa      	ldrh	r2, [r7, #6]
 8004808:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	88fa      	ldrh	r2, [r7, #6]
 800480e:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	2200      	movs	r2, #0
 8004814:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	2222      	movs	r2, #34	; 0x22
 800481a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	2200      	movs	r2, #0
 8004822:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	68da      	ldr	r2, [r3, #12]
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004834:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	695a      	ldr	r2, [r3, #20]
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f042 0201 	orr.w	r2, r2, #1
 8004844:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	68da      	ldr	r2, [r3, #12]
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f042 0220 	orr.w	r2, r2, #32
 8004854:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004856:	2300      	movs	r3, #0
 8004858:	e000      	b.n	800485c <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800485a:	2302      	movs	r3, #2
  }
}
 800485c:	4618      	mov	r0, r3
 800485e:	3714      	adds	r7, #20
 8004860:	46bd      	mov	sp, r7
 8004862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004866:	4770      	bx	lr

08004868 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b088      	sub	sp, #32
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	68db      	ldr	r3, [r3, #12]
 800487e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	695b      	ldr	r3, [r3, #20]
 8004886:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8004888:	2300      	movs	r3, #0
 800488a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800488c:	2300      	movs	r3, #0
 800488e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004890:	69fb      	ldr	r3, [r7, #28]
 8004892:	f003 030f 	and.w	r3, r3, #15
 8004896:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d10d      	bne.n	80048ba <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800489e:	69fb      	ldr	r3, [r7, #28]
 80048a0:	f003 0320 	and.w	r3, r3, #32
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d008      	beq.n	80048ba <HAL_UART_IRQHandler+0x52>
 80048a8:	69bb      	ldr	r3, [r7, #24]
 80048aa:	f003 0320 	and.w	r3, r3, #32
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d003      	beq.n	80048ba <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80048b2:	6878      	ldr	r0, [r7, #4]
 80048b4:	f000 f9d0 	bl	8004c58 <UART_Receive_IT>
      return;
 80048b8:	e0cb      	b.n	8004a52 <HAL_UART_IRQHandler+0x1ea>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	f000 80ab 	beq.w	8004a18 <HAL_UART_IRQHandler+0x1b0>
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	f003 0301 	and.w	r3, r3, #1
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d105      	bne.n	80048d8 <HAL_UART_IRQHandler+0x70>
 80048cc:	69bb      	ldr	r3, [r7, #24]
 80048ce:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	f000 80a0 	beq.w	8004a18 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80048d8:	69fb      	ldr	r3, [r7, #28]
 80048da:	f003 0301 	and.w	r3, r3, #1
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d00a      	beq.n	80048f8 <HAL_UART_IRQHandler+0x90>
 80048e2:	69bb      	ldr	r3, [r7, #24]
 80048e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d005      	beq.n	80048f8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048f0:	f043 0201 	orr.w	r2, r3, #1
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80048f8:	69fb      	ldr	r3, [r7, #28]
 80048fa:	f003 0304 	and.w	r3, r3, #4
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d00a      	beq.n	8004918 <HAL_UART_IRQHandler+0xb0>
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	f003 0301 	and.w	r3, r3, #1
 8004908:	2b00      	cmp	r3, #0
 800490a:	d005      	beq.n	8004918 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004910:	f043 0202 	orr.w	r2, r3, #2
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004918:	69fb      	ldr	r3, [r7, #28]
 800491a:	f003 0302 	and.w	r3, r3, #2
 800491e:	2b00      	cmp	r3, #0
 8004920:	d00a      	beq.n	8004938 <HAL_UART_IRQHandler+0xd0>
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	f003 0301 	and.w	r3, r3, #1
 8004928:	2b00      	cmp	r3, #0
 800492a:	d005      	beq.n	8004938 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004930:	f043 0204 	orr.w	r2, r3, #4
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004938:	69fb      	ldr	r3, [r7, #28]
 800493a:	f003 0308 	and.w	r3, r3, #8
 800493e:	2b00      	cmp	r3, #0
 8004940:	d00a      	beq.n	8004958 <HAL_UART_IRQHandler+0xf0>
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	f003 0301 	and.w	r3, r3, #1
 8004948:	2b00      	cmp	r3, #0
 800494a:	d005      	beq.n	8004958 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004950:	f043 0208 	orr.w	r2, r3, #8
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800495c:	2b00      	cmp	r3, #0
 800495e:	d077      	beq.n	8004a50 <HAL_UART_IRQHandler+0x1e8>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004960:	69fb      	ldr	r3, [r7, #28]
 8004962:	f003 0320 	and.w	r3, r3, #32
 8004966:	2b00      	cmp	r3, #0
 8004968:	d007      	beq.n	800497a <HAL_UART_IRQHandler+0x112>
 800496a:	69bb      	ldr	r3, [r7, #24]
 800496c:	f003 0320 	and.w	r3, r3, #32
 8004970:	2b00      	cmp	r3, #0
 8004972:	d002      	beq.n	800497a <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8004974:	6878      	ldr	r0, [r7, #4]
 8004976:	f000 f96f 	bl	8004c58 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	695b      	ldr	r3, [r3, #20]
 8004980:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004984:	2b40      	cmp	r3, #64	; 0x40
 8004986:	bf0c      	ite	eq
 8004988:	2301      	moveq	r3, #1
 800498a:	2300      	movne	r3, #0
 800498c:	b2db      	uxtb	r3, r3
 800498e:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004994:	f003 0308 	and.w	r3, r3, #8
 8004998:	2b00      	cmp	r3, #0
 800499a:	d102      	bne.n	80049a2 <HAL_UART_IRQHandler+0x13a>
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d031      	beq.n	8004a06 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	f000 f8b8 	bl	8004b18 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	695b      	ldr	r3, [r3, #20]
 80049ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049b2:	2b40      	cmp	r3, #64	; 0x40
 80049b4:	d123      	bne.n	80049fe <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	695a      	ldr	r2, [r3, #20]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049c4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d013      	beq.n	80049f6 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049d2:	4a21      	ldr	r2, [pc, #132]	; (8004a58 <HAL_UART_IRQHandler+0x1f0>)
 80049d4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049da:	4618      	mov	r0, r3
 80049dc:	f7fc f846 	bl	8000a6c <HAL_DMA_Abort_IT>
 80049e0:	4603      	mov	r3, r0
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d016      	beq.n	8004a14 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049ec:	687a      	ldr	r2, [r7, #4]
 80049ee:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80049f0:	4610      	mov	r0, r2
 80049f2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049f4:	e00e      	b.n	8004a14 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80049f6:	6878      	ldr	r0, [r7, #4]
 80049f8:	f000 f83a 	bl	8004a70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049fc:	e00a      	b.n	8004a14 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f000 f836 	bl	8004a70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a04:	e006      	b.n	8004a14 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f000 f832 	bl	8004a70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8004a12:	e01d      	b.n	8004a50 <HAL_UART_IRQHandler+0x1e8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a14:	bf00      	nop
    return;
 8004a16:	e01b      	b.n	8004a50 <HAL_UART_IRQHandler+0x1e8>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004a18:	69fb      	ldr	r3, [r7, #28]
 8004a1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d008      	beq.n	8004a34 <HAL_UART_IRQHandler+0x1cc>
 8004a22:	69bb      	ldr	r3, [r7, #24]
 8004a24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d003      	beq.n	8004a34 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8004a2c:	6878      	ldr	r0, [r7, #4]
 8004a2e:	f000 f8a5 	bl	8004b7c <UART_Transmit_IT>
    return;
 8004a32:	e00e      	b.n	8004a52 <HAL_UART_IRQHandler+0x1ea>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004a34:	69fb      	ldr	r3, [r7, #28]
 8004a36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d009      	beq.n	8004a52 <HAL_UART_IRQHandler+0x1ea>
 8004a3e:	69bb      	ldr	r3, [r7, #24]
 8004a40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d004      	beq.n	8004a52 <HAL_UART_IRQHandler+0x1ea>
  {
    UART_EndTransmit_IT(huart);
 8004a48:	6878      	ldr	r0, [r7, #4]
 8004a4a:	f000 f8ed 	bl	8004c28 <UART_EndTransmit_IT>
    return;
 8004a4e:	e000      	b.n	8004a52 <HAL_UART_IRQHandler+0x1ea>
    return;
 8004a50:	bf00      	nop
  }
}
 8004a52:	3720      	adds	r7, #32
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bd80      	pop	{r7, pc}
 8004a58:	08004b55 	.word	0x08004b55

08004a5c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b083      	sub	sp, #12
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004a64:	bf00      	nop
 8004a66:	370c      	adds	r7, #12
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6e:	4770      	bx	lr

08004a70 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b083      	sub	sp, #12
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004a78:	bf00      	nop
 8004a7a:	370c      	adds	r7, #12
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a82:	4770      	bx	lr

08004a84 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b084      	sub	sp, #16
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	60f8      	str	r0, [r7, #12]
 8004a8c:	60b9      	str	r1, [r7, #8]
 8004a8e:	603b      	str	r3, [r7, #0]
 8004a90:	4613      	mov	r3, r2
 8004a92:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a94:	e02c      	b.n	8004af0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a96:	69bb      	ldr	r3, [r7, #24]
 8004a98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a9c:	d028      	beq.n	8004af0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004a9e:	69bb      	ldr	r3, [r7, #24]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d007      	beq.n	8004ab4 <UART_WaitOnFlagUntilTimeout+0x30>
 8004aa4:	f7fb fd88 	bl	80005b8 <HAL_GetTick>
 8004aa8:	4602      	mov	r2, r0
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	1ad3      	subs	r3, r2, r3
 8004aae:	69ba      	ldr	r2, [r7, #24]
 8004ab0:	429a      	cmp	r2, r3
 8004ab2:	d21d      	bcs.n	8004af0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	68da      	ldr	r2, [r3, #12]
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004ac2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	695a      	ldr	r2, [r3, #20]
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f022 0201 	bic.w	r2, r2, #1
 8004ad2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2220      	movs	r2, #32
 8004ad8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2220      	movs	r2, #32
 8004ae0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004aec:	2303      	movs	r3, #3
 8004aee:	e00f      	b.n	8004b10 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	681a      	ldr	r2, [r3, #0]
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	4013      	ands	r3, r2
 8004afa:	68ba      	ldr	r2, [r7, #8]
 8004afc:	429a      	cmp	r2, r3
 8004afe:	bf0c      	ite	eq
 8004b00:	2301      	moveq	r3, #1
 8004b02:	2300      	movne	r3, #0
 8004b04:	b2db      	uxtb	r3, r3
 8004b06:	461a      	mov	r2, r3
 8004b08:	79fb      	ldrb	r3, [r7, #7]
 8004b0a:	429a      	cmp	r2, r3
 8004b0c:	d0c3      	beq.n	8004a96 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004b0e:	2300      	movs	r3, #0
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	3710      	adds	r7, #16
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}

08004b18 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b083      	sub	sp, #12
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	68da      	ldr	r2, [r3, #12]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004b2e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	695a      	ldr	r2, [r3, #20]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f022 0201 	bic.w	r2, r2, #1
 8004b3e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2220      	movs	r2, #32
 8004b44:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8004b48:	bf00      	nop
 8004b4a:	370c      	adds	r7, #12
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b52:	4770      	bx	lr

08004b54 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b084      	sub	sp, #16
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b60:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	2200      	movs	r2, #0
 8004b66:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004b6e:	68f8      	ldr	r0, [r7, #12]
 8004b70:	f7ff ff7e 	bl	8004a70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b74:	bf00      	nop
 8004b76:	3710      	adds	r7, #16
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}

08004b7c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b085      	sub	sp, #20
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004b8a:	b2db      	uxtb	r3, r3
 8004b8c:	2b21      	cmp	r3, #33	; 0x21
 8004b8e:	d144      	bne.n	8004c1a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b98:	d11a      	bne.n	8004bd0 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6a1b      	ldr	r3, [r3, #32]
 8004b9e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	881b      	ldrh	r3, [r3, #0]
 8004ba4:	461a      	mov	r2, r3
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004bae:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	691b      	ldr	r3, [r3, #16]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d105      	bne.n	8004bc4 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6a1b      	ldr	r3, [r3, #32]
 8004bbc:	1c9a      	adds	r2, r3, #2
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	621a      	str	r2, [r3, #32]
 8004bc2:	e00e      	b.n	8004be2 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6a1b      	ldr	r3, [r3, #32]
 8004bc8:	1c5a      	adds	r2, r3, #1
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	621a      	str	r2, [r3, #32]
 8004bce:	e008      	b.n	8004be2 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6a1b      	ldr	r3, [r3, #32]
 8004bd4:	1c59      	adds	r1, r3, #1
 8004bd6:	687a      	ldr	r2, [r7, #4]
 8004bd8:	6211      	str	r1, [r2, #32]
 8004bda:	781a      	ldrb	r2, [r3, #0]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004be6:	b29b      	uxth	r3, r3
 8004be8:	3b01      	subs	r3, #1
 8004bea:	b29b      	uxth	r3, r3
 8004bec:	687a      	ldr	r2, [r7, #4]
 8004bee:	4619      	mov	r1, r3
 8004bf0:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d10f      	bne.n	8004c16 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	68da      	ldr	r2, [r3, #12]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c04:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	68da      	ldr	r2, [r3, #12]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c14:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004c16:	2300      	movs	r3, #0
 8004c18:	e000      	b.n	8004c1c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004c1a:	2302      	movs	r3, #2
  }
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	3714      	adds	r7, #20
 8004c20:	46bd      	mov	sp, r7
 8004c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c26:	4770      	bx	lr

08004c28 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b082      	sub	sp, #8
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	68da      	ldr	r2, [r3, #12]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c3e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2220      	movs	r2, #32
 8004c44:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004c48:	6878      	ldr	r0, [r7, #4]
 8004c4a:	f7ff ff07 	bl	8004a5c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004c4e:	2300      	movs	r3, #0
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	3708      	adds	r7, #8
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bd80      	pop	{r7, pc}

08004c58 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b084      	sub	sp, #16
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004c66:	b2db      	uxtb	r3, r3
 8004c68:	2b22      	cmp	r3, #34	; 0x22
 8004c6a:	d171      	bne.n	8004d50 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	689b      	ldr	r3, [r3, #8]
 8004c70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c74:	d123      	bne.n	8004cbe <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c7a:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	691b      	ldr	r3, [r3, #16]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d10e      	bne.n	8004ca2 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	b29b      	uxth	r3, r3
 8004c8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c90:	b29a      	uxth	r2, r3
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c9a:	1c9a      	adds	r2, r3, #2
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	629a      	str	r2, [r3, #40]	; 0x28
 8004ca0:	e029      	b.n	8004cf6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	b29b      	uxth	r3, r3
 8004caa:	b2db      	uxtb	r3, r3
 8004cac:	b29a      	uxth	r2, r3
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cb6:	1c5a      	adds	r2, r3, #1
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	629a      	str	r2, [r3, #40]	; 0x28
 8004cbc:	e01b      	b.n	8004cf6 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	691b      	ldr	r3, [r3, #16]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d10a      	bne.n	8004cdc <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	6858      	ldr	r0, [r3, #4]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cd0:	1c59      	adds	r1, r3, #1
 8004cd2:	687a      	ldr	r2, [r7, #4]
 8004cd4:	6291      	str	r1, [r2, #40]	; 0x28
 8004cd6:	b2c2      	uxtb	r2, r0
 8004cd8:	701a      	strb	r2, [r3, #0]
 8004cda:	e00c      	b.n	8004cf6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	b2da      	uxtb	r2, r3
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ce8:	1c58      	adds	r0, r3, #1
 8004cea:	6879      	ldr	r1, [r7, #4]
 8004cec:	6288      	str	r0, [r1, #40]	; 0x28
 8004cee:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004cf2:	b2d2      	uxtb	r2, r2
 8004cf4:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004cfa:	b29b      	uxth	r3, r3
 8004cfc:	3b01      	subs	r3, #1
 8004cfe:	b29b      	uxth	r3, r3
 8004d00:	687a      	ldr	r2, [r7, #4]
 8004d02:	4619      	mov	r1, r3
 8004d04:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d120      	bne.n	8004d4c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	68da      	ldr	r2, [r3, #12]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f022 0220 	bic.w	r2, r2, #32
 8004d18:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	68da      	ldr	r2, [r3, #12]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004d28:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	695a      	ldr	r2, [r3, #20]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f022 0201 	bic.w	r2, r2, #1
 8004d38:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2220      	movs	r2, #32
 8004d3e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	f002 ffec 	bl	8007d20 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8004d48:	2300      	movs	r3, #0
 8004d4a:	e002      	b.n	8004d52 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	e000      	b.n	8004d52 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8004d50:	2302      	movs	r3, #2
  }
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	3710      	adds	r7, #16
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}
	...

08004d5c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d5c:	b5b0      	push	{r4, r5, r7, lr}
 8004d5e:	b084      	sub	sp, #16
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	691b      	ldr	r3, [r3, #16]
 8004d6a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	68da      	ldr	r2, [r3, #12]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	430a      	orrs	r2, r1
 8004d78:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	689a      	ldr	r2, [r3, #8]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	691b      	ldr	r3, [r3, #16]
 8004d82:	431a      	orrs	r2, r3
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	695b      	ldr	r3, [r3, #20]
 8004d88:	431a      	orrs	r2, r3
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	69db      	ldr	r3, [r3, #28]
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	68db      	ldr	r3, [r3, #12]
 8004d98:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004d9c:	f023 030c 	bic.w	r3, r3, #12
 8004da0:	687a      	ldr	r2, [r7, #4]
 8004da2:	6812      	ldr	r2, [r2, #0]
 8004da4:	68f9      	ldr	r1, [r7, #12]
 8004da6:	430b      	orrs	r3, r1
 8004da8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	695b      	ldr	r3, [r3, #20]
 8004db0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	699a      	ldr	r2, [r3, #24]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	430a      	orrs	r2, r1
 8004dbe:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	69db      	ldr	r3, [r3, #28]
 8004dc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004dc8:	f040 80e4 	bne.w	8004f94 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4aab      	ldr	r2, [pc, #684]	; (8005080 <UART_SetConfig+0x324>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d004      	beq.n	8004de0 <UART_SetConfig+0x84>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4aaa      	ldr	r2, [pc, #680]	; (8005084 <UART_SetConfig+0x328>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d16c      	bne.n	8004eba <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8004de0:	f7fe fee0 	bl	8003ba4 <HAL_RCC_GetPCLK2Freq>
 8004de4:	4602      	mov	r2, r0
 8004de6:	4613      	mov	r3, r2
 8004de8:	009b      	lsls	r3, r3, #2
 8004dea:	4413      	add	r3, r2
 8004dec:	009a      	lsls	r2, r3, #2
 8004dee:	441a      	add	r2, r3
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	005b      	lsls	r3, r3, #1
 8004df6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dfa:	4aa3      	ldr	r2, [pc, #652]	; (8005088 <UART_SetConfig+0x32c>)
 8004dfc:	fba2 2303 	umull	r2, r3, r2, r3
 8004e00:	095b      	lsrs	r3, r3, #5
 8004e02:	011c      	lsls	r4, r3, #4
 8004e04:	f7fe fece 	bl	8003ba4 <HAL_RCC_GetPCLK2Freq>
 8004e08:	4602      	mov	r2, r0
 8004e0a:	4613      	mov	r3, r2
 8004e0c:	009b      	lsls	r3, r3, #2
 8004e0e:	4413      	add	r3, r2
 8004e10:	009a      	lsls	r2, r3, #2
 8004e12:	441a      	add	r2, r3
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	005b      	lsls	r3, r3, #1
 8004e1a:	fbb2 f5f3 	udiv	r5, r2, r3
 8004e1e:	f7fe fec1 	bl	8003ba4 <HAL_RCC_GetPCLK2Freq>
 8004e22:	4602      	mov	r2, r0
 8004e24:	4613      	mov	r3, r2
 8004e26:	009b      	lsls	r3, r3, #2
 8004e28:	4413      	add	r3, r2
 8004e2a:	009a      	lsls	r2, r3, #2
 8004e2c:	441a      	add	r2, r3
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	005b      	lsls	r3, r3, #1
 8004e34:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e38:	4a93      	ldr	r2, [pc, #588]	; (8005088 <UART_SetConfig+0x32c>)
 8004e3a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e3e:	095b      	lsrs	r3, r3, #5
 8004e40:	2264      	movs	r2, #100	; 0x64
 8004e42:	fb02 f303 	mul.w	r3, r2, r3
 8004e46:	1aeb      	subs	r3, r5, r3
 8004e48:	00db      	lsls	r3, r3, #3
 8004e4a:	3332      	adds	r3, #50	; 0x32
 8004e4c:	4a8e      	ldr	r2, [pc, #568]	; (8005088 <UART_SetConfig+0x32c>)
 8004e4e:	fba2 2303 	umull	r2, r3, r2, r3
 8004e52:	095b      	lsrs	r3, r3, #5
 8004e54:	005b      	lsls	r3, r3, #1
 8004e56:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004e5a:	441c      	add	r4, r3
 8004e5c:	f7fe fea2 	bl	8003ba4 <HAL_RCC_GetPCLK2Freq>
 8004e60:	4602      	mov	r2, r0
 8004e62:	4613      	mov	r3, r2
 8004e64:	009b      	lsls	r3, r3, #2
 8004e66:	4413      	add	r3, r2
 8004e68:	009a      	lsls	r2, r3, #2
 8004e6a:	441a      	add	r2, r3
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	005b      	lsls	r3, r3, #1
 8004e72:	fbb2 f5f3 	udiv	r5, r2, r3
 8004e76:	f7fe fe95 	bl	8003ba4 <HAL_RCC_GetPCLK2Freq>
 8004e7a:	4602      	mov	r2, r0
 8004e7c:	4613      	mov	r3, r2
 8004e7e:	009b      	lsls	r3, r3, #2
 8004e80:	4413      	add	r3, r2
 8004e82:	009a      	lsls	r2, r3, #2
 8004e84:	441a      	add	r2, r3
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	005b      	lsls	r3, r3, #1
 8004e8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e90:	4a7d      	ldr	r2, [pc, #500]	; (8005088 <UART_SetConfig+0x32c>)
 8004e92:	fba2 2303 	umull	r2, r3, r2, r3
 8004e96:	095b      	lsrs	r3, r3, #5
 8004e98:	2264      	movs	r2, #100	; 0x64
 8004e9a:	fb02 f303 	mul.w	r3, r2, r3
 8004e9e:	1aeb      	subs	r3, r5, r3
 8004ea0:	00db      	lsls	r3, r3, #3
 8004ea2:	3332      	adds	r3, #50	; 0x32
 8004ea4:	4a78      	ldr	r2, [pc, #480]	; (8005088 <UART_SetConfig+0x32c>)
 8004ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8004eaa:	095b      	lsrs	r3, r3, #5
 8004eac:	f003 0207 	and.w	r2, r3, #7
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4422      	add	r2, r4
 8004eb6:	609a      	str	r2, [r3, #8]
 8004eb8:	e154      	b.n	8005164 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8004eba:	f7fe fe5f 	bl	8003b7c <HAL_RCC_GetPCLK1Freq>
 8004ebe:	4602      	mov	r2, r0
 8004ec0:	4613      	mov	r3, r2
 8004ec2:	009b      	lsls	r3, r3, #2
 8004ec4:	4413      	add	r3, r2
 8004ec6:	009a      	lsls	r2, r3, #2
 8004ec8:	441a      	add	r2, r3
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	005b      	lsls	r3, r3, #1
 8004ed0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ed4:	4a6c      	ldr	r2, [pc, #432]	; (8005088 <UART_SetConfig+0x32c>)
 8004ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8004eda:	095b      	lsrs	r3, r3, #5
 8004edc:	011c      	lsls	r4, r3, #4
 8004ede:	f7fe fe4d 	bl	8003b7c <HAL_RCC_GetPCLK1Freq>
 8004ee2:	4602      	mov	r2, r0
 8004ee4:	4613      	mov	r3, r2
 8004ee6:	009b      	lsls	r3, r3, #2
 8004ee8:	4413      	add	r3, r2
 8004eea:	009a      	lsls	r2, r3, #2
 8004eec:	441a      	add	r2, r3
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	005b      	lsls	r3, r3, #1
 8004ef4:	fbb2 f5f3 	udiv	r5, r2, r3
 8004ef8:	f7fe fe40 	bl	8003b7c <HAL_RCC_GetPCLK1Freq>
 8004efc:	4602      	mov	r2, r0
 8004efe:	4613      	mov	r3, r2
 8004f00:	009b      	lsls	r3, r3, #2
 8004f02:	4413      	add	r3, r2
 8004f04:	009a      	lsls	r2, r3, #2
 8004f06:	441a      	add	r2, r3
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	005b      	lsls	r3, r3, #1
 8004f0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f12:	4a5d      	ldr	r2, [pc, #372]	; (8005088 <UART_SetConfig+0x32c>)
 8004f14:	fba2 2303 	umull	r2, r3, r2, r3
 8004f18:	095b      	lsrs	r3, r3, #5
 8004f1a:	2264      	movs	r2, #100	; 0x64
 8004f1c:	fb02 f303 	mul.w	r3, r2, r3
 8004f20:	1aeb      	subs	r3, r5, r3
 8004f22:	00db      	lsls	r3, r3, #3
 8004f24:	3332      	adds	r3, #50	; 0x32
 8004f26:	4a58      	ldr	r2, [pc, #352]	; (8005088 <UART_SetConfig+0x32c>)
 8004f28:	fba2 2303 	umull	r2, r3, r2, r3
 8004f2c:	095b      	lsrs	r3, r3, #5
 8004f2e:	005b      	lsls	r3, r3, #1
 8004f30:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004f34:	441c      	add	r4, r3
 8004f36:	f7fe fe21 	bl	8003b7c <HAL_RCC_GetPCLK1Freq>
 8004f3a:	4602      	mov	r2, r0
 8004f3c:	4613      	mov	r3, r2
 8004f3e:	009b      	lsls	r3, r3, #2
 8004f40:	4413      	add	r3, r2
 8004f42:	009a      	lsls	r2, r3, #2
 8004f44:	441a      	add	r2, r3
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	005b      	lsls	r3, r3, #1
 8004f4c:	fbb2 f5f3 	udiv	r5, r2, r3
 8004f50:	f7fe fe14 	bl	8003b7c <HAL_RCC_GetPCLK1Freq>
 8004f54:	4602      	mov	r2, r0
 8004f56:	4613      	mov	r3, r2
 8004f58:	009b      	lsls	r3, r3, #2
 8004f5a:	4413      	add	r3, r2
 8004f5c:	009a      	lsls	r2, r3, #2
 8004f5e:	441a      	add	r2, r3
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	005b      	lsls	r3, r3, #1
 8004f66:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f6a:	4a47      	ldr	r2, [pc, #284]	; (8005088 <UART_SetConfig+0x32c>)
 8004f6c:	fba2 2303 	umull	r2, r3, r2, r3
 8004f70:	095b      	lsrs	r3, r3, #5
 8004f72:	2264      	movs	r2, #100	; 0x64
 8004f74:	fb02 f303 	mul.w	r3, r2, r3
 8004f78:	1aeb      	subs	r3, r5, r3
 8004f7a:	00db      	lsls	r3, r3, #3
 8004f7c:	3332      	adds	r3, #50	; 0x32
 8004f7e:	4a42      	ldr	r2, [pc, #264]	; (8005088 <UART_SetConfig+0x32c>)
 8004f80:	fba2 2303 	umull	r2, r3, r2, r3
 8004f84:	095b      	lsrs	r3, r3, #5
 8004f86:	f003 0207 	and.w	r2, r3, #7
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4422      	add	r2, r4
 8004f90:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8004f92:	e0e7      	b.n	8005164 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a39      	ldr	r2, [pc, #228]	; (8005080 <UART_SetConfig+0x324>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d004      	beq.n	8004fa8 <UART_SetConfig+0x24c>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a38      	ldr	r2, [pc, #224]	; (8005084 <UART_SetConfig+0x328>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d171      	bne.n	800508c <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8004fa8:	f7fe fdfc 	bl	8003ba4 <HAL_RCC_GetPCLK2Freq>
 8004fac:	4602      	mov	r2, r0
 8004fae:	4613      	mov	r3, r2
 8004fb0:	009b      	lsls	r3, r3, #2
 8004fb2:	4413      	add	r3, r2
 8004fb4:	009a      	lsls	r2, r3, #2
 8004fb6:	441a      	add	r2, r3
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	009b      	lsls	r3, r3, #2
 8004fbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fc2:	4a31      	ldr	r2, [pc, #196]	; (8005088 <UART_SetConfig+0x32c>)
 8004fc4:	fba2 2303 	umull	r2, r3, r2, r3
 8004fc8:	095b      	lsrs	r3, r3, #5
 8004fca:	011c      	lsls	r4, r3, #4
 8004fcc:	f7fe fdea 	bl	8003ba4 <HAL_RCC_GetPCLK2Freq>
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	4613      	mov	r3, r2
 8004fd4:	009b      	lsls	r3, r3, #2
 8004fd6:	4413      	add	r3, r2
 8004fd8:	009a      	lsls	r2, r3, #2
 8004fda:	441a      	add	r2, r3
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	009b      	lsls	r3, r3, #2
 8004fe2:	fbb2 f5f3 	udiv	r5, r2, r3
 8004fe6:	f7fe fddd 	bl	8003ba4 <HAL_RCC_GetPCLK2Freq>
 8004fea:	4602      	mov	r2, r0
 8004fec:	4613      	mov	r3, r2
 8004fee:	009b      	lsls	r3, r3, #2
 8004ff0:	4413      	add	r3, r2
 8004ff2:	009a      	lsls	r2, r3, #2
 8004ff4:	441a      	add	r2, r3
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	009b      	lsls	r3, r3, #2
 8004ffc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005000:	4a21      	ldr	r2, [pc, #132]	; (8005088 <UART_SetConfig+0x32c>)
 8005002:	fba2 2303 	umull	r2, r3, r2, r3
 8005006:	095b      	lsrs	r3, r3, #5
 8005008:	2264      	movs	r2, #100	; 0x64
 800500a:	fb02 f303 	mul.w	r3, r2, r3
 800500e:	1aeb      	subs	r3, r5, r3
 8005010:	011b      	lsls	r3, r3, #4
 8005012:	3332      	adds	r3, #50	; 0x32
 8005014:	4a1c      	ldr	r2, [pc, #112]	; (8005088 <UART_SetConfig+0x32c>)
 8005016:	fba2 2303 	umull	r2, r3, r2, r3
 800501a:	095b      	lsrs	r3, r3, #5
 800501c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005020:	441c      	add	r4, r3
 8005022:	f7fe fdbf 	bl	8003ba4 <HAL_RCC_GetPCLK2Freq>
 8005026:	4602      	mov	r2, r0
 8005028:	4613      	mov	r3, r2
 800502a:	009b      	lsls	r3, r3, #2
 800502c:	4413      	add	r3, r2
 800502e:	009a      	lsls	r2, r3, #2
 8005030:	441a      	add	r2, r3
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	009b      	lsls	r3, r3, #2
 8005038:	fbb2 f5f3 	udiv	r5, r2, r3
 800503c:	f7fe fdb2 	bl	8003ba4 <HAL_RCC_GetPCLK2Freq>
 8005040:	4602      	mov	r2, r0
 8005042:	4613      	mov	r3, r2
 8005044:	009b      	lsls	r3, r3, #2
 8005046:	4413      	add	r3, r2
 8005048:	009a      	lsls	r2, r3, #2
 800504a:	441a      	add	r2, r3
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	009b      	lsls	r3, r3, #2
 8005052:	fbb2 f3f3 	udiv	r3, r2, r3
 8005056:	4a0c      	ldr	r2, [pc, #48]	; (8005088 <UART_SetConfig+0x32c>)
 8005058:	fba2 2303 	umull	r2, r3, r2, r3
 800505c:	095b      	lsrs	r3, r3, #5
 800505e:	2264      	movs	r2, #100	; 0x64
 8005060:	fb02 f303 	mul.w	r3, r2, r3
 8005064:	1aeb      	subs	r3, r5, r3
 8005066:	011b      	lsls	r3, r3, #4
 8005068:	3332      	adds	r3, #50	; 0x32
 800506a:	4a07      	ldr	r2, [pc, #28]	; (8005088 <UART_SetConfig+0x32c>)
 800506c:	fba2 2303 	umull	r2, r3, r2, r3
 8005070:	095b      	lsrs	r3, r3, #5
 8005072:	f003 020f 	and.w	r2, r3, #15
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4422      	add	r2, r4
 800507c:	609a      	str	r2, [r3, #8]
 800507e:	e071      	b.n	8005164 <UART_SetConfig+0x408>
 8005080:	40011000 	.word	0x40011000
 8005084:	40011400 	.word	0x40011400
 8005088:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800508c:	f7fe fd76 	bl	8003b7c <HAL_RCC_GetPCLK1Freq>
 8005090:	4602      	mov	r2, r0
 8005092:	4613      	mov	r3, r2
 8005094:	009b      	lsls	r3, r3, #2
 8005096:	4413      	add	r3, r2
 8005098:	009a      	lsls	r2, r3, #2
 800509a:	441a      	add	r2, r3
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	009b      	lsls	r3, r3, #2
 80050a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80050a6:	4a31      	ldr	r2, [pc, #196]	; (800516c <UART_SetConfig+0x410>)
 80050a8:	fba2 2303 	umull	r2, r3, r2, r3
 80050ac:	095b      	lsrs	r3, r3, #5
 80050ae:	011c      	lsls	r4, r3, #4
 80050b0:	f7fe fd64 	bl	8003b7c <HAL_RCC_GetPCLK1Freq>
 80050b4:	4602      	mov	r2, r0
 80050b6:	4613      	mov	r3, r2
 80050b8:	009b      	lsls	r3, r3, #2
 80050ba:	4413      	add	r3, r2
 80050bc:	009a      	lsls	r2, r3, #2
 80050be:	441a      	add	r2, r3
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	009b      	lsls	r3, r3, #2
 80050c6:	fbb2 f5f3 	udiv	r5, r2, r3
 80050ca:	f7fe fd57 	bl	8003b7c <HAL_RCC_GetPCLK1Freq>
 80050ce:	4602      	mov	r2, r0
 80050d0:	4613      	mov	r3, r2
 80050d2:	009b      	lsls	r3, r3, #2
 80050d4:	4413      	add	r3, r2
 80050d6:	009a      	lsls	r2, r3, #2
 80050d8:	441a      	add	r2, r3
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	009b      	lsls	r3, r3, #2
 80050e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80050e4:	4a21      	ldr	r2, [pc, #132]	; (800516c <UART_SetConfig+0x410>)
 80050e6:	fba2 2303 	umull	r2, r3, r2, r3
 80050ea:	095b      	lsrs	r3, r3, #5
 80050ec:	2264      	movs	r2, #100	; 0x64
 80050ee:	fb02 f303 	mul.w	r3, r2, r3
 80050f2:	1aeb      	subs	r3, r5, r3
 80050f4:	011b      	lsls	r3, r3, #4
 80050f6:	3332      	adds	r3, #50	; 0x32
 80050f8:	4a1c      	ldr	r2, [pc, #112]	; (800516c <UART_SetConfig+0x410>)
 80050fa:	fba2 2303 	umull	r2, r3, r2, r3
 80050fe:	095b      	lsrs	r3, r3, #5
 8005100:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005104:	441c      	add	r4, r3
 8005106:	f7fe fd39 	bl	8003b7c <HAL_RCC_GetPCLK1Freq>
 800510a:	4602      	mov	r2, r0
 800510c:	4613      	mov	r3, r2
 800510e:	009b      	lsls	r3, r3, #2
 8005110:	4413      	add	r3, r2
 8005112:	009a      	lsls	r2, r3, #2
 8005114:	441a      	add	r2, r3
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	009b      	lsls	r3, r3, #2
 800511c:	fbb2 f5f3 	udiv	r5, r2, r3
 8005120:	f7fe fd2c 	bl	8003b7c <HAL_RCC_GetPCLK1Freq>
 8005124:	4602      	mov	r2, r0
 8005126:	4613      	mov	r3, r2
 8005128:	009b      	lsls	r3, r3, #2
 800512a:	4413      	add	r3, r2
 800512c:	009a      	lsls	r2, r3, #2
 800512e:	441a      	add	r2, r3
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	009b      	lsls	r3, r3, #2
 8005136:	fbb2 f3f3 	udiv	r3, r2, r3
 800513a:	4a0c      	ldr	r2, [pc, #48]	; (800516c <UART_SetConfig+0x410>)
 800513c:	fba2 2303 	umull	r2, r3, r2, r3
 8005140:	095b      	lsrs	r3, r3, #5
 8005142:	2264      	movs	r2, #100	; 0x64
 8005144:	fb02 f303 	mul.w	r3, r2, r3
 8005148:	1aeb      	subs	r3, r5, r3
 800514a:	011b      	lsls	r3, r3, #4
 800514c:	3332      	adds	r3, #50	; 0x32
 800514e:	4a07      	ldr	r2, [pc, #28]	; (800516c <UART_SetConfig+0x410>)
 8005150:	fba2 2303 	umull	r2, r3, r2, r3
 8005154:	095b      	lsrs	r3, r3, #5
 8005156:	f003 020f 	and.w	r2, r3, #15
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4422      	add	r2, r4
 8005160:	609a      	str	r2, [r3, #8]
}
 8005162:	e7ff      	b.n	8005164 <UART_SetConfig+0x408>
 8005164:	bf00      	nop
 8005166:	3710      	adds	r7, #16
 8005168:	46bd      	mov	sp, r7
 800516a:	bdb0      	pop	{r4, r5, r7, pc}
 800516c:	51eb851f 	.word	0x51eb851f

08005170 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8005170:	b480      	push	{r7}
 8005172:	b085      	sub	sp, #20
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
 8005178:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 800517a:	2300      	movs	r3, #0
 800517c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 800517e:	2300      	movs	r3, #0
 8005180:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	2b01      	cmp	r3, #1
 8005188:	d029      	beq.n	80051de <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005196:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800519a:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80051a4:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 80051aa:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 80051b0:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 80051b6:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 80051bc:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 80051c2:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 80051c8:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 80051ce:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80051d0:	68fa      	ldr	r2, [r7, #12]
 80051d2:	4313      	orrs	r3, r2
 80051d4:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	68fa      	ldr	r2, [r7, #12]
 80051da:	601a      	str	r2, [r3, #0]
 80051dc:	e034      	b.n	8005248 <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80051ea:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80051f4:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 80051fa:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80051fc:	68fa      	ldr	r2, [r7, #12]
 80051fe:	4313      	orrs	r3, r2
 8005200:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800520e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005212:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800521c:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 8005222:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 8005228:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 800522e:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 8005234:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005236:	68ba      	ldr	r2, [r7, #8]
 8005238:	4313      	orrs	r3, r2
 800523a:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	68fa      	ldr	r2, [r7, #12]
 8005240:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	68ba      	ldr	r2, [r7, #8]
 8005246:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 8005248:	2300      	movs	r3, #0
}
 800524a:	4618      	mov	r0, r3
 800524c:	3714      	adds	r7, #20
 800524e:	46bd      	mov	sp, r7
 8005250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005254:	4770      	bx	lr

08005256 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8005256:	b480      	push	{r7}
 8005258:	b087      	sub	sp, #28
 800525a:	af00      	add	r7, sp, #0
 800525c:	60f8      	str	r0, [r7, #12]
 800525e:	60b9      	str	r1, [r7, #8]
 8005260:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 8005262:	2300      	movs	r3, #0
 8005264:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 8005266:	2300      	movs	r3, #0
 8005268:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2b01      	cmp	r3, #1
 800526e:	d02e      	beq.n	80052ce <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	689b      	ldr	r3, [r3, #8]
 8005274:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800527c:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	3b01      	subs	r3, #1
 800528a:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800528c:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	689b      	ldr	r3, [r3, #8]
 8005292:	3b01      	subs	r3, #1
 8005294:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8005296:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	68db      	ldr	r3, [r3, #12]
 800529c:	3b01      	subs	r3, #1
 800529e:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 80052a0:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	691b      	ldr	r3, [r3, #16]
 80052a6:	3b01      	subs	r3, #1
 80052a8:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 80052aa:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	695b      	ldr	r3, [r3, #20]
 80052b0:	3b01      	subs	r3, #1
 80052b2:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 80052b4:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	699b      	ldr	r3, [r3, #24]
 80052ba:	3b01      	subs	r3, #1
 80052bc:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80052be:	4313      	orrs	r3, r2
 80052c0:	697a      	ldr	r2, [r7, #20]
 80052c2:	4313      	orrs	r3, r2
 80052c4:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	697a      	ldr	r2, [r7, #20]
 80052ca:	609a      	str	r2, [r3, #8]
 80052cc:	e03b      	b.n	8005346 <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	689b      	ldr	r3, [r3, #8]
 80052d2:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 80052d4:	697b      	ldr	r3, [r7, #20]
 80052d6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80052da:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80052de:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	68db      	ldr	r3, [r3, #12]
 80052e4:	3b01      	subs	r3, #1
 80052e6:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	695b      	ldr	r3, [r3, #20]
 80052ec:	3b01      	subs	r3, #1
 80052ee:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 80052f0:	4313      	orrs	r3, r2
 80052f2:	697a      	ldr	r2, [r7, #20]
 80052f4:	4313      	orrs	r3, r2
 80052f6:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	68db      	ldr	r3, [r3, #12]
 80052fc:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005304:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	3b01      	subs	r3, #1
 8005312:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8005314:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	689b      	ldr	r3, [r3, #8]
 800531a:	3b01      	subs	r3, #1
 800531c:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 800531e:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	691b      	ldr	r3, [r3, #16]
 8005324:	3b01      	subs	r3, #1
 8005326:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8005328:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	699b      	ldr	r3, [r3, #24]
 800532e:	3b01      	subs	r3, #1
 8005330:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8005332:	4313      	orrs	r3, r2
 8005334:	693a      	ldr	r2, [r7, #16]
 8005336:	4313      	orrs	r3, r2
 8005338:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	697a      	ldr	r2, [r7, #20]
 800533e:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	693a      	ldr	r2, [r7, #16]
 8005344:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 8005346:	2300      	movs	r3, #0
}
 8005348:	4618      	mov	r0, r3
 800534a:	371c      	adds	r7, #28
 800534c:	46bd      	mov	sp, r7
 800534e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005352:	4770      	bx	lr

08005354 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b086      	sub	sp, #24
 8005358:	af00      	add	r7, sp, #0
 800535a:	60f8      	str	r0, [r7, #12]
 800535c:	60b9      	str	r1, [r7, #8]
 800535e:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0U;
 8005360:	2300      	movs	r3, #0
 8005362:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 8005364:	2300      	movs	r3, #0
 8005366:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8005370:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	689b      	ldr	r3, [r3, #8]
 8005376:	3b01      	subs	r3, #1
 8005378:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 800537a:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9U)
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	68db      	ldr	r3, [r3, #12]
 8005380:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8005382:	4313      	orrs	r3, r2
 8005384:	613b      	str	r3, [r7, #16]
                    );
    
  Device->SDCMR = tmpr;
 8005386:	693a      	ldr	r2, [r7, #16]
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	611a      	str	r2, [r3, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800538c:	f7fb f914 	bl	80005b8 <HAL_GetTick>
 8005390:	6178      	str	r0, [r7, #20]

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8005392:	e010      	b.n	80053b6 <FMC_SDRAM_SendCommand+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	f1b3 3fff 	cmp.w	r3, #4294967295
 800539a:	d00c      	beq.n	80053b6 <FMC_SDRAM_SendCommand+0x62>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d007      	beq.n	80053b2 <FMC_SDRAM_SendCommand+0x5e>
 80053a2:	f7fb f909 	bl	80005b8 <HAL_GetTick>
 80053a6:	4602      	mov	r2, r0
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	1ad3      	subs	r3, r2, r3
 80053ac:	687a      	ldr	r2, [r7, #4]
 80053ae:	429a      	cmp	r2, r3
 80053b0:	d201      	bcs.n	80053b6 <FMC_SDRAM_SendCommand+0x62>
      {
        return HAL_TIMEOUT;
 80053b2:	2303      	movs	r3, #3
 80053b4:	e006      	b.n	80053c4 <FMC_SDRAM_SendCommand+0x70>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	699b      	ldr	r3, [r3, #24]
 80053ba:	f003 0320 	and.w	r3, r3, #32
 80053be:	2b20      	cmp	r3, #32
 80053c0:	d0e8      	beq.n	8005394 <FMC_SDRAM_SendCommand+0x40>
      }
    }
  }

  return HAL_OK;
 80053c2:	2300      	movs	r3, #0
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	3718      	adds	r7, #24
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}

080053cc <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b083      	sub	sp, #12
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
 80053d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	695a      	ldr	r2, [r3, #20]
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	005b      	lsls	r3, r3, #1
 80053de:	431a      	orrs	r2, r3
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 80053e4:	2300      	movs	r3, #0
}
 80053e6:	4618      	mov	r0, r3
 80053e8:	370c      	adds	r7, #12
 80053ea:	46bd      	mov	sp, r7
 80053ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f0:	4770      	bx	lr
	...

080053f4 <ft6x06_Init>:
  *         from MCU to FT6206 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval None
  */
void ft6x06_Init(uint16_t DeviceAddr)
{  
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b084      	sub	sp, #16
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	4603      	mov	r3, r0
 80053fc:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;
  
  /* Check if device instance already exists */
  instance = ft6x06_GetInstance(DeviceAddr);
 80053fe:	88fb      	ldrh	r3, [r7, #6]
 8005400:	4618      	mov	r0, r3
 8005402:	f000 f90d 	bl	8005620 <ft6x06_GetInstance>
 8005406:	4603      	mov	r3, r0
 8005408:	73fb      	strb	r3, [r7, #15]
  
  /* To prevent double initialization */
  if(instance == 0xFF)
 800540a:	7bfb      	ldrb	r3, [r7, #15]
 800540c:	2bff      	cmp	r3, #255	; 0xff
 800540e:	d10e      	bne.n	800542e <ft6x06_Init+0x3a>
  {
    /* Look for empty instance */
    empty = ft6x06_GetInstance(0);
 8005410:	2000      	movs	r0, #0
 8005412:	f000 f905 	bl	8005620 <ft6x06_GetInstance>
 8005416:	4603      	mov	r3, r0
 8005418:	73bb      	strb	r3, [r7, #14]
    
    if(empty < FT6x06_MAX_INSTANCE)
 800541a:	7bbb      	ldrb	r3, [r7, #14]
 800541c:	2b01      	cmp	r3, #1
 800541e:	d806      	bhi.n	800542e <ft6x06_Init+0x3a>
    {
      /* Register the current device instance */
      ft6x06[empty] = DeviceAddr;
 8005420:	7bbb      	ldrb	r3, [r7, #14]
 8005422:	88fa      	ldrh	r2, [r7, #6]
 8005424:	b2d1      	uxtb	r1, r2
 8005426:	4a04      	ldr	r2, [pc, #16]	; (8005438 <ft6x06_Init+0x44>)
 8005428:	54d1      	strb	r1, [r2, r3]
      
      /* Initialize IO BUS layer */
      TS_IO_Init(); 
 800542a:	f000 fccf 	bl	8005dcc <TS_IO_Init>
    }
  }
}
 800542e:	bf00      	nop
 8005430:	3710      	adds	r7, #16
 8005432:	46bd      	mov	sp, r7
 8005434:	bd80      	pop	{r7, pc}
 8005436:	bf00      	nop
 8005438:	200000a8 	.word	0x200000a8

0800543c <ft6x06_Reset>:
  *         @note : Not applicable to FT6206.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval None
  */
void ft6x06_Reset(uint16_t DeviceAddr)
{
 800543c:	b480      	push	{r7}
 800543e:	b083      	sub	sp, #12
 8005440:	af00      	add	r7, sp, #0
 8005442:	4603      	mov	r3, r0
 8005444:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT6206 IC */
}
 8005446:	bf00      	nop
 8005448:	370c      	adds	r7, #12
 800544a:	46bd      	mov	sp, r7
 800544c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005450:	4770      	bx	lr

08005452 <ft6x06_ReadID>:
  *         able to read the FT6206 device ID, and verify this is a FT6206.
  * @param  DeviceAddr: I2C FT6x06 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft6x06_ReadID(uint16_t DeviceAddr)
{
 8005452:	b580      	push	{r7, lr}
 8005454:	b082      	sub	sp, #8
 8005456:	af00      	add	r7, sp, #0
 8005458:	4603      	mov	r3, r0
 800545a:	80fb      	strh	r3, [r7, #6]
  /* Initialize I2C link if needed */
  TS_IO_Init();
 800545c:	f000 fcb6 	bl	8005dcc <TS_IO_Init>
  
  /* Return the device ID value */
  return (TS_IO_Read(DeviceAddr, FT6206_CHIP_ID_REG));
 8005460:	88fb      	ldrh	r3, [r7, #6]
 8005462:	b2db      	uxtb	r3, r3
 8005464:	21a8      	movs	r1, #168	; 0xa8
 8005466:	4618      	mov	r0, r3
 8005468:	f000 fcc9 	bl	8005dfe <TS_IO_Read>
 800546c:	4603      	mov	r3, r0
 800546e:	b29b      	uxth	r3, r3
}
 8005470:	4618      	mov	r0, r3
 8005472:	3708      	adds	r7, #8
 8005474:	46bd      	mov	sp, r7
 8005476:	bd80      	pop	{r7, pc}

08005478 <ft6x06_TS_Start>:
  *         the touch screen).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft6x06_TS_Start(uint16_t DeviceAddr)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b082      	sub	sp, #8
 800547c:	af00      	add	r7, sp, #0
 800547e:	4603      	mov	r3, r0
 8005480:	80fb      	strh	r3, [r7, #6]
  /* Hw Calibration sequence start : should be done once after each power up */
  /* This is called internal calibration of the touch screen                 */
  ft6x06_TS_Calibration(DeviceAddr);
#endif
  /* Minimum static configuration of FT6206 */
  ft6x06_TS_Configure(DeviceAddr);
 8005482:	88fb      	ldrh	r3, [r7, #6]
 8005484:	4618      	mov	r0, r3
 8005486:	f000 f8bc 	bl	8005602 <ft6x06_TS_Configure>

  /* By default set FT6206 IC in Polling mode : no INT generation on FT6206 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft6x06_TS_DisableIT(DeviceAddr);
 800548a:	88fb      	ldrh	r3, [r7, #6]
 800548c:	4618      	mov	r0, r3
 800548e:	f000 f88d 	bl	80055ac <ft6x06_TS_DisableIT>
}
 8005492:	bf00      	nop
 8005494:	3708      	adds	r7, #8
 8005496:	46bd      	mov	sp, r7
 8005498:	bd80      	pop	{r7, pc}
	...

0800549c <ft6x06_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft6x06_TS_DetectTouch(uint16_t DeviceAddr)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b084      	sub	sp, #16
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	4603      	mov	r3, r0
 80054a4:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 80054a6:	2300      	movs	r3, #0
 80054a8:	73fb      	strb	r3, [r7, #15]

  /* Read register FT6206_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT6206_TD_STAT_REG);
 80054aa:	88fb      	ldrh	r3, [r7, #6]
 80054ac:	b2db      	uxtb	r3, r3
 80054ae:	2102      	movs	r1, #2
 80054b0:	4618      	mov	r0, r3
 80054b2:	f000 fca4 	bl	8005dfe <TS_IO_Read>
 80054b6:	4603      	mov	r3, r0
 80054b8:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT6206_TD_STAT_MASK;
 80054ba:	7bfb      	ldrb	r3, [r7, #15]
 80054bc:	b2db      	uxtb	r3, r3
 80054be:	f003 030f 	and.w	r3, r3, #15
 80054c2:	b2db      	uxtb	r3, r3
 80054c4:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT6206_MAX_DETECTABLE_TOUCH)
 80054c6:	7bfb      	ldrb	r3, [r7, #15]
 80054c8:	b2db      	uxtb	r3, r3
 80054ca:	2b02      	cmp	r3, #2
 80054cc:	d901      	bls.n	80054d2 <ft6x06_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 80054ce:	2300      	movs	r3, #0
 80054d0:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft6x06 driver internal global : current number of active touches */
  ft6x06_handle.currActiveTouchNb = nbTouch;
 80054d2:	7bfb      	ldrb	r3, [r7, #15]
 80054d4:	b2da      	uxtb	r2, r3
 80054d6:	4b05      	ldr	r3, [pc, #20]	; (80054ec <ft6x06_TS_DetectTouch+0x50>)
 80054d8:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft6x06_handle.currActiveTouchIdx = 0;
 80054da:	4b04      	ldr	r3, [pc, #16]	; (80054ec <ft6x06_TS_DetectTouch+0x50>)
 80054dc:	2200      	movs	r2, #0
 80054de:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 80054e0:	7bfb      	ldrb	r3, [r7, #15]
 80054e2:	b2db      	uxtb	r3, r3
}
 80054e4:	4618      	mov	r0, r3
 80054e6:	3710      	adds	r7, #16
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bd80      	pop	{r7, pc}
 80054ec:	200000ac 	.word	0x200000ac

080054f0 <ft6x06_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft6x06_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b086      	sub	sp, #24
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	4603      	mov	r3, r0
 80054f8:	60b9      	str	r1, [r7, #8]
 80054fa:	607a      	str	r2, [r7, #4]
 80054fc:	81fb      	strh	r3, [r7, #14]
  uint8_t regAddress = 0;
 80054fe:	2300      	movs	r3, #0
 8005500:	75fb      	strb	r3, [r7, #23]
  uint8_t  dataxy[4];
  
  if(ft6x06_handle.currActiveTouchIdx < ft6x06_handle.currActiveTouchNb)
 8005502:	4b1f      	ldr	r3, [pc, #124]	; (8005580 <ft6x06_TS_GetXY+0x90>)
 8005504:	789a      	ldrb	r2, [r3, #2]
 8005506:	4b1e      	ldr	r3, [pc, #120]	; (8005580 <ft6x06_TS_GetXY+0x90>)
 8005508:	785b      	ldrb	r3, [r3, #1]
 800550a:	429a      	cmp	r2, r3
 800550c:	d234      	bcs.n	8005578 <ft6x06_TS_GetXY+0x88>
  {
    switch(ft6x06_handle.currActiveTouchIdx)
 800550e:	4b1c      	ldr	r3, [pc, #112]	; (8005580 <ft6x06_TS_GetXY+0x90>)
 8005510:	789b      	ldrb	r3, [r3, #2]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d002      	beq.n	800551c <ft6x06_TS_GetXY+0x2c>
 8005516:	2b01      	cmp	r3, #1
 8005518:	d003      	beq.n	8005522 <ft6x06_TS_GetXY+0x32>
    case 1 :
      regAddress = FT6206_P2_XH_REG; 
      break;

    default :
      break;
 800551a:	e005      	b.n	8005528 <ft6x06_TS_GetXY+0x38>
      regAddress = FT6206_P1_XH_REG; 
 800551c:	2303      	movs	r3, #3
 800551e:	75fb      	strb	r3, [r7, #23]
      break;
 8005520:	e002      	b.n	8005528 <ft6x06_TS_GetXY+0x38>
      regAddress = FT6206_P2_XH_REG; 
 8005522:	2309      	movs	r3, #9
 8005524:	75fb      	strb	r3, [r7, #23]
      break;
 8005526:	bf00      	nop
    }
    
    /* Read X and Y positions */
    TS_IO_ReadMultiple(DeviceAddr, regAddress, dataxy, sizeof(dataxy)); 
 8005528:	89fb      	ldrh	r3, [r7, #14]
 800552a:	b2d8      	uxtb	r0, r3
 800552c:	f107 0210 	add.w	r2, r7, #16
 8005530:	7df9      	ldrb	r1, [r7, #23]
 8005532:	2304      	movs	r3, #4
 8005534:	f000 fc76 	bl	8005e24 <TS_IO_ReadMultiple>

    /* Send back ready X position to caller */
    *X = ((dataxy[0] & FT6206_MSB_MASK) << 8) | (dataxy[1] & FT6206_LSB_MASK);
 8005538:	7c3b      	ldrb	r3, [r7, #16]
 800553a:	021b      	lsls	r3, r3, #8
 800553c:	b21b      	sxth	r3, r3
 800553e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005542:	b21a      	sxth	r2, r3
 8005544:	7c7b      	ldrb	r3, [r7, #17]
 8005546:	b21b      	sxth	r3, r3
 8005548:	4313      	orrs	r3, r2
 800554a:	b21b      	sxth	r3, r3
 800554c:	b29a      	uxth	r2, r3
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	801a      	strh	r2, [r3, #0]
    
    /* Send back ready Y position to caller */
    *Y = ((dataxy[2] & FT6206_MSB_MASK) << 8) | (dataxy[3] & FT6206_LSB_MASK);
 8005552:	7cbb      	ldrb	r3, [r7, #18]
 8005554:	021b      	lsls	r3, r3, #8
 8005556:	b21b      	sxth	r3, r3
 8005558:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800555c:	b21a      	sxth	r2, r3
 800555e:	7cfb      	ldrb	r3, [r7, #19]
 8005560:	b21b      	sxth	r3, r3
 8005562:	4313      	orrs	r3, r2
 8005564:	b21b      	sxth	r3, r3
 8005566:	b29a      	uxth	r2, r3
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	801a      	strh	r2, [r3, #0]
    
    ft6x06_handle.currActiveTouchIdx++;
 800556c:	4b04      	ldr	r3, [pc, #16]	; (8005580 <ft6x06_TS_GetXY+0x90>)
 800556e:	789b      	ldrb	r3, [r3, #2]
 8005570:	3301      	adds	r3, #1
 8005572:	b2da      	uxtb	r2, r3
 8005574:	4b02      	ldr	r3, [pc, #8]	; (8005580 <ft6x06_TS_GetXY+0x90>)
 8005576:	709a      	strb	r2, [r3, #2]
  }
}
 8005578:	bf00      	nop
 800557a:	3718      	adds	r7, #24
 800557c:	46bd      	mov	sp, r7
 800557e:	bd80      	pop	{r7, pc}
 8005580:	200000ac 	.word	0x200000ac

08005584 <ft6x06_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT6206).
  * @retval None
  */
void ft6x06_TS_EnableIT(uint16_t DeviceAddr)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b084      	sub	sp, #16
 8005588:	af00      	add	r7, sp, #0
 800558a:	4603      	mov	r3, r0
 800558c:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 800558e:	2300      	movs	r3, #0
 8005590:	73fb      	strb	r3, [r7, #15]
  regValue = (FT6206_G_MODE_INTERRUPT_TRIGGER & (FT6206_G_MODE_INTERRUPT_MASK >> FT6206_G_MODE_INTERRUPT_SHIFT)) << FT6206_G_MODE_INTERRUPT_SHIFT;
 8005592:	2301      	movs	r3, #1
 8005594:	73fb      	strb	r3, [r7, #15]
  
  /* Set interrupt trigger mode in FT6206_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT6206_GMODE_REG, regValue);
 8005596:	88fb      	ldrh	r3, [r7, #6]
 8005598:	b2db      	uxtb	r3, r3
 800559a:	7bfa      	ldrb	r2, [r7, #15]
 800559c:	21a4      	movs	r1, #164	; 0xa4
 800559e:	4618      	mov	r0, r3
 80055a0:	f000 fc1a 	bl	8005dd8 <TS_IO_Write>
}
 80055a4:	bf00      	nop
 80055a6:	3710      	adds	r7, #16
 80055a8:	46bd      	mov	sp, r7
 80055aa:	bd80      	pop	{r7, pc}

080055ac <ft6x06_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT6206).
  * @retval None
  */
void ft6x06_TS_DisableIT(uint16_t DeviceAddr)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b084      	sub	sp, #16
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	4603      	mov	r3, r0
 80055b4:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 80055b6:	2300      	movs	r3, #0
 80055b8:	73fb      	strb	r3, [r7, #15]
  regValue = (FT6206_G_MODE_INTERRUPT_POLLING & (FT6206_G_MODE_INTERRUPT_MASK >> FT6206_G_MODE_INTERRUPT_SHIFT)) << FT6206_G_MODE_INTERRUPT_SHIFT;
 80055ba:	2300      	movs	r3, #0
 80055bc:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT6206_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT6206_GMODE_REG, regValue);
 80055be:	88fb      	ldrh	r3, [r7, #6]
 80055c0:	b2db      	uxtb	r3, r3
 80055c2:	7bfa      	ldrb	r2, [r7, #15]
 80055c4:	21a4      	movs	r1, #164	; 0xa4
 80055c6:	4618      	mov	r0, r3
 80055c8:	f000 fc06 	bl	8005dd8 <TS_IO_Write>
}
 80055cc:	bf00      	nop
 80055ce:	3710      	adds	r7, #16
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bd80      	pop	{r7, pc}

080055d4 <ft6x06_TS_ITStatus>:
  *         @note : This feature is not applicable to FT6206.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft6x06_TS_ITStatus(uint16_t DeviceAddr)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b083      	sub	sp, #12
 80055d8:	af00      	add	r7, sp, #0
 80055da:	4603      	mov	r3, r0
 80055dc:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT6206 */
  return 0;
 80055de:	2300      	movs	r3, #0
}
 80055e0:	4618      	mov	r0, r3
 80055e2:	370c      	adds	r7, #12
 80055e4:	46bd      	mov	sp, r7
 80055e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ea:	4770      	bx	lr

080055ec <ft6x06_TS_ClearIT>:
  *         @note : This feature is not applicable to FT6206.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval None
  */
void ft6x06_TS_ClearIT(uint16_t DeviceAddr)
{
 80055ec:	b480      	push	{r7}
 80055ee:	b083      	sub	sp, #12
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	4603      	mov	r3, r0
 80055f4:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT6206 */
}
 80055f6:	bf00      	nop
 80055f8:	370c      	adds	r7, #12
 80055fa:	46bd      	mov	sp, r7
 80055fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005600:	4770      	bx	lr

08005602 <ft6x06_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT6206 Device address for communication on I2C Bus.
  * @retval Status FT6206_STATUS_OK or FT6206_STATUS_NOT_OK.
  */
static uint32_t ft6x06_TS_Configure(uint16_t DeviceAddr)
{
 8005602:	b480      	push	{r7}
 8005604:	b085      	sub	sp, #20
 8005606:	af00      	add	r7, sp, #0
 8005608:	4603      	mov	r3, r0
 800560a:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT6206_STATUS_OK;
 800560c:	2300      	movs	r3, #0
 800560e:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT6206 */

  return(status);
 8005610:	68fb      	ldr	r3, [r7, #12]
}
 8005612:	4618      	mov	r0, r3
 8005614:	3714      	adds	r7, #20
 8005616:	46bd      	mov	sp, r7
 8005618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561c:	4770      	bx	lr
	...

08005620 <ft6x06_GetInstance>:
  *         and return its index  
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t ft6x06_GetInstance(uint16_t DeviceAddr)
{
 8005620:	b480      	push	{r7}
 8005622:	b085      	sub	sp, #20
 8005624:	af00      	add	r7, sp, #0
 8005626:	4603      	mov	r3, r0
 8005628:	80fb      	strh	r3, [r7, #6]
  uint8_t idx = 0;
 800562a:	2300      	movs	r3, #0
 800562c:	73fb      	strb	r3, [r7, #15]
  
  /* Check all the registered instances */
  for(idx = 0; idx < FT6x06_MAX_INSTANCE ; idx ++)
 800562e:	2300      	movs	r3, #0
 8005630:	73fb      	strb	r3, [r7, #15]
 8005632:	e00b      	b.n	800564c <ft6x06_GetInstance+0x2c>
  {
    if(ft6x06[idx] == DeviceAddr)
 8005634:	7bfb      	ldrb	r3, [r7, #15]
 8005636:	4a0a      	ldr	r2, [pc, #40]	; (8005660 <ft6x06_GetInstance+0x40>)
 8005638:	5cd3      	ldrb	r3, [r2, r3]
 800563a:	b29b      	uxth	r3, r3
 800563c:	88fa      	ldrh	r2, [r7, #6]
 800563e:	429a      	cmp	r2, r3
 8005640:	d101      	bne.n	8005646 <ft6x06_GetInstance+0x26>
    {
      return idx; 
 8005642:	7bfb      	ldrb	r3, [r7, #15]
 8005644:	e006      	b.n	8005654 <ft6x06_GetInstance+0x34>
  for(idx = 0; idx < FT6x06_MAX_INSTANCE ; idx ++)
 8005646:	7bfb      	ldrb	r3, [r7, #15]
 8005648:	3301      	adds	r3, #1
 800564a:	73fb      	strb	r3, [r7, #15]
 800564c:	7bfb      	ldrb	r3, [r7, #15]
 800564e:	2b01      	cmp	r3, #1
 8005650:	d9f0      	bls.n	8005634 <ft6x06_GetInstance+0x14>
    }
  }
  
  return 0xFF;
 8005652:	23ff      	movs	r3, #255	; 0xff
}
 8005654:	4618      	mov	r0, r3
 8005656:	3714      	adds	r7, #20
 8005658:	46bd      	mov	sp, r7
 800565a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565e:	4770      	bx	lr
 8005660:	200000a8 	.word	0x200000a8

08005664 <OTM8009A_Init>:
  * @param  hdsi_eval : pointer on DSI configuration structure
  * @param  hdsivideo_handle : pointer on DSI video mode configuration structure
  * @retval Status
  */
uint8_t OTM8009A_Init(uint32_t ColorCoding, uint32_t orientation)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b082      	sub	sp, #8
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
 800566c:	6039      	str	r1, [r7, #0]
  /* Enable CMD2 to access vendor specific commands                               */
  /* Enter in command 2 mode and set EXTC to enable address shift function (0x00) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 800566e:	49c1      	ldr	r1, [pc, #772]	; (8005974 <OTM8009A_Init+0x310>)
 8005670:	2000      	movs	r0, #0
 8005672:	f001 f969 	bl	8006948 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData1);
 8005676:	49c0      	ldr	r1, [pc, #768]	; (8005978 <OTM8009A_Init+0x314>)
 8005678:	2003      	movs	r0, #3
 800567a:	f001 f965 	bl	8006948 <DSI_IO_WriteCmd>

  /* Enter ORISE Command 2 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2); /* Shift address to 0x80 */
 800567e:	49bf      	ldr	r1, [pc, #764]	; (800597c <OTM8009A_Init+0x318>)
 8005680:	2000      	movs	r0, #0
 8005682:	f001 f961 	bl	8006948 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData2);
 8005686:	49be      	ldr	r1, [pc, #760]	; (8005980 <OTM8009A_Init+0x31c>)
 8005688:	2002      	movs	r0, #2
 800568a:	f001 f95d 	bl	8006948 <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////
  /* SD_PCH_CTRL - 0xC480h - 129th parameter - Default 0x00          */
  /* Set SD_PT                                                       */
  /* -> Source output level during porch and non-display area to GND */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 800568e:	49bb      	ldr	r1, [pc, #748]	; (800597c <OTM8009A_Init+0x318>)
 8005690:	2000      	movs	r0, #0
 8005692:	f001 f959 	bl	8006948 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData3);
 8005696:	49bb      	ldr	r1, [pc, #748]	; (8005984 <OTM8009A_Init+0x320>)
 8005698:	2000      	movs	r0, #0
 800569a:	f001 f955 	bl	8006948 <DSI_IO_WriteCmd>
  OTM8009A_IO_Delay(10);
 800569e:	200a      	movs	r0, #10
 80056a0:	f000 fbda 	bl	8005e58 <OTM8009A_IO_Delay>
  /* Not documented */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData4);
 80056a4:	49b8      	ldr	r1, [pc, #736]	; (8005988 <OTM8009A_Init+0x324>)
 80056a6:	2000      	movs	r0, #0
 80056a8:	f001 f94e 	bl	8006948 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData5);
 80056ac:	49b7      	ldr	r1, [pc, #732]	; (800598c <OTM8009A_Init+0x328>)
 80056ae:	2000      	movs	r0, #0
 80056b0:	f001 f94a 	bl	8006948 <DSI_IO_WriteCmd>
  OTM8009A_IO_Delay(10);
 80056b4:	200a      	movs	r0, #10
 80056b6:	f000 fbcf 	bl	8005e58 <OTM8009A_IO_Delay>
  /////////////////////////////////////////////////////////////////////

  /* PWR_CTRL4 - 0xC4B0h - 178th parameter - Default 0xA8 */
  /* Set gvdd_en_test                                     */
  /* -> enable GVDD test mode !!!                         */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData6);
 80056ba:	49b5      	ldr	r1, [pc, #724]	; (8005990 <OTM8009A_Init+0x32c>)
 80056bc:	2000      	movs	r0, #0
 80056be:	f001 f943 	bl	8006948 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData7);
 80056c2:	49b4      	ldr	r1, [pc, #720]	; (8005994 <OTM8009A_Init+0x330>)
 80056c4:	2000      	movs	r0, #0
 80056c6:	f001 f93f 	bl	8006948 <DSI_IO_WriteCmd>
  /* PWR_CTRL2 - 0xC590h - 146th parameter - Default 0x79      */
  /* Set pump 4 vgh voltage                                    */
  /* -> from 15.0v down to 13.0v                               */
  /* Set pump 5 vgh voltage                                    */
  /* -> from -12.0v downto -9.0v                               */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData8);
 80056ca:	49b3      	ldr	r1, [pc, #716]	; (8005998 <OTM8009A_Init+0x334>)
 80056cc:	2000      	movs	r0, #0
 80056ce:	f001 f93b 	bl	8006948 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 80056d2:	49b2      	ldr	r1, [pc, #712]	; (800599c <OTM8009A_Init+0x338>)
 80056d4:	2000      	movs	r0, #0
 80056d6:	f001 f937 	bl	8006948 <DSI_IO_WriteCmd>

  /* P_DRV_M - 0xC0B4h - 181th parameter - Default 0x00 */
  /* -> Column inversion                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData10);
 80056da:	49b1      	ldr	r1, [pc, #708]	; (80059a0 <OTM8009A_Init+0x33c>)
 80056dc:	2000      	movs	r0, #0
 80056de:	f001 f933 	bl	8006948 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData11);
 80056e2:	49b0      	ldr	r1, [pc, #704]	; (80059a4 <OTM8009A_Init+0x340>)
 80056e4:	2000      	movs	r0, #0
 80056e6:	f001 f92f 	bl	8006948 <DSI_IO_WriteCmd>

  /* VCOMDC - 0xD900h - 1st parameter - Default 0x39h */
  /* VCOM Voltage settings                            */
  /* -> from -1.0000v downto -1.2625v                 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80056ea:	49a2      	ldr	r1, [pc, #648]	; (8005974 <OTM8009A_Init+0x310>)
 80056ec:	2000      	movs	r0, #0
 80056ee:	f001 f92b 	bl	8006948 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData12);
 80056f2:	49ad      	ldr	r1, [pc, #692]	; (80059a8 <OTM8009A_Init+0x344>)
 80056f4:	2000      	movs	r0, #0
 80056f6:	f001 f927 	bl	8006948 <DSI_IO_WriteCmd>

  /* Oscillator adjustment for Idle/Normal mode (LPDT only) set to 65Hz (default is 60Hz) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 80056fa:	49ac      	ldr	r1, [pc, #688]	; (80059ac <OTM8009A_Init+0x348>)
 80056fc:	2000      	movs	r0, #0
 80056fe:	f001 f923 	bl	8006948 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData14);
 8005702:	49ab      	ldr	r1, [pc, #684]	; (80059b0 <OTM8009A_Init+0x34c>)
 8005704:	2000      	movs	r0, #0
 8005706:	f001 f91f 	bl	8006948 <DSI_IO_WriteCmd>

  /* Video mode internal */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 800570a:	49aa      	ldr	r1, [pc, #680]	; (80059b4 <OTM8009A_Init+0x350>)
 800570c:	2000      	movs	r0, #0
 800570e:	f001 f91b 	bl	8006948 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData16);
 8005712:	49a9      	ldr	r1, [pc, #676]	; (80059b8 <OTM8009A_Init+0x354>)
 8005714:	2000      	movs	r0, #0
 8005716:	f001 f917 	bl	8006948 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 147h parameter - Default 0x00 */
  /* Set pump 4&5 x6                                     */
  /* -> ONLY VALID when PUMP4_EN_ASDM_HV = "0"           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData17);
 800571a:	49a8      	ldr	r1, [pc, #672]	; (80059bc <OTM8009A_Init+0x358>)
 800571c:	2000      	movs	r0, #0
 800571e:	f001 f913 	bl	8006948 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData18);
 8005722:	49a7      	ldr	r1, [pc, #668]	; (80059c0 <OTM8009A_Init+0x35c>)
 8005724:	2000      	movs	r0, #0
 8005726:	f001 f90f 	bl	8006948 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 150th parameter - Default 0x33h */
  /* Change pump4 clock ratio                              */
  /* -> from 1 line to 1/2 line                            */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData19);
 800572a:	49a6      	ldr	r1, [pc, #664]	; (80059c4 <OTM8009A_Init+0x360>)
 800572c:	2000      	movs	r0, #0
 800572e:	f001 f90b 	bl	8006948 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 8005732:	499a      	ldr	r1, [pc, #616]	; (800599c <OTM8009A_Init+0x338>)
 8005734:	2000      	movs	r0, #0
 8005736:	f001 f907 	bl	8006948 <DSI_IO_WriteCmd>

  /* GVDD/NGVDD settings */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 800573a:	498e      	ldr	r1, [pc, #568]	; (8005974 <OTM8009A_Init+0x310>)
 800573c:	2000      	movs	r0, #0
 800573e:	f001 f903 	bl	8006948 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData5);
 8005742:	49a1      	ldr	r1, [pc, #644]	; (80059c8 <OTM8009A_Init+0x364>)
 8005744:	2002      	movs	r0, #2
 8005746:	f001 f8ff 	bl	8006948 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 149th parameter - Default 0x33h */
  /* Rewrite the default value !                           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData20);
 800574a:	49a0      	ldr	r1, [pc, #640]	; (80059cc <OTM8009A_Init+0x368>)
 800574c:	2000      	movs	r0, #0
 800574e:	f001 f8fb 	bl	8006948 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData21);
 8005752:	499f      	ldr	r1, [pc, #636]	; (80059d0 <OTM8009A_Init+0x36c>)
 8005754:	2000      	movs	r0, #0
 8005756:	f001 f8f7 	bl	8006948 <DSI_IO_WriteCmd>

  /* Panel display timing Setting 3 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData22);
 800575a:	499e      	ldr	r1, [pc, #632]	; (80059d4 <OTM8009A_Init+0x370>)
 800575c:	2000      	movs	r0, #0
 800575e:	f001 f8f3 	bl	8006948 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData23);
 8005762:	499d      	ldr	r1, [pc, #628]	; (80059d8 <OTM8009A_Init+0x374>)
 8005764:	2000      	movs	r0, #0
 8005766:	f001 f8ef 	bl	8006948 <DSI_IO_WriteCmd>

  /* Power control 1 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData24);
 800576a:	499c      	ldr	r1, [pc, #624]	; (80059dc <OTM8009A_Init+0x378>)
 800576c:	2000      	movs	r0, #0
 800576e:	f001 f8eb 	bl	8006948 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData25);
 8005772:	499b      	ldr	r1, [pc, #620]	; (80059e0 <OTM8009A_Init+0x37c>)
 8005774:	2000      	movs	r0, #0
 8005776:	f001 f8e7 	bl	8006948 <DSI_IO_WriteCmd>

  /* Source driver precharge */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 800577a:	498c      	ldr	r1, [pc, #560]	; (80059ac <OTM8009A_Init+0x348>)
 800577c:	2000      	movs	r0, #0
 800577e:	f001 f8e3 	bl	8006948 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData26);
 8005782:	4998      	ldr	r1, [pc, #608]	; (80059e4 <OTM8009A_Init+0x380>)
 8005784:	2000      	movs	r0, #0
 8005786:	f001 f8df 	bl	8006948 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 800578a:	498a      	ldr	r1, [pc, #552]	; (80059b4 <OTM8009A_Init+0x350>)
 800578c:	2000      	movs	r0, #0
 800578e:	f001 f8db 	bl	8006948 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData27);
 8005792:	4995      	ldr	r1, [pc, #596]	; (80059e8 <OTM8009A_Init+0x384>)
 8005794:	2000      	movs	r0, #0
 8005796:	f001 f8d7 	bl	8006948 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData28);
 800579a:	4994      	ldr	r1, [pc, #592]	; (80059ec <OTM8009A_Init+0x388>)
 800579c:	2000      	movs	r0, #0
 800579e:	f001 f8d3 	bl	8006948 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData6);
 80057a2:	4993      	ldr	r1, [pc, #588]	; (80059f0 <OTM8009A_Init+0x38c>)
 80057a4:	2002      	movs	r0, #2
 80057a6:	f001 f8cf 	bl	8006948 <DSI_IO_WriteCmd>

  /* GOAVST */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 80057aa:	4974      	ldr	r1, [pc, #464]	; (800597c <OTM8009A_Init+0x318>)
 80057ac:	2000      	movs	r0, #0
 80057ae:	f001 f8cb 	bl	8006948 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 6, (uint8_t *)lcdRegData7);
 80057b2:	4990      	ldr	r1, [pc, #576]	; (80059f4 <OTM8009A_Init+0x390>)
 80057b4:	2006      	movs	r0, #6
 80057b6:	f001 f8c7 	bl	8006948 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 80057ba:	498f      	ldr	r1, [pc, #572]	; (80059f8 <OTM8009A_Init+0x394>)
 80057bc:	2000      	movs	r0, #0
 80057be:	f001 f8c3 	bl	8006948 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData8);
 80057c2:	498e      	ldr	r1, [pc, #568]	; (80059fc <OTM8009A_Init+0x398>)
 80057c4:	200e      	movs	r0, #14
 80057c6:	f001 f8bf 	bl	8006948 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 80057ca:	498d      	ldr	r1, [pc, #564]	; (8005a00 <OTM8009A_Init+0x39c>)
 80057cc:	2000      	movs	r0, #0
 80057ce:	f001 f8bb 	bl	8006948 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData9);
 80057d2:	498c      	ldr	r1, [pc, #560]	; (8005a04 <OTM8009A_Init+0x3a0>)
 80057d4:	200e      	movs	r0, #14
 80057d6:	f001 f8b7 	bl	8006948 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 80057da:	498b      	ldr	r1, [pc, #556]	; (8005a08 <OTM8009A_Init+0x3a4>)
 80057dc:	2000      	movs	r0, #0
 80057de:	f001 f8b3 	bl	8006948 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData10);
 80057e2:	498a      	ldr	r1, [pc, #552]	; (8005a0c <OTM8009A_Init+0x3a8>)
 80057e4:	200a      	movs	r0, #10
 80057e6:	f001 f8af 	bl	8006948 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 80057ea:	4989      	ldr	r1, [pc, #548]	; (8005a10 <OTM8009A_Init+0x3ac>)
 80057ec:	2000      	movs	r0, #0
 80057ee:	f001 f8ab 	bl	8006948 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData46);
 80057f2:	4988      	ldr	r1, [pc, #544]	; (8005a14 <OTM8009A_Init+0x3b0>)
 80057f4:	2000      	movs	r0, #0
 80057f6:	f001 f8a7 	bl	8006948 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 80057fa:	4960      	ldr	r1, [pc, #384]	; (800597c <OTM8009A_Init+0x318>)
 80057fc:	2000      	movs	r0, #0
 80057fe:	f001 f8a3 	bl	8006948 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData11);
 8005802:	4985      	ldr	r1, [pc, #532]	; (8005a18 <OTM8009A_Init+0x3b4>)
 8005804:	200a      	movs	r0, #10
 8005806:	f001 f89f 	bl	8006948 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 800580a:	4984      	ldr	r1, [pc, #528]	; (8005a1c <OTM8009A_Init+0x3b8>)
 800580c:	2000      	movs	r0, #0
 800580e:	f001 f89b 	bl	8006948 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData12);
 8005812:	4983      	ldr	r1, [pc, #524]	; (8005a20 <OTM8009A_Init+0x3bc>)
 8005814:	200f      	movs	r0, #15
 8005816:	f001 f897 	bl	8006948 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 800581a:	4977      	ldr	r1, [pc, #476]	; (80059f8 <OTM8009A_Init+0x394>)
 800581c:	2000      	movs	r0, #0
 800581e:	f001 f893 	bl	8006948 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData13);
 8005822:	4980      	ldr	r1, [pc, #512]	; (8005a24 <OTM8009A_Init+0x3c0>)
 8005824:	200f      	movs	r0, #15
 8005826:	f001 f88f 	bl	8006948 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 800582a:	4975      	ldr	r1, [pc, #468]	; (8005a00 <OTM8009A_Init+0x39c>)
 800582c:	2000      	movs	r0, #0
 800582e:	f001 f88b 	bl	8006948 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData14);
 8005832:	497d      	ldr	r1, [pc, #500]	; (8005a28 <OTM8009A_Init+0x3c4>)
 8005834:	200a      	movs	r0, #10
 8005836:	f001 f887 	bl	8006948 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 800583a:	4973      	ldr	r1, [pc, #460]	; (8005a08 <OTM8009A_Init+0x3a4>)
 800583c:	2000      	movs	r0, #0
 800583e:	f001 f883 	bl	8006948 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData15);
 8005842:	497a      	ldr	r1, [pc, #488]	; (8005a2c <OTM8009A_Init+0x3c8>)
 8005844:	200f      	movs	r0, #15
 8005846:	f001 f87f 	bl	8006948 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 800584a:	4971      	ldr	r1, [pc, #452]	; (8005a10 <OTM8009A_Init+0x3ac>)
 800584c:	2000      	movs	r0, #0
 800584e:	f001 f87b 	bl	8006948 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData16);
 8005852:	4977      	ldr	r1, [pc, #476]	; (8005a30 <OTM8009A_Init+0x3cc>)
 8005854:	200f      	movs	r0, #15
 8005856:	f001 f877 	bl	8006948 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData34);
 800585a:	4976      	ldr	r1, [pc, #472]	; (8005a34 <OTM8009A_Init+0x3d0>)
 800585c:	2000      	movs	r0, #0
 800585e:	f001 f873 	bl	8006948 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData17);
 8005862:	4975      	ldr	r1, [pc, #468]	; (8005a38 <OTM8009A_Init+0x3d4>)
 8005864:	200a      	movs	r0, #10
 8005866:	f001 f86f 	bl	8006948 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData35);
 800586a:	4974      	ldr	r1, [pc, #464]	; (8005a3c <OTM8009A_Init+0x3d8>)
 800586c:	2000      	movs	r0, #0
 800586e:	f001 f86b 	bl	8006948 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData18);
 8005872:	4973      	ldr	r1, [pc, #460]	; (8005a40 <OTM8009A_Init+0x3dc>)
 8005874:	200a      	movs	r0, #10
 8005876:	f001 f867 	bl	8006948 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 800587a:	4940      	ldr	r1, [pc, #256]	; (800597c <OTM8009A_Init+0x318>)
 800587c:	2000      	movs	r0, #0
 800587e:	f001 f863 	bl	8006948 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData19);
 8005882:	4970      	ldr	r1, [pc, #448]	; (8005a44 <OTM8009A_Init+0x3e0>)
 8005884:	200a      	movs	r0, #10
 8005886:	f001 f85f 	bl	8006948 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 800588a:	4964      	ldr	r1, [pc, #400]	; (8005a1c <OTM8009A_Init+0x3b8>)
 800588c:	2000      	movs	r0, #0
 800588e:	f001 f85b 	bl	8006948 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData20);
 8005892:	496d      	ldr	r1, [pc, #436]	; (8005a48 <OTM8009A_Init+0x3e4>)
 8005894:	200f      	movs	r0, #15
 8005896:	f001 f857 	bl	8006948 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 800589a:	4957      	ldr	r1, [pc, #348]	; (80059f8 <OTM8009A_Init+0x394>)
 800589c:	2000      	movs	r0, #0
 800589e:	f001 f853 	bl	8006948 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData21);
 80058a2:	496a      	ldr	r1, [pc, #424]	; (8005a4c <OTM8009A_Init+0x3e8>)
 80058a4:	200f      	movs	r0, #15
 80058a6:	f001 f84f 	bl	8006948 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 80058aa:	4955      	ldr	r1, [pc, #340]	; (8005a00 <OTM8009A_Init+0x39c>)
 80058ac:	2000      	movs	r0, #0
 80058ae:	f001 f84b 	bl	8006948 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData22);
 80058b2:	4967      	ldr	r1, [pc, #412]	; (8005a50 <OTM8009A_Init+0x3ec>)
 80058b4:	200a      	movs	r0, #10
 80058b6:	f001 f847 	bl	8006948 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 80058ba:	4953      	ldr	r1, [pc, #332]	; (8005a08 <OTM8009A_Init+0x3a4>)
 80058bc:	2000      	movs	r0, #0
 80058be:	f001 f843 	bl	8006948 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData23);
 80058c2:	4964      	ldr	r1, [pc, #400]	; (8005a54 <OTM8009A_Init+0x3f0>)
 80058c4:	200f      	movs	r0, #15
 80058c6:	f001 f83f 	bl	8006948 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 80058ca:	4951      	ldr	r1, [pc, #324]	; (8005a10 <OTM8009A_Init+0x3ac>)
 80058cc:	2000      	movs	r0, #0
 80058ce:	f001 f83b 	bl	8006948 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData24);
 80058d2:	4961      	ldr	r1, [pc, #388]	; (8005a58 <OTM8009A_Init+0x3f4>)
 80058d4:	200f      	movs	r0, #15
 80058d6:	f001 f837 	bl	8006948 <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////////////
  /* PWR_CTRL1 - 0xc580h - 130th parameter - default 0x00 */
  /* Pump 1 min and max DM                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 80058da:	4934      	ldr	r1, [pc, #208]	; (80059ac <OTM8009A_Init+0x348>)
 80058dc:	2000      	movs	r0, #0
 80058de:	f001 f833 	bl	8006948 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData47);
 80058e2:	495e      	ldr	r1, [pc, #376]	; (8005a5c <OTM8009A_Init+0x3f8>)
 80058e4:	2000      	movs	r0, #0
 80058e6:	f001 f82f 	bl	8006948 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData48);
 80058ea:	495d      	ldr	r1, [pc, #372]	; (8005a60 <OTM8009A_Init+0x3fc>)
 80058ec:	2000      	movs	r0, #0
 80058ee:	f001 f82b 	bl	8006948 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData49);
 80058f2:	495c      	ldr	r1, [pc, #368]	; (8005a64 <OTM8009A_Init+0x400>)
 80058f4:	2000      	movs	r0, #0
 80058f6:	f001 f827 	bl	8006948 <DSI_IO_WriteCmd>
  /////////////////////////////////////////////////////////////////////////////

  /* CABC LEDPWM frequency adjusted to 19,5kHz */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData50);
 80058fa:	495b      	ldr	r1, [pc, #364]	; (8005a68 <OTM8009A_Init+0x404>)
 80058fc:	2000      	movs	r0, #0
 80058fe:	f001 f823 	bl	8006948 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData51);
 8005902:	495a      	ldr	r1, [pc, #360]	; (8005a6c <OTM8009A_Init+0x408>)
 8005904:	2000      	movs	r0, #0
 8005906:	f001 f81f 	bl	8006948 <DSI_IO_WriteCmd>
  
  /* Exit CMD2 mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 800590a:	491a      	ldr	r1, [pc, #104]	; (8005974 <OTM8009A_Init+0x310>)
 800590c:	2000      	movs	r0, #0
 800590e:	f001 f81b 	bl	8006948 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData25);
 8005912:	4957      	ldr	r1, [pc, #348]	; (8005a70 <OTM8009A_Init+0x40c>)
 8005914:	2003      	movs	r0, #3
 8005916:	f001 f817 	bl	8006948 <DSI_IO_WriteCmd>
  /*************************************************************************** */
  /* Standard DCS Initialization TO KEEP CAN BE DONE IN HSDT                   */
  /*************************************************************************** */

  /* NOP - goes back to DCS std command ? */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 800591a:	4916      	ldr	r1, [pc, #88]	; (8005974 <OTM8009A_Init+0x310>)
 800591c:	2000      	movs	r0, #0
 800591e:	f001 f813 	bl	8006948 <DSI_IO_WriteCmd>
          
  /* Gamma correction 2.2+ table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8005922:	4914      	ldr	r1, [pc, #80]	; (8005974 <OTM8009A_Init+0x310>)
 8005924:	2000      	movs	r0, #0
 8005926:	f001 f80f 	bl	8006948 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData3);
 800592a:	4952      	ldr	r1, [pc, #328]	; (8005a74 <OTM8009A_Init+0x410>)
 800592c:	2010      	movs	r0, #16
 800592e:	f001 f80b 	bl	8006948 <DSI_IO_WriteCmd>
  
  /* Gamma correction 2.2- table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8005932:	4910      	ldr	r1, [pc, #64]	; (8005974 <OTM8009A_Init+0x310>)
 8005934:	2000      	movs	r0, #0
 8005936:	f001 f807 	bl	8006948 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData4);
 800593a:	494f      	ldr	r1, [pc, #316]	; (8005a78 <OTM8009A_Init+0x414>)
 800593c:	2010      	movs	r0, #16
 800593e:	f001 f803 	bl	8006948 <DSI_IO_WriteCmd>
          
  /* Send Sleep Out command to display : no parameter */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData36);
 8005942:	494e      	ldr	r1, [pc, #312]	; (8005a7c <OTM8009A_Init+0x418>)
 8005944:	2000      	movs	r0, #0
 8005946:	f000 ffff 	bl	8006948 <DSI_IO_WriteCmd>
  
  /* Wait for sleep out exit */
  OTM8009A_IO_Delay(120);
 800594a:	2078      	movs	r0, #120	; 0x78
 800594c:	f000 fa84 	bl	8005e58 <OTM8009A_IO_Delay>

  switch(ColorCoding)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d008      	beq.n	8005968 <OTM8009A_Init+0x304>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2b02      	cmp	r3, #2
 800595a:	f040 8095 	bne.w	8005a88 <OTM8009A_Init+0x424>
  {
  case OTM8009A_FORMAT_RBG565 :
    /* Set Pixel color format to RGB565 */
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData37);
 800595e:	4948      	ldr	r1, [pc, #288]	; (8005a80 <OTM8009A_Init+0x41c>)
 8005960:	2000      	movs	r0, #0
 8005962:	f000 fff1 	bl	8006948 <DSI_IO_WriteCmd>
    break;
 8005966:	e090      	b.n	8005a8a <OTM8009A_Init+0x426>
  case OTM8009A_FORMAT_RGB888 :
    /* Set Pixel color format to RGB888 */
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData38);
 8005968:	4946      	ldr	r1, [pc, #280]	; (8005a84 <OTM8009A_Init+0x420>)
 800596a:	2000      	movs	r0, #0
 800596c:	f000 ffec 	bl	8006948 <DSI_IO_WriteCmd>
    break;
 8005970:	e08b      	b.n	8005a8a <OTM8009A_Init+0x426>
 8005972:	bf00      	nop
 8005974:	08008150 	.word	0x08008150
 8005978:	08008008 	.word	0x08008008
 800597c:	08008154 	.word	0x08008154
 8005980:	0800800c 	.word	0x0800800c
 8005984:	08008158 	.word	0x08008158
 8005988:	0800815c 	.word	0x0800815c
 800598c:	08008160 	.word	0x08008160
 8005990:	08008164 	.word	0x08008164
 8005994:	08008168 	.word	0x08008168
 8005998:	0800816c 	.word	0x0800816c
 800599c:	08008170 	.word	0x08008170
 80059a0:	08008174 	.word	0x08008174
 80059a4:	08008178 	.word	0x08008178
 80059a8:	0800817c 	.word	0x0800817c
 80059ac:	08008180 	.word	0x08008180
 80059b0:	08008184 	.word	0x08008184
 80059b4:	08008188 	.word	0x08008188
 80059b8:	0800818c 	.word	0x0800818c
 80059bc:	08008190 	.word	0x08008190
 80059c0:	08008194 	.word	0x08008194
 80059c4:	08008198 	.word	0x08008198
 80059c8:	08008038 	.word	0x08008038
 80059cc:	0800819c 	.word	0x0800819c
 80059d0:	080081a0 	.word	0x080081a0
 80059d4:	080081a4 	.word	0x080081a4
 80059d8:	080081a8 	.word	0x080081a8
 80059dc:	080081ac 	.word	0x080081ac
 80059e0:	080081b0 	.word	0x080081b0
 80059e4:	080081b4 	.word	0x080081b4
 80059e8:	080081b8 	.word	0x080081b8
 80059ec:	080081bc 	.word	0x080081bc
 80059f0:	0800803c 	.word	0x0800803c
 80059f4:	08008040 	.word	0x08008040
 80059f8:	080081c0 	.word	0x080081c0
 80059fc:	08008048 	.word	0x08008048
 8005a00:	080081c4 	.word	0x080081c4
 8005a04:	08008058 	.word	0x08008058
 8005a08:	080081c8 	.word	0x080081c8
 8005a0c:	08008068 	.word	0x08008068
 8005a10:	080081cc 	.word	0x080081cc
 8005a14:	08008204 	.word	0x08008204
 8005a18:	08008074 	.word	0x08008074
 8005a1c:	080081d0 	.word	0x080081d0
 8005a20:	08008080 	.word	0x08008080
 8005a24:	08008090 	.word	0x08008090
 8005a28:	080080a0 	.word	0x080080a0
 8005a2c:	080080ac 	.word	0x080080ac
 8005a30:	080080bc 	.word	0x080080bc
 8005a34:	080081d4 	.word	0x080081d4
 8005a38:	080080cc 	.word	0x080080cc
 8005a3c:	080081d8 	.word	0x080081d8
 8005a40:	080080d8 	.word	0x080080d8
 8005a44:	080080e4 	.word	0x080080e4
 8005a48:	080080f0 	.word	0x080080f0
 8005a4c:	08008100 	.word	0x08008100
 8005a50:	08008110 	.word	0x08008110
 8005a54:	0800811c 	.word	0x0800811c
 8005a58:	0800812c 	.word	0x0800812c
 8005a5c:	08008208 	.word	0x08008208
 8005a60:	0800820c 	.word	0x0800820c
 8005a64:	08008210 	.word	0x08008210
 8005a68:	08008214 	.word	0x08008214
 8005a6c:	08008218 	.word	0x08008218
 8005a70:	0800813c 	.word	0x0800813c
 8005a74:	08008010 	.word	0x08008010
 8005a78:	08008024 	.word	0x08008024
 8005a7c:	080081dc 	.word	0x080081dc
 8005a80:	080081e0 	.word	0x080081e0
 8005a84:	080081e4 	.word	0x080081e4
  default :
    break;
 8005a88:	bf00      	nop
  }

  /* Send command to configure display in landscape orientation mode. By default
      the orientation mode is portrait  */
  if(orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	2b01      	cmp	r3, #1
 8005a8e:	d10b      	bne.n	8005aa8 <OTM8009A_Init+0x444>
  {
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData39);
 8005a90:	4916      	ldr	r1, [pc, #88]	; (8005aec <OTM8009A_Init+0x488>)
 8005a92:	2000      	movs	r0, #0
 8005a94:	f000 ff58 	bl	8006948 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData27);
 8005a98:	4915      	ldr	r1, [pc, #84]	; (8005af0 <OTM8009A_Init+0x48c>)
 8005a9a:	2004      	movs	r0, #4
 8005a9c:	f000 ff54 	bl	8006948 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData28);
 8005aa0:	4914      	ldr	r1, [pc, #80]	; (8005af4 <OTM8009A_Init+0x490>)
 8005aa2:	2004      	movs	r0, #4
 8005aa4:	f000 ff50 	bl	8006948 <DSI_IO_WriteCmd>
  }

  /** CABC : Content Adaptive Backlight Control section start >> */
  /* Note : defaut is 0 (lowest Brightness), 0xFF is highest Brightness, try 0x7F : intermediate value */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData40);
 8005aa8:	4913      	ldr	r1, [pc, #76]	; (8005af8 <OTM8009A_Init+0x494>)
 8005aaa:	2000      	movs	r0, #0
 8005aac:	f000 ff4c 	bl	8006948 <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x2C - Brightness Control Block, Display Dimming & BackLight on */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData41);
 8005ab0:	4912      	ldr	r1, [pc, #72]	; (8005afc <OTM8009A_Init+0x498>)
 8005ab2:	2000      	movs	r0, #0
 8005ab4:	f000 ff48 	bl	8006948 <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x02 - image Content based Adaptive Brightness [Still Picture] */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData42);
 8005ab8:	4911      	ldr	r1, [pc, #68]	; (8005b00 <OTM8009A_Init+0x49c>)
 8005aba:	2000      	movs	r0, #0
 8005abc:	f000 ff44 	bl	8006948 <DSI_IO_WriteCmd>

  /* defaut is 0 (lowest Brightness), 0xFF is highest Brightness */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData43);
 8005ac0:	4910      	ldr	r1, [pc, #64]	; (8005b04 <OTM8009A_Init+0x4a0>)
 8005ac2:	2000      	movs	r0, #0
 8005ac4:	f000 ff40 	bl	8006948 <DSI_IO_WriteCmd>

  /** CABC : Content Adaptive Backlight Control section end << */

  /* Send Command Display On */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData44);
 8005ac8:	490f      	ldr	r1, [pc, #60]	; (8005b08 <OTM8009A_Init+0x4a4>)
 8005aca:	2000      	movs	r0, #0
 8005acc:	f000 ff3c 	bl	8006948 <DSI_IO_WriteCmd>

  /* NOP command */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8005ad0:	490e      	ldr	r1, [pc, #56]	; (8005b0c <OTM8009A_Init+0x4a8>)
 8005ad2:	2000      	movs	r0, #0
 8005ad4:	f000 ff38 	bl	8006948 <DSI_IO_WriteCmd>

  /* Send Command GRAM memory write (no parameters) : this initiates frame write via other DSI commands sent by */
  /* DSI host from LTDC incoming pixels in video mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData45);
 8005ad8:	490d      	ldr	r1, [pc, #52]	; (8005b10 <OTM8009A_Init+0x4ac>)
 8005ada:	2000      	movs	r0, #0
 8005adc:	f000 ff34 	bl	8006948 <DSI_IO_WriteCmd>

  return 0;
 8005ae0:	2300      	movs	r3, #0
}
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	3708      	adds	r7, #8
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bd80      	pop	{r7, pc}
 8005aea:	bf00      	nop
 8005aec:	080081e8 	.word	0x080081e8
 8005af0:	08008140 	.word	0x08008140
 8005af4:	08008148 	.word	0x08008148
 8005af8:	080081ec 	.word	0x080081ec
 8005afc:	080081f0 	.word	0x080081f0
 8005b00:	080081f4 	.word	0x080081f4
 8005b04:	080081f8 	.word	0x080081f8
 8005b08:	080081fc 	.word	0x080081fc
 8005b0c:	08008150 	.word	0x08008150
 8005b10:	08008200 	.word	0x08008200

08005b14 <BSP_LED_On>:
  *            @arg  LED2
  *            @arg  LED3
  *            @arg  LED4
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b082      	sub	sp, #8
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	71fb      	strb	r3, [r7, #7]
  if (Led <= LED4)
 8005b1e:	79fb      	ldrb	r3, [r7, #7]
 8005b20:	2b03      	cmp	r3, #3
 8005b22:	d80c      	bhi.n	8005b3e <BSP_LED_On+0x2a>
  {
     HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 8005b24:	79fb      	ldrb	r3, [r7, #7]
 8005b26:	4a08      	ldr	r2, [pc, #32]	; (8005b48 <BSP_LED_On+0x34>)
 8005b28:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8005b2c:	79fb      	ldrb	r3, [r7, #7]
 8005b2e:	4a07      	ldr	r2, [pc, #28]	; (8005b4c <BSP_LED_On+0x38>)
 8005b30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b34:	b29b      	uxth	r3, r3
 8005b36:	2200      	movs	r2, #0
 8005b38:	4619      	mov	r1, r3
 8005b3a:	f7fc faf7 	bl	800212c <HAL_GPIO_WritePin>
  }

}
 8005b3e:	bf00      	nop
 8005b40:	3708      	adds	r7, #8
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bd80      	pop	{r7, pc}
 8005b46:	bf00      	nop
 8005b48:	20000040 	.word	0x20000040
 8005b4c:	20000030 	.word	0x20000030

08005b50 <BSP_LED_Off>:
  *            @arg  LED2
  *            @arg  LED3
  *            @arg  LED4
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b082      	sub	sp, #8
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	4603      	mov	r3, r0
 8005b58:	71fb      	strb	r3, [r7, #7]
  if (Led <= LED4)
 8005b5a:	79fb      	ldrb	r3, [r7, #7]
 8005b5c:	2b03      	cmp	r3, #3
 8005b5e:	d80c      	bhi.n	8005b7a <BSP_LED_Off+0x2a>
  {
    HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 8005b60:	79fb      	ldrb	r3, [r7, #7]
 8005b62:	4a08      	ldr	r2, [pc, #32]	; (8005b84 <BSP_LED_Off+0x34>)
 8005b64:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8005b68:	79fb      	ldrb	r3, [r7, #7]
 8005b6a:	4a07      	ldr	r2, [pc, #28]	; (8005b88 <BSP_LED_Off+0x38>)
 8005b6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b70:	b29b      	uxth	r3, r3
 8005b72:	2201      	movs	r2, #1
 8005b74:	4619      	mov	r1, r3
 8005b76:	f7fc fad9 	bl	800212c <HAL_GPIO_WritePin>
  }
}
 8005b7a:	bf00      	nop
 8005b7c:	3708      	adds	r7, #8
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bd80      	pop	{r7, pc}
 8005b82:	bf00      	nop
 8005b84:	20000040 	.word	0x20000040
 8005b88:	20000030 	.word	0x20000030

08005b8c <I2C1_MspInit>:
/******************************* I2C Routines *********************************/
/**
  * @brief  Initializes I2C MSP.
  */
static void I2C1_MspInit(void)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b088      	sub	sp, #32
 8005b90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCO_I2C1_SCL_SDA_GPIO_CLK_ENABLE();
 8005b92:	2300      	movs	r3, #0
 8005b94:	60bb      	str	r3, [r7, #8]
 8005b96:	4b2a      	ldr	r3, [pc, #168]	; (8005c40 <I2C1_MspInit+0xb4>)
 8005b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b9a:	4a29      	ldr	r2, [pc, #164]	; (8005c40 <I2C1_MspInit+0xb4>)
 8005b9c:	f043 0302 	orr.w	r3, r3, #2
 8005ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8005ba2:	4b27      	ldr	r3, [pc, #156]	; (8005c40 <I2C1_MspInit+0xb4>)
 8005ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ba6:	f003 0302 	and.w	r3, r3, #2
 8005baa:	60bb      	str	r3, [r7, #8]
 8005bac:	68bb      	ldr	r3, [r7, #8]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin = DISCO_I2C1_SCL_PIN;
 8005bae:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005bb2:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8005bb4:	2312      	movs	r3, #18
 8005bb6:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8005bb8:	2300      	movs	r3, #0
 8005bba:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8005bbc:	2302      	movs	r3, #2
 8005bbe:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = DISCO_I2C1_SCL_SDA_AF;
 8005bc0:	2304      	movs	r3, #4
 8005bc2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DISCO_I2C1_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8005bc4:	f107 030c 	add.w	r3, r7, #12
 8005bc8:	4619      	mov	r1, r3
 8005bca:	481e      	ldr	r0, [pc, #120]	; (8005c44 <I2C1_MspInit+0xb8>)
 8005bcc:	f7fb fff6 	bl	8001bbc <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin = DISCO_I2C1_SDA_PIN;
 8005bd0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005bd4:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(DISCO_I2C1_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8005bd6:	f107 030c 	add.w	r3, r7, #12
 8005bda:	4619      	mov	r1, r3
 8005bdc:	4819      	ldr	r0, [pc, #100]	; (8005c44 <I2C1_MspInit+0xb8>)
 8005bde:	f7fb ffed 	bl	8001bbc <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCO_I2C1_CLK_ENABLE();
 8005be2:	2300      	movs	r3, #0
 8005be4:	607b      	str	r3, [r7, #4]
 8005be6:	4b16      	ldr	r3, [pc, #88]	; (8005c40 <I2C1_MspInit+0xb4>)
 8005be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bea:	4a15      	ldr	r2, [pc, #84]	; (8005c40 <I2C1_MspInit+0xb4>)
 8005bec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005bf0:	6413      	str	r3, [r2, #64]	; 0x40
 8005bf2:	4b13      	ldr	r3, [pc, #76]	; (8005c40 <I2C1_MspInit+0xb4>)
 8005bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bf6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005bfa:	607b      	str	r3, [r7, #4]
 8005bfc:	687b      	ldr	r3, [r7, #4]

  /* Force the I2C peripheral clock reset */
  DISCO_I2C1_FORCE_RESET();
 8005bfe:	4b10      	ldr	r3, [pc, #64]	; (8005c40 <I2C1_MspInit+0xb4>)
 8005c00:	6a1b      	ldr	r3, [r3, #32]
 8005c02:	4a0f      	ldr	r2, [pc, #60]	; (8005c40 <I2C1_MspInit+0xb4>)
 8005c04:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005c08:	6213      	str	r3, [r2, #32]

  /* Release the I2C peripheral clock reset */
  DISCO_I2C1_RELEASE_RESET();
 8005c0a:	4b0d      	ldr	r3, [pc, #52]	; (8005c40 <I2C1_MspInit+0xb4>)
 8005c0c:	6a1b      	ldr	r3, [r3, #32]
 8005c0e:	4a0c      	ldr	r2, [pc, #48]	; (8005c40 <I2C1_MspInit+0xb4>)
 8005c10:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005c14:	6213      	str	r3, [r2, #32]

  /* Enable and set I2C1 Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCO_I2C1_EV_IRQn, 0x05, 0);
 8005c16:	2200      	movs	r2, #0
 8005c18:	2105      	movs	r1, #5
 8005c1a:	201f      	movs	r0, #31
 8005c1c:	f7fa fdd7 	bl	80007ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCO_I2C1_EV_IRQn);
 8005c20:	201f      	movs	r0, #31
 8005c22:	f7fa fdf0 	bl	8000806 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2C1 Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCO_I2C1_ER_IRQn, 0x05, 0);
 8005c26:	2200      	movs	r2, #0
 8005c28:	2105      	movs	r1, #5
 8005c2a:	2020      	movs	r0, #32
 8005c2c:	f7fa fdcf 	bl	80007ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCO_I2C1_ER_IRQn);
 8005c30:	2020      	movs	r0, #32
 8005c32:	f7fa fde8 	bl	8000806 <HAL_NVIC_EnableIRQ>
}
 8005c36:	bf00      	nop
 8005c38:	3720      	adds	r7, #32
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bd80      	pop	{r7, pc}
 8005c3e:	bf00      	nop
 8005c40:	40023800 	.word	0x40023800
 8005c44:	40020400 	.word	0x40020400

08005c48 <I2C1_Init>:

/**
  * @brief  Initializes I2C HAL.
  */
static void I2C1_Init(void)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&heval_I2c1) == HAL_I2C_STATE_RESET)
 8005c4c:	4814      	ldr	r0, [pc, #80]	; (8005ca0 <I2C1_Init+0x58>)
 8005c4e:	f7fc ff39 	bl	8002ac4 <HAL_I2C_GetState>
 8005c52:	4603      	mov	r3, r0
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d120      	bne.n	8005c9a <I2C1_Init+0x52>
  {
    heval_I2c1.Instance = I2C1;
 8005c58:	4b11      	ldr	r3, [pc, #68]	; (8005ca0 <I2C1_Init+0x58>)
 8005c5a:	4a12      	ldr	r2, [pc, #72]	; (8005ca4 <I2C1_Init+0x5c>)
 8005c5c:	601a      	str	r2, [r3, #0]
    heval_I2c1.Init.ClockSpeed      = I2C1_SCL_FREQ_KHZ;
 8005c5e:	4b10      	ldr	r3, [pc, #64]	; (8005ca0 <I2C1_Init+0x58>)
 8005c60:	4a11      	ldr	r2, [pc, #68]	; (8005ca8 <I2C1_Init+0x60>)
 8005c62:	605a      	str	r2, [r3, #4]
    heval_I2c1.Init.DutyCycle       = I2C_DUTYCYCLE_2;
 8005c64:	4b0e      	ldr	r3, [pc, #56]	; (8005ca0 <I2C1_Init+0x58>)
 8005c66:	2200      	movs	r2, #0
 8005c68:	609a      	str	r2, [r3, #8]
    heval_I2c1.Init.OwnAddress1     = 0;
 8005c6a:	4b0d      	ldr	r3, [pc, #52]	; (8005ca0 <I2C1_Init+0x58>)
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	60da      	str	r2, [r3, #12]
    heval_I2c1.Init.AddressingMode  = I2C_ADDRESSINGMODE_7BIT;
 8005c70:	4b0b      	ldr	r3, [pc, #44]	; (8005ca0 <I2C1_Init+0x58>)
 8005c72:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005c76:	611a      	str	r2, [r3, #16]
    heval_I2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005c78:	4b09      	ldr	r3, [pc, #36]	; (8005ca0 <I2C1_Init+0x58>)
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	615a      	str	r2, [r3, #20]
    heval_I2c1.Init.OwnAddress2     = 0;
 8005c7e:	4b08      	ldr	r3, [pc, #32]	; (8005ca0 <I2C1_Init+0x58>)
 8005c80:	2200      	movs	r2, #0
 8005c82:	619a      	str	r2, [r3, #24]
    heval_I2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005c84:	4b06      	ldr	r3, [pc, #24]	; (8005ca0 <I2C1_Init+0x58>)
 8005c86:	2200      	movs	r2, #0
 8005c88:	61da      	str	r2, [r3, #28]
    heval_I2c1.Init.NoStretchMode   = I2C_NOSTRETCH_DISABLE;
 8005c8a:	4b05      	ldr	r3, [pc, #20]	; (8005ca0 <I2C1_Init+0x58>)
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2C1_MspInit();
 8005c90:	f7ff ff7c 	bl	8005b8c <I2C1_MspInit>
    HAL_I2C_Init(&heval_I2c1);
 8005c94:	4802      	ldr	r0, [pc, #8]	; (8005ca0 <I2C1_Init+0x58>)
 8005c96:	f7fc fa7d 	bl	8002194 <HAL_I2C_Init>
  }
}
 8005c9a:	bf00      	nop
 8005c9c:	bd80      	pop	{r7, pc}
 8005c9e:	bf00      	nop
 8005ca0:	200000b0 	.word	0x200000b0
 8005ca4:	40005400 	.word	0x40005400
 8005ca8:	00061a80 	.word	0x00061a80

08005cac <I2C1_Write>:
  * @param  Addr: I2C address
  * @param  Reg: Register address
  * @param  Value: Data to be written
  */
static void I2C1_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b088      	sub	sp, #32
 8005cb0:	af04      	add	r7, sp, #16
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	71fb      	strb	r3, [r7, #7]
 8005cb6:	460b      	mov	r3, r1
 8005cb8:	71bb      	strb	r3, [r7, #6]
 8005cba:	4613      	mov	r3, r2
 8005cbc:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	73fb      	strb	r3, [r7, #15]

  status = HAL_I2C_Mem_Write(&heval_I2c1,
 8005cc2:	79fb      	ldrb	r3, [r7, #7]
 8005cc4:	b299      	uxth	r1, r3
 8005cc6:	79bb      	ldrb	r3, [r7, #6]
 8005cc8:	b29a      	uxth	r2, r3
 8005cca:	2364      	movs	r3, #100	; 0x64
 8005ccc:	9302      	str	r3, [sp, #8]
 8005cce:	2301      	movs	r3, #1
 8005cd0:	9301      	str	r3, [sp, #4]
 8005cd2:	1d7b      	adds	r3, r7, #5
 8005cd4:	9300      	str	r3, [sp, #0]
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	4807      	ldr	r0, [pc, #28]	; (8005cf8 <I2C1_Write+0x4c>)
 8005cda:	f7fc fbd3 	bl	8002484 <HAL_I2C_Mem_Write>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	73fb      	strb	r3, [r7, #15]
                         &Value,
                         1,
                         100);

  /* Check the communication status */
  if(status != HAL_OK)
 8005ce2:	7bfb      	ldrb	r3, [r7, #15]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d003      	beq.n	8005cf0 <I2C1_Write+0x44>
  {
    /* Execute user timeout callback */
    I2C1_Error(Addr);
 8005ce8:	79fb      	ldrb	r3, [r7, #7]
 8005cea:	4618      	mov	r0, r3
 8005cec:	f000 f85e 	bl	8005dac <I2C1_Error>
  }
}
 8005cf0:	bf00      	nop
 8005cf2:	3710      	adds	r7, #16
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bd80      	pop	{r7, pc}
 8005cf8:	200000b0 	.word	0x200000b0

08005cfc <I2C1_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Register address
  * @retval Read data
  */
static uint8_t I2C1_Read(uint8_t Addr, uint8_t Reg)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b088      	sub	sp, #32
 8005d00:	af04      	add	r7, sp, #16
 8005d02:	4603      	mov	r3, r0
 8005d04:	460a      	mov	r2, r1
 8005d06:	71fb      	strb	r3, [r7, #7]
 8005d08:	4613      	mov	r3, r2
 8005d0a:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	73fb      	strb	r3, [r7, #15]
  uint8_t Value = 0;
 8005d10:	2300      	movs	r3, #0
 8005d12:	73bb      	strb	r3, [r7, #14]

  status = HAL_I2C_Mem_Read(&heval_I2c1,
 8005d14:	79fb      	ldrb	r3, [r7, #7]
 8005d16:	b299      	uxth	r1, r3
 8005d18:	79bb      	ldrb	r3, [r7, #6]
 8005d1a:	b29a      	uxth	r2, r3
 8005d1c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005d20:	9302      	str	r3, [sp, #8]
 8005d22:	2301      	movs	r3, #1
 8005d24:	9301      	str	r3, [sp, #4]
 8005d26:	f107 030e 	add.w	r3, r7, #14
 8005d2a:	9300      	str	r3, [sp, #0]
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	4808      	ldr	r0, [pc, #32]	; (8005d50 <I2C1_Read+0x54>)
 8005d30:	f7fc fca2 	bl	8002678 <HAL_I2C_Mem_Read>
 8005d34:	4603      	mov	r3, r0
 8005d36:	73fb      	strb	r3, [r7, #15]
                        &Value,
                        1,
                        1000);

  /* Check the communication status */
  if(status != HAL_OK)
 8005d38:	7bfb      	ldrb	r3, [r7, #15]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d003      	beq.n	8005d46 <I2C1_Read+0x4a>
  {
    /* Execute user timeout callback */
    I2C1_Error(Addr);
 8005d3e:	79fb      	ldrb	r3, [r7, #7]
 8005d40:	4618      	mov	r0, r3
 8005d42:	f000 f833 	bl	8005dac <I2C1_Error>
  }
  return Value;
 8005d46:	7bbb      	ldrb	r3, [r7, #14]
}
 8005d48:	4618      	mov	r0, r3
 8005d4a:	3710      	adds	r7, #16
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	bd80      	pop	{r7, pc}
 8005d50:	200000b0 	.word	0x200000b0

08005d54 <I2C1_ReadMultiple>:
static HAL_StatusTypeDef I2C1_ReadMultiple(uint8_t Addr,
                                       uint16_t Reg,
                                       uint16_t MemAddress,
                                       uint8_t *Buffer,
                                       uint16_t Length)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b08a      	sub	sp, #40	; 0x28
 8005d58:	af04      	add	r7, sp, #16
 8005d5a:	607b      	str	r3, [r7, #4]
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	73fb      	strb	r3, [r7, #15]
 8005d60:	460b      	mov	r3, r1
 8005d62:	81bb      	strh	r3, [r7, #12]
 8005d64:	4613      	mov	r3, r2
 8005d66:	817b      	strh	r3, [r7, #10]
  HAL_StatusTypeDef status = HAL_OK;
 8005d68:	2300      	movs	r3, #0
 8005d6a:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(&heval_I2c1,
 8005d6c:	7bfb      	ldrb	r3, [r7, #15]
 8005d6e:	b299      	uxth	r1, r3
 8005d70:	8978      	ldrh	r0, [r7, #10]
 8005d72:	89ba      	ldrh	r2, [r7, #12]
 8005d74:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005d78:	9302      	str	r3, [sp, #8]
 8005d7a:	8c3b      	ldrh	r3, [r7, #32]
 8005d7c:	9301      	str	r3, [sp, #4]
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	9300      	str	r3, [sp, #0]
 8005d82:	4603      	mov	r3, r0
 8005d84:	4808      	ldr	r0, [pc, #32]	; (8005da8 <I2C1_ReadMultiple+0x54>)
 8005d86:	f7fc fc77 	bl	8002678 <HAL_I2C_Mem_Read>
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	75fb      	strb	r3, [r7, #23]
                        Buffer,
                        Length,
                        1000);

  /* Check the communication status */
  if(status != HAL_OK)
 8005d8e:	7dfb      	ldrb	r3, [r7, #23]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d003      	beq.n	8005d9c <I2C1_ReadMultiple+0x48>
  {
    /* I2C error occured */
    I2C1_Error(Addr);
 8005d94:	7bfb      	ldrb	r3, [r7, #15]
 8005d96:	4618      	mov	r0, r3
 8005d98:	f000 f808 	bl	8005dac <I2C1_Error>
  }
  return status;
 8005d9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d9e:	4618      	mov	r0, r3
 8005da0:	3718      	adds	r7, #24
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd80      	pop	{r7, pc}
 8005da6:	bf00      	nop
 8005da8:	200000b0 	.word	0x200000b0

08005dac <I2C1_Error>:
/**
  * @brief  Manages error callback by re-initializing I2C.
  * @param  Addr: I2C Address
  */
static void I2C1_Error(uint8_t Addr)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b082      	sub	sp, #8
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	4603      	mov	r3, r0
 8005db4:	71fb      	strb	r3, [r7, #7]
  /* De-initialize the I2C comunication bus */
  HAL_I2C_DeInit(&heval_I2c1);
 8005db6:	4804      	ldr	r0, [pc, #16]	; (8005dc8 <I2C1_Error+0x1c>)
 8005db8:	f7fc fb20 	bl	80023fc <HAL_I2C_DeInit>

  /* Re-Initiaize the I2C comunication bus */
  I2C1_Init();
 8005dbc:	f7ff ff44 	bl	8005c48 <I2C1_Init>
}
 8005dc0:	bf00      	nop
 8005dc2:	3708      	adds	r7, #8
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bd80      	pop	{r7, pc}
 8005dc8:	200000b0 	.word	0x200000b0

08005dcc <TS_IO_Init>:
/**
  * @brief  Initialize I2C communication
  *         channel from MCU to TouchScreen (TS).
  */
void TS_IO_Init(void)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	af00      	add	r7, sp, #0
  I2C1_Init();
 8005dd0:	f7ff ff3a 	bl	8005c48 <I2C1_Init>
}
 8005dd4:	bf00      	nop
 8005dd6:	bd80      	pop	{r7, pc}

08005dd8 <TS_IO_Write>:
  * @param  Addr: I2C address
  * @param  Reg: Register address
  * @param  Value: Data to be written
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b082      	sub	sp, #8
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	4603      	mov	r3, r0
 8005de0:	71fb      	strb	r3, [r7, #7]
 8005de2:	460b      	mov	r3, r1
 8005de4:	71bb      	strb	r3, [r7, #6]
 8005de6:	4613      	mov	r3, r2
 8005de8:	717b      	strb	r3, [r7, #5]
  I2C1_Write(Addr, Reg, Value);
 8005dea:	797a      	ldrb	r2, [r7, #5]
 8005dec:	79b9      	ldrb	r1, [r7, #6]
 8005dee:	79fb      	ldrb	r3, [r7, #7]
 8005df0:	4618      	mov	r0, r3
 8005df2:	f7ff ff5b 	bl	8005cac <I2C1_Write>
}
 8005df6:	bf00      	nop
 8005df8:	3708      	adds	r7, #8
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}

08005dfe <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Register address
  * @retval Read data
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8005dfe:	b580      	push	{r7, lr}
 8005e00:	b082      	sub	sp, #8
 8005e02:	af00      	add	r7, sp, #0
 8005e04:	4603      	mov	r3, r0
 8005e06:	460a      	mov	r2, r1
 8005e08:	71fb      	strb	r3, [r7, #7]
 8005e0a:	4613      	mov	r3, r2
 8005e0c:	71bb      	strb	r3, [r7, #6]
  return I2C1_Read(Addr, Reg);
 8005e0e:	79ba      	ldrb	r2, [r7, #6]
 8005e10:	79fb      	ldrb	r3, [r7, #7]
 8005e12:	4611      	mov	r1, r2
 8005e14:	4618      	mov	r0, r3
 8005e16:	f7ff ff71 	bl	8005cfc <I2C1_Read>
 8005e1a:	4603      	mov	r3, r0
}
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	3708      	adds	r7, #8
 8005e20:	46bd      	mov	sp, r7
 8005e22:	bd80      	pop	{r7, pc}

08005e24 <TS_IO_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval Number of read data
  */
uint16_t TS_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b084      	sub	sp, #16
 8005e28:	af02      	add	r7, sp, #8
 8005e2a:	603a      	str	r2, [r7, #0]
 8005e2c:	461a      	mov	r2, r3
 8005e2e:	4603      	mov	r3, r0
 8005e30:	71fb      	strb	r3, [r7, #7]
 8005e32:	460b      	mov	r3, r1
 8005e34:	71bb      	strb	r3, [r7, #6]
 8005e36:	4613      	mov	r3, r2
 8005e38:	80bb      	strh	r3, [r7, #4]
 return I2C1_ReadMultiple(Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8005e3a:	79bb      	ldrb	r3, [r7, #6]
 8005e3c:	b299      	uxth	r1, r3
 8005e3e:	79f8      	ldrb	r0, [r7, #7]
 8005e40:	88bb      	ldrh	r3, [r7, #4]
 8005e42:	9300      	str	r3, [sp, #0]
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	2201      	movs	r2, #1
 8005e48:	f7ff ff84 	bl	8005d54 <I2C1_ReadMultiple>
 8005e4c:	4603      	mov	r3, r0
 8005e4e:	b29b      	uxth	r3, r3
}
 8005e50:	4618      	mov	r0, r3
 8005e52:	3708      	adds	r7, #8
 8005e54:	46bd      	mov	sp, r7
 8005e56:	bd80      	pop	{r7, pc}

08005e58 <OTM8009A_IO_Delay>:
/**
  * @brief  OTM8009A delay
  * @param  Delay: Delay in ms
  */
void OTM8009A_IO_Delay(uint32_t Delay)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b082      	sub	sp, #8
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8005e60:	6878      	ldr	r0, [r7, #4]
 8005e62:	f7fa fbb5 	bl	80005d0 <HAL_Delay>
}
 8005e66:	bf00      	nop
 8005e68:	3708      	adds	r7, #8
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}

08005e6e <BSP_LCD_Init>:
/**
  * @brief  Initializes the DSI LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{
 8005e6e:	b580      	push	{r7, lr}
 8005e70:	af00      	add	r7, sp, #0
  return (BSP_LCD_InitEx(LCD_ORIENTATION_LANDSCAPE));
 8005e72:	2001      	movs	r0, #1
 8005e74:	f000 f804 	bl	8005e80 <BSP_LCD_InitEx>
 8005e78:	4603      	mov	r3, r0
}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	bd80      	pop	{r7, pc}
	...

08005e80 <BSP_LCD_InitEx>:
  *     - LTDC ititialization
  *     - OTM8009A LCD Display IC Driver ititialization
  * @retval LCD state
  */
uint8_t BSP_LCD_InitEx(LCD_OrientationTypeDef orientation)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b096      	sub	sp, #88	; 0x58
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	4603      	mov	r3, r0
 8005e88:	71fb      	strb	r3, [r7, #7]
  DSI_PLLInitTypeDef dsiPllInit;
  DSI_PHY_TimerTypeDef  PhyTimings;
  static RCC_PeriphCLKInitTypeDef  PeriphClkInitStruct;
  uint32_t LcdClock  = 27429; /*!< LcdClk = 27429 kHz */
 8005e8a:	f646 3325 	movw	r3, #27429	; 0x6b25
 8005e8e:	657b      	str	r3, [r7, #84]	; 0x54
  
  uint32_t laneByteClk_kHz = 0;
 8005e90:	2300      	movs	r3, #0
 8005e92:	653b      	str	r3, [r7, #80]	; 0x50
  uint32_t                   HACT; /*!< Horizontal Active time in units of lcdClk = imageSize X in pixels to display */
  
  
  /* Toggle Hardware Reset of the DSI LCD using
  * its XRES signal (active low) */
  BSP_LCD_Reset();
 8005e94:	f000 f93e 	bl	8006114 <BSP_LCD_Reset>
  * This will set IP blocks LTDC, DSI and DMA2D
  * - out of reset
  * - clocked
  * - NVIC IRQ related to IP blocks enabled
  */
  BSP_LCD_MspInit();
 8005e98:	f000 fd80 	bl	800699c <BSP_LCD_MspInit>
  
/*************************DSI Initialization***********************************/  
  
  /* Base address of DSI Host/Wrapper registers to be set before calling De-Init */
  hdsi_eval.Instance = DSI;
 8005e9c:	4b93      	ldr	r3, [pc, #588]	; (80060ec <BSP_LCD_InitEx+0x26c>)
 8005e9e:	4a94      	ldr	r2, [pc, #592]	; (80060f0 <BSP_LCD_InitEx+0x270>)
 8005ea0:	601a      	str	r2, [r3, #0]
  
  HAL_DSI_DeInit(&(hdsi_eval));
 8005ea2:	4892      	ldr	r0, [pc, #584]	; (80060ec <BSP_LCD_InitEx+0x26c>)
 8005ea4:	f7fb faae 	bl	8001404 <HAL_DSI_DeInit>
  
#if !defined(USE_STM32469I_DISCO_REVA)
  dsiPllInit.PLLNDIV  = 125;
 8005ea8:	237d      	movs	r3, #125	; 0x7d
 8005eaa:	627b      	str	r3, [r7, #36]	; 0x24
  dsiPllInit.PLLIDF   = DSI_PLL_IN_DIV2;
 8005eac:	2302      	movs	r3, #2
 8005eae:	62bb      	str	r3, [r7, #40]	; 0x28
  dsiPllInit.PLLODF   = DSI_PLL_OUT_DIV1;
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
#else  
  dsiPllInit.PLLNDIV  = 100;
  dsiPllInit.PLLIDF   = DSI_PLL_IN_DIV5;
  dsiPllInit.PLLODF   = DSI_PLL_OUT_DIV1;
#endif
  laneByteClk_kHz = 62500; /* 500 MHz / 8 = 62.5 MHz = 62500 kHz */
 8005eb4:	f24f 4324 	movw	r3, #62500	; 0xf424
 8005eb8:	653b      	str	r3, [r7, #80]	; 0x50
  
  /* Set number of Lanes */
  hdsi_eval.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 8005eba:	4b8c      	ldr	r3, [pc, #560]	; (80060ec <BSP_LCD_InitEx+0x26c>)
 8005ebc:	2201      	movs	r2, #1
 8005ebe:	60da      	str	r2, [r3, #12]
  
  /* TXEscapeCkdiv = f(LaneByteClk)/15.62 = 4 */
  hdsi_eval.Init.TXEscapeCkdiv = laneByteClk_kHz/15620; 
 8005ec0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ec2:	089b      	lsrs	r3, r3, #2
 8005ec4:	4a8b      	ldr	r2, [pc, #556]	; (80060f4 <BSP_LCD_InitEx+0x274>)
 8005ec6:	fba2 2303 	umull	r2, r3, r2, r3
 8005eca:	0a9b      	lsrs	r3, r3, #10
 8005ecc:	4a87      	ldr	r2, [pc, #540]	; (80060ec <BSP_LCD_InitEx+0x26c>)
 8005ece:	6093      	str	r3, [r2, #8]
  
  HAL_DSI_Init(&(hdsi_eval), &(dsiPllInit));
 8005ed0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005ed4:	4619      	mov	r1, r3
 8005ed6:	4885      	ldr	r0, [pc, #532]	; (80060ec <BSP_LCD_InitEx+0x26c>)
 8005ed8:	f7fb f97a 	bl	80011d0 <HAL_DSI_Init>
  
  /* Timing parameters for all Video modes
  * Set Timing parameters of LTDC depending on its chosen orientation
  */
  if(orientation == LCD_ORIENTATION_PORTRAIT)
 8005edc:	79fb      	ldrb	r3, [r7, #7]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d108      	bne.n	8005ef4 <BSP_LCD_InitEx+0x74>
  {
    lcd_x_size = OTM8009A_480X800_WIDTH;  /* 480 */
 8005ee2:	4b85      	ldr	r3, [pc, #532]	; (80060f8 <BSP_LCD_InitEx+0x278>)
 8005ee4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8005ee8:	601a      	str	r2, [r3, #0]
    lcd_y_size = OTM8009A_480X800_HEIGHT; /* 800 */                                
 8005eea:	4b84      	ldr	r3, [pc, #528]	; (80060fc <BSP_LCD_InitEx+0x27c>)
 8005eec:	f44f 7248 	mov.w	r2, #800	; 0x320
 8005ef0:	601a      	str	r2, [r3, #0]
 8005ef2:	e007      	b.n	8005f04 <BSP_LCD_InitEx+0x84>
  }
  else
  {
    /* lcd_orientation == LCD_ORIENTATION_LANDSCAPE */
    lcd_x_size = OTM8009A_800X480_WIDTH;  /* 800 */
 8005ef4:	4b80      	ldr	r3, [pc, #512]	; (80060f8 <BSP_LCD_InitEx+0x278>)
 8005ef6:	f44f 7248 	mov.w	r2, #800	; 0x320
 8005efa:	601a      	str	r2, [r3, #0]
    lcd_y_size = OTM8009A_800X480_HEIGHT; /* 480 */                                
 8005efc:	4b7f      	ldr	r3, [pc, #508]	; (80060fc <BSP_LCD_InitEx+0x27c>)
 8005efe:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8005f02:	601a      	str	r2, [r3, #0]
  }
  
  HACT = lcd_x_size;
 8005f04:	4b7c      	ldr	r3, [pc, #496]	; (80060f8 <BSP_LCD_InitEx+0x278>)
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	64fb      	str	r3, [r7, #76]	; 0x4c
  VACT = lcd_y_size;
 8005f0a:	4b7c      	ldr	r3, [pc, #496]	; (80060fc <BSP_LCD_InitEx+0x27c>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	64bb      	str	r3, [r7, #72]	; 0x48
  
  /* The following values are same for portrait and landscape orientations */
  VSA  = OTM8009A_480X800_VSYNC;
 8005f10:	2301      	movs	r3, #1
 8005f12:	647b      	str	r3, [r7, #68]	; 0x44
  VBP  = OTM8009A_480X800_VBP;
 8005f14:	230f      	movs	r3, #15
 8005f16:	643b      	str	r3, [r7, #64]	; 0x40
  VFP  = OTM8009A_480X800_VFP;
 8005f18:	2310      	movs	r3, #16
 8005f1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HSA  = OTM8009A_480X800_HSYNC;
 8005f1c:	2302      	movs	r3, #2
 8005f1e:	63bb      	str	r3, [r7, #56]	; 0x38
  HBP  = OTM8009A_480X800_HBP;
 8005f20:	2322      	movs	r3, #34	; 0x22
 8005f22:	637b      	str	r3, [r7, #52]	; 0x34
  HFP  = OTM8009A_480X800_HFP;
 8005f24:	2322      	movs	r3, #34	; 0x22
 8005f26:	633b      	str	r3, [r7, #48]	; 0x30
  
  
  hdsivideo_handle.VirtualChannelID = LCD_OTM8009A_ID;
 8005f28:	4b75      	ldr	r3, [pc, #468]	; (8006100 <BSP_LCD_InitEx+0x280>)
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	601a      	str	r2, [r3, #0]
  hdsivideo_handle.ColorCoding = LCD_DSI_PIXEL_DATA_FMT_RBG888;
 8005f2e:	4b74      	ldr	r3, [pc, #464]	; (8006100 <BSP_LCD_InitEx+0x280>)
 8005f30:	2205      	movs	r2, #5
 8005f32:	605a      	str	r2, [r3, #4]
  hdsivideo_handle.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 8005f34:	4b72      	ldr	r3, [pc, #456]	; (8006100 <BSP_LCD_InitEx+0x280>)
 8005f36:	2200      	movs	r2, #0
 8005f38:	621a      	str	r2, [r3, #32]
  hdsivideo_handle.HSPolarity = DSI_HSYNC_ACTIVE_HIGH;
 8005f3a:	4b71      	ldr	r3, [pc, #452]	; (8006100 <BSP_LCD_InitEx+0x280>)
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	61da      	str	r2, [r3, #28]
  hdsivideo_handle.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;  
 8005f40:	4b6f      	ldr	r3, [pc, #444]	; (8006100 <BSP_LCD_InitEx+0x280>)
 8005f42:	2200      	movs	r2, #0
 8005f44:	625a      	str	r2, [r3, #36]	; 0x24
  hdsivideo_handle.Mode = DSI_VID_MODE_BURST; /* Mode Video burst ie : one LgP per line */
 8005f46:	4b6e      	ldr	r3, [pc, #440]	; (8006100 <BSP_LCD_InitEx+0x280>)
 8005f48:	2202      	movs	r2, #2
 8005f4a:	60da      	str	r2, [r3, #12]
  hdsivideo_handle.NullPacketSize = 0xFFF;
 8005f4c:	4b6c      	ldr	r3, [pc, #432]	; (8006100 <BSP_LCD_InitEx+0x280>)
 8005f4e:	f640 72ff 	movw	r2, #4095	; 0xfff
 8005f52:	619a      	str	r2, [r3, #24]
  hdsivideo_handle.NumberOfChunks = 0;
 8005f54:	4b6a      	ldr	r3, [pc, #424]	; (8006100 <BSP_LCD_InitEx+0x280>)
 8005f56:	2200      	movs	r2, #0
 8005f58:	615a      	str	r2, [r3, #20]
  hdsivideo_handle.PacketSize                = HACT; /* Value depending on display orientation choice portrait/landscape */ 
 8005f5a:	4a69      	ldr	r2, [pc, #420]	; (8006100 <BSP_LCD_InitEx+0x280>)
 8005f5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f5e:	6113      	str	r3, [r2, #16]
  hdsivideo_handle.HorizontalSyncActive      = (HSA * laneByteClk_kHz) / LcdClock;
 8005f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f62:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005f64:	fb02 f203 	mul.w	r2, r2, r3
 8005f68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f6e:	4a64      	ldr	r2, [pc, #400]	; (8006100 <BSP_LCD_InitEx+0x280>)
 8005f70:	6293      	str	r3, [r2, #40]	; 0x28
  hdsivideo_handle.HorizontalBackPorch       = (HBP * laneByteClk_kHz) / LcdClock;
 8005f72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f74:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005f76:	fb02 f203 	mul.w	r2, r2, r3
 8005f7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f80:	4a5f      	ldr	r2, [pc, #380]	; (8006100 <BSP_LCD_InitEx+0x280>)
 8005f82:	62d3      	str	r3, [r2, #44]	; 0x2c
  hdsivideo_handle.HorizontalLine            = ((HACT + HSA + HBP + HFP) * laneByteClk_kHz) / LcdClock; /* Value depending on display orientation choice portrait/landscape */
 8005f84:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005f86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f88:	441a      	add	r2, r3
 8005f8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f8c:	441a      	add	r2, r3
 8005f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f90:	4413      	add	r3, r2
 8005f92:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005f94:	fb02 f203 	mul.w	r2, r2, r3
 8005f98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f9e:	4a58      	ldr	r2, [pc, #352]	; (8006100 <BSP_LCD_InitEx+0x280>)
 8005fa0:	6313      	str	r3, [r2, #48]	; 0x30
  hdsivideo_handle.VerticalSyncActive        = VSA;
 8005fa2:	4a57      	ldr	r2, [pc, #348]	; (8006100 <BSP_LCD_InitEx+0x280>)
 8005fa4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005fa6:	6353      	str	r3, [r2, #52]	; 0x34
  hdsivideo_handle.VerticalBackPorch         = VBP;
 8005fa8:	4a55      	ldr	r2, [pc, #340]	; (8006100 <BSP_LCD_InitEx+0x280>)
 8005faa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fac:	6393      	str	r3, [r2, #56]	; 0x38
  hdsivideo_handle.VerticalFrontPorch        = VFP;
 8005fae:	4a54      	ldr	r2, [pc, #336]	; (8006100 <BSP_LCD_InitEx+0x280>)
 8005fb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fb2:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdsivideo_handle.VerticalActive            = VACT; /* Value depending on display orientation choice portrait/landscape */
 8005fb4:	4a52      	ldr	r2, [pc, #328]	; (8006100 <BSP_LCD_InitEx+0x280>)
 8005fb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005fb8:	6413      	str	r3, [r2, #64]	; 0x40
  
  /* Enable or disable sending LP command while streaming is active in video mode */
  hdsivideo_handle.LPCommandEnable = DSI_LP_COMMAND_ENABLE; /* Enable sending commands in mode LP (Low Power) */
 8005fba:	4b51      	ldr	r3, [pc, #324]	; (8006100 <BSP_LCD_InitEx+0x280>)
 8005fbc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8005fc0:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Largest packet size possible to transmit in LP mode in VSA, VBP, VFP regions */
  /* Only useful when sending LP packets is allowed while streaming is active in video mode */
  hdsivideo_handle.LPLargestPacketSize = 16;
 8005fc2:	4b4f      	ldr	r3, [pc, #316]	; (8006100 <BSP_LCD_InitEx+0x280>)
 8005fc4:	2210      	movs	r2, #16
 8005fc6:	649a      	str	r2, [r3, #72]	; 0x48
  
  /* Largest packet size possible to transmit in LP mode in HFP region during VACT period */
  /* Only useful when sending LP packets is allowed while streaming is active in video mode */
  hdsivideo_handle.LPVACTLargestPacketSize = 0;
 8005fc8:	4b4d      	ldr	r3, [pc, #308]	; (8006100 <BSP_LCD_InitEx+0x280>)
 8005fca:	2200      	movs	r2, #0
 8005fcc:	64da      	str	r2, [r3, #76]	; 0x4c
  
  
  /* Specify for each region of the video frame, if the transmission of command in LP mode is allowed in this region */
  /* while streaming is active in video mode                                                                         */
  hdsivideo_handle.LPHorizontalFrontPorchEnable = DSI_LP_HFP_ENABLE;   /* Allow sending LP commands during HFP period */
 8005fce:	4b4c      	ldr	r3, [pc, #304]	; (8006100 <BSP_LCD_InitEx+0x280>)
 8005fd0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005fd4:	651a      	str	r2, [r3, #80]	; 0x50
  hdsivideo_handle.LPHorizontalBackPorchEnable  = DSI_LP_HBP_ENABLE;   /* Allow sending LP commands during HBP period */
 8005fd6:	4b4a      	ldr	r3, [pc, #296]	; (8006100 <BSP_LCD_InitEx+0x280>)
 8005fd8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005fdc:	655a      	str	r2, [r3, #84]	; 0x54
  hdsivideo_handle.LPVerticalActiveEnable = DSI_LP_VACT_ENABLE;  /* Allow sending LP commands during VACT period */
 8005fde:	4b48      	ldr	r3, [pc, #288]	; (8006100 <BSP_LCD_InitEx+0x280>)
 8005fe0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005fe4:	659a      	str	r2, [r3, #88]	; 0x58
  hdsivideo_handle.LPVerticalFrontPorchEnable = DSI_LP_VFP_ENABLE;   /* Allow sending LP commands during VFP period */
 8005fe6:	4b46      	ldr	r3, [pc, #280]	; (8006100 <BSP_LCD_InitEx+0x280>)
 8005fe8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005fec:	65da      	str	r2, [r3, #92]	; 0x5c
  hdsivideo_handle.LPVerticalBackPorchEnable = DSI_LP_VBP_ENABLE;   /* Allow sending LP commands during VBP period */
 8005fee:	4b44      	ldr	r3, [pc, #272]	; (8006100 <BSP_LCD_InitEx+0x280>)
 8005ff0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ff4:	661a      	str	r2, [r3, #96]	; 0x60
  hdsivideo_handle.LPVerticalSyncActiveEnable = DSI_LP_VSYNC_ENABLE; /* Allow sending LP commands during VSync = VSA period */
 8005ff6:	4b42      	ldr	r3, [pc, #264]	; (8006100 <BSP_LCD_InitEx+0x280>)
 8005ff8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005ffc:	665a      	str	r2, [r3, #100]	; 0x64
  
  /* Configure DSI Video mode timings with settings set above */
  HAL_DSI_ConfigVideoMode(&(hdsi_eval), &(hdsivideo_handle));
 8005ffe:	4940      	ldr	r1, [pc, #256]	; (8006100 <BSP_LCD_InitEx+0x280>)
 8006000:	483a      	ldr	r0, [pc, #232]	; (80060ec <BSP_LCD_InitEx+0x26c>)
 8006002:	f7fb fa73 	bl	80014ec <HAL_DSI_ConfigVideoMode>

  /* Configure DSI PHY HS2LP and LP2HS timings */
  PhyTimings.ClockLaneHS2LPTime = 35;
 8006006:	2323      	movs	r3, #35	; 0x23
 8006008:	60fb      	str	r3, [r7, #12]
  PhyTimings.ClockLaneLP2HSTime = 35;
 800600a:	2323      	movs	r3, #35	; 0x23
 800600c:	613b      	str	r3, [r7, #16]
  PhyTimings.DataLaneHS2LPTime = 35;
 800600e:	2323      	movs	r3, #35	; 0x23
 8006010:	617b      	str	r3, [r7, #20]
  PhyTimings.DataLaneLP2HSTime = 35;
 8006012:	2323      	movs	r3, #35	; 0x23
 8006014:	61bb      	str	r3, [r7, #24]
  PhyTimings.DataLaneMaxReadTime = 0;
 8006016:	2300      	movs	r3, #0
 8006018:	61fb      	str	r3, [r7, #28]
  PhyTimings.StopWaitTime = 10;
 800601a:	230a      	movs	r3, #10
 800601c:	623b      	str	r3, [r7, #32]
  HAL_DSI_ConfigPhyTimer(&hdsi_eval, &PhyTimings);
 800601e:	f107 030c 	add.w	r3, r7, #12
 8006022:	4619      	mov	r1, r3
 8006024:	4831      	ldr	r0, [pc, #196]	; (80060ec <BSP_LCD_InitEx+0x26c>)
 8006026:	f7fb fc69 	bl	80018fc <HAL_DSI_ConfigPhyTimer>
  
  
/************************LTDC Initialization***********************************/  
  
  /* Timing Configuration */    
  hltdc_eval.Init.HorizontalSync = (HSA - 1);
 800602a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800602c:	3b01      	subs	r3, #1
 800602e:	4a35      	ldr	r2, [pc, #212]	; (8006104 <BSP_LCD_InitEx+0x284>)
 8006030:	6153      	str	r3, [r2, #20]
  hltdc_eval.Init.AccumulatedHBP = (HSA + HBP - 1);
 8006032:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006034:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006036:	4413      	add	r3, r2
 8006038:	3b01      	subs	r3, #1
 800603a:	4a32      	ldr	r2, [pc, #200]	; (8006104 <BSP_LCD_InitEx+0x284>)
 800603c:	61d3      	str	r3, [r2, #28]
  hltdc_eval.Init.AccumulatedActiveW = (lcd_x_size + HSA + HBP - 1);
 800603e:	4b2e      	ldr	r3, [pc, #184]	; (80060f8 <BSP_LCD_InitEx+0x278>)
 8006040:	681a      	ldr	r2, [r3, #0]
 8006042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006044:	441a      	add	r2, r3
 8006046:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006048:	4413      	add	r3, r2
 800604a:	3b01      	subs	r3, #1
 800604c:	4a2d      	ldr	r2, [pc, #180]	; (8006104 <BSP_LCD_InitEx+0x284>)
 800604e:	6253      	str	r3, [r2, #36]	; 0x24
  hltdc_eval.Init.TotalWidth = (lcd_x_size + HSA + HBP + HFP - 1);
 8006050:	4b29      	ldr	r3, [pc, #164]	; (80060f8 <BSP_LCD_InitEx+0x278>)
 8006052:	681a      	ldr	r2, [r3, #0]
 8006054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006056:	441a      	add	r2, r3
 8006058:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800605a:	441a      	add	r2, r3
 800605c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800605e:	4413      	add	r3, r2
 8006060:	3b01      	subs	r3, #1
 8006062:	4a28      	ldr	r2, [pc, #160]	; (8006104 <BSP_LCD_InitEx+0x284>)
 8006064:	62d3      	str	r3, [r2, #44]	; 0x2c
  
  /* Initialize the LCD pixel width and pixel height */
  hltdc_eval.LayerCfg->ImageWidth  = lcd_x_size;
 8006066:	4b24      	ldr	r3, [pc, #144]	; (80060f8 <BSP_LCD_InitEx+0x278>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	4a26      	ldr	r2, [pc, #152]	; (8006104 <BSP_LCD_InitEx+0x284>)
 800606c:	6613      	str	r3, [r2, #96]	; 0x60
  hltdc_eval.LayerCfg->ImageHeight = lcd_y_size;   
 800606e:	4b23      	ldr	r3, [pc, #140]	; (80060fc <BSP_LCD_InitEx+0x27c>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a24      	ldr	r2, [pc, #144]	; (8006104 <BSP_LCD_InitEx+0x284>)
 8006074:	6653      	str	r3, [r2, #100]	; 0x64
  /* LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 384 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 384 MHz / 7 = 54.857 MHz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_2 = 54.857 MHz / 2 = 27.429 MHz */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8006076:	4b24      	ldr	r3, [pc, #144]	; (8006108 <BSP_LCD_InitEx+0x288>)
 8006078:	2208      	movs	r2, #8
 800607a:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 800607c:	4b22      	ldr	r3, [pc, #136]	; (8006108 <BSP_LCD_InitEx+0x288>)
 800607e:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8006082:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 7;
 8006084:	4b20      	ldr	r3, [pc, #128]	; (8006108 <BSP_LCD_InitEx+0x288>)
 8006086:	2207      	movs	r2, #7
 8006088:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 800608a:	4b1f      	ldr	r3, [pc, #124]	; (8006108 <BSP_LCD_InitEx+0x288>)
 800608c:	2200      	movs	r2, #0
 800608e:	629a      	str	r2, [r3, #40]	; 0x28
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 8006090:	481d      	ldr	r0, [pc, #116]	; (8006108 <BSP_LCD_InitEx+0x288>)
 8006092:	f7fd fd9b 	bl	8003bcc <HAL_RCCEx_PeriphCLKConfig>
  
  /* Background value */
  hltdc_eval.Init.Backcolor.Blue = 0;
 8006096:	4b1b      	ldr	r3, [pc, #108]	; (8006104 <BSP_LCD_InitEx+0x284>)
 8006098:	2200      	movs	r2, #0
 800609a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc_eval.Init.Backcolor.Green = 0;
 800609e:	4b19      	ldr	r3, [pc, #100]	; (8006104 <BSP_LCD_InitEx+0x284>)
 80060a0:	2200      	movs	r2, #0
 80060a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc_eval.Init.Backcolor.Red = 0;
 80060a6:	4b17      	ldr	r3, [pc, #92]	; (8006104 <BSP_LCD_InitEx+0x284>)
 80060a8:	2200      	movs	r2, #0
 80060aa:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  hltdc_eval.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80060ae:	4b15      	ldr	r3, [pc, #84]	; (8006104 <BSP_LCD_InitEx+0x284>)
 80060b0:	2200      	movs	r2, #0
 80060b2:	611a      	str	r2, [r3, #16]
  hltdc_eval.Instance = LTDC;
 80060b4:	4b13      	ldr	r3, [pc, #76]	; (8006104 <BSP_LCD_InitEx+0x284>)
 80060b6:	4a15      	ldr	r2, [pc, #84]	; (800610c <BSP_LCD_InitEx+0x28c>)
 80060b8:	601a      	str	r2, [r3, #0]
  
  /* Get LTDC Configuration from DSI Configuration */
  HAL_LTDCEx_StructInitFromVideoConfig(&(hltdc_eval), &(hdsivideo_handle));
 80060ba:	4911      	ldr	r1, [pc, #68]	; (8006100 <BSP_LCD_InitEx+0x280>)
 80060bc:	4811      	ldr	r0, [pc, #68]	; (8006104 <BSP_LCD_InitEx+0x284>)
 80060be:	f7fd faec 	bl	800369a <HAL_LTDCEx_StructInitFromVideoConfig>
  
  /* Initialize the LTDC */  
  HAL_LTDC_Init(&hltdc_eval);
 80060c2:	4810      	ldr	r0, [pc, #64]	; (8006104 <BSP_LCD_InitEx+0x284>)
 80060c4:	f7fd f844 	bl	8003150 <HAL_LTDC_Init>

  /* Enable the DSI host and wrapper after the LTDC initialization
     To avoid any synchronization issue, the DSI shall be started after enabling the LTDC */
  HAL_DSI_Start(&(hdsi_eval));
 80060c8:	4808      	ldr	r0, [pc, #32]	; (80060ec <BSP_LCD_InitEx+0x26c>)
 80060ca:	f7fb fc81 	bl	80019d0 <HAL_DSI_Start>
  
#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 80060ce:	f000 fdeb 	bl	8006ca8 <BSP_SDRAM_Init>
#endif /* DATA_IN_ExtSDRAM */
  
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80060d2:	480f      	ldr	r0, [pc, #60]	; (8006110 <BSP_LCD_InitEx+0x290>)
 80060d4:	f000 f90e 	bl	80062f4 <BSP_LCD_SetFont>
/***********************OTM8009A Initialization********************************/  
  
  /* Initialize the OTM8009A LCD Display IC Driver (KoD LCD IC Driver)
  *  depending on configuration set in 'hdsivideo_handle'.
  */
  OTM8009A_Init(OTM8009A_FORMAT_RGB888, orientation);
 80060d8:	79fb      	ldrb	r3, [r7, #7]
 80060da:	4619      	mov	r1, r3
 80060dc:	2000      	movs	r0, #0
 80060de:	f7ff fac1 	bl	8005664 <OTM8009A_Init>
  
/***********************End OTM8009A Initialization****************************/ 
  
  return LCD_OK;
 80060e2:	2300      	movs	r3, #0
}
 80060e4:	4618      	mov	r0, r3
 80060e6:	3758      	adds	r7, #88	; 0x58
 80060e8:	46bd      	mov	sp, r7
 80060ea:	bd80      	pop	{r7, pc}
 80060ec:	20000434 	.word	0x20000434
 80060f0:	40016c00 	.word	0x40016c00
 80060f4:	43215e57 	.word	0x43215e57
 80060f8:	2000007c 	.word	0x2000007c
 80060fc:	20000080 	.word	0x20000080
 8006100:	20000158 	.word	0x20000158
 8006104:	2000038c 	.word	0x2000038c
 8006108:	200001e0 	.word	0x200001e0
 800610c:	40016800 	.word	0x40016800
 8006110:	20000054 	.word	0x20000054

08006114 <BSP_LCD_Reset>:
  *         Hw reset the LCD DSI activating its XRES signal (active low for some time)
  *         and desactivating it later.
  *         This signal is only cabled on Discovery Rev B and beyond.
  */
void BSP_LCD_Reset(void)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b086      	sub	sp, #24
 8006118:	af00      	add	r7, sp, #0
#if !defined(USE_STM32469I_DISCO_REVA)
/* EVAL Rev B and beyond : reset the LCD by activation of XRES (active low) connected to PH7 */
  GPIO_InitTypeDef  gpio_init_structure;

  __HAL_RCC_GPIOH_CLK_ENABLE();
 800611a:	2300      	movs	r3, #0
 800611c:	603b      	str	r3, [r7, #0]
 800611e:	4b16      	ldr	r3, [pc, #88]	; (8006178 <BSP_LCD_Reset+0x64>)
 8006120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006122:	4a15      	ldr	r2, [pc, #84]	; (8006178 <BSP_LCD_Reset+0x64>)
 8006124:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006128:	6313      	str	r3, [r2, #48]	; 0x30
 800612a:	4b13      	ldr	r3, [pc, #76]	; (8006178 <BSP_LCD_Reset+0x64>)
 800612c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800612e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006132:	603b      	str	r3, [r7, #0]
 8006134:	683b      	ldr	r3, [r7, #0]

    /* Configure the GPIO on PH7 */
    gpio_init_structure.Pin   = GPIO_PIN_7;
 8006136:	2380      	movs	r3, #128	; 0x80
 8006138:	607b      	str	r3, [r7, #4]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_OD;
 800613a:	2311      	movs	r3, #17
 800613c:	60bb      	str	r3, [r7, #8]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 800613e:	2300      	movs	r3, #0
 8006140:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8006142:	2303      	movs	r3, #3
 8006144:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 8006146:	1d3b      	adds	r3, r7, #4
 8006148:	4619      	mov	r1, r3
 800614a:	480c      	ldr	r0, [pc, #48]	; (800617c <BSP_LCD_Reset+0x68>)
 800614c:	f7fb fd36 	bl	8001bbc <HAL_GPIO_Init>

    /* Activate XRES active low */
    HAL_GPIO_WritePin(GPIOH, GPIO_PIN_7, GPIO_PIN_RESET);
 8006150:	2200      	movs	r2, #0
 8006152:	2180      	movs	r1, #128	; 0x80
 8006154:	4809      	ldr	r0, [pc, #36]	; (800617c <BSP_LCD_Reset+0x68>)
 8006156:	f7fb ffe9 	bl	800212c <HAL_GPIO_WritePin>

    HAL_Delay(20); /* wait 20 ms */
 800615a:	2014      	movs	r0, #20
 800615c:	f7fa fa38 	bl	80005d0 <HAL_Delay>

    /* Desactivate XRES */
    HAL_GPIO_WritePin(GPIOH, GPIO_PIN_7, GPIO_PIN_SET);
 8006160:	2201      	movs	r2, #1
 8006162:	2180      	movs	r1, #128	; 0x80
 8006164:	4805      	ldr	r0, [pc, #20]	; (800617c <BSP_LCD_Reset+0x68>)
 8006166:	f7fb ffe1 	bl	800212c <HAL_GPIO_WritePin>
    
    /* Wait for 10ms after releasing XRES before sending commands */
    HAL_Delay(10);    
 800616a:	200a      	movs	r0, #10
 800616c:	f7fa fa30 	bl	80005d0 <HAL_Delay>
#else
  
#endif /* USE_STM32469I_DISCO_REVA == 0 */
}
 8006170:	bf00      	nop
 8006172:	3718      	adds	r7, #24
 8006174:	46bd      	mov	sp, r7
 8006176:	bd80      	pop	{r7, pc}
 8006178:	40023800 	.word	0x40023800
 800617c:	40021c00 	.word	0x40021c00

08006180 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8006180:	b480      	push	{r7}
 8006182:	af00      	add	r7, sp, #0
  return (lcd_x_size);
 8006184:	4b03      	ldr	r3, [pc, #12]	; (8006194 <BSP_LCD_GetXSize+0x14>)
 8006186:	681b      	ldr	r3, [r3, #0]
}
 8006188:	4618      	mov	r0, r3
 800618a:	46bd      	mov	sp, r7
 800618c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006190:	4770      	bx	lr
 8006192:	bf00      	nop
 8006194:	2000007c 	.word	0x2000007c

08006198 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8006198:	b480      	push	{r7}
 800619a:	af00      	add	r7, sp, #0
  return (lcd_y_size);
 800619c:	4b03      	ldr	r3, [pc, #12]	; (80061ac <BSP_LCD_GetYSize+0x14>)
 800619e:	681b      	ldr	r3, [r3, #0]
}
 80061a0:	4618      	mov	r0, r3
 80061a2:	46bd      	mov	sp, r7
 80061a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a8:	4770      	bx	lr
 80061aa:	bf00      	nop
 80061ac:	20000080 	.word	0x20000080

080061b0 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b090      	sub	sp, #64	; 0x40
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	4603      	mov	r3, r0
 80061b8:	6039      	str	r1, [r7, #0]
 80061ba:	80fb      	strh	r3, [r7, #6]
    LCD_LayerCfgTypeDef  Layercfg;

  /* Layer Init */
  Layercfg.WindowX0 = 0;
 80061bc:	2300      	movs	r3, #0
 80061be:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 80061c0:	f7ff ffde 	bl	8006180 <BSP_LCD_GetXSize>
 80061c4:	4603      	mov	r3, r0
 80061c6:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 80061c8:	2300      	movs	r3, #0
 80061ca:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 80061cc:	f7ff ffe4 	bl	8006198 <BSP_LCD_GetYSize>
 80061d0:	4603      	mov	r3, r0
 80061d2:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80061d4:	2300      	movs	r3, #0
 80061d6:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 80061dc:	23ff      	movs	r3, #255	; 0xff
 80061de:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 80061e0:	2300      	movs	r3, #0
 80061e2:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 80061e4:	2300      	movs	r3, #0
 80061e6:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 80061ea:	2300      	movs	r3, #0
 80061ec:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 80061f0:	2300      	movs	r3, #0
 80061f2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80061f6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80061fa:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80061fc:	2307      	movs	r3, #7
 80061fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8006200:	f7ff ffbe 	bl	8006180 <BSP_LCD_GetXSize>
 8006204:	4603      	mov	r3, r0
 8006206:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8006208:	f7ff ffc6 	bl	8006198 <BSP_LCD_GetYSize>
 800620c:	4603      	mov	r3, r0
 800620e:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hltdc_eval, &Layercfg, LayerIndex); 
 8006210:	88fa      	ldrh	r2, [r7, #6]
 8006212:	f107 030c 	add.w	r3, r7, #12
 8006216:	4619      	mov	r1, r3
 8006218:	4812      	ldr	r0, [pc, #72]	; (8006264 <BSP_LCD_LayerDefaultInit+0xb4>)
 800621a:	f7fd f869 	bl	80032f0 <HAL_LTDC_ConfigLayer>
  
  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 800621e:	88fa      	ldrh	r2, [r7, #6]
 8006220:	4911      	ldr	r1, [pc, #68]	; (8006268 <BSP_LCD_LayerDefaultInit+0xb8>)
 8006222:	4613      	mov	r3, r2
 8006224:	005b      	lsls	r3, r3, #1
 8006226:	4413      	add	r3, r2
 8006228:	009b      	lsls	r3, r3, #2
 800622a:	440b      	add	r3, r1
 800622c:	3304      	adds	r3, #4
 800622e:	f04f 32ff 	mov.w	r2, #4294967295
 8006232:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8006234:	88fa      	ldrh	r2, [r7, #6]
 8006236:	490c      	ldr	r1, [pc, #48]	; (8006268 <BSP_LCD_LayerDefaultInit+0xb8>)
 8006238:	4613      	mov	r3, r2
 800623a:	005b      	lsls	r3, r3, #1
 800623c:	4413      	add	r3, r2
 800623e:	009b      	lsls	r3, r3, #2
 8006240:	440b      	add	r3, r1
 8006242:	3308      	adds	r3, #8
 8006244:	4a09      	ldr	r2, [pc, #36]	; (800626c <BSP_LCD_LayerDefaultInit+0xbc>)
 8006246:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK;
 8006248:	88fa      	ldrh	r2, [r7, #6]
 800624a:	4907      	ldr	r1, [pc, #28]	; (8006268 <BSP_LCD_LayerDefaultInit+0xb8>)
 800624c:	4613      	mov	r3, r2
 800624e:	005b      	lsls	r3, r3, #1
 8006250:	4413      	add	r3, r2
 8006252:	009b      	lsls	r3, r3, #2
 8006254:	440b      	add	r3, r1
 8006256:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 800625a:	601a      	str	r2, [r3, #0]
}
 800625c:	bf00      	nop
 800625e:	3740      	adds	r7, #64	; 0x40
 8006260:	46bd      	mov	sp, r7
 8006262:	bd80      	pop	{r7, pc}
 8006264:	2000038c 	.word	0x2000038c
 8006268:	200001c8 	.word	0x200001c8
 800626c:	20000054 	.word	0x20000054

08006270 <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8006270:	b480      	push	{r7}
 8006272:	b083      	sub	sp, #12
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8006278:	4a04      	ldr	r2, [pc, #16]	; (800628c <BSP_LCD_SelectLayer+0x1c>)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6013      	str	r3, [r2, #0]
}
 800627e:	bf00      	nop
 8006280:	370c      	adds	r7, #12
 8006282:	46bd      	mov	sp, r7
 8006284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006288:	4770      	bx	lr
 800628a:	bf00      	nop
 800628c:	200001c4 	.word	0x200001c4

08006290 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8006290:	b480      	push	{r7}
 8006292:	b083      	sub	sp, #12
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8006298:	4b07      	ldr	r3, [pc, #28]	; (80062b8 <BSP_LCD_SetTextColor+0x28>)
 800629a:	681a      	ldr	r2, [r3, #0]
 800629c:	4907      	ldr	r1, [pc, #28]	; (80062bc <BSP_LCD_SetTextColor+0x2c>)
 800629e:	4613      	mov	r3, r2
 80062a0:	005b      	lsls	r3, r3, #1
 80062a2:	4413      	add	r3, r2
 80062a4:	009b      	lsls	r3, r3, #2
 80062a6:	440b      	add	r3, r1
 80062a8:	687a      	ldr	r2, [r7, #4]
 80062aa:	601a      	str	r2, [r3, #0]
}
 80062ac:	bf00      	nop
 80062ae:	370c      	adds	r7, #12
 80062b0:	46bd      	mov	sp, r7
 80062b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b6:	4770      	bx	lr
 80062b8:	200001c4 	.word	0x200001c4
 80062bc:	200001c8 	.word	0x200001c8

080062c0 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 80062c0:	b480      	push	{r7}
 80062c2:	b083      	sub	sp, #12
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 80062c8:	4b08      	ldr	r3, [pc, #32]	; (80062ec <BSP_LCD_SetBackColor+0x2c>)
 80062ca:	681a      	ldr	r2, [r3, #0]
 80062cc:	4908      	ldr	r1, [pc, #32]	; (80062f0 <BSP_LCD_SetBackColor+0x30>)
 80062ce:	4613      	mov	r3, r2
 80062d0:	005b      	lsls	r3, r3, #1
 80062d2:	4413      	add	r3, r2
 80062d4:	009b      	lsls	r3, r3, #2
 80062d6:	440b      	add	r3, r1
 80062d8:	3304      	adds	r3, #4
 80062da:	687a      	ldr	r2, [r7, #4]
 80062dc:	601a      	str	r2, [r3, #0]
}
 80062de:	bf00      	nop
 80062e0:	370c      	adds	r7, #12
 80062e2:	46bd      	mov	sp, r7
 80062e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e8:	4770      	bx	lr
 80062ea:	bf00      	nop
 80062ec:	200001c4 	.word	0x200001c4
 80062f0:	200001c8 	.word	0x200001c8

080062f4 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 80062f4:	b480      	push	{r7}
 80062f6:	b083      	sub	sp, #12
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 80062fc:	4b08      	ldr	r3, [pc, #32]	; (8006320 <BSP_LCD_SetFont+0x2c>)
 80062fe:	681a      	ldr	r2, [r3, #0]
 8006300:	4908      	ldr	r1, [pc, #32]	; (8006324 <BSP_LCD_SetFont+0x30>)
 8006302:	4613      	mov	r3, r2
 8006304:	005b      	lsls	r3, r3, #1
 8006306:	4413      	add	r3, r2
 8006308:	009b      	lsls	r3, r3, #2
 800630a:	440b      	add	r3, r1
 800630c:	3308      	adds	r3, #8
 800630e:	687a      	ldr	r2, [r7, #4]
 8006310:	601a      	str	r2, [r3, #0]
}
 8006312:	bf00      	nop
 8006314:	370c      	adds	r7, #12
 8006316:	46bd      	mov	sp, r7
 8006318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631c:	4770      	bx	lr
 800631e:	bf00      	nop
 8006320:	200001c4 	.word	0x200001c4
 8006324:	200001c8 	.word	0x200001c8

08006328 <BSP_LCD_Clear>:
/**
  * @brief  Clears the whole currently active layer of LTDC.
  * @param  Color: Color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{
 8006328:	b5f0      	push	{r4, r5, r6, r7, lr}
 800632a:	b085      	sub	sp, #20
 800632c:	af02      	add	r7, sp, #8
 800632e:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hltdc_eval.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8006330:	4b0f      	ldr	r3, [pc, #60]	; (8006370 <BSP_LCD_Clear+0x48>)
 8006332:	681c      	ldr	r4, [r3, #0]
 8006334:	4b0e      	ldr	r3, [pc, #56]	; (8006370 <BSP_LCD_Clear+0x48>)
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	4a0e      	ldr	r2, [pc, #56]	; (8006374 <BSP_LCD_Clear+0x4c>)
 800633a:	2134      	movs	r1, #52	; 0x34
 800633c:	fb01 f303 	mul.w	r3, r1, r3
 8006340:	4413      	add	r3, r2
 8006342:	335c      	adds	r3, #92	; 0x5c
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	461e      	mov	r6, r3
 8006348:	f7ff ff1a 	bl	8006180 <BSP_LCD_GetXSize>
 800634c:	4605      	mov	r5, r0
 800634e:	f7ff ff23 	bl	8006198 <BSP_LCD_GetYSize>
 8006352:	4602      	mov	r2, r0
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	9301      	str	r3, [sp, #4]
 8006358:	2300      	movs	r3, #0
 800635a:	9300      	str	r3, [sp, #0]
 800635c:	4613      	mov	r3, r2
 800635e:	462a      	mov	r2, r5
 8006360:	4631      	mov	r1, r6
 8006362:	4620      	mov	r0, r4
 8006364:	f000 fc68 	bl	8006c38 <LL_FillBuffer>
}
 8006368:	bf00      	nop
 800636a:	370c      	adds	r7, #12
 800636c:	46bd      	mov	sp, r7
 800636e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006370:	200001c4 	.word	0x200001c4
 8006374:	2000038c 	.word	0x2000038c

08006378 <BSP_LCD_DisplayChar>:
  * @param  Ypos: Line where to display the character shape.
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8006378:	b590      	push	{r4, r7, lr}
 800637a:	b083      	sub	sp, #12
 800637c:	af00      	add	r7, sp, #0
 800637e:	4603      	mov	r3, r0
 8006380:	80fb      	strh	r3, [r7, #6]
 8006382:	460b      	mov	r3, r1
 8006384:	80bb      	strh	r3, [r7, #4]
 8006386:	4613      	mov	r3, r2
 8006388:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800638a:	4b1b      	ldr	r3, [pc, #108]	; (80063f8 <BSP_LCD_DisplayChar+0x80>)
 800638c:	681a      	ldr	r2, [r3, #0]
 800638e:	491b      	ldr	r1, [pc, #108]	; (80063fc <BSP_LCD_DisplayChar+0x84>)
 8006390:	4613      	mov	r3, r2
 8006392:	005b      	lsls	r3, r3, #1
 8006394:	4413      	add	r3, r2
 8006396:	009b      	lsls	r3, r3, #2
 8006398:	440b      	add	r3, r1
 800639a:	3308      	adds	r3, #8
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	6819      	ldr	r1, [r3, #0]
 80063a0:	78fb      	ldrb	r3, [r7, #3]
 80063a2:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80063a6:	4b14      	ldr	r3, [pc, #80]	; (80063f8 <BSP_LCD_DisplayChar+0x80>)
 80063a8:	681a      	ldr	r2, [r3, #0]
 80063aa:	4c14      	ldr	r4, [pc, #80]	; (80063fc <BSP_LCD_DisplayChar+0x84>)
 80063ac:	4613      	mov	r3, r2
 80063ae:	005b      	lsls	r3, r3, #1
 80063b0:	4413      	add	r3, r2
 80063b2:	009b      	lsls	r3, r3, #2
 80063b4:	4423      	add	r3, r4
 80063b6:	3308      	adds	r3, #8
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80063bc:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80063c0:	4b0d      	ldr	r3, [pc, #52]	; (80063f8 <BSP_LCD_DisplayChar+0x80>)
 80063c2:	681a      	ldr	r2, [r3, #0]
 80063c4:	4c0d      	ldr	r4, [pc, #52]	; (80063fc <BSP_LCD_DisplayChar+0x84>)
 80063c6:	4613      	mov	r3, r2
 80063c8:	005b      	lsls	r3, r3, #1
 80063ca:	4413      	add	r3, r2
 80063cc:	009b      	lsls	r3, r3, #2
 80063ce:	4423      	add	r3, r4
 80063d0:	3308      	adds	r3, #8
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	889b      	ldrh	r3, [r3, #4]
 80063d6:	3307      	adds	r3, #7
 80063d8:	2b00      	cmp	r3, #0
 80063da:	da00      	bge.n	80063de <BSP_LCD_DisplayChar+0x66>
 80063dc:	3307      	adds	r3, #7
 80063de:	10db      	asrs	r3, r3, #3
 80063e0:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80063e4:	18ca      	adds	r2, r1, r3
 80063e6:	88b9      	ldrh	r1, [r7, #4]
 80063e8:	88fb      	ldrh	r3, [r7, #6]
 80063ea:	4618      	mov	r0, r3
 80063ec:	f000 fb6c 	bl	8006ac8 <DrawChar>
}
 80063f0:	bf00      	nop
 80063f2:	370c      	adds	r7, #12
 80063f4:	46bd      	mov	sp, r7
 80063f6:	bd90      	pop	{r4, r7, pc}
 80063f8:	200001c4 	.word	0x200001c4
 80063fc:	200001c8 	.word	0x200001c8

08006400 <BSP_LCD_DisplayStringAt>:
  *            @arg  CENTER_MODE
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8006400:	b5b0      	push	{r4, r5, r7, lr}
 8006402:	b088      	sub	sp, #32
 8006404:	af00      	add	r7, sp, #0
 8006406:	60ba      	str	r2, [r7, #8]
 8006408:	461a      	mov	r2, r3
 800640a:	4603      	mov	r3, r0
 800640c:	81fb      	strh	r3, [r7, #14]
 800640e:	460b      	mov	r3, r1
 8006410:	81bb      	strh	r3, [r7, #12]
 8006412:	4613      	mov	r3, r2
 8006414:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 8006416:	2301      	movs	r3, #1
 8006418:	83fb      	strh	r3, [r7, #30]
 800641a:	2300      	movs	r3, #0
 800641c:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0;
 800641e:	2300      	movs	r3, #0
 8006420:	61bb      	str	r3, [r7, #24]
 8006422:	2300      	movs	r3, #0
 8006424:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	617b      	str	r3, [r7, #20]

  /* Get the text size */
  while (*ptr++) size ++ ;
 800642a:	e002      	b.n	8006432 <BSP_LCD_DisplayStringAt+0x32>
 800642c:	69bb      	ldr	r3, [r7, #24]
 800642e:	3301      	adds	r3, #1
 8006430:	61bb      	str	r3, [r7, #24]
 8006432:	697b      	ldr	r3, [r7, #20]
 8006434:	1c5a      	adds	r2, r3, #1
 8006436:	617a      	str	r2, [r7, #20]
 8006438:	781b      	ldrb	r3, [r3, #0]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d1f6      	bne.n	800642c <BSP_LCD_DisplayStringAt+0x2c>

  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 800643e:	f7ff fe9f 	bl	8006180 <BSP_LCD_GetXSize>
 8006442:	4601      	mov	r1, r0
 8006444:	4b50      	ldr	r3, [pc, #320]	; (8006588 <BSP_LCD_DisplayStringAt+0x188>)
 8006446:	681a      	ldr	r2, [r3, #0]
 8006448:	4850      	ldr	r0, [pc, #320]	; (800658c <BSP_LCD_DisplayStringAt+0x18c>)
 800644a:	4613      	mov	r3, r2
 800644c:	005b      	lsls	r3, r3, #1
 800644e:	4413      	add	r3, r2
 8006450:	009b      	lsls	r3, r3, #2
 8006452:	4403      	add	r3, r0
 8006454:	3308      	adds	r3, #8
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	889b      	ldrh	r3, [r3, #4]
 800645a:	fbb1 f3f3 	udiv	r3, r1, r3
 800645e:	613b      	str	r3, [r7, #16]

  switch (Mode)
 8006460:	79fb      	ldrb	r3, [r7, #7]
 8006462:	2b03      	cmp	r3, #3
 8006464:	d01c      	beq.n	80064a0 <BSP_LCD_DisplayStringAt+0xa0>
 8006466:	2b03      	cmp	r3, #3
 8006468:	dc33      	bgt.n	80064d2 <BSP_LCD_DisplayStringAt+0xd2>
 800646a:	2b01      	cmp	r3, #1
 800646c:	d002      	beq.n	8006474 <BSP_LCD_DisplayStringAt+0x74>
 800646e:	2b02      	cmp	r3, #2
 8006470:	d019      	beq.n	80064a6 <BSP_LCD_DisplayStringAt+0xa6>
 8006472:	e02e      	b.n	80064d2 <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8006474:	693a      	ldr	r2, [r7, #16]
 8006476:	69bb      	ldr	r3, [r7, #24]
 8006478:	1ad1      	subs	r1, r2, r3
 800647a:	4b43      	ldr	r3, [pc, #268]	; (8006588 <BSP_LCD_DisplayStringAt+0x188>)
 800647c:	681a      	ldr	r2, [r3, #0]
 800647e:	4843      	ldr	r0, [pc, #268]	; (800658c <BSP_LCD_DisplayStringAt+0x18c>)
 8006480:	4613      	mov	r3, r2
 8006482:	005b      	lsls	r3, r3, #1
 8006484:	4413      	add	r3, r2
 8006486:	009b      	lsls	r3, r3, #2
 8006488:	4403      	add	r3, r0
 800648a:	3308      	adds	r3, #8
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	889b      	ldrh	r3, [r3, #4]
 8006490:	fb03 f301 	mul.w	r3, r3, r1
 8006494:	085b      	lsrs	r3, r3, #1
 8006496:	b29a      	uxth	r2, r3
 8006498:	89fb      	ldrh	r3, [r7, #14]
 800649a:	4413      	add	r3, r2
 800649c:	83fb      	strh	r3, [r7, #30]
      break;
 800649e:	e01b      	b.n	80064d8 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
 80064a0:	89fb      	ldrh	r3, [r7, #14]
 80064a2:	83fb      	strh	r3, [r7, #30]
      break;
 80064a4:	e018      	b.n	80064d8 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      refcolumn = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 80064a6:	693a      	ldr	r2, [r7, #16]
 80064a8:	69bb      	ldr	r3, [r7, #24]
 80064aa:	1ad3      	subs	r3, r2, r3
 80064ac:	b299      	uxth	r1, r3
 80064ae:	4b36      	ldr	r3, [pc, #216]	; (8006588 <BSP_LCD_DisplayStringAt+0x188>)
 80064b0:	681a      	ldr	r2, [r3, #0]
 80064b2:	4836      	ldr	r0, [pc, #216]	; (800658c <BSP_LCD_DisplayStringAt+0x18c>)
 80064b4:	4613      	mov	r3, r2
 80064b6:	005b      	lsls	r3, r3, #1
 80064b8:	4413      	add	r3, r2
 80064ba:	009b      	lsls	r3, r3, #2
 80064bc:	4403      	add	r3, r0
 80064be:	3308      	adds	r3, #8
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	889b      	ldrh	r3, [r3, #4]
 80064c4:	fb11 f303 	smulbb	r3, r1, r3
 80064c8:	b29a      	uxth	r2, r3
 80064ca:	89fb      	ldrh	r3, [r7, #14]
 80064cc:	1ad3      	subs	r3, r2, r3
 80064ce:	83fb      	strh	r3, [r7, #30]
      break;
 80064d0:	e002      	b.n	80064d8 <BSP_LCD_DisplayStringAt+0xd8>
    }
  default:
    {
      refcolumn = Xpos;
 80064d2:	89fb      	ldrh	r3, [r7, #14]
 80064d4:	83fb      	strh	r3, [r7, #30]
      break;
 80064d6:	bf00      	nop
    }
  }

  /* Check that the Start column is located in the screen */
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
 80064d8:	8bfb      	ldrh	r3, [r7, #30]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d003      	beq.n	80064e6 <BSP_LCD_DisplayStringAt+0xe6>
 80064de:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	da1d      	bge.n	8006522 <BSP_LCD_DisplayStringAt+0x122>
  {
    refcolumn = 1;
 80064e6:	2301      	movs	r3, #1
 80064e8:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80064ea:	e01a      	b.n	8006522 <BSP_LCD_DisplayStringAt+0x122>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Ypos, *Text);
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	781a      	ldrb	r2, [r3, #0]
 80064f0:	89b9      	ldrh	r1, [r7, #12]
 80064f2:	8bfb      	ldrh	r3, [r7, #30]
 80064f4:	4618      	mov	r0, r3
 80064f6:	f7ff ff3f 	bl	8006378 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 80064fa:	4b23      	ldr	r3, [pc, #140]	; (8006588 <BSP_LCD_DisplayStringAt+0x188>)
 80064fc:	681a      	ldr	r2, [r3, #0]
 80064fe:	4923      	ldr	r1, [pc, #140]	; (800658c <BSP_LCD_DisplayStringAt+0x18c>)
 8006500:	4613      	mov	r3, r2
 8006502:	005b      	lsls	r3, r3, #1
 8006504:	4413      	add	r3, r2
 8006506:	009b      	lsls	r3, r3, #2
 8006508:	440b      	add	r3, r1
 800650a:	3308      	adds	r3, #8
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	889a      	ldrh	r2, [r3, #4]
 8006510:	8bfb      	ldrh	r3, [r7, #30]
 8006512:	4413      	add	r3, r2
 8006514:	83fb      	strh	r3, [r7, #30]

    /* Point on the next character */
    Text++;
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	3301      	adds	r3, #1
 800651a:	60bb      	str	r3, [r7, #8]
    i++;
 800651c:	8bbb      	ldrh	r3, [r7, #28]
 800651e:	3301      	adds	r3, #1
 8006520:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	781b      	ldrb	r3, [r3, #0]
 8006526:	2b00      	cmp	r3, #0
 8006528:	bf14      	ite	ne
 800652a:	2301      	movne	r3, #1
 800652c:	2300      	moveq	r3, #0
 800652e:	b2dc      	uxtb	r4, r3
 8006530:	f7ff fe26 	bl	8006180 <BSP_LCD_GetXSize>
 8006534:	8bb9      	ldrh	r1, [r7, #28]
 8006536:	4b14      	ldr	r3, [pc, #80]	; (8006588 <BSP_LCD_DisplayStringAt+0x188>)
 8006538:	681a      	ldr	r2, [r3, #0]
 800653a:	4d14      	ldr	r5, [pc, #80]	; (800658c <BSP_LCD_DisplayStringAt+0x18c>)
 800653c:	4613      	mov	r3, r2
 800653e:	005b      	lsls	r3, r3, #1
 8006540:	4413      	add	r3, r2
 8006542:	009b      	lsls	r3, r3, #2
 8006544:	442b      	add	r3, r5
 8006546:	3308      	adds	r3, #8
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	889b      	ldrh	r3, [r3, #4]
 800654c:	fb03 f301 	mul.w	r3, r3, r1
 8006550:	1ac3      	subs	r3, r0, r3
 8006552:	b299      	uxth	r1, r3
 8006554:	4b0c      	ldr	r3, [pc, #48]	; (8006588 <BSP_LCD_DisplayStringAt+0x188>)
 8006556:	681a      	ldr	r2, [r3, #0]
 8006558:	480c      	ldr	r0, [pc, #48]	; (800658c <BSP_LCD_DisplayStringAt+0x18c>)
 800655a:	4613      	mov	r3, r2
 800655c:	005b      	lsls	r3, r3, #1
 800655e:	4413      	add	r3, r2
 8006560:	009b      	lsls	r3, r3, #2
 8006562:	4403      	add	r3, r0
 8006564:	3308      	adds	r3, #8
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	889b      	ldrh	r3, [r3, #4]
 800656a:	4299      	cmp	r1, r3
 800656c:	bf2c      	ite	cs
 800656e:	2301      	movcs	r3, #1
 8006570:	2300      	movcc	r3, #0
 8006572:	b2db      	uxtb	r3, r3
 8006574:	4023      	ands	r3, r4
 8006576:	b2db      	uxtb	r3, r3
 8006578:	2b00      	cmp	r3, #0
 800657a:	d1b7      	bne.n	80064ec <BSP_LCD_DisplayStringAt+0xec>
  }

}
 800657c:	bf00      	nop
 800657e:	bf00      	nop
 8006580:	3720      	adds	r7, #32
 8006582:	46bd      	mov	sp, r7
 8006584:	bdb0      	pop	{r4, r5, r7, pc}
 8006586:	bf00      	nop
 8006588:	200001c4 	.word	0x200001c4
 800658c:	200001c8 	.word	0x200001c8

08006590 <BSP_LCD_DrawHLine>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  Length: Line length
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8006590:	b5b0      	push	{r4, r5, r7, lr}
 8006592:	b086      	sub	sp, #24
 8006594:	af02      	add	r7, sp, #8
 8006596:	4603      	mov	r3, r0
 8006598:	80fb      	strh	r3, [r7, #6]
 800659a:	460b      	mov	r3, r1
 800659c:	80bb      	strh	r3, [r7, #4]
 800659e:	4613      	mov	r3, r2
 80065a0:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 80065a2:	2300      	movs	r3, #0
 80065a4:	60fb      	str	r3, [r7, #12]

  /* Get the line address */
  Xaddress = (hltdc_eval.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80065a6:	4b16      	ldr	r3, [pc, #88]	; (8006600 <BSP_LCD_DrawHLine+0x70>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4a16      	ldr	r2, [pc, #88]	; (8006604 <BSP_LCD_DrawHLine+0x74>)
 80065ac:	2134      	movs	r1, #52	; 0x34
 80065ae:	fb01 f303 	mul.w	r3, r1, r3
 80065b2:	4413      	add	r3, r2
 80065b4:	335c      	adds	r3, #92	; 0x5c
 80065b6:	681c      	ldr	r4, [r3, #0]
 80065b8:	f7ff fde2 	bl	8006180 <BSP_LCD_GetXSize>
 80065bc:	4602      	mov	r2, r0
 80065be:	88bb      	ldrh	r3, [r7, #4]
 80065c0:	fb03 f202 	mul.w	r2, r3, r2
 80065c4:	88fb      	ldrh	r3, [r7, #6]
 80065c6:	4413      	add	r3, r2
 80065c8:	009b      	lsls	r3, r3, #2
 80065ca:	4423      	add	r3, r4
 80065cc:	60fb      	str	r3, [r7, #12]

  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 80065ce:	4b0c      	ldr	r3, [pc, #48]	; (8006600 <BSP_LCD_DrawHLine+0x70>)
 80065d0:	6818      	ldr	r0, [r3, #0]
 80065d2:	68f9      	ldr	r1, [r7, #12]
 80065d4:	887c      	ldrh	r4, [r7, #2]
 80065d6:	4b0a      	ldr	r3, [pc, #40]	; (8006600 <BSP_LCD_DrawHLine+0x70>)
 80065d8:	681a      	ldr	r2, [r3, #0]
 80065da:	4d0b      	ldr	r5, [pc, #44]	; (8006608 <BSP_LCD_DrawHLine+0x78>)
 80065dc:	4613      	mov	r3, r2
 80065de:	005b      	lsls	r3, r3, #1
 80065e0:	4413      	add	r3, r2
 80065e2:	009b      	lsls	r3, r3, #2
 80065e4:	442b      	add	r3, r5
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	9301      	str	r3, [sp, #4]
 80065ea:	2300      	movs	r3, #0
 80065ec:	9300      	str	r3, [sp, #0]
 80065ee:	2301      	movs	r3, #1
 80065f0:	4622      	mov	r2, r4
 80065f2:	f000 fb21 	bl	8006c38 <LL_FillBuffer>
}
 80065f6:	bf00      	nop
 80065f8:	3710      	adds	r7, #16
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bdb0      	pop	{r4, r5, r7, pc}
 80065fe:	bf00      	nop
 8006600:	200001c4 	.word	0x200001c4
 8006604:	2000038c 	.word	0x2000038c
 8006608:	200001c8 	.word	0x200001c8

0800660c <BSP_LCD_DrawCircle>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 800660c:	b590      	push	{r4, r7, lr}
 800660e:	b087      	sub	sp, #28
 8006610:	af00      	add	r7, sp, #0
 8006612:	4603      	mov	r3, r0
 8006614:	80fb      	strh	r3, [r7, #6]
 8006616:	460b      	mov	r3, r1
 8006618:	80bb      	strh	r3, [r7, #4]
 800661a:	4613      	mov	r3, r2
 800661c:	807b      	strh	r3, [r7, #2]
  int32_t   D;    /* Decision Variable */
  uint32_t  CurX; /* Current X Value */
  uint32_t  CurY; /* Current Y Value */

  D = 3 - (Radius << 1);
 800661e:	887b      	ldrh	r3, [r7, #2]
 8006620:	005b      	lsls	r3, r3, #1
 8006622:	f1c3 0303 	rsb	r3, r3, #3
 8006626:	617b      	str	r3, [r7, #20]
  CurX = 0;
 8006628:	2300      	movs	r3, #0
 800662a:	613b      	str	r3, [r7, #16]
  CurY = Radius;
 800662c:	887b      	ldrh	r3, [r7, #2]
 800662e:	60fb      	str	r3, [r7, #12]

  while (CurX <= CurY)
 8006630:	e0c7      	b.n	80067c2 <BSP_LCD_DrawCircle+0x1b6>
  {
    BSP_LCD_DrawPixel((Xpos + CurX), (Ypos - CurY), DrawProp[ActiveLayer].TextColor);
 8006632:	693b      	ldr	r3, [r7, #16]
 8006634:	b29a      	uxth	r2, r3
 8006636:	88fb      	ldrh	r3, [r7, #6]
 8006638:	4413      	add	r3, r2
 800663a:	b298      	uxth	r0, r3
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	b29b      	uxth	r3, r3
 8006640:	88ba      	ldrh	r2, [r7, #4]
 8006642:	1ad3      	subs	r3, r2, r3
 8006644:	b299      	uxth	r1, r3
 8006646:	4b64      	ldr	r3, [pc, #400]	; (80067d8 <BSP_LCD_DrawCircle+0x1cc>)
 8006648:	681a      	ldr	r2, [r3, #0]
 800664a:	4c64      	ldr	r4, [pc, #400]	; (80067dc <BSP_LCD_DrawCircle+0x1d0>)
 800664c:	4613      	mov	r3, r2
 800664e:	005b      	lsls	r3, r3, #1
 8006650:	4413      	add	r3, r2
 8006652:	009b      	lsls	r3, r3, #2
 8006654:	4423      	add	r3, r4
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	461a      	mov	r2, r3
 800665a:	f000 fa0f 	bl	8006a7c <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos - CurX), (Ypos - CurY), DrawProp[ActiveLayer].TextColor);
 800665e:	693b      	ldr	r3, [r7, #16]
 8006660:	b29b      	uxth	r3, r3
 8006662:	88fa      	ldrh	r2, [r7, #6]
 8006664:	1ad3      	subs	r3, r2, r3
 8006666:	b298      	uxth	r0, r3
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	b29b      	uxth	r3, r3
 800666c:	88ba      	ldrh	r2, [r7, #4]
 800666e:	1ad3      	subs	r3, r2, r3
 8006670:	b299      	uxth	r1, r3
 8006672:	4b59      	ldr	r3, [pc, #356]	; (80067d8 <BSP_LCD_DrawCircle+0x1cc>)
 8006674:	681a      	ldr	r2, [r3, #0]
 8006676:	4c59      	ldr	r4, [pc, #356]	; (80067dc <BSP_LCD_DrawCircle+0x1d0>)
 8006678:	4613      	mov	r3, r2
 800667a:	005b      	lsls	r3, r3, #1
 800667c:	4413      	add	r3, r2
 800667e:	009b      	lsls	r3, r3, #2
 8006680:	4423      	add	r3, r4
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	461a      	mov	r2, r3
 8006686:	f000 f9f9 	bl	8006a7c <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos + CurY), (Ypos - CurX), DrawProp[ActiveLayer].TextColor);
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	b29a      	uxth	r2, r3
 800668e:	88fb      	ldrh	r3, [r7, #6]
 8006690:	4413      	add	r3, r2
 8006692:	b298      	uxth	r0, r3
 8006694:	693b      	ldr	r3, [r7, #16]
 8006696:	b29b      	uxth	r3, r3
 8006698:	88ba      	ldrh	r2, [r7, #4]
 800669a:	1ad3      	subs	r3, r2, r3
 800669c:	b299      	uxth	r1, r3
 800669e:	4b4e      	ldr	r3, [pc, #312]	; (80067d8 <BSP_LCD_DrawCircle+0x1cc>)
 80066a0:	681a      	ldr	r2, [r3, #0]
 80066a2:	4c4e      	ldr	r4, [pc, #312]	; (80067dc <BSP_LCD_DrawCircle+0x1d0>)
 80066a4:	4613      	mov	r3, r2
 80066a6:	005b      	lsls	r3, r3, #1
 80066a8:	4413      	add	r3, r2
 80066aa:	009b      	lsls	r3, r3, #2
 80066ac:	4423      	add	r3, r4
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	461a      	mov	r2, r3
 80066b2:	f000 f9e3 	bl	8006a7c <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos - CurY), (Ypos - CurX), DrawProp[ActiveLayer].TextColor);
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	b29b      	uxth	r3, r3
 80066ba:	88fa      	ldrh	r2, [r7, #6]
 80066bc:	1ad3      	subs	r3, r2, r3
 80066be:	b298      	uxth	r0, r3
 80066c0:	693b      	ldr	r3, [r7, #16]
 80066c2:	b29b      	uxth	r3, r3
 80066c4:	88ba      	ldrh	r2, [r7, #4]
 80066c6:	1ad3      	subs	r3, r2, r3
 80066c8:	b299      	uxth	r1, r3
 80066ca:	4b43      	ldr	r3, [pc, #268]	; (80067d8 <BSP_LCD_DrawCircle+0x1cc>)
 80066cc:	681a      	ldr	r2, [r3, #0]
 80066ce:	4c43      	ldr	r4, [pc, #268]	; (80067dc <BSP_LCD_DrawCircle+0x1d0>)
 80066d0:	4613      	mov	r3, r2
 80066d2:	005b      	lsls	r3, r3, #1
 80066d4:	4413      	add	r3, r2
 80066d6:	009b      	lsls	r3, r3, #2
 80066d8:	4423      	add	r3, r4
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	461a      	mov	r2, r3
 80066de:	f000 f9cd 	bl	8006a7c <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos + CurX), (Ypos + CurY), DrawProp[ActiveLayer].TextColor);
 80066e2:	693b      	ldr	r3, [r7, #16]
 80066e4:	b29a      	uxth	r2, r3
 80066e6:	88fb      	ldrh	r3, [r7, #6]
 80066e8:	4413      	add	r3, r2
 80066ea:	b298      	uxth	r0, r3
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	b29a      	uxth	r2, r3
 80066f0:	88bb      	ldrh	r3, [r7, #4]
 80066f2:	4413      	add	r3, r2
 80066f4:	b299      	uxth	r1, r3
 80066f6:	4b38      	ldr	r3, [pc, #224]	; (80067d8 <BSP_LCD_DrawCircle+0x1cc>)
 80066f8:	681a      	ldr	r2, [r3, #0]
 80066fa:	4c38      	ldr	r4, [pc, #224]	; (80067dc <BSP_LCD_DrawCircle+0x1d0>)
 80066fc:	4613      	mov	r3, r2
 80066fe:	005b      	lsls	r3, r3, #1
 8006700:	4413      	add	r3, r2
 8006702:	009b      	lsls	r3, r3, #2
 8006704:	4423      	add	r3, r4
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	461a      	mov	r2, r3
 800670a:	f000 f9b7 	bl	8006a7c <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos - CurX), (Ypos + CurY), DrawProp[ActiveLayer].TextColor);
 800670e:	693b      	ldr	r3, [r7, #16]
 8006710:	b29b      	uxth	r3, r3
 8006712:	88fa      	ldrh	r2, [r7, #6]
 8006714:	1ad3      	subs	r3, r2, r3
 8006716:	b298      	uxth	r0, r3
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	b29a      	uxth	r2, r3
 800671c:	88bb      	ldrh	r3, [r7, #4]
 800671e:	4413      	add	r3, r2
 8006720:	b299      	uxth	r1, r3
 8006722:	4b2d      	ldr	r3, [pc, #180]	; (80067d8 <BSP_LCD_DrawCircle+0x1cc>)
 8006724:	681a      	ldr	r2, [r3, #0]
 8006726:	4c2d      	ldr	r4, [pc, #180]	; (80067dc <BSP_LCD_DrawCircle+0x1d0>)
 8006728:	4613      	mov	r3, r2
 800672a:	005b      	lsls	r3, r3, #1
 800672c:	4413      	add	r3, r2
 800672e:	009b      	lsls	r3, r3, #2
 8006730:	4423      	add	r3, r4
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	461a      	mov	r2, r3
 8006736:	f000 f9a1 	bl	8006a7c <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos + CurY), (Ypos + CurX), DrawProp[ActiveLayer].TextColor);
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	b29a      	uxth	r2, r3
 800673e:	88fb      	ldrh	r3, [r7, #6]
 8006740:	4413      	add	r3, r2
 8006742:	b298      	uxth	r0, r3
 8006744:	693b      	ldr	r3, [r7, #16]
 8006746:	b29a      	uxth	r2, r3
 8006748:	88bb      	ldrh	r3, [r7, #4]
 800674a:	4413      	add	r3, r2
 800674c:	b299      	uxth	r1, r3
 800674e:	4b22      	ldr	r3, [pc, #136]	; (80067d8 <BSP_LCD_DrawCircle+0x1cc>)
 8006750:	681a      	ldr	r2, [r3, #0]
 8006752:	4c22      	ldr	r4, [pc, #136]	; (80067dc <BSP_LCD_DrawCircle+0x1d0>)
 8006754:	4613      	mov	r3, r2
 8006756:	005b      	lsls	r3, r3, #1
 8006758:	4413      	add	r3, r2
 800675a:	009b      	lsls	r3, r3, #2
 800675c:	4423      	add	r3, r4
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	461a      	mov	r2, r3
 8006762:	f000 f98b 	bl	8006a7c <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos - CurY), (Ypos + CurX), DrawProp[ActiveLayer].TextColor);
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	b29b      	uxth	r3, r3
 800676a:	88fa      	ldrh	r2, [r7, #6]
 800676c:	1ad3      	subs	r3, r2, r3
 800676e:	b298      	uxth	r0, r3
 8006770:	693b      	ldr	r3, [r7, #16]
 8006772:	b29a      	uxth	r2, r3
 8006774:	88bb      	ldrh	r3, [r7, #4]
 8006776:	4413      	add	r3, r2
 8006778:	b299      	uxth	r1, r3
 800677a:	4b17      	ldr	r3, [pc, #92]	; (80067d8 <BSP_LCD_DrawCircle+0x1cc>)
 800677c:	681a      	ldr	r2, [r3, #0]
 800677e:	4c17      	ldr	r4, [pc, #92]	; (80067dc <BSP_LCD_DrawCircle+0x1d0>)
 8006780:	4613      	mov	r3, r2
 8006782:	005b      	lsls	r3, r3, #1
 8006784:	4413      	add	r3, r2
 8006786:	009b      	lsls	r3, r3, #2
 8006788:	4423      	add	r3, r4
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	461a      	mov	r2, r3
 800678e:	f000 f975 	bl	8006a7c <BSP_LCD_DrawPixel>

    if (D < 0)
 8006792:	697b      	ldr	r3, [r7, #20]
 8006794:	2b00      	cmp	r3, #0
 8006796:	da06      	bge.n	80067a6 <BSP_LCD_DrawCircle+0x19a>
    {
      D += (CurX << 2) + 6;
 8006798:	693b      	ldr	r3, [r7, #16]
 800679a:	009a      	lsls	r2, r3, #2
 800679c:	697b      	ldr	r3, [r7, #20]
 800679e:	4413      	add	r3, r2
 80067a0:	3306      	adds	r3, #6
 80067a2:	617b      	str	r3, [r7, #20]
 80067a4:	e00a      	b.n	80067bc <BSP_LCD_DrawCircle+0x1b0>
    }
    else
    {
      D += ((CurX - CurY) << 2) + 10;
 80067a6:	693a      	ldr	r2, [r7, #16]
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	1ad3      	subs	r3, r2, r3
 80067ac:	009a      	lsls	r2, r3, #2
 80067ae:	697b      	ldr	r3, [r7, #20]
 80067b0:	4413      	add	r3, r2
 80067b2:	330a      	adds	r3, #10
 80067b4:	617b      	str	r3, [r7, #20]
      CurY--;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	3b01      	subs	r3, #1
 80067ba:	60fb      	str	r3, [r7, #12]
    }
    CurX++;
 80067bc:	693b      	ldr	r3, [r7, #16]
 80067be:	3301      	adds	r3, #1
 80067c0:	613b      	str	r3, [r7, #16]
  while (CurX <= CurY)
 80067c2:	693a      	ldr	r2, [r7, #16]
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	429a      	cmp	r2, r3
 80067c8:	f67f af33 	bls.w	8006632 <BSP_LCD_DrawCircle+0x26>
  }
}
 80067cc:	bf00      	nop
 80067ce:	bf00      	nop
 80067d0:	371c      	adds	r7, #28
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd90      	pop	{r4, r7, pc}
 80067d6:	bf00      	nop
 80067d8:	200001c4 	.word	0x200001c4
 80067dc:	200001c8 	.word	0x200001c8

080067e0 <BSP_LCD_FillCircle>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b086      	sub	sp, #24
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	4603      	mov	r3, r0
 80067e8:	80fb      	strh	r3, [r7, #6]
 80067ea:	460b      	mov	r3, r1
 80067ec:	80bb      	strh	r3, [r7, #4]
 80067ee:	4613      	mov	r3, r2
 80067f0:	807b      	strh	r3, [r7, #2]
  int32_t  D;     /* Decision Variable */
  uint32_t  CurX; /* Current X Value */
  uint32_t  CurY; /* Current Y Value */

  D = 3 - (Radius << 1);
 80067f2:	887b      	ldrh	r3, [r7, #2]
 80067f4:	005b      	lsls	r3, r3, #1
 80067f6:	f1c3 0303 	rsb	r3, r3, #3
 80067fa:	617b      	str	r3, [r7, #20]

  CurX = 0;
 80067fc:	2300      	movs	r3, #0
 80067fe:	613b      	str	r3, [r7, #16]
  CurY = Radius;
 8006800:	887b      	ldrh	r3, [r7, #2]
 8006802:	60fb      	str	r3, [r7, #12]

  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8006804:	4b44      	ldr	r3, [pc, #272]	; (8006918 <BSP_LCD_FillCircle+0x138>)
 8006806:	681a      	ldr	r2, [r3, #0]
 8006808:	4944      	ldr	r1, [pc, #272]	; (800691c <BSP_LCD_FillCircle+0x13c>)
 800680a:	4613      	mov	r3, r2
 800680c:	005b      	lsls	r3, r3, #1
 800680e:	4413      	add	r3, r2
 8006810:	009b      	lsls	r3, r3, #2
 8006812:	440b      	add	r3, r1
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	4618      	mov	r0, r3
 8006818:	f7ff fd3a 	bl	8006290 <BSP_LCD_SetTextColor>

  while (CurX <= CurY)
 800681c:	e061      	b.n	80068e2 <BSP_LCD_FillCircle+0x102>
  {
    if(CurY > 0)
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d021      	beq.n	8006868 <BSP_LCD_FillCircle+0x88>
    {
      BSP_LCD_DrawHLine(Xpos - CurY, Ypos + CurX, 2*CurY);
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	b29b      	uxth	r3, r3
 8006828:	88fa      	ldrh	r2, [r7, #6]
 800682a:	1ad3      	subs	r3, r2, r3
 800682c:	b298      	uxth	r0, r3
 800682e:	693b      	ldr	r3, [r7, #16]
 8006830:	b29a      	uxth	r2, r3
 8006832:	88bb      	ldrh	r3, [r7, #4]
 8006834:	4413      	add	r3, r2
 8006836:	b299      	uxth	r1, r3
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	b29b      	uxth	r3, r3
 800683c:	005b      	lsls	r3, r3, #1
 800683e:	b29b      	uxth	r3, r3
 8006840:	461a      	mov	r2, r3
 8006842:	f7ff fea5 	bl	8006590 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - CurY, Ypos - CurX, 2*CurY);
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	b29b      	uxth	r3, r3
 800684a:	88fa      	ldrh	r2, [r7, #6]
 800684c:	1ad3      	subs	r3, r2, r3
 800684e:	b298      	uxth	r0, r3
 8006850:	693b      	ldr	r3, [r7, #16]
 8006852:	b29b      	uxth	r3, r3
 8006854:	88ba      	ldrh	r2, [r7, #4]
 8006856:	1ad3      	subs	r3, r2, r3
 8006858:	b299      	uxth	r1, r3
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	b29b      	uxth	r3, r3
 800685e:	005b      	lsls	r3, r3, #1
 8006860:	b29b      	uxth	r3, r3
 8006862:	461a      	mov	r2, r3
 8006864:	f7ff fe94 	bl	8006590 <BSP_LCD_DrawHLine>
    }

    if(CurX > 0)
 8006868:	693b      	ldr	r3, [r7, #16]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d021      	beq.n	80068b2 <BSP_LCD_FillCircle+0xd2>
    {
      BSP_LCD_DrawHLine(Xpos - CurX, Ypos - CurY, 2*CurX);
 800686e:	693b      	ldr	r3, [r7, #16]
 8006870:	b29b      	uxth	r3, r3
 8006872:	88fa      	ldrh	r2, [r7, #6]
 8006874:	1ad3      	subs	r3, r2, r3
 8006876:	b298      	uxth	r0, r3
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	b29b      	uxth	r3, r3
 800687c:	88ba      	ldrh	r2, [r7, #4]
 800687e:	1ad3      	subs	r3, r2, r3
 8006880:	b299      	uxth	r1, r3
 8006882:	693b      	ldr	r3, [r7, #16]
 8006884:	b29b      	uxth	r3, r3
 8006886:	005b      	lsls	r3, r3, #1
 8006888:	b29b      	uxth	r3, r3
 800688a:	461a      	mov	r2, r3
 800688c:	f7ff fe80 	bl	8006590 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - CurX, Ypos + CurY, 2*CurX);
 8006890:	693b      	ldr	r3, [r7, #16]
 8006892:	b29b      	uxth	r3, r3
 8006894:	88fa      	ldrh	r2, [r7, #6]
 8006896:	1ad3      	subs	r3, r2, r3
 8006898:	b298      	uxth	r0, r3
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	b29a      	uxth	r2, r3
 800689e:	88bb      	ldrh	r3, [r7, #4]
 80068a0:	4413      	add	r3, r2
 80068a2:	b299      	uxth	r1, r3
 80068a4:	693b      	ldr	r3, [r7, #16]
 80068a6:	b29b      	uxth	r3, r3
 80068a8:	005b      	lsls	r3, r3, #1
 80068aa:	b29b      	uxth	r3, r3
 80068ac:	461a      	mov	r2, r3
 80068ae:	f7ff fe6f 	bl	8006590 <BSP_LCD_DrawHLine>
    }
    if (D < 0)
 80068b2:	697b      	ldr	r3, [r7, #20]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	da06      	bge.n	80068c6 <BSP_LCD_FillCircle+0xe6>
    {
      D += (CurX << 2) + 6;
 80068b8:	693b      	ldr	r3, [r7, #16]
 80068ba:	009a      	lsls	r2, r3, #2
 80068bc:	697b      	ldr	r3, [r7, #20]
 80068be:	4413      	add	r3, r2
 80068c0:	3306      	adds	r3, #6
 80068c2:	617b      	str	r3, [r7, #20]
 80068c4:	e00a      	b.n	80068dc <BSP_LCD_FillCircle+0xfc>
    }
    else
    {
      D += ((CurX - CurY) << 2) + 10;
 80068c6:	693a      	ldr	r2, [r7, #16]
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	1ad3      	subs	r3, r2, r3
 80068cc:	009a      	lsls	r2, r3, #2
 80068ce:	697b      	ldr	r3, [r7, #20]
 80068d0:	4413      	add	r3, r2
 80068d2:	330a      	adds	r3, #10
 80068d4:	617b      	str	r3, [r7, #20]
      CurY--;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	3b01      	subs	r3, #1
 80068da:	60fb      	str	r3, [r7, #12]
    }
    CurX++;
 80068dc:	693b      	ldr	r3, [r7, #16]
 80068de:	3301      	adds	r3, #1
 80068e0:	613b      	str	r3, [r7, #16]
  while (CurX <= CurY)
 80068e2:	693a      	ldr	r2, [r7, #16]
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	429a      	cmp	r2, r3
 80068e8:	d999      	bls.n	800681e <BSP_LCD_FillCircle+0x3e>
  }

  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 80068ea:	4b0b      	ldr	r3, [pc, #44]	; (8006918 <BSP_LCD_FillCircle+0x138>)
 80068ec:	681a      	ldr	r2, [r3, #0]
 80068ee:	490b      	ldr	r1, [pc, #44]	; (800691c <BSP_LCD_FillCircle+0x13c>)
 80068f0:	4613      	mov	r3, r2
 80068f2:	005b      	lsls	r3, r3, #1
 80068f4:	4413      	add	r3, r2
 80068f6:	009b      	lsls	r3, r3, #2
 80068f8:	440b      	add	r3, r1
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4618      	mov	r0, r3
 80068fe:	f7ff fcc7 	bl	8006290 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 8006902:	887a      	ldrh	r2, [r7, #2]
 8006904:	88b9      	ldrh	r1, [r7, #4]
 8006906:	88fb      	ldrh	r3, [r7, #6]
 8006908:	4618      	mov	r0, r3
 800690a:	f7ff fe7f 	bl	800660c <BSP_LCD_DrawCircle>
}
 800690e:	bf00      	nop
 8006910:	3718      	adds	r7, #24
 8006912:	46bd      	mov	sp, r7
 8006914:	bd80      	pop	{r7, pc}
 8006916:	bf00      	nop
 8006918:	200001c4 	.word	0x200001c4
 800691c:	200001c8 	.word	0x200001c8

08006920 <BSP_LCD_DisplayOn>:
/**
  * @brief  Switch back on the display if was switched off by previous call of BSP_LCD_DisplayOff().
  *         Exit DSI ULPM mode if was allowed and configured in Dsi Configuration.
  */
void BSP_LCD_DisplayOn(void)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b082      	sub	sp, #8
 8006924:	af02      	add	r7, sp, #8
  /* Send Display on DCS command to display */
  HAL_DSI_ShortWrite(&(hdsi_eval),
 8006926:	4b06      	ldr	r3, [pc, #24]	; (8006940 <BSP_LCD_DisplayOn+0x20>)
 8006928:	6819      	ldr	r1, [r3, #0]
 800692a:	2300      	movs	r3, #0
 800692c:	9300      	str	r3, [sp, #0]
 800692e:	2329      	movs	r3, #41	; 0x29
 8006930:	2215      	movs	r2, #21
 8006932:	4804      	ldr	r0, [pc, #16]	; (8006944 <BSP_LCD_DisplayOn+0x24>)
 8006934:	f7fb f888 	bl	8001a48 <HAL_DSI_ShortWrite>
                     hdsivideo_handle.VirtualChannelID,
                     DSI_DCS_SHORT_PKT_WRITE_P1,
                     OTM8009A_CMD_DISPON,
                     0x00);
  
}
 8006938:	bf00      	nop
 800693a:	46bd      	mov	sp, r7
 800693c:	bd80      	pop	{r7, pc}
 800693e:	bf00      	nop
 8006940:	20000158 	.word	0x20000158
 8006944:	20000434 	.word	0x20000434

08006948 <DSI_IO_WriteCmd>:
  *                 If inferior to 2, a long write command is performed else short.
  * @param  pParams: Pointer to parameter values table.
  * @retval HAL status
  */
void DSI_IO_WriteCmd(uint32_t NbrParams, uint8_t *pParams)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b084      	sub	sp, #16
 800694c:	af02      	add	r7, sp, #8
 800694e:	6078      	str	r0, [r7, #4]
 8006950:	6039      	str	r1, [r7, #0]
  if(NbrParams <= 1)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2b01      	cmp	r3, #1
 8006956:	d80d      	bhi.n	8006974 <DSI_IO_WriteCmd+0x2c>
  {
   HAL_DSI_ShortWrite(&hdsi_eval, LCD_OTM8009A_ID, DSI_DCS_SHORT_PKT_WRITE_P1, pParams[0], pParams[1]); 
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	781b      	ldrb	r3, [r3, #0]
 800695c:	461a      	mov	r2, r3
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	3301      	adds	r3, #1
 8006962:	781b      	ldrb	r3, [r3, #0]
 8006964:	9300      	str	r3, [sp, #0]
 8006966:	4613      	mov	r3, r2
 8006968:	2215      	movs	r2, #21
 800696a:	2100      	movs	r1, #0
 800696c:	480a      	ldr	r0, [pc, #40]	; (8006998 <DSI_IO_WriteCmd+0x50>)
 800696e:	f7fb f86b 	bl	8001a48 <HAL_DSI_ShortWrite>
  }
  else
  {
   HAL_DSI_LongWrite(&hdsi_eval,  LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams); 
  }
}
 8006972:	e00d      	b.n	8006990 <DSI_IO_WriteCmd+0x48>
   HAL_DSI_LongWrite(&hdsi_eval,  LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams); 
 8006974:	683a      	ldr	r2, [r7, #0]
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	4413      	add	r3, r2
 800697a:	781b      	ldrb	r3, [r3, #0]
 800697c:	461a      	mov	r2, r3
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	9301      	str	r3, [sp, #4]
 8006982:	9200      	str	r2, [sp, #0]
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2239      	movs	r2, #57	; 0x39
 8006988:	2100      	movs	r1, #0
 800698a:	4803      	ldr	r0, [pc, #12]	; (8006998 <DSI_IO_WriteCmd+0x50>)
 800698c:	f7fb f87e 	bl	8001a8c <HAL_DSI_LongWrite>
}
 8006990:	bf00      	nop
 8006992:	3708      	adds	r7, #8
 8006994:	46bd      	mov	sp, r7
 8006996:	bd80      	pop	{r7, pc}
 8006998:	20000434 	.word	0x20000434

0800699c <BSP_LCD_MspInit>:
/**
  * @brief  Initialize the BSP LCD Msp.
  * Application can surcharge if needed this function implementation
  */
__weak void BSP_LCD_MspInit(void)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b084      	sub	sp, #16
 80069a0:	af00      	add	r7, sp, #0
  /** @brief Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80069a2:	2300      	movs	r3, #0
 80069a4:	60fb      	str	r3, [r7, #12]
 80069a6:	4b34      	ldr	r3, [pc, #208]	; (8006a78 <BSP_LCD_MspInit+0xdc>)
 80069a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069aa:	4a33      	ldr	r2, [pc, #204]	; (8006a78 <BSP_LCD_MspInit+0xdc>)
 80069ac:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80069b0:	6453      	str	r3, [r2, #68]	; 0x44
 80069b2:	4b31      	ldr	r3, [pc, #196]	; (8006a78 <BSP_LCD_MspInit+0xdc>)
 80069b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069b6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80069ba:	60fb      	str	r3, [r7, #12]
 80069bc:	68fb      	ldr	r3, [r7, #12]

  /** @brief Toggle Sw reset of LTDC IP */
  __HAL_RCC_LTDC_FORCE_RESET();
 80069be:	4b2e      	ldr	r3, [pc, #184]	; (8006a78 <BSP_LCD_MspInit+0xdc>)
 80069c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069c2:	4a2d      	ldr	r2, [pc, #180]	; (8006a78 <BSP_LCD_MspInit+0xdc>)
 80069c4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80069c8:	6253      	str	r3, [r2, #36]	; 0x24
  __HAL_RCC_LTDC_RELEASE_RESET();
 80069ca:	4b2b      	ldr	r3, [pc, #172]	; (8006a78 <BSP_LCD_MspInit+0xdc>)
 80069cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ce:	4a2a      	ldr	r2, [pc, #168]	; (8006a78 <BSP_LCD_MspInit+0xdc>)
 80069d0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80069d4:	6253      	str	r3, [r2, #36]	; 0x24

  /** @brief Enable the DMA2D clock */
  __HAL_RCC_DMA2D_CLK_ENABLE();
 80069d6:	2300      	movs	r3, #0
 80069d8:	60bb      	str	r3, [r7, #8]
 80069da:	4b27      	ldr	r3, [pc, #156]	; (8006a78 <BSP_LCD_MspInit+0xdc>)
 80069dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069de:	4a26      	ldr	r2, [pc, #152]	; (8006a78 <BSP_LCD_MspInit+0xdc>)
 80069e0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80069e4:	6313      	str	r3, [r2, #48]	; 0x30
 80069e6:	4b24      	ldr	r3, [pc, #144]	; (8006a78 <BSP_LCD_MspInit+0xdc>)
 80069e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80069ee:	60bb      	str	r3, [r7, #8]
 80069f0:	68bb      	ldr	r3, [r7, #8]

  /** @brief Toggle Sw reset of DMA2D IP */
  __HAL_RCC_DMA2D_FORCE_RESET();
 80069f2:	4b21      	ldr	r3, [pc, #132]	; (8006a78 <BSP_LCD_MspInit+0xdc>)
 80069f4:	691b      	ldr	r3, [r3, #16]
 80069f6:	4a20      	ldr	r2, [pc, #128]	; (8006a78 <BSP_LCD_MspInit+0xdc>)
 80069f8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80069fc:	6113      	str	r3, [r2, #16]
  __HAL_RCC_DMA2D_RELEASE_RESET();
 80069fe:	4b1e      	ldr	r3, [pc, #120]	; (8006a78 <BSP_LCD_MspInit+0xdc>)
 8006a00:	691b      	ldr	r3, [r3, #16]
 8006a02:	4a1d      	ldr	r2, [pc, #116]	; (8006a78 <BSP_LCD_MspInit+0xdc>)
 8006a04:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006a08:	6113      	str	r3, [r2, #16]

  /** @brief Enable DSI Host and wrapper clocks */
  __HAL_RCC_DSI_CLK_ENABLE();
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	607b      	str	r3, [r7, #4]
 8006a0e:	4b1a      	ldr	r3, [pc, #104]	; (8006a78 <BSP_LCD_MspInit+0xdc>)
 8006a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a12:	4a19      	ldr	r2, [pc, #100]	; (8006a78 <BSP_LCD_MspInit+0xdc>)
 8006a14:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006a18:	6453      	str	r3, [r2, #68]	; 0x44
 8006a1a:	4b17      	ldr	r3, [pc, #92]	; (8006a78 <BSP_LCD_MspInit+0xdc>)
 8006a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a1e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a22:	607b      	str	r3, [r7, #4]
 8006a24:	687b      	ldr	r3, [r7, #4]

  /** @brief Soft Reset the DSI Host and wrapper */
  __HAL_RCC_DSI_FORCE_RESET();
 8006a26:	4b14      	ldr	r3, [pc, #80]	; (8006a78 <BSP_LCD_MspInit+0xdc>)
 8006a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a2a:	4a13      	ldr	r2, [pc, #76]	; (8006a78 <BSP_LCD_MspInit+0xdc>)
 8006a2c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006a30:	6253      	str	r3, [r2, #36]	; 0x24
  __HAL_RCC_DSI_RELEASE_RESET();
 8006a32:	4b11      	ldr	r3, [pc, #68]	; (8006a78 <BSP_LCD_MspInit+0xdc>)
 8006a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a36:	4a10      	ldr	r2, [pc, #64]	; (8006a78 <BSP_LCD_MspInit+0xdc>)
 8006a38:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8006a3c:	6253      	str	r3, [r2, #36]	; 0x24

  /** @brief NVIC configuration for LTDC interrupt that is now enabled */
  HAL_NVIC_SetPriority(LTDC_IRQn, 3, 0);
 8006a3e:	2200      	movs	r2, #0
 8006a40:	2103      	movs	r1, #3
 8006a42:	2058      	movs	r0, #88	; 0x58
 8006a44:	f7f9 fec3 	bl	80007ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8006a48:	2058      	movs	r0, #88	; 0x58
 8006a4a:	f7f9 fedc 	bl	8000806 <HAL_NVIC_EnableIRQ>

  /** @brief NVIC configuration for DMA2D interrupt that is now enabled */
  HAL_NVIC_SetPriority(DMA2D_IRQn, 3, 0);
 8006a4e:	2200      	movs	r2, #0
 8006a50:	2103      	movs	r1, #3
 8006a52:	205a      	movs	r0, #90	; 0x5a
 8006a54:	f7f9 febb 	bl	80007ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8006a58:	205a      	movs	r0, #90	; 0x5a
 8006a5a:	f7f9 fed4 	bl	8000806 <HAL_NVIC_EnableIRQ>

  /** @brief NVIC configuration for DSI interrupt that is now enabled */
  HAL_NVIC_SetPriority(DSI_IRQn, 3, 0);
 8006a5e:	2200      	movs	r2, #0
 8006a60:	2103      	movs	r1, #3
 8006a62:	205c      	movs	r0, #92	; 0x5c
 8006a64:	f7f9 feb3 	bl	80007ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DSI_IRQn);
 8006a68:	205c      	movs	r0, #92	; 0x5c
 8006a6a:	f7f9 fecc 	bl	8000806 <HAL_NVIC_EnableIRQ>
}
 8006a6e:	bf00      	nop
 8006a70:	3710      	adds	r7, #16
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bd80      	pop	{r7, pc}
 8006a76:	bf00      	nop
 8006a78:	40023800 	.word	0x40023800

08006a7c <BSP_LCD_DrawPixel>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8006a7c:	b5b0      	push	{r4, r5, r7, lr}
 8006a7e:	b082      	sub	sp, #8
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	4603      	mov	r3, r0
 8006a84:	603a      	str	r2, [r7, #0]
 8006a86:	80fb      	strh	r3, [r7, #6]
 8006a88:	460b      	mov	r3, r1
 8006a8a:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (hltdc_eval.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8006a8c:	4b0c      	ldr	r3, [pc, #48]	; (8006ac0 <BSP_LCD_DrawPixel+0x44>)
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	4a0c      	ldr	r2, [pc, #48]	; (8006ac4 <BSP_LCD_DrawPixel+0x48>)
 8006a92:	2134      	movs	r1, #52	; 0x34
 8006a94:	fb01 f303 	mul.w	r3, r1, r3
 8006a98:	4413      	add	r3, r2
 8006a9a:	335c      	adds	r3, #92	; 0x5c
 8006a9c:	681c      	ldr	r4, [r3, #0]
 8006a9e:	88bd      	ldrh	r5, [r7, #4]
 8006aa0:	f7ff fb6e 	bl	8006180 <BSP_LCD_GetXSize>
 8006aa4:	4603      	mov	r3, r0
 8006aa6:	fb03 f205 	mul.w	r2, r3, r5
 8006aaa:	88fb      	ldrh	r3, [r7, #6]
 8006aac:	4413      	add	r3, r2
 8006aae:	009b      	lsls	r3, r3, #2
 8006ab0:	4423      	add	r3, r4
 8006ab2:	461a      	mov	r2, r3
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	6013      	str	r3, [r2, #0]
}
 8006ab8:	bf00      	nop
 8006aba:	3708      	adds	r7, #8
 8006abc:	46bd      	mov	sp, r7
 8006abe:	bdb0      	pop	{r4, r5, r7, pc}
 8006ac0:	200001c4 	.word	0x200001c4
 8006ac4:	2000038c 	.word	0x2000038c

08006ac8 <DrawChar>:
  * @param  Xpos: Line where to display the character shape
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b088      	sub	sp, #32
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	4603      	mov	r3, r0
 8006ad0:	603a      	str	r2, [r7, #0]
 8006ad2:	80fb      	strh	r3, [r7, #6]
 8006ad4:	460b      	mov	r3, r1
 8006ad6:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8006ad8:	2300      	movs	r3, #0
 8006ada:	61fb      	str	r3, [r7, #28]
 8006adc:	2300      	movs	r3, #0
 8006ade:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;

  height = DrawProp[ActiveLayer].pFont->Height;
 8006ae0:	4b53      	ldr	r3, [pc, #332]	; (8006c30 <DrawChar+0x168>)
 8006ae2:	681a      	ldr	r2, [r3, #0]
 8006ae4:	4953      	ldr	r1, [pc, #332]	; (8006c34 <DrawChar+0x16c>)
 8006ae6:	4613      	mov	r3, r2
 8006ae8:	005b      	lsls	r3, r3, #1
 8006aea:	4413      	add	r3, r2
 8006aec:	009b      	lsls	r3, r3, #2
 8006aee:	440b      	add	r3, r1
 8006af0:	3308      	adds	r3, #8
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	88db      	ldrh	r3, [r3, #6]
 8006af6:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8006af8:	4b4d      	ldr	r3, [pc, #308]	; (8006c30 <DrawChar+0x168>)
 8006afa:	681a      	ldr	r2, [r3, #0]
 8006afc:	494d      	ldr	r1, [pc, #308]	; (8006c34 <DrawChar+0x16c>)
 8006afe:	4613      	mov	r3, r2
 8006b00:	005b      	lsls	r3, r3, #1
 8006b02:	4413      	add	r3, r2
 8006b04:	009b      	lsls	r3, r3, #2
 8006b06:	440b      	add	r3, r1
 8006b08:	3308      	adds	r3, #8
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	889b      	ldrh	r3, [r3, #4]
 8006b0e:	823b      	strh	r3, [r7, #16]

  offset =  8 *((width + 7)/8) -  width ;
 8006b10:	8a3b      	ldrh	r3, [r7, #16]
 8006b12:	3307      	adds	r3, #7
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	da00      	bge.n	8006b1a <DrawChar+0x52>
 8006b18:	3307      	adds	r3, #7
 8006b1a:	10db      	asrs	r3, r3, #3
 8006b1c:	b2db      	uxtb	r3, r3
 8006b1e:	00db      	lsls	r3, r3, #3
 8006b20:	b2da      	uxtb	r2, r3
 8006b22:	8a3b      	ldrh	r3, [r7, #16]
 8006b24:	b2db      	uxtb	r3, r3
 8006b26:	1ad3      	subs	r3, r2, r3
 8006b28:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	61fb      	str	r3, [r7, #28]
 8006b2e:	e076      	b.n	8006c1e <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8006b30:	8a3b      	ldrh	r3, [r7, #16]
 8006b32:	3307      	adds	r3, #7
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	da00      	bge.n	8006b3a <DrawChar+0x72>
 8006b38:	3307      	adds	r3, #7
 8006b3a:	10db      	asrs	r3, r3, #3
 8006b3c:	461a      	mov	r2, r3
 8006b3e:	69fb      	ldr	r3, [r7, #28]
 8006b40:	fb03 f302 	mul.w	r3, r3, r2
 8006b44:	683a      	ldr	r2, [r7, #0]
 8006b46:	4413      	add	r3, r2
 8006b48:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 8006b4a:	8a3b      	ldrh	r3, [r7, #16]
 8006b4c:	3307      	adds	r3, #7
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	da00      	bge.n	8006b54 <DrawChar+0x8c>
 8006b52:	3307      	adds	r3, #7
 8006b54:	10db      	asrs	r3, r3, #3
 8006b56:	2b01      	cmp	r3, #1
 8006b58:	d002      	beq.n	8006b60 <DrawChar+0x98>
 8006b5a:	2b02      	cmp	r3, #2
 8006b5c:	d004      	beq.n	8006b68 <DrawChar+0xa0>
 8006b5e:	e00c      	b.n	8006b7a <DrawChar+0xb2>
    {

    case 1:
      line =  pchar[0];
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	781b      	ldrb	r3, [r3, #0]
 8006b64:	617b      	str	r3, [r7, #20]
      break;
 8006b66:	e016      	b.n	8006b96 <DrawChar+0xce>

    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	781b      	ldrb	r3, [r3, #0]
 8006b6c:	021b      	lsls	r3, r3, #8
 8006b6e:	68ba      	ldr	r2, [r7, #8]
 8006b70:	3201      	adds	r2, #1
 8006b72:	7812      	ldrb	r2, [r2, #0]
 8006b74:	4313      	orrs	r3, r2
 8006b76:	617b      	str	r3, [r7, #20]
      break;
 8006b78:	e00d      	b.n	8006b96 <DrawChar+0xce>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 8006b7a:	68bb      	ldr	r3, [r7, #8]
 8006b7c:	781b      	ldrb	r3, [r3, #0]
 8006b7e:	041a      	lsls	r2, r3, #16
 8006b80:	68bb      	ldr	r3, [r7, #8]
 8006b82:	3301      	adds	r3, #1
 8006b84:	781b      	ldrb	r3, [r3, #0]
 8006b86:	021b      	lsls	r3, r3, #8
 8006b88:	4313      	orrs	r3, r2
 8006b8a:	68ba      	ldr	r2, [r7, #8]
 8006b8c:	3202      	adds	r2, #2
 8006b8e:	7812      	ldrb	r2, [r2, #0]
 8006b90:	4313      	orrs	r3, r2
 8006b92:	617b      	str	r3, [r7, #20]
      break;
 8006b94:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 8006b96:	2300      	movs	r3, #0
 8006b98:	61bb      	str	r3, [r7, #24]
 8006b9a:	e036      	b.n	8006c0a <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1)))
 8006b9c:	8a3a      	ldrh	r2, [r7, #16]
 8006b9e:	69bb      	ldr	r3, [r7, #24]
 8006ba0:	1ad2      	subs	r2, r2, r3
 8006ba2:	7bfb      	ldrb	r3, [r7, #15]
 8006ba4:	4413      	add	r3, r2
 8006ba6:	3b01      	subs	r3, #1
 8006ba8:	2201      	movs	r2, #1
 8006baa:	fa02 f303 	lsl.w	r3, r2, r3
 8006bae:	461a      	mov	r2, r3
 8006bb0:	697b      	ldr	r3, [r7, #20]
 8006bb2:	4013      	ands	r3, r2
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d012      	beq.n	8006bde <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8006bb8:	69bb      	ldr	r3, [r7, #24]
 8006bba:	b29a      	uxth	r2, r3
 8006bbc:	88fb      	ldrh	r3, [r7, #6]
 8006bbe:	4413      	add	r3, r2
 8006bc0:	b298      	uxth	r0, r3
 8006bc2:	4b1b      	ldr	r3, [pc, #108]	; (8006c30 <DrawChar+0x168>)
 8006bc4:	681a      	ldr	r2, [r3, #0]
 8006bc6:	491b      	ldr	r1, [pc, #108]	; (8006c34 <DrawChar+0x16c>)
 8006bc8:	4613      	mov	r3, r2
 8006bca:	005b      	lsls	r3, r3, #1
 8006bcc:	4413      	add	r3, r2
 8006bce:	009b      	lsls	r3, r3, #2
 8006bd0:	440b      	add	r3, r1
 8006bd2:	681a      	ldr	r2, [r3, #0]
 8006bd4:	88bb      	ldrh	r3, [r7, #4]
 8006bd6:	4619      	mov	r1, r3
 8006bd8:	f7ff ff50 	bl	8006a7c <BSP_LCD_DrawPixel>
 8006bdc:	e012      	b.n	8006c04 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8006bde:	69bb      	ldr	r3, [r7, #24]
 8006be0:	b29a      	uxth	r2, r3
 8006be2:	88fb      	ldrh	r3, [r7, #6]
 8006be4:	4413      	add	r3, r2
 8006be6:	b298      	uxth	r0, r3
 8006be8:	4b11      	ldr	r3, [pc, #68]	; (8006c30 <DrawChar+0x168>)
 8006bea:	681a      	ldr	r2, [r3, #0]
 8006bec:	4911      	ldr	r1, [pc, #68]	; (8006c34 <DrawChar+0x16c>)
 8006bee:	4613      	mov	r3, r2
 8006bf0:	005b      	lsls	r3, r3, #1
 8006bf2:	4413      	add	r3, r2
 8006bf4:	009b      	lsls	r3, r3, #2
 8006bf6:	440b      	add	r3, r1
 8006bf8:	3304      	adds	r3, #4
 8006bfa:	681a      	ldr	r2, [r3, #0]
 8006bfc:	88bb      	ldrh	r3, [r7, #4]
 8006bfe:	4619      	mov	r1, r3
 8006c00:	f7ff ff3c 	bl	8006a7c <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8006c04:	69bb      	ldr	r3, [r7, #24]
 8006c06:	3301      	adds	r3, #1
 8006c08:	61bb      	str	r3, [r7, #24]
 8006c0a:	8a3b      	ldrh	r3, [r7, #16]
 8006c0c:	69ba      	ldr	r2, [r7, #24]
 8006c0e:	429a      	cmp	r2, r3
 8006c10:	d3c4      	bcc.n	8006b9c <DrawChar+0xd4>
      }
    }
    Ypos++;
 8006c12:	88bb      	ldrh	r3, [r7, #4]
 8006c14:	3301      	adds	r3, #1
 8006c16:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8006c18:	69fb      	ldr	r3, [r7, #28]
 8006c1a:	3301      	adds	r3, #1
 8006c1c:	61fb      	str	r3, [r7, #28]
 8006c1e:	8a7b      	ldrh	r3, [r7, #18]
 8006c20:	69fa      	ldr	r2, [r7, #28]
 8006c22:	429a      	cmp	r2, r3
 8006c24:	d384      	bcc.n	8006b30 <DrawChar+0x68>
  }
}
 8006c26:	bf00      	nop
 8006c28:	bf00      	nop
 8006c2a:	3720      	adds	r7, #32
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	bd80      	pop	{r7, pc}
 8006c30:	200001c4 	.word	0x200001c4
 8006c34:	200001c8 	.word	0x200001c8

08006c38 <LL_FillBuffer>:
  * @param  ySize: Buffer height
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b086      	sub	sp, #24
 8006c3c:	af02      	add	r7, sp, #8
 8006c3e:	60f8      	str	r0, [r7, #12]
 8006c40:	60b9      	str	r1, [r7, #8]
 8006c42:	607a      	str	r2, [r7, #4]
 8006c44:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */
  hdma2d_eval.Init.Mode         = DMA2D_R2M;
 8006c46:	4b16      	ldr	r3, [pc, #88]	; (8006ca0 <LL_FillBuffer+0x68>)
 8006c48:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8006c4c:	605a      	str	r2, [r3, #4]
  hdma2d_eval.Init.ColorMode    = DMA2D_ARGB8888;
 8006c4e:	4b14      	ldr	r3, [pc, #80]	; (8006ca0 <LL_FillBuffer+0x68>)
 8006c50:	2200      	movs	r2, #0
 8006c52:	609a      	str	r2, [r3, #8]
  hdma2d_eval.Init.OutputOffset = OffLine;
 8006c54:	4a12      	ldr	r2, [pc, #72]	; (8006ca0 <LL_FillBuffer+0x68>)
 8006c56:	69bb      	ldr	r3, [r7, #24]
 8006c58:	60d3      	str	r3, [r2, #12]

  hdma2d_eval.Instance = DMA2D;
 8006c5a:	4b11      	ldr	r3, [pc, #68]	; (8006ca0 <LL_FillBuffer+0x68>)
 8006c5c:	4a11      	ldr	r2, [pc, #68]	; (8006ca4 <LL_FillBuffer+0x6c>)
 8006c5e:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hdma2d_eval) == HAL_OK)
 8006c60:	480f      	ldr	r0, [pc, #60]	; (8006ca0 <LL_FillBuffer+0x68>)
 8006c62:	f7f9 ffd7 	bl	8000c14 <HAL_DMA2D_Init>
 8006c66:	4603      	mov	r3, r0
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d115      	bne.n	8006c98 <LL_FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&hdma2d_eval, LayerIndex) == HAL_OK)
 8006c6c:	68f9      	ldr	r1, [r7, #12]
 8006c6e:	480c      	ldr	r0, [pc, #48]	; (8006ca0 <LL_FillBuffer+0x68>)
 8006c70:	f7fa f938 	bl	8000ee4 <HAL_DMA2D_ConfigLayer>
 8006c74:	4603      	mov	r3, r0
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d10e      	bne.n	8006c98 <LL_FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&hdma2d_eval, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8006c7a:	68ba      	ldr	r2, [r7, #8]
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	9300      	str	r3, [sp, #0]
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	69f9      	ldr	r1, [r7, #28]
 8006c84:	4806      	ldr	r0, [pc, #24]	; (8006ca0 <LL_FillBuffer+0x68>)
 8006c86:	f7fa f818 	bl	8000cba <HAL_DMA2D_Start>
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d103      	bne.n	8006c98 <LL_FillBuffer+0x60>
      {
        /* Polling For DMA transfer */
        HAL_DMA2D_PollForTransfer(&hdma2d_eval, 10);
 8006c90:	210a      	movs	r1, #10
 8006c92:	4803      	ldr	r0, [pc, #12]	; (8006ca0 <LL_FillBuffer+0x68>)
 8006c94:	f7fa f83c 	bl	8000d10 <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 8006c98:	bf00      	nop
 8006c9a:	3710      	adds	r7, #16
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bd80      	pop	{r7, pc}
 8006ca0:	20000450 	.word	0x20000450
 8006ca4:	4002b000 	.word	0x4002b000

08006ca8 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8006cac:	4b29      	ldr	r3, [pc, #164]	; (8006d54 <BSP_SDRAM_Init+0xac>)
 8006cae:	4a2a      	ldr	r2, [pc, #168]	; (8006d58 <BSP_SDRAM_Init+0xb0>)
 8006cb0:	601a      	str	r2, [r3, #0]

  /* Timing configuration for 90 MHz as SD clock frequency (System clock is up to 180 MHz) */
  Timing.LoadToActiveDelay    = 2;
 8006cb2:	4b2a      	ldr	r3, [pc, #168]	; (8006d5c <BSP_SDRAM_Init+0xb4>)
 8006cb4:	2202      	movs	r2, #2
 8006cb6:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8006cb8:	4b28      	ldr	r3, [pc, #160]	; (8006d5c <BSP_SDRAM_Init+0xb4>)
 8006cba:	2207      	movs	r2, #7
 8006cbc:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 8006cbe:	4b27      	ldr	r3, [pc, #156]	; (8006d5c <BSP_SDRAM_Init+0xb4>)
 8006cc0:	2204      	movs	r2, #4
 8006cc2:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8006cc4:	4b25      	ldr	r3, [pc, #148]	; (8006d5c <BSP_SDRAM_Init+0xb4>)
 8006cc6:	2207      	movs	r2, #7
 8006cc8:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 8006cca:	4b24      	ldr	r3, [pc, #144]	; (8006d5c <BSP_SDRAM_Init+0xb4>)
 8006ccc:	2202      	movs	r2, #2
 8006cce:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8006cd0:	4b22      	ldr	r3, [pc, #136]	; (8006d5c <BSP_SDRAM_Init+0xb4>)
 8006cd2:	2202      	movs	r2, #2
 8006cd4:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 8006cd6:	4b21      	ldr	r3, [pc, #132]	; (8006d5c <BSP_SDRAM_Init+0xb4>)
 8006cd8:	2202      	movs	r2, #2
 8006cda:	619a      	str	r2, [r3, #24]

  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8006cdc:	4b1d      	ldr	r3, [pc, #116]	; (8006d54 <BSP_SDRAM_Init+0xac>)
 8006cde:	2200      	movs	r2, #0
 8006ce0:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8006ce2:	4b1c      	ldr	r3, [pc, #112]	; (8006d54 <BSP_SDRAM_Init+0xac>)
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8006ce8:	4b1a      	ldr	r3, [pc, #104]	; (8006d54 <BSP_SDRAM_Init+0xac>)
 8006cea:	2204      	movs	r2, #4
 8006cec:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8006cee:	4b19      	ldr	r3, [pc, #100]	; (8006d54 <BSP_SDRAM_Init+0xac>)
 8006cf0:	2220      	movs	r2, #32
 8006cf2:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8006cf4:	4b17      	ldr	r3, [pc, #92]	; (8006d54 <BSP_SDRAM_Init+0xac>)
 8006cf6:	2240      	movs	r2, #64	; 0x40
 8006cf8:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 8006cfa:	4b16      	ldr	r3, [pc, #88]	; (8006d54 <BSP_SDRAM_Init+0xac>)
 8006cfc:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8006d00:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8006d02:	4b14      	ldr	r3, [pc, #80]	; (8006d54 <BSP_SDRAM_Init+0xac>)
 8006d04:	2200      	movs	r2, #0
 8006d06:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8006d08:	4b12      	ldr	r3, [pc, #72]	; (8006d54 <BSP_SDRAM_Init+0xac>)
 8006d0a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006d0e:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8006d10:	4b10      	ldr	r3, [pc, #64]	; (8006d54 <BSP_SDRAM_Init+0xac>)
 8006d12:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006d16:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8006d18:	4b0e      	ldr	r3, [pc, #56]	; (8006d54 <BSP_SDRAM_Init+0xac>)
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	629a      	str	r2, [r3, #40]	; 0x28

  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&sdramHandle, (void *)NULL);
 8006d1e:	2100      	movs	r1, #0
 8006d20:	480c      	ldr	r0, [pc, #48]	; (8006d54 <BSP_SDRAM_Init+0xac>)
 8006d22:	f000 f87f 	bl	8006e24 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8006d26:	490d      	ldr	r1, [pc, #52]	; (8006d5c <BSP_SDRAM_Init+0xb4>)
 8006d28:	480a      	ldr	r0, [pc, #40]	; (8006d54 <BSP_SDRAM_Init+0xac>)
 8006d2a:	f7fd fbcf 	bl	80044cc <HAL_SDRAM_Init>
 8006d2e:	4603      	mov	r3, r0
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d003      	beq.n	8006d3c <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8006d34:	4b0a      	ldr	r3, [pc, #40]	; (8006d60 <BSP_SDRAM_Init+0xb8>)
 8006d36:	2201      	movs	r2, #1
 8006d38:	701a      	strb	r2, [r3, #0]
 8006d3a:	e002      	b.n	8006d42 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8006d3c:	4b08      	ldr	r3, [pc, #32]	; (8006d60 <BSP_SDRAM_Init+0xb8>)
 8006d3e:	2200      	movs	r2, #0
 8006d40:	701a      	strb	r2, [r3, #0]
  }

  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8006d42:	f240 5069 	movw	r0, #1385	; 0x569
 8006d46:	f000 f80d 	bl	8006d64 <BSP_SDRAM_Initialization_sequence>

  return sdramstatus;
 8006d4a:	4b05      	ldr	r3, [pc, #20]	; (8006d60 <BSP_SDRAM_Init+0xb8>)
 8006d4c:	781b      	ldrb	r3, [r3, #0]
}
 8006d4e:	4618      	mov	r0, r3
 8006d50:	bd80      	pop	{r7, pc}
 8006d52:	bf00      	nop
 8006d54:	2000021c 	.word	0x2000021c
 8006d58:	a0000140 	.word	0xa0000140
 8006d5c:	20000250 	.word	0x20000250
 8006d60:	20000084 	.word	0x20000084

08006d64 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b084      	sub	sp, #16
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	60fb      	str	r3, [r7, #12]

  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8006d70:	4b2a      	ldr	r3, [pc, #168]	; (8006e1c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006d72:	2201      	movs	r2, #1
 8006d74:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8006d76:	4b29      	ldr	r3, [pc, #164]	; (8006e1c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006d78:	2210      	movs	r2, #16
 8006d7a:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8006d7c:	4b27      	ldr	r3, [pc, #156]	; (8006e1c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006d7e:	2201      	movs	r2, #1
 8006d80:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8006d82:	4b26      	ldr	r3, [pc, #152]	; (8006e1c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006d84:	2200      	movs	r2, #0
 8006d86:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8006d88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006d8c:	4923      	ldr	r1, [pc, #140]	; (8006e1c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006d8e:	4824      	ldr	r0, [pc, #144]	; (8006e20 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8006d90:	f7fd fbda 	bl	8004548 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8006d94:	2001      	movs	r0, #1
 8006d96:	f7f9 fc1b 	bl	80005d0 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8006d9a:	4b20      	ldr	r3, [pc, #128]	; (8006e1c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006d9c:	2202      	movs	r2, #2
 8006d9e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8006da0:	4b1e      	ldr	r3, [pc, #120]	; (8006e1c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006da2:	2210      	movs	r2, #16
 8006da4:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8006da6:	4b1d      	ldr	r3, [pc, #116]	; (8006e1c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006da8:	2201      	movs	r2, #1
 8006daa:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8006dac:	4b1b      	ldr	r3, [pc, #108]	; (8006e1c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006dae:	2200      	movs	r2, #0
 8006db0:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8006db2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006db6:	4919      	ldr	r1, [pc, #100]	; (8006e1c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006db8:	4819      	ldr	r0, [pc, #100]	; (8006e20 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8006dba:	f7fd fbc5 	bl	8004548 <HAL_SDRAM_SendCommand>

  /* Step 4: Configure an Auto Refresh command */
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8006dbe:	4b17      	ldr	r3, [pc, #92]	; (8006e1c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006dc0:	2203      	movs	r2, #3
 8006dc2:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8006dc4:	4b15      	ldr	r3, [pc, #84]	; (8006e1c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006dc6:	2210      	movs	r2, #16
 8006dc8:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8006dca:	4b14      	ldr	r3, [pc, #80]	; (8006e1c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006dcc:	2208      	movs	r2, #8
 8006dce:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8006dd0:	4b12      	ldr	r3, [pc, #72]	; (8006e1c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8006dd6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006dda:	4910      	ldr	r1, [pc, #64]	; (8006e1c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006ddc:	4810      	ldr	r0, [pc, #64]	; (8006e20 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8006dde:	f7fd fbb3 	bl	8004548 <HAL_SDRAM_SendCommand>

  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8006de2:	f44f 730c 	mov.w	r3, #560	; 0x230
 8006de6:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_3           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8006de8:	4b0c      	ldr	r3, [pc, #48]	; (8006e1c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006dea:	2204      	movs	r2, #4
 8006dec:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8006dee:	4b0b      	ldr	r3, [pc, #44]	; (8006e1c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006df0:	2210      	movs	r2, #16
 8006df2:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8006df4:	4b09      	ldr	r3, [pc, #36]	; (8006e1c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006df6:	2201      	movs	r2, #1
 8006df8:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	4a07      	ldr	r2, [pc, #28]	; (8006e1c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006dfe:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8006e00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006e04:	4905      	ldr	r1, [pc, #20]	; (8006e1c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006e06:	4806      	ldr	r0, [pc, #24]	; (8006e20 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8006e08:	f7fd fb9e 	bl	8004548 <HAL_SDRAM_SendCommand>

  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount);
 8006e0c:	6879      	ldr	r1, [r7, #4]
 8006e0e:	4804      	ldr	r0, [pc, #16]	; (8006e20 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8006e10:	f7fd fbc5 	bl	800459e <HAL_SDRAM_ProgramRefreshRate>
}
 8006e14:	bf00      	nop
 8006e16:	3710      	adds	r7, #16
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	bd80      	pop	{r7, pc}
 8006e1c:	2000026c 	.word	0x2000026c
 8006e20:	2000021c 	.word	0x2000021c

08006e24 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b090      	sub	sp, #64	; 0x40
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
 8006e2c:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	f000 8104 	beq.w	800703e <BSP_SDRAM_MspInit+0x21a>
  {
    /* Enable FMC clock */
    __HAL_RCC_FMC_CLK_ENABLE();
 8006e36:	2300      	movs	r3, #0
 8006e38:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e3a:	4b83      	ldr	r3, [pc, #524]	; (8007048 <BSP_SDRAM_MspInit+0x224>)
 8006e3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e3e:	4a82      	ldr	r2, [pc, #520]	; (8007048 <BSP_SDRAM_MspInit+0x224>)
 8006e40:	f043 0301 	orr.w	r3, r3, #1
 8006e44:	6393      	str	r3, [r2, #56]	; 0x38
 8006e46:	4b80      	ldr	r3, [pc, #512]	; (8007048 <BSP_SDRAM_MspInit+0x224>)
 8006e48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e4a:	f003 0301 	and.w	r3, r3, #1
 8006e4e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e50:	6abb      	ldr	r3, [r7, #40]	; 0x28

    /* Enable chosen DMAx clock */
    __DMAx_CLK_ENABLE();
 8006e52:	2300      	movs	r3, #0
 8006e54:	627b      	str	r3, [r7, #36]	; 0x24
 8006e56:	4b7c      	ldr	r3, [pc, #496]	; (8007048 <BSP_SDRAM_MspInit+0x224>)
 8006e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e5a:	4a7b      	ldr	r2, [pc, #492]	; (8007048 <BSP_SDRAM_MspInit+0x224>)
 8006e5c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006e60:	6313      	str	r3, [r2, #48]	; 0x30
 8006e62:	4b79      	ldr	r3, [pc, #484]	; (8007048 <BSP_SDRAM_MspInit+0x224>)
 8006e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e6a:	627b      	str	r3, [r7, #36]	; 0x24
 8006e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    /* Enable GPIOs clock */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006e6e:	2300      	movs	r3, #0
 8006e70:	623b      	str	r3, [r7, #32]
 8006e72:	4b75      	ldr	r3, [pc, #468]	; (8007048 <BSP_SDRAM_MspInit+0x224>)
 8006e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e76:	4a74      	ldr	r2, [pc, #464]	; (8007048 <BSP_SDRAM_MspInit+0x224>)
 8006e78:	f043 0304 	orr.w	r3, r3, #4
 8006e7c:	6313      	str	r3, [r2, #48]	; 0x30
 8006e7e:	4b72      	ldr	r3, [pc, #456]	; (8007048 <BSP_SDRAM_MspInit+0x224>)
 8006e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e82:	f003 0304 	and.w	r3, r3, #4
 8006e86:	623b      	str	r3, [r7, #32]
 8006e88:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	61fb      	str	r3, [r7, #28]
 8006e8e:	4b6e      	ldr	r3, [pc, #440]	; (8007048 <BSP_SDRAM_MspInit+0x224>)
 8006e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e92:	4a6d      	ldr	r2, [pc, #436]	; (8007048 <BSP_SDRAM_MspInit+0x224>)
 8006e94:	f043 0308 	orr.w	r3, r3, #8
 8006e98:	6313      	str	r3, [r2, #48]	; 0x30
 8006e9a:	4b6b      	ldr	r3, [pc, #428]	; (8007048 <BSP_SDRAM_MspInit+0x224>)
 8006e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e9e:	f003 0308 	and.w	r3, r3, #8
 8006ea2:	61fb      	str	r3, [r7, #28]
 8006ea4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	61bb      	str	r3, [r7, #24]
 8006eaa:	4b67      	ldr	r3, [pc, #412]	; (8007048 <BSP_SDRAM_MspInit+0x224>)
 8006eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eae:	4a66      	ldr	r2, [pc, #408]	; (8007048 <BSP_SDRAM_MspInit+0x224>)
 8006eb0:	f043 0310 	orr.w	r3, r3, #16
 8006eb4:	6313      	str	r3, [r2, #48]	; 0x30
 8006eb6:	4b64      	ldr	r3, [pc, #400]	; (8007048 <BSP_SDRAM_MspInit+0x224>)
 8006eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eba:	f003 0310 	and.w	r3, r3, #16
 8006ebe:	61bb      	str	r3, [r7, #24]
 8006ec0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	617b      	str	r3, [r7, #20]
 8006ec6:	4b60      	ldr	r3, [pc, #384]	; (8007048 <BSP_SDRAM_MspInit+0x224>)
 8006ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eca:	4a5f      	ldr	r2, [pc, #380]	; (8007048 <BSP_SDRAM_MspInit+0x224>)
 8006ecc:	f043 0320 	orr.w	r3, r3, #32
 8006ed0:	6313      	str	r3, [r2, #48]	; 0x30
 8006ed2:	4b5d      	ldr	r3, [pc, #372]	; (8007048 <BSP_SDRAM_MspInit+0x224>)
 8006ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ed6:	f003 0320 	and.w	r3, r3, #32
 8006eda:	617b      	str	r3, [r7, #20]
 8006edc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8006ede:	2300      	movs	r3, #0
 8006ee0:	613b      	str	r3, [r7, #16]
 8006ee2:	4b59      	ldr	r3, [pc, #356]	; (8007048 <BSP_SDRAM_MspInit+0x224>)
 8006ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ee6:	4a58      	ldr	r2, [pc, #352]	; (8007048 <BSP_SDRAM_MspInit+0x224>)
 8006ee8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006eec:	6313      	str	r3, [r2, #48]	; 0x30
 8006eee:	4b56      	ldr	r3, [pc, #344]	; (8007048 <BSP_SDRAM_MspInit+0x224>)
 8006ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ef2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ef6:	613b      	str	r3, [r7, #16]
 8006ef8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8006efa:	2300      	movs	r3, #0
 8006efc:	60fb      	str	r3, [r7, #12]
 8006efe:	4b52      	ldr	r3, [pc, #328]	; (8007048 <BSP_SDRAM_MspInit+0x224>)
 8006f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f02:	4a51      	ldr	r2, [pc, #324]	; (8007048 <BSP_SDRAM_MspInit+0x224>)
 8006f04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f08:	6313      	str	r3, [r2, #48]	; 0x30
 8006f0a:	4b4f      	ldr	r3, [pc, #316]	; (8007048 <BSP_SDRAM_MspInit+0x224>)
 8006f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f12:	60fb      	str	r3, [r7, #12]
 8006f14:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8006f16:	2300      	movs	r3, #0
 8006f18:	60bb      	str	r3, [r7, #8]
 8006f1a:	4b4b      	ldr	r3, [pc, #300]	; (8007048 <BSP_SDRAM_MspInit+0x224>)
 8006f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f1e:	4a4a      	ldr	r2, [pc, #296]	; (8007048 <BSP_SDRAM_MspInit+0x224>)
 8006f20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f24:	6313      	str	r3, [r2, #48]	; 0x30
 8006f26:	4b48      	ldr	r3, [pc, #288]	; (8007048 <BSP_SDRAM_MspInit+0x224>)
 8006f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f2e:	60bb      	str	r3, [r7, #8]
 8006f30:	68bb      	ldr	r3, [r7, #8]

    /* Common GPIO configuration */
    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8006f32:	2302      	movs	r3, #2
 8006f34:	633b      	str	r3, [r7, #48]	; 0x30
    gpio_init_structure.Pull      = GPIO_PULLUP;
 8006f36:	2301      	movs	r3, #1
 8006f38:	637b      	str	r3, [r7, #52]	; 0x34
    gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8006f3a:	2302      	movs	r3, #2
 8006f3c:	63bb      	str	r3, [r7, #56]	; 0x38
    gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8006f3e:	230c      	movs	r3, #12
 8006f40:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* GPIOC configuration : PC0 is SDNWE */
    gpio_init_structure.Pin   = GPIO_PIN_0;
 8006f42:	2301      	movs	r3, #1
 8006f44:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8006f46:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006f4a:	4619      	mov	r1, r3
 8006f4c:	483f      	ldr	r0, [pc, #252]	; (800704c <BSP_SDRAM_MspInit+0x228>)
 8006f4e:	f7fa fe35 	bl	8001bbc <HAL_GPIO_Init>

    /* GPIOD configuration */
    gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 8006f52:	f24c 7303 	movw	r3, #50947	; 0xc703
 8006f56:	62fb      	str	r3, [r7, #44]	; 0x2c
                                GPIO_PIN_14 | GPIO_PIN_15;


    HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8006f58:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006f5c:	4619      	mov	r1, r3
 8006f5e:	483c      	ldr	r0, [pc, #240]	; (8007050 <BSP_SDRAM_MspInit+0x22c>)
 8006f60:	f7fa fe2c 	bl	8001bbc <HAL_GPIO_Init>

    /* GPIOE configuration */
    gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8006f64:	f64f 7383 	movw	r3, #65411	; 0xff83
 8006f68:	62fb      	str	r3, [r7, #44]	; 0x2c
                                GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                                GPIO_PIN_15;

    HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8006f6a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006f6e:	4619      	mov	r1, r3
 8006f70:	4838      	ldr	r0, [pc, #224]	; (8007054 <BSP_SDRAM_MspInit+0x230>)
 8006f72:	f7fa fe23 	bl	8001bbc <HAL_GPIO_Init>

    /* GPIOF configuration */
    gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8006f76:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8006f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
                                GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                                GPIO_PIN_15;

    HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8006f7c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006f80:	4619      	mov	r1, r3
 8006f82:	4835      	ldr	r0, [pc, #212]	; (8007058 <BSP_SDRAM_MspInit+0x234>)
 8006f84:	f7fa fe1a 	bl	8001bbc <HAL_GPIO_Init>

    /* GPIOG configuration */
    gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8006f88:	f248 1333 	movw	r3, #33075	; 0x8133
 8006f8c:	62fb      	str	r3, [r7, #44]	; 0x2c
                                GPIO_PIN_15;
    HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8006f8e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006f92:	4619      	mov	r1, r3
 8006f94:	4831      	ldr	r0, [pc, #196]	; (800705c <BSP_SDRAM_MspInit+0x238>)
 8006f96:	f7fa fe11 	bl	8001bbc <HAL_GPIO_Init>

    /* GPIOH configuration */
    gpio_init_structure.Pin   = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_8 | GPIO_PIN_9 |\
 8006f9a:	f64f 730c 	movw	r3, #65292	; 0xff0c
 8006f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
                                GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                                GPIO_PIN_15;
    HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 8006fa0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006fa4:	4619      	mov	r1, r3
 8006fa6:	482e      	ldr	r0, [pc, #184]	; (8007060 <BSP_SDRAM_MspInit+0x23c>)
 8006fa8:	f7fa fe08 	bl	8001bbc <HAL_GPIO_Init>

    /* GPIOI configuration */
    gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8006fac:	f240 63ff 	movw	r3, #1791	; 0x6ff
 8006fb0:	62fb      	str	r3, [r7, #44]	; 0x2c
                                GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_9 | GPIO_PIN_10;
    HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8006fb2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006fb6:	4619      	mov	r1, r3
 8006fb8:	482a      	ldr	r0, [pc, #168]	; (8007064 <BSP_SDRAM_MspInit+0x240>)
 8006fba:	f7fa fdff 	bl	8001bbc <HAL_GPIO_Init>

    /* Configure common DMA parameters */
    dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8006fbe:	4b2a      	ldr	r3, [pc, #168]	; (8007068 <BSP_SDRAM_MspInit+0x244>)
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	605a      	str	r2, [r3, #4]
    dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8006fc4:	4b28      	ldr	r3, [pc, #160]	; (8007068 <BSP_SDRAM_MspInit+0x244>)
 8006fc6:	2280      	movs	r2, #128	; 0x80
 8006fc8:	609a      	str	r2, [r3, #8]
    dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8006fca:	4b27      	ldr	r3, [pc, #156]	; (8007068 <BSP_SDRAM_MspInit+0x244>)
 8006fcc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006fd0:	60da      	str	r2, [r3, #12]
    dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8006fd2:	4b25      	ldr	r3, [pc, #148]	; (8007068 <BSP_SDRAM_MspInit+0x244>)
 8006fd4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006fd8:	611a      	str	r2, [r3, #16]
    dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006fda:	4b23      	ldr	r3, [pc, #140]	; (8007068 <BSP_SDRAM_MspInit+0x244>)
 8006fdc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006fe0:	615a      	str	r2, [r3, #20]
    dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8006fe2:	4b21      	ldr	r3, [pc, #132]	; (8007068 <BSP_SDRAM_MspInit+0x244>)
 8006fe4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006fe8:	619a      	str	r2, [r3, #24]
    dma_handle.Init.Mode                = DMA_NORMAL;
 8006fea:	4b1f      	ldr	r3, [pc, #124]	; (8007068 <BSP_SDRAM_MspInit+0x244>)
 8006fec:	2200      	movs	r2, #0
 8006fee:	61da      	str	r2, [r3, #28]
    dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8006ff0:	4b1d      	ldr	r3, [pc, #116]	; (8007068 <BSP_SDRAM_MspInit+0x244>)
 8006ff2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006ff6:	621a      	str	r2, [r3, #32]
    dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8006ff8:	4b1b      	ldr	r3, [pc, #108]	; (8007068 <BSP_SDRAM_MspInit+0x244>)
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	625a      	str	r2, [r3, #36]	; 0x24
    dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8006ffe:	4b1a      	ldr	r3, [pc, #104]	; (8007068 <BSP_SDRAM_MspInit+0x244>)
 8007000:	2203      	movs	r2, #3
 8007002:	629a      	str	r2, [r3, #40]	; 0x28
    dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8007004:	4b18      	ldr	r3, [pc, #96]	; (8007068 <BSP_SDRAM_MspInit+0x244>)
 8007006:	2200      	movs	r2, #0
 8007008:	62da      	str	r2, [r3, #44]	; 0x2c
    dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE;
 800700a:	4b17      	ldr	r3, [pc, #92]	; (8007068 <BSP_SDRAM_MspInit+0x244>)
 800700c:	2200      	movs	r2, #0
 800700e:	631a      	str	r2, [r3, #48]	; 0x30

    dma_handle.Instance = SDRAM_DMAx_STREAM;
 8007010:	4b15      	ldr	r3, [pc, #84]	; (8007068 <BSP_SDRAM_MspInit+0x244>)
 8007012:	4a16      	ldr	r2, [pc, #88]	; (800706c <BSP_SDRAM_MspInit+0x248>)
 8007014:	601a      	str	r2, [r3, #0]

    /* Associate the DMA handle */
    __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	4a13      	ldr	r2, [pc, #76]	; (8007068 <BSP_SDRAM_MspInit+0x244>)
 800701a:	631a      	str	r2, [r3, #48]	; 0x30
 800701c:	4a12      	ldr	r2, [pc, #72]	; (8007068 <BSP_SDRAM_MspInit+0x244>)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6393      	str	r3, [r2, #56]	; 0x38

    /* Deinitialize the stream for new transfer */
    HAL_DMA_DeInit(&dma_handle);
 8007022:	4811      	ldr	r0, [pc, #68]	; (8007068 <BSP_SDRAM_MspInit+0x244>)
 8007024:	f7f9 fcc4 	bl	80009b0 <HAL_DMA_DeInit>

    /* Configure the DMA stream */
    HAL_DMA_Init(&dma_handle);
 8007028:	480f      	ldr	r0, [pc, #60]	; (8007068 <BSP_SDRAM_MspInit+0x244>)
 800702a:	f7f9 fc13 	bl	8000854 <HAL_DMA_Init>

    /* NVIC configuration for DMA transfer complete interrupt */
    HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 5, 0);
 800702e:	2200      	movs	r2, #0
 8007030:	2105      	movs	r1, #5
 8007032:	2038      	movs	r0, #56	; 0x38
 8007034:	f7f9 fbcb 	bl	80007ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8007038:	2038      	movs	r0, #56	; 0x38
 800703a:	f7f9 fbe4 	bl	8000806 <HAL_NVIC_EnableIRQ>

  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 800703e:	bf00      	nop
 8007040:	3740      	adds	r7, #64	; 0x40
 8007042:	46bd      	mov	sp, r7
 8007044:	bd80      	pop	{r7, pc}
 8007046:	bf00      	nop
 8007048:	40023800 	.word	0x40023800
 800704c:	40020800 	.word	0x40020800
 8007050:	40020c00 	.word	0x40020c00
 8007054:	40021000 	.word	0x40021000
 8007058:	40021400 	.word	0x40021400
 800705c:	40021800 	.word	0x40021800
 8007060:	40021c00 	.word	0x40021c00
 8007064:	40022000 	.word	0x40022000
 8007068:	2000027c 	.word	0x2000027c
 800706c:	40026410 	.word	0x40026410

08007070 <BSP_TS_Init>:
  * @param  ts_SizeX : Maximum X size of the TS area on LCD
  * @param  ts_SizeY : Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b084      	sub	sp, #16
 8007074:	af00      	add	r7, sp, #0
 8007076:	4603      	mov	r3, r0
 8007078:	460a      	mov	r2, r1
 800707a:	80fb      	strh	r3, [r7, #6]
 800707c:	4613      	mov	r3, r2
 800707e:	80bb      	strh	r3, [r7, #4]
  uint8_t ts_status = TS_OK;
 8007080:	2300      	movs	r3, #0
 8007082:	73fb      	strb	r3, [r7, #15]
  uint8_t ts_id1, ts_id2 = 0;
 8007084:	2300      	movs	r3, #0
 8007086:	73bb      	strb	r3, [r7, #14]
  /* Note : I2C_Address is un-initialized here, but is not used at all in init function */
  /* but the prototype of Init() is like that in template and should be respected       */

  /* Initialize the communication channel to sensor (I2C) if necessary */
  /* that is initialization is done only once after a power up         */
  ft6x06_ts_drv.Init(I2C_Address);
 8007088:	4b25      	ldr	r3, [pc, #148]	; (8007120 <BSP_TS_Init+0xb0>)
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	4a25      	ldr	r2, [pc, #148]	; (8007124 <BSP_TS_Init+0xb4>)
 800708e:	7812      	ldrb	r2, [r2, #0]
 8007090:	b292      	uxth	r2, r2
 8007092:	4610      	mov	r0, r2
 8007094:	4798      	blx	r3

  ts_id1 = ft6x06_ts_drv.ReadID(TS_I2C_ADDRESS);
 8007096:	4b22      	ldr	r3, [pc, #136]	; (8007120 <BSP_TS_Init+0xb0>)
 8007098:	685b      	ldr	r3, [r3, #4]
 800709a:	2054      	movs	r0, #84	; 0x54
 800709c:	4798      	blx	r3
 800709e:	4603      	mov	r3, r0
 80070a0:	737b      	strb	r3, [r7, #13]
  if(ts_id1 != FT6206_ID_VALUE)
 80070a2:	7b7b      	ldrb	r3, [r7, #13]
 80070a4:	2b11      	cmp	r3, #17
 80070a6:	d009      	beq.n	80070bc <BSP_TS_Init+0x4c>
  {
    ts_id2 = ft6x06_ts_drv.ReadID(TS_I2C_ADDRESS_A02);
 80070a8:	4b1d      	ldr	r3, [pc, #116]	; (8007120 <BSP_TS_Init+0xb0>)
 80070aa:	685b      	ldr	r3, [r3, #4]
 80070ac:	2070      	movs	r0, #112	; 0x70
 80070ae:	4798      	blx	r3
 80070b0:	4603      	mov	r3, r0
 80070b2:	73bb      	strb	r3, [r7, #14]
    I2C_Address    = TS_I2C_ADDRESS_A02;    
 80070b4:	4b1b      	ldr	r3, [pc, #108]	; (8007124 <BSP_TS_Init+0xb4>)
 80070b6:	2270      	movs	r2, #112	; 0x70
 80070b8:	701a      	strb	r2, [r3, #0]
 80070ba:	e002      	b.n	80070c2 <BSP_TS_Init+0x52>
  }
  else
  {
    I2C_Address    = TS_I2C_ADDRESS;    
 80070bc:	4b19      	ldr	r3, [pc, #100]	; (8007124 <BSP_TS_Init+0xb4>)
 80070be:	2254      	movs	r2, #84	; 0x54
 80070c0:	701a      	strb	r2, [r3, #0]
  }
  
  /* Scan FT6xx6 TouchScreen IC controller ID register by I2C Read       */
  /* Verify this is a FT6206 or FT6336G, otherwise this is an error case */
  if((ts_id1 == FT6206_ID_VALUE) || (ts_id2 == FT6206_ID_VALUE))
 80070c2:	7b7b      	ldrb	r3, [r7, #13]
 80070c4:	2b11      	cmp	r3, #17
 80070c6:	d002      	beq.n	80070ce <BSP_TS_Init+0x5e>
 80070c8:	7bbb      	ldrb	r3, [r7, #14]
 80070ca:	2b11      	cmp	r3, #17
 80070cc:	d121      	bne.n	8007112 <BSP_TS_Init+0xa2>
  {
    /* Found FT6206 : Initialize the TS driver structure */
    ts_driver = &ft6x06_ts_drv;
 80070ce:	4b16      	ldr	r3, [pc, #88]	; (8007128 <BSP_TS_Init+0xb8>)
 80070d0:	4a13      	ldr	r2, [pc, #76]	; (8007120 <BSP_TS_Init+0xb0>)
 80070d2:	601a      	str	r2, [r3, #0]

    /* Get LCD chosen orientation */
    if(ts_SizeX < ts_SizeY)
 80070d4:	88fa      	ldrh	r2, [r7, #6]
 80070d6:	88bb      	ldrh	r3, [r7, #4]
 80070d8:	429a      	cmp	r2, r3
 80070da:	d203      	bcs.n	80070e4 <BSP_TS_Init+0x74>
    {
      ts_orientation = TS_SWAP_NONE;                
 80070dc:	4b13      	ldr	r3, [pc, #76]	; (800712c <BSP_TS_Init+0xbc>)
 80070de:	2201      	movs	r2, #1
 80070e0:	701a      	strb	r2, [r3, #0]
 80070e2:	e002      	b.n	80070ea <BSP_TS_Init+0x7a>
    }
    else
    {
      ts_orientation = TS_SWAP_XY | TS_SWAP_Y;                 
 80070e4:	4b11      	ldr	r3, [pc, #68]	; (800712c <BSP_TS_Init+0xbc>)
 80070e6:	220c      	movs	r2, #12
 80070e8:	701a      	strb	r2, [r3, #0]
    }

    if(ts_status == TS_OK)
 80070ea:	7bfb      	ldrb	r3, [r7, #15]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d112      	bne.n	8007116 <BSP_TS_Init+0xa6>
    {
      /* Software reset the TouchScreen */
      ts_driver->Reset(I2C_Address);
 80070f0:	4b0d      	ldr	r3, [pc, #52]	; (8007128 <BSP_TS_Init+0xb8>)
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	689b      	ldr	r3, [r3, #8]
 80070f6:	4a0b      	ldr	r2, [pc, #44]	; (8007124 <BSP_TS_Init+0xb4>)
 80070f8:	7812      	ldrb	r2, [r2, #0]
 80070fa:	b292      	uxth	r2, r2
 80070fc:	4610      	mov	r0, r2
 80070fe:	4798      	blx	r3

      /* Calibrate, Configure and Start the TouchScreen driver */
      ts_driver->Start(I2C_Address);
 8007100:	4b09      	ldr	r3, [pc, #36]	; (8007128 <BSP_TS_Init+0xb8>)
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	68db      	ldr	r3, [r3, #12]
 8007106:	4a07      	ldr	r2, [pc, #28]	; (8007124 <BSP_TS_Init+0xb4>)
 8007108:	7812      	ldrb	r2, [r2, #0]
 800710a:	b292      	uxth	r2, r2
 800710c:	4610      	mov	r0, r2
 800710e:	4798      	blx	r3
    if(ts_status == TS_OK)
 8007110:	e001      	b.n	8007116 <BSP_TS_Init+0xa6>

    } /* of if(ts_status == TS_OK) */
  }
  else
  {
    ts_status = TS_DEVICE_NOT_FOUND;
 8007112:	2303      	movs	r3, #3
 8007114:	73fb      	strb	r3, [r7, #15]
  }

  return (ts_status);
 8007116:	7bfb      	ldrb	r3, [r7, #15]
}
 8007118:	4618      	mov	r0, r3
 800711a:	3710      	adds	r7, #16
 800711c:	46bd      	mov	sp, r7
 800711e:	bd80      	pop	{r7, pc}
 8007120:	20000008 	.word	0x20000008
 8007124:	20000341 	.word	0x20000341
 8007128:	2000033c 	.word	0x2000033c
 800712c:	20000340 	.word	0x20000340

08007130 <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 8007130:	b590      	push	{r4, r7, lr}
 8007132:	b089      	sub	sp, #36	; 0x24
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
  static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
  static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
  uint8_t ts_status = TS_OK;
 8007138:	2300      	movs	r3, #0
 800713a:	76fb      	strb	r3, [r7, #27]
  uint32_t area = 0;
  uint32_t event = 0;
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = ts_driver->DetectTouch(I2C_Address);
 800713c:	4b89      	ldr	r3, [pc, #548]	; (8007364 <BSP_TS_GetState+0x234>)
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	691b      	ldr	r3, [r3, #16]
 8007142:	4a89      	ldr	r2, [pc, #548]	; (8007368 <BSP_TS_GetState+0x238>)
 8007144:	7812      	ldrb	r2, [r2, #0]
 8007146:	b292      	uxth	r2, r2
 8007148:	4610      	mov	r0, r2
 800714a:	4798      	blx	r3
 800714c:	4603      	mov	r3, r0
 800714e:	461a      	mov	r2, r3
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	701a      	strb	r2, [r3, #0]
  if(TS_State->touchDetected)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	781b      	ldrb	r3, [r3, #0]
 8007158:	2b00      	cmp	r3, #0
 800715a:	f000 80fe 	beq.w	800735a <BSP_TS_GetState+0x22a>
  {
    for(index=0; index < TS_State->touchDetected; index++)
 800715e:	2300      	movs	r3, #0
 8007160:	61fb      	str	r3, [r7, #28]
 8007162:	e0f3      	b.n	800734c <BSP_TS_GetState+0x21c>
    {
      /* Get each touch coordinates */
      ts_driver->GetXY(I2C_Address, &(Raw_x[index]), &(Raw_y[index]));
 8007164:	4b7f      	ldr	r3, [pc, #508]	; (8007364 <BSP_TS_GetState+0x234>)
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	695b      	ldr	r3, [r3, #20]
 800716a:	4a7f      	ldr	r2, [pc, #508]	; (8007368 <BSP_TS_GetState+0x238>)
 800716c:	7812      	ldrb	r2, [r2, #0]
 800716e:	b290      	uxth	r0, r2
 8007170:	f107 0110 	add.w	r1, r7, #16
 8007174:	69fa      	ldr	r2, [r7, #28]
 8007176:	0052      	lsls	r2, r2, #1
 8007178:	188c      	adds	r4, r1, r2
 800717a:	f107 010c 	add.w	r1, r7, #12
 800717e:	69fa      	ldr	r2, [r7, #28]
 8007180:	0052      	lsls	r2, r2, #1
 8007182:	440a      	add	r2, r1
 8007184:	4621      	mov	r1, r4
 8007186:	4798      	blx	r3

      if(ts_orientation & TS_SWAP_XY)
 8007188:	4b78      	ldr	r3, [pc, #480]	; (800736c <BSP_TS_GetState+0x23c>)
 800718a:	781b      	ldrb	r3, [r3, #0]
 800718c:	f003 0308 	and.w	r3, r3, #8
 8007190:	2b00      	cmp	r3, #0
 8007192:	d01d      	beq.n	80071d0 <BSP_TS_GetState+0xa0>
      {
        tmp = Raw_x[index];
 8007194:	69fb      	ldr	r3, [r7, #28]
 8007196:	005b      	lsls	r3, r3, #1
 8007198:	f107 0220 	add.w	r2, r7, #32
 800719c:	4413      	add	r3, r2
 800719e:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 80071a2:	833b      	strh	r3, [r7, #24]
        Raw_x[index] = Raw_y[index]; 
 80071a4:	69fb      	ldr	r3, [r7, #28]
 80071a6:	005b      	lsls	r3, r3, #1
 80071a8:	f107 0220 	add.w	r2, r7, #32
 80071ac:	4413      	add	r3, r2
 80071ae:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 80071b2:	69fb      	ldr	r3, [r7, #28]
 80071b4:	005b      	lsls	r3, r3, #1
 80071b6:	f107 0120 	add.w	r1, r7, #32
 80071ba:	440b      	add	r3, r1
 80071bc:	f823 2c10 	strh.w	r2, [r3, #-16]
        Raw_y[index] = tmp;
 80071c0:	69fb      	ldr	r3, [r7, #28]
 80071c2:	005b      	lsls	r3, r3, #1
 80071c4:	f107 0220 	add.w	r2, r7, #32
 80071c8:	4413      	add	r3, r2
 80071ca:	8b3a      	ldrh	r2, [r7, #24]
 80071cc:	f823 2c14 	strh.w	r2, [r3, #-20]
      }
      
      if(ts_orientation & TS_SWAP_X)
 80071d0:	4b66      	ldr	r3, [pc, #408]	; (800736c <BSP_TS_GetState+0x23c>)
 80071d2:	781b      	ldrb	r3, [r3, #0]
 80071d4:	f003 0302 	and.w	r3, r3, #2
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d011      	beq.n	8007200 <BSP_TS_GetState+0xd0>
      {
        Raw_x[index] = FT_6206_MAX_WIDTH - 1 - Raw_x[index];
 80071dc:	69fb      	ldr	r3, [r7, #28]
 80071de:	005b      	lsls	r3, r3, #1
 80071e0:	f107 0220 	add.w	r2, r7, #32
 80071e4:	4413      	add	r3, r2
 80071e6:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 80071ea:	f5c3 7347 	rsb	r3, r3, #796	; 0x31c
 80071ee:	3303      	adds	r3, #3
 80071f0:	b29a      	uxth	r2, r3
 80071f2:	69fb      	ldr	r3, [r7, #28]
 80071f4:	005b      	lsls	r3, r3, #1
 80071f6:	f107 0120 	add.w	r1, r7, #32
 80071fa:	440b      	add	r3, r1
 80071fc:	f823 2c10 	strh.w	r2, [r3, #-16]
      }

      if(ts_orientation & TS_SWAP_Y)
 8007200:	4b5a      	ldr	r3, [pc, #360]	; (800736c <BSP_TS_GetState+0x23c>)
 8007202:	781b      	ldrb	r3, [r3, #0]
 8007204:	f003 0304 	and.w	r3, r3, #4
 8007208:	2b00      	cmp	r3, #0
 800720a:	d011      	beq.n	8007230 <BSP_TS_GetState+0x100>
      {
        Raw_y[index] = FT_6206_MAX_HEIGHT - 1 - Raw_y[index];
 800720c:	69fb      	ldr	r3, [r7, #28]
 800720e:	005b      	lsls	r3, r3, #1
 8007210:	f107 0220 	add.w	r2, r7, #32
 8007214:	4413      	add	r3, r2
 8007216:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800721a:	f5c3 73ef 	rsb	r3, r3, #478	; 0x1de
 800721e:	3301      	adds	r3, #1
 8007220:	b29a      	uxth	r2, r3
 8007222:	69fb      	ldr	r3, [r7, #28]
 8007224:	005b      	lsls	r3, r3, #1
 8007226:	f107 0120 	add.w	r1, r7, #32
 800722a:	440b      	add	r3, r1
 800722c:	f823 2c14 	strh.w	r2, [r3, #-20]
      }
            
      xDiff = Raw_x[index] > _x[index]? (Raw_x[index] - _x[index]): (_x[index] - Raw_x[index]);
 8007230:	69fb      	ldr	r3, [r7, #28]
 8007232:	005b      	lsls	r3, r3, #1
 8007234:	f107 0220 	add.w	r2, r7, #32
 8007238:	4413      	add	r3, r2
 800723a:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 800723e:	4619      	mov	r1, r3
 8007240:	4a4b      	ldr	r2, [pc, #300]	; (8007370 <BSP_TS_GetState+0x240>)
 8007242:	69fb      	ldr	r3, [r7, #28]
 8007244:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007248:	4299      	cmp	r1, r3
 800724a:	d90e      	bls.n	800726a <BSP_TS_GetState+0x13a>
 800724c:	69fb      	ldr	r3, [r7, #28]
 800724e:	005b      	lsls	r3, r3, #1
 8007250:	f107 0220 	add.w	r2, r7, #32
 8007254:	4413      	add	r3, r2
 8007256:	f833 2c10 	ldrh.w	r2, [r3, #-16]
 800725a:	4945      	ldr	r1, [pc, #276]	; (8007370 <BSP_TS_GetState+0x240>)
 800725c:	69fb      	ldr	r3, [r7, #28]
 800725e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007262:	b29b      	uxth	r3, r3
 8007264:	1ad3      	subs	r3, r2, r3
 8007266:	b29b      	uxth	r3, r3
 8007268:	e00d      	b.n	8007286 <BSP_TS_GetState+0x156>
 800726a:	4a41      	ldr	r2, [pc, #260]	; (8007370 <BSP_TS_GetState+0x240>)
 800726c:	69fb      	ldr	r3, [r7, #28]
 800726e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007272:	b29a      	uxth	r2, r3
 8007274:	69fb      	ldr	r3, [r7, #28]
 8007276:	005b      	lsls	r3, r3, #1
 8007278:	f107 0120 	add.w	r1, r7, #32
 800727c:	440b      	add	r3, r1
 800727e:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 8007282:	1ad3      	subs	r3, r2, r3
 8007284:	b29b      	uxth	r3, r3
 8007286:	82fb      	strh	r3, [r7, #22]
      yDiff = Raw_y[index] > _y[index]? (Raw_y[index] - _y[index]): (_y[index] - Raw_y[index]);
 8007288:	69fb      	ldr	r3, [r7, #28]
 800728a:	005b      	lsls	r3, r3, #1
 800728c:	f107 0220 	add.w	r2, r7, #32
 8007290:	4413      	add	r3, r2
 8007292:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8007296:	4619      	mov	r1, r3
 8007298:	4a36      	ldr	r2, [pc, #216]	; (8007374 <BSP_TS_GetState+0x244>)
 800729a:	69fb      	ldr	r3, [r7, #28]
 800729c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80072a0:	4299      	cmp	r1, r3
 80072a2:	d90e      	bls.n	80072c2 <BSP_TS_GetState+0x192>
 80072a4:	69fb      	ldr	r3, [r7, #28]
 80072a6:	005b      	lsls	r3, r3, #1
 80072a8:	f107 0220 	add.w	r2, r7, #32
 80072ac:	4413      	add	r3, r2
 80072ae:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 80072b2:	4930      	ldr	r1, [pc, #192]	; (8007374 <BSP_TS_GetState+0x244>)
 80072b4:	69fb      	ldr	r3, [r7, #28]
 80072b6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80072ba:	b29b      	uxth	r3, r3
 80072bc:	1ad3      	subs	r3, r2, r3
 80072be:	b29b      	uxth	r3, r3
 80072c0:	e00d      	b.n	80072de <BSP_TS_GetState+0x1ae>
 80072c2:	4a2c      	ldr	r2, [pc, #176]	; (8007374 <BSP_TS_GetState+0x244>)
 80072c4:	69fb      	ldr	r3, [r7, #28]
 80072c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80072ca:	b29a      	uxth	r2, r3
 80072cc:	69fb      	ldr	r3, [r7, #28]
 80072ce:	005b      	lsls	r3, r3, #1
 80072d0:	f107 0120 	add.w	r1, r7, #32
 80072d4:	440b      	add	r3, r1
 80072d6:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80072da:	1ad3      	subs	r3, r2, r3
 80072dc:	b29b      	uxth	r3, r3
 80072de:	82bb      	strh	r3, [r7, #20]

      if ((xDiff + yDiff) > 5)
 80072e0:	8afa      	ldrh	r2, [r7, #22]
 80072e2:	8abb      	ldrh	r3, [r7, #20]
 80072e4:	4413      	add	r3, r2
 80072e6:	2b05      	cmp	r3, #5
 80072e8:	dd17      	ble.n	800731a <BSP_TS_GetState+0x1ea>
      {
        _x[index] = Raw_x[index];
 80072ea:	69fb      	ldr	r3, [r7, #28]
 80072ec:	005b      	lsls	r3, r3, #1
 80072ee:	f107 0220 	add.w	r2, r7, #32
 80072f2:	4413      	add	r3, r2
 80072f4:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 80072f8:	4619      	mov	r1, r3
 80072fa:	4a1d      	ldr	r2, [pc, #116]	; (8007370 <BSP_TS_GetState+0x240>)
 80072fc:	69fb      	ldr	r3, [r7, #28]
 80072fe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = Raw_y[index];
 8007302:	69fb      	ldr	r3, [r7, #28]
 8007304:	005b      	lsls	r3, r3, #1
 8007306:	f107 0220 	add.w	r2, r7, #32
 800730a:	4413      	add	r3, r2
 800730c:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8007310:	4619      	mov	r1, r3
 8007312:	4a18      	ldr	r2, [pc, #96]	; (8007374 <BSP_TS_GetState+0x244>)
 8007314:	69fb      	ldr	r3, [r7, #28]
 8007316:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }


      TS_State->touchX[index] = _x[index];
 800731a:	4a15      	ldr	r2, [pc, #84]	; (8007370 <BSP_TS_GetState+0x240>)
 800731c:	69fb      	ldr	r3, [r7, #28]
 800731e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007322:	b299      	uxth	r1, r3
 8007324:	687a      	ldr	r2, [r7, #4]
 8007326:	69fb      	ldr	r3, [r7, #28]
 8007328:	005b      	lsls	r3, r3, #1
 800732a:	4413      	add	r3, r2
 800732c:	460a      	mov	r2, r1
 800732e:	805a      	strh	r2, [r3, #2]
      TS_State->touchY[index] = _y[index];
 8007330:	4a10      	ldr	r2, [pc, #64]	; (8007374 <BSP_TS_GetState+0x244>)
 8007332:	69fb      	ldr	r3, [r7, #28]
 8007334:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007338:	b299      	uxth	r1, r3
 800733a:	687a      	ldr	r2, [r7, #4]
 800733c:	69fb      	ldr	r3, [r7, #28]
 800733e:	005b      	lsls	r3, r3, #1
 8007340:	4413      	add	r3, r2
 8007342:	460a      	mov	r2, r1
 8007344:	80da      	strh	r2, [r3, #6]
    for(index=0; index < TS_State->touchDetected; index++)
 8007346:	69fb      	ldr	r3, [r7, #28]
 8007348:	3301      	adds	r3, #1
 800734a:	61fb      	str	r3, [r7, #28]
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	781b      	ldrb	r3, [r3, #0]
 8007350:	461a      	mov	r2, r3
 8007352:	69fb      	ldr	r3, [r7, #28]
 8007354:	4293      	cmp	r3, r2
 8007356:	f4ff af05 	bcc.w	8007164 <BSP_TS_GetState+0x34>
    ts_status = BSP_TS_Get_GestureId(TS_State);
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
 800735a:	7efb      	ldrb	r3, [r7, #27]
}
 800735c:	4618      	mov	r0, r3
 800735e:	3724      	adds	r7, #36	; 0x24
 8007360:	46bd      	mov	sp, r7
 8007362:	bd90      	pop	{r4, r7, pc}
 8007364:	2000033c 	.word	0x2000033c
 8007368:	20000341 	.word	0x20000341
 800736c:	20000340 	.word	0x20000340
 8007370:	20000344 	.word	0x20000344
 8007374:	2000034c 	.word	0x2000034c

08007378 <main>:
void debugPrint(UART_HandleTypeDef *huart, char _out[]);


/* Private user code ---------------------------------------------------------*/
int main(void)
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b084      	sub	sp, #16
 800737c:	af00      	add	r7, sp, #0

	__HAL_RCC_USART6_CLK_ENABLE();
 800737e:	2300      	movs	r3, #0
 8007380:	603b      	str	r3, [r7, #0]
 8007382:	4b4e      	ldr	r3, [pc, #312]	; (80074bc <main+0x144>)
 8007384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007386:	4a4d      	ldr	r2, [pc, #308]	; (80074bc <main+0x144>)
 8007388:	f043 0320 	orr.w	r3, r3, #32
 800738c:	6453      	str	r3, [r2, #68]	; 0x44
 800738e:	4b4b      	ldr	r3, [pc, #300]	; (80074bc <main+0x144>)
 8007390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007392:	f003 0320 	and.w	r3, r3, #32
 8007396:	603b      	str	r3, [r7, #0]
 8007398:	683b      	ldr	r3, [r7, #0]

	uint8_t  	lcd_status = LCD_OK;
 800739a:	2300      	movs	r3, #0
 800739c:	71fb      	strb	r3, [r7, #7]


	uint32_t	penDrawX = 0;
 800739e:	2300      	movs	r3, #0
 80073a0:	60fb      	str	r3, [r7, #12]
	uint32_t	penDrawY = 0;
 80073a2:	2300      	movs	r3, #0
 80073a4:	60bb      	str	r3, [r7, #8]


	HAL_Init();
 80073a6:	f7f9 f8a1 	bl	80004ec <HAL_Init>


	SystemClock_Config();
 80073aa:	f000 f897 	bl	80074dc <SystemClock_Config>

	MX_GPIO_Init();
 80073ae:	f000 f905 	bl	80075bc <MX_GPIO_Init>
	MX_NVIC_Init();
 80073b2:	f000 fc61 	bl	8007c78 <MX_NVIC_Init>

	UART_Init();
 80073b6:	f000 fc6b 	bl	8007c90 <UART_Init>

	lcd_status = BSP_LCD_Init();
 80073ba:	f7fe fd58 	bl	8005e6e <BSP_LCD_Init>
 80073be:	4603      	mov	r3, r0
 80073c0:	71fb      	strb	r3, [r7, #7]

	if(lcd_status != LCD_OK)
 80073c2:	79fb      	ldrb	r3, [r7, #7]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d001      	beq.n	80073cc <main+0x54>
	{
		Error_Handler();
 80073c8:	f000 fc9e 	bl	8007d08 <Error_Handler>
	}



	HAL_UART_Receive_IT(&huart6, &databyte  , 1);
 80073cc:	2201      	movs	r2, #1
 80073ce:	493c      	ldr	r1, [pc, #240]	; (80074c0 <main+0x148>)
 80073d0:	483c      	ldr	r0, [pc, #240]	; (80074c4 <main+0x14c>)
 80073d2:	f7fd f9f4 	bl	80047be <HAL_UART_Receive_IT>


	BSP_LCD_LayerDefaultInit(0, LAYER0_ADDRESS);
 80073d6:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 80073da:	2000      	movs	r0, #0
 80073dc:	f7fe fee8 	bl	80061b0 <BSP_LCD_LayerDefaultInit>
	BSP_LCD_SelectLayer(0);
 80073e0:	2000      	movs	r0, #0
 80073e2:	f7fe ff45 	bl	8006270 <BSP_LCD_SelectLayer>

	BSP_TS_Init(DISPLAY_SIZE_X, DISPLAY_SIZE_Y);
 80073e6:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 80073ea:	f44f 7048 	mov.w	r0, #800	; 0x320
 80073ee:	f7ff fe3f 	bl	8007070 <BSP_TS_Init>
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 80073f2:	f04f 30ff 	mov.w	r0, #4294967295
 80073f6:	f7fe ff97 	bl	8006328 <BSP_LCD_Clear>
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 80073fa:	f04f 30ff 	mov.w	r0, #4294967295
 80073fe:	f7fe ff5f 	bl	80062c0 <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8007402:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8007406:	f7fe ff43 	bl	8006290 <BSP_LCD_SetTextColor>

	BSP_LCD_SetFont(&Font20);
 800740a:	482f      	ldr	r0, [pc, #188]	; (80074c8 <main+0x150>)
 800740c:	f7fe ff72 	bl	80062f4 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(0, 200, (uint8_t*) "lesgoo", CENTER_MODE);
 8007410:	2301      	movs	r3, #1
 8007412:	4a2e      	ldr	r2, [pc, #184]	; (80074cc <main+0x154>)
 8007414:	21c8      	movs	r1, #200	; 0xc8
 8007416:	2000      	movs	r0, #0
 8007418:	f7fe fff2 	bl	8006400 <BSP_LCD_DisplayStringAt>


	BSP_LCD_SetBackColor(LCD_COLOR_GRAY);
 800741c:	482c      	ldr	r0, [pc, #176]	; (80074d0 <main+0x158>)
 800741e:	f7fe ff4f 	bl	80062c0 <BSP_LCD_SetBackColor>
	BSP_LCD_DisplayOn();
 8007422:	f7ff fa7d 	bl	8006920 <BSP_LCD_DisplayOn>
		/*
		HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_6);
		HAL_Delay(500);
		*/

		BSP_TS_GetState(&TS_State);
 8007426:	482b      	ldr	r0, [pc, #172]	; (80074d4 <main+0x15c>)
 8007428:	f7ff fe82 	bl	8007130 <BSP_TS_GetState>

		if(TS_State.touchDetected)
 800742c:	4b29      	ldr	r3, [pc, #164]	; (80074d4 <main+0x15c>)
 800742e:	781b      	ldrb	r3, [r3, #0]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d03d      	beq.n	80074b0 <main+0x138>
		{
			penDrawX = 0;
 8007434:	2300      	movs	r3, #0
 8007436:	60fb      	str	r3, [r7, #12]
			penDrawY = 0;
 8007438:	2300      	movs	r3, #0
 800743a:	60bb      	str	r3, [r7, #8]

			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 800743c:	2200      	movs	r2, #0
 800743e:	2140      	movs	r1, #64	; 0x40
 8007440:	4825      	ldr	r0, [pc, #148]	; (80074d8 <main+0x160>)
 8007442:	f7fa fe73 	bl	800212c <HAL_GPIO_WritePin>

			if(TS_State.touchX[0] < CIRCLE_RADIUS)
 8007446:	4b23      	ldr	r3, [pc, #140]	; (80074d4 <main+0x15c>)
 8007448:	885b      	ldrh	r3, [r3, #2]
 800744a:	2b0f      	cmp	r3, #15
 800744c:	d804      	bhi.n	8007458 <main+0xe0>
			{
				penDrawX = TS_State.touchX[0] + CIRCLE_RADIUS + 3;
 800744e:	4b21      	ldr	r3, [pc, #132]	; (80074d4 <main+0x15c>)
 8007450:	885b      	ldrh	r3, [r3, #2]
 8007452:	3313      	adds	r3, #19
 8007454:	60fb      	str	r3, [r7, #12]
 8007456:	e00c      	b.n	8007472 <main+0xfa>
			}
			else if(TS_State.touchX[0] > DISPLAY_SIZE_X - CIRCLE_RADIUS)
 8007458:	4b1e      	ldr	r3, [pc, #120]	; (80074d4 <main+0x15c>)
 800745a:	885b      	ldrh	r3, [r3, #2]
 800745c:	f5b3 7f44 	cmp.w	r3, #784	; 0x310
 8007460:	d904      	bls.n	800746c <main+0xf4>
			{
				penDrawX = TS_State.touchX[0] - CIRCLE_RADIUS - 3;
 8007462:	4b1c      	ldr	r3, [pc, #112]	; (80074d4 <main+0x15c>)
 8007464:	885b      	ldrh	r3, [r3, #2]
 8007466:	3b13      	subs	r3, #19
 8007468:	60fb      	str	r3, [r7, #12]
 800746a:	e002      	b.n	8007472 <main+0xfa>
			}
			else
			{
				penDrawX = TS_State.touchX[0];
 800746c:	4b19      	ldr	r3, [pc, #100]	; (80074d4 <main+0x15c>)
 800746e:	885b      	ldrh	r3, [r3, #2]
 8007470:	60fb      	str	r3, [r7, #12]
			}
			if(TS_State.touchY[0] < CIRCLE_RADIUS)
 8007472:	4b18      	ldr	r3, [pc, #96]	; (80074d4 <main+0x15c>)
 8007474:	88db      	ldrh	r3, [r3, #6]
 8007476:	2b0f      	cmp	r3, #15
 8007478:	d804      	bhi.n	8007484 <main+0x10c>
			{
				penDrawY = TS_State.touchY[0] + CIRCLE_RADIUS + 3;
 800747a:	4b16      	ldr	r3, [pc, #88]	; (80074d4 <main+0x15c>)
 800747c:	88db      	ldrh	r3, [r3, #6]
 800747e:	3313      	adds	r3, #19
 8007480:	60bb      	str	r3, [r7, #8]
 8007482:	e00c      	b.n	800749e <main+0x126>
			}
			else if(TS_State.touchY[0] > DISPLAY_SIZE_X - CIRCLE_RADIUS)
 8007484:	4b13      	ldr	r3, [pc, #76]	; (80074d4 <main+0x15c>)
 8007486:	88db      	ldrh	r3, [r3, #6]
 8007488:	f5b3 7f44 	cmp.w	r3, #784	; 0x310
 800748c:	d904      	bls.n	8007498 <main+0x120>
			{
				penDrawY = TS_State.touchY[0] - CIRCLE_RADIUS - 3;
 800748e:	4b11      	ldr	r3, [pc, #68]	; (80074d4 <main+0x15c>)
 8007490:	88db      	ldrh	r3, [r3, #6]
 8007492:	3b13      	subs	r3, #19
 8007494:	60bb      	str	r3, [r7, #8]
 8007496:	e002      	b.n	800749e <main+0x126>
			}
			else
			{
				penDrawY = TS_State.touchY[0];
 8007498:	4b0e      	ldr	r3, [pc, #56]	; (80074d4 <main+0x15c>)
 800749a:	88db      	ldrh	r3, [r3, #6]
 800749c:	60bb      	str	r3, [r7, #8]
			}

			//BSP_LCD_FillRect(TS_State.touchX[0], TS_State.touchY[0], RECT_WIDTH, RECT_HEIGHT);
			BSP_LCD_FillCircle(penDrawX, penDrawY, CIRCLE_RADIUS);
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	b29b      	uxth	r3, r3
 80074a2:	68ba      	ldr	r2, [r7, #8]
 80074a4:	b291      	uxth	r1, r2
 80074a6:	2210      	movs	r2, #16
 80074a8:	4618      	mov	r0, r3
 80074aa:	f7ff f999 	bl	80067e0 <BSP_LCD_FillCircle>
 80074ae:	e7ba      	b.n	8007426 <main+0xae>


		} else {
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_SET);
 80074b0:	2201      	movs	r2, #1
 80074b2:	2140      	movs	r1, #64	; 0x40
 80074b4:	4808      	ldr	r0, [pc, #32]	; (80074d8 <main+0x160>)
 80074b6:	f7fa fe39 	bl	800212c <HAL_GPIO_WritePin>
		BSP_TS_GetState(&TS_State);
 80074ba:	e7b4      	b.n	8007426 <main+0xae>
 80074bc:	40023800 	.word	0x40023800
 80074c0:	20000384 	.word	0x20000384
 80074c4:	20000490 	.word	0x20000490
 80074c8:	2000005c 	.word	0x2000005c
 80074cc:	080a1ef8 	.word	0x080a1ef8
 80074d0:	ff808080 	.word	0xff808080
 80074d4:	20000354 	.word	0x20000354
 80074d8:	40021800 	.word	0x40021800

080074dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b096      	sub	sp, #88	; 0x58
 80074e0:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;
 80074e2:	2300      	movs	r3, #0
 80074e4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

  /* Enable Power Control clock */
  __HAL_RCC_PWR_CLK_ENABLE();
 80074e8:	2300      	movs	r3, #0
 80074ea:	60bb      	str	r3, [r7, #8]
 80074ec:	4b31      	ldr	r3, [pc, #196]	; (80075b4 <SystemClock_Config+0xd8>)
 80074ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074f0:	4a30      	ldr	r2, [pc, #192]	; (80075b4 <SystemClock_Config+0xd8>)
 80074f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80074f6:	6413      	str	r3, [r2, #64]	; 0x40
 80074f8:	4b2e      	ldr	r3, [pc, #184]	; (80075b4 <SystemClock_Config+0xd8>)
 80074fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007500:	60bb      	str	r3, [r7, #8]
 8007502:	68bb      	ldr	r3, [r7, #8]

  /* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8007504:	2300      	movs	r3, #0
 8007506:	607b      	str	r3, [r7, #4]
 8007508:	4b2b      	ldr	r3, [pc, #172]	; (80075b8 <SystemClock_Config+0xdc>)
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	4a2a      	ldr	r2, [pc, #168]	; (80075b8 <SystemClock_Config+0xdc>)
 800750e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007512:	6013      	str	r3, [r2, #0]
 8007514:	4b28      	ldr	r3, [pc, #160]	; (80075b8 <SystemClock_Config+0xdc>)
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800751c:	607b      	str	r3, [r7, #4]
 800751e:	687b      	ldr	r3, [r7, #4]

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8007520:	2301      	movs	r3, #1
 8007522:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007524:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007528:	613b      	str	r3, [r7, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800752a:	2302      	movs	r3, #2
 800752c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800752e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007532:	62bb      	str	r3, [r7, #40]	; 0x28
#if defined(USE_STM32469I_DISCO_REVA)
  RCC_OscInitStruct.PLL.PLLM = 25;
#else
  RCC_OscInitStruct.PLL.PLLM = 8;
 8007534:	2308      	movs	r3, #8
 8007536:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* USE_STM32469I_DISCO_REVA */
  RCC_OscInitStruct.PLL.PLLN = 360;
 8007538:	f44f 73b4 	mov.w	r3, #360	; 0x168
 800753c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800753e:	2302      	movs	r3, #2
 8007540:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8007542:	2307      	movs	r3, #7
 8007544:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLR = 6;
 8007546:	2306      	movs	r3, #6
 8007548:	63fb      	str	r3, [r7, #60]	; 0x3c

  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800754a:	f107 030c 	add.w	r3, r7, #12
 800754e:	4618      	mov	r0, r3
 8007550:	f7fc fd7a 	bl	8004048 <HAL_RCC_OscConfig>
 8007554:	4603      	mov	r3, r0
 8007556:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  if(ret != HAL_OK)
 800755a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800755e:	2b00      	cmp	r3, #0
 8007560:	d000      	beq.n	8007564 <SystemClock_Config+0x88>
  {
    while(1) { ; }
 8007562:	e7fe      	b.n	8007562 <SystemClock_Config+0x86>
  }

  /* Activate the OverDrive to reach the 180 MHz Frequency */
  ret = HAL_PWREx_EnableOverDrive();
 8007564:	f7fc f8ea 	bl	800373c <HAL_PWREx_EnableOverDrive>
 8007568:	4603      	mov	r3, r0
 800756a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  if(ret != HAL_OK)
 800756e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007572:	2b00      	cmp	r3, #0
 8007574:	d000      	beq.n	8007578 <SystemClock_Config+0x9c>
  {
    while(1) { ; }
 8007576:	e7fe      	b.n	8007576 <SystemClock_Config+0x9a>
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8007578:	230f      	movs	r3, #15
 800757a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800757c:	2302      	movs	r3, #2
 800757e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007580:	2300      	movs	r3, #0
 8007582:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8007584:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8007588:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800758a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800758e:	653b      	str	r3, [r7, #80]	; 0x50

  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 8007590:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007594:	2105      	movs	r1, #5
 8007596:	4618      	mov	r0, r3
 8007598:	f7fc f920 	bl	80037dc <HAL_RCC_ClockConfig>
 800759c:	4603      	mov	r3, r0
 800759e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  if(ret != HAL_OK)
 80075a2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d000      	beq.n	80075ac <SystemClock_Config+0xd0>
  {
    while(1) { ; }
 80075aa:	e7fe      	b.n	80075aa <SystemClock_Config+0xce>
  }
}
 80075ac:	bf00      	nop
 80075ae:	3758      	adds	r7, #88	; 0x58
 80075b0:	46bd      	mov	sp, r7
 80075b2:	bd80      	pop	{r7, pc}
 80075b4:	40023800 	.word	0x40023800
 80075b8:	40007000 	.word	0x40007000

080075bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b08c      	sub	sp, #48	; 0x30
 80075c0:	af00      	add	r7, sp, #0


  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80075c2:	2300      	movs	r3, #0
 80075c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80075c6:	4b9f      	ldr	r3, [pc, #636]	; (8007844 <MX_GPIO_Init+0x288>)
 80075c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075ca:	4a9e      	ldr	r2, [pc, #632]	; (8007844 <MX_GPIO_Init+0x288>)
 80075cc:	f043 0310 	orr.w	r3, r3, #16
 80075d0:	6313      	str	r3, [r2, #48]	; 0x30
 80075d2:	4b9c      	ldr	r3, [pc, #624]	; (8007844 <MX_GPIO_Init+0x288>)
 80075d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075d6:	f003 0310 	and.w	r3, r3, #16
 80075da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80075dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80075de:	2300      	movs	r3, #0
 80075e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80075e2:	4b98      	ldr	r3, [pc, #608]	; (8007844 <MX_GPIO_Init+0x288>)
 80075e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075e6:	4a97      	ldr	r2, [pc, #604]	; (8007844 <MX_GPIO_Init+0x288>)
 80075e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80075ec:	6313      	str	r3, [r2, #48]	; 0x30
 80075ee:	4b95      	ldr	r3, [pc, #596]	; (8007844 <MX_GPIO_Init+0x288>)
 80075f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80075f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80075fa:	2300      	movs	r3, #0
 80075fc:	627b      	str	r3, [r7, #36]	; 0x24
 80075fe:	4b91      	ldr	r3, [pc, #580]	; (8007844 <MX_GPIO_Init+0x288>)
 8007600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007602:	4a90      	ldr	r2, [pc, #576]	; (8007844 <MX_GPIO_Init+0x288>)
 8007604:	f043 0302 	orr.w	r3, r3, #2
 8007608:	6313      	str	r3, [r2, #48]	; 0x30
 800760a:	4b8e      	ldr	r3, [pc, #568]	; (8007844 <MX_GPIO_Init+0x288>)
 800760c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800760e:	f003 0302 	and.w	r3, r3, #2
 8007612:	627b      	str	r3, [r7, #36]	; 0x24
 8007614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007616:	2300      	movs	r3, #0
 8007618:	623b      	str	r3, [r7, #32]
 800761a:	4b8a      	ldr	r3, [pc, #552]	; (8007844 <MX_GPIO_Init+0x288>)
 800761c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800761e:	4a89      	ldr	r2, [pc, #548]	; (8007844 <MX_GPIO_Init+0x288>)
 8007620:	f043 0304 	orr.w	r3, r3, #4
 8007624:	6313      	str	r3, [r2, #48]	; 0x30
 8007626:	4b87      	ldr	r3, [pc, #540]	; (8007844 <MX_GPIO_Init+0x288>)
 8007628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800762a:	f003 0304 	and.w	r3, r3, #4
 800762e:	623b      	str	r3, [r7, #32]
 8007630:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007632:	2300      	movs	r3, #0
 8007634:	61fb      	str	r3, [r7, #28]
 8007636:	4b83      	ldr	r3, [pc, #524]	; (8007844 <MX_GPIO_Init+0x288>)
 8007638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800763a:	4a82      	ldr	r2, [pc, #520]	; (8007844 <MX_GPIO_Init+0x288>)
 800763c:	f043 0301 	orr.w	r3, r3, #1
 8007640:	6313      	str	r3, [r2, #48]	; 0x30
 8007642:	4b80      	ldr	r3, [pc, #512]	; (8007844 <MX_GPIO_Init+0x288>)
 8007644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007646:	f003 0301 	and.w	r3, r3, #1
 800764a:	61fb      	str	r3, [r7, #28]
 800764c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800764e:	2300      	movs	r3, #0
 8007650:	61bb      	str	r3, [r7, #24]
 8007652:	4b7c      	ldr	r3, [pc, #496]	; (8007844 <MX_GPIO_Init+0x288>)
 8007654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007656:	4a7b      	ldr	r2, [pc, #492]	; (8007844 <MX_GPIO_Init+0x288>)
 8007658:	f043 0308 	orr.w	r3, r3, #8
 800765c:	6313      	str	r3, [r2, #48]	; 0x30
 800765e:	4b79      	ldr	r3, [pc, #484]	; (8007844 <MX_GPIO_Init+0x288>)
 8007660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007662:	f003 0308 	and.w	r3, r3, #8
 8007666:	61bb      	str	r3, [r7, #24]
 8007668:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800766a:	2300      	movs	r3, #0
 800766c:	617b      	str	r3, [r7, #20]
 800766e:	4b75      	ldr	r3, [pc, #468]	; (8007844 <MX_GPIO_Init+0x288>)
 8007670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007672:	4a74      	ldr	r2, [pc, #464]	; (8007844 <MX_GPIO_Init+0x288>)
 8007674:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007678:	6313      	str	r3, [r2, #48]	; 0x30
 800767a:	4b72      	ldr	r3, [pc, #456]	; (8007844 <MX_GPIO_Init+0x288>)
 800767c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800767e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007682:	617b      	str	r3, [r7, #20]
 8007684:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8007686:	2300      	movs	r3, #0
 8007688:	613b      	str	r3, [r7, #16]
 800768a:	4b6e      	ldr	r3, [pc, #440]	; (8007844 <MX_GPIO_Init+0x288>)
 800768c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800768e:	4a6d      	ldr	r2, [pc, #436]	; (8007844 <MX_GPIO_Init+0x288>)
 8007690:	f043 0320 	orr.w	r3, r3, #32
 8007694:	6313      	str	r3, [r2, #48]	; 0x30
 8007696:	4b6b      	ldr	r3, [pc, #428]	; (8007844 <MX_GPIO_Init+0x288>)
 8007698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800769a:	f003 0320 	and.w	r3, r3, #32
 800769e:	613b      	str	r3, [r7, #16]
 80076a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80076a2:	2300      	movs	r3, #0
 80076a4:	60fb      	str	r3, [r7, #12]
 80076a6:	4b67      	ldr	r3, [pc, #412]	; (8007844 <MX_GPIO_Init+0x288>)
 80076a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076aa:	4a66      	ldr	r2, [pc, #408]	; (8007844 <MX_GPIO_Init+0x288>)
 80076ac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80076b0:	6313      	str	r3, [r2, #48]	; 0x30
 80076b2:	4b64      	ldr	r3, [pc, #400]	; (8007844 <MX_GPIO_Init+0x288>)
 80076b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80076ba:	60fb      	str	r3, [r7, #12]
 80076bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80076be:	2300      	movs	r3, #0
 80076c0:	60bb      	str	r3, [r7, #8]
 80076c2:	4b60      	ldr	r3, [pc, #384]	; (8007844 <MX_GPIO_Init+0x288>)
 80076c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076c6:	4a5f      	ldr	r2, [pc, #380]	; (8007844 <MX_GPIO_Init+0x288>)
 80076c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076cc:	6313      	str	r3, [r2, #48]	; 0x30
 80076ce:	4b5d      	ldr	r3, [pc, #372]	; (8007844 <MX_GPIO_Init+0x288>)
 80076d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076d6:	60bb      	str	r3, [r7, #8]
 80076d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80076da:	2300      	movs	r3, #0
 80076dc:	607b      	str	r3, [r7, #4]
 80076de:	4b59      	ldr	r3, [pc, #356]	; (8007844 <MX_GPIO_Init+0x288>)
 80076e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076e2:	4a58      	ldr	r2, [pc, #352]	; (8007844 <MX_GPIO_Init+0x288>)
 80076e4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80076e8:	6313      	str	r3, [r2, #48]	; 0x30
 80076ea:	4b56      	ldr	r3, [pc, #344]	; (8007844 <MX_GPIO_Init+0x288>)
 80076ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80076f2:	607b      	str	r3, [r7, #4]
 80076f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SPKR_HP_Pin|AUDIO_RST_Pin, GPIO_PIN_RESET);
 80076f6:	2200      	movs	r2, #0
 80076f8:	210c      	movs	r1, #12
 80076fa:	4853      	ldr	r0, [pc, #332]	; (8007848 <MX_GPIO_Init+0x28c>)
 80076fc:	f7fa fd16 	bl	800212c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED3_Pin|LED2_Pin, GPIO_PIN_RESET);
 8007700:	2200      	movs	r2, #0
 8007702:	2130      	movs	r1, #48	; 0x30
 8007704:	4851      	ldr	r0, [pc, #324]	; (800784c <MX_GPIO_Init+0x290>)
 8007706:	f7fa fd11 	bl	800212c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 800770a:	2200      	movs	r2, #0
 800770c:	2108      	movs	r1, #8
 800770e:	4850      	ldr	r0, [pc, #320]	; (8007850 <MX_GPIO_Init+0x294>)
 8007710:	f7fa fd0c 	bl	800212c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8007714:	2200      	movs	r2, #0
 8007716:	2140      	movs	r1, #64	; 0x40
 8007718:	484e      	ldr	r0, [pc, #312]	; (8007854 <MX_GPIO_Init+0x298>)
 800771a:	f7fa fd07 	bl	800212c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OTG_FS1_PowerSwitchOn_Pin|EXT_RESET_Pin, GPIO_PIN_RESET);
 800771e:	2200      	movs	r2, #0
 8007720:	2105      	movs	r1, #5
 8007722:	484d      	ldr	r0, [pc, #308]	; (8007858 <MX_GPIO_Init+0x29c>)
 8007724:	f7fa fd02 	bl	800212c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8007728:	2200      	movs	r2, #0
 800772a:	2108      	movs	r1, #8
 800772c:	484b      	ldr	r0, [pc, #300]	; (800785c <MX_GPIO_Init+0x2a0>)
 800772e:	f7fa fcfd 	bl	800212c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SAI1_FSA_Pin SAI1_SCKA_Pin */
  GPIO_InitStruct.Pin = SAI1_FSA_Pin|SAI1_SCKA_Pin;
 8007732:	4b4b      	ldr	r3, [pc, #300]	; (8007860 <MX_GPIO_Init+0x2a4>)
 8007734:	2230      	movs	r2, #48	; 0x30
 8007736:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007738:	4b49      	ldr	r3, [pc, #292]	; (8007860 <MX_GPIO_Init+0x2a4>)
 800773a:	2202      	movs	r2, #2
 800773c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800773e:	4b48      	ldr	r3, [pc, #288]	; (8007860 <MX_GPIO_Init+0x2a4>)
 8007740:	2200      	movs	r2, #0
 8007742:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007744:	4b46      	ldr	r3, [pc, #280]	; (8007860 <MX_GPIO_Init+0x2a4>)
 8007746:	2200      	movs	r2, #0
 8007748:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 800774a:	4b45      	ldr	r3, [pc, #276]	; (8007860 <MX_GPIO_Init+0x2a4>)
 800774c:	2206      	movs	r2, #6
 800774e:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007750:	4943      	ldr	r1, [pc, #268]	; (8007860 <MX_GPIO_Init+0x2a4>)
 8007752:	483d      	ldr	r0, [pc, #244]	; (8007848 <MX_GPIO_Init+0x28c>)
 8007754:	f7fa fa32 	bl	8001bbc <HAL_GPIO_Init>

  /*Configure GPIO pins : SPKR_HP_Pin AUDIO_RST_Pin */
  GPIO_InitStruct.Pin = SPKR_HP_Pin|AUDIO_RST_Pin;
 8007758:	4b41      	ldr	r3, [pc, #260]	; (8007860 <MX_GPIO_Init+0x2a4>)
 800775a:	220c      	movs	r2, #12
 800775c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800775e:	4b40      	ldr	r3, [pc, #256]	; (8007860 <MX_GPIO_Init+0x2a4>)
 8007760:	2201      	movs	r2, #1
 8007762:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007764:	4b3e      	ldr	r3, [pc, #248]	; (8007860 <MX_GPIO_Init+0x2a4>)
 8007766:	2200      	movs	r2, #0
 8007768:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800776a:	4b3d      	ldr	r3, [pc, #244]	; (8007860 <MX_GPIO_Init+0x2a4>)
 800776c:	2200      	movs	r2, #0
 800776e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007770:	493b      	ldr	r1, [pc, #236]	; (8007860 <MX_GPIO_Init+0x2a4>)
 8007772:	4835      	ldr	r0, [pc, #212]	; (8007848 <MX_GPIO_Init+0x28c>)
 8007774:	f7fa fa22 	bl	8001bbc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_USART6_TX_Pin USART6_RX_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8007778:	4b39      	ldr	r3, [pc, #228]	; (8007860 <MX_GPIO_Init+0x2a4>)
 800777a:	2240      	movs	r2, #64	; 0x40
 800777c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800777e:	4b38      	ldr	r3, [pc, #224]	; (8007860 <MX_GPIO_Init+0x2a4>)
 8007780:	2202      	movs	r2, #2
 8007782:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007784:	4b36      	ldr	r3, [pc, #216]	; (8007860 <MX_GPIO_Init+0x2a4>)
 8007786:	2200      	movs	r2, #0
 8007788:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800778a:	4b35      	ldr	r3, [pc, #212]	; (8007860 <MX_GPIO_Init+0x2a4>)
 800778c:	2203      	movs	r2, #3
 800778e:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8007790:	4b33      	ldr	r3, [pc, #204]	; (8007860 <MX_GPIO_Init+0x2a4>)
 8007792:	2208      	movs	r2, #8
 8007794:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007796:	4932      	ldr	r1, [pc, #200]	; (8007860 <MX_GPIO_Init+0x2a4>)
 8007798:	4832      	ldr	r0, [pc, #200]	; (8007864 <MX_GPIO_Init+0x2a8>)
 800779a:	f7fa fa0f 	bl	8001bbc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800779e:	4b30      	ldr	r3, [pc, #192]	; (8007860 <MX_GPIO_Init+0x2a4>)
 80077a0:	2280      	movs	r2, #128	; 0x80
 80077a2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80077a4:	4b2e      	ldr	r3, [pc, #184]	; (8007860 <MX_GPIO_Init+0x2a4>)
 80077a6:	2202      	movs	r2, #2
 80077a8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077aa:	4b2d      	ldr	r3, [pc, #180]	; (8007860 <MX_GPIO_Init+0x2a4>)
 80077ac:	2200      	movs	r2, #0
 80077ae:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80077b0:	4b2b      	ldr	r3, [pc, #172]	; (8007860 <MX_GPIO_Init+0x2a4>)
 80077b2:	2203      	movs	r2, #3
 80077b4:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80077b6:	4b2a      	ldr	r3, [pc, #168]	; (8007860 <MX_GPIO_Init+0x2a4>)
 80077b8:	2208      	movs	r2, #8
 80077ba:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80077bc:	4928      	ldr	r1, [pc, #160]	; (8007860 <MX_GPIO_Init+0x2a4>)
 80077be:	4829      	ldr	r0, [pc, #164]	; (8007864 <MX_GPIO_Init+0x2a8>)
 80077c0:	f7fa f9fc 	bl	8001bbc <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_NBL1_Pin FMC_NBL0_Pin D5_Pin D6_Pin
                           D8_Pin D11_Pin D4_Pin D7_Pin
                           D9_Pin D12_Pin D10_Pin */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|D5_Pin|D6_Pin
 80077c4:	4b26      	ldr	r3, [pc, #152]	; (8007860 <MX_GPIO_Init+0x2a4>)
 80077c6:	f64f 7283 	movw	r2, #65411	; 0xff83
 80077ca:	601a      	str	r2, [r3, #0]
                          |D8_Pin|D11_Pin|D4_Pin|D7_Pin
                          |D9_Pin|D12_Pin|D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80077cc:	4b24      	ldr	r3, [pc, #144]	; (8007860 <MX_GPIO_Init+0x2a4>)
 80077ce:	2202      	movs	r2, #2
 80077d0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077d2:	4b23      	ldr	r3, [pc, #140]	; (8007860 <MX_GPIO_Init+0x2a4>)
 80077d4:	2200      	movs	r2, #0
 80077d6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80077d8:	4b21      	ldr	r3, [pc, #132]	; (8007860 <MX_GPIO_Init+0x2a4>)
 80077da:	2203      	movs	r2, #3
 80077dc:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80077de:	4b20      	ldr	r3, [pc, #128]	; (8007860 <MX_GPIO_Init+0x2a4>)
 80077e0:	220c      	movs	r2, #12
 80077e2:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80077e4:	491e      	ldr	r1, [pc, #120]	; (8007860 <MX_GPIO_Init+0x2a4>)
 80077e6:	4818      	ldr	r0, [pc, #96]	; (8007848 <MX_GPIO_Init+0x28c>)
 80077e8:	f7fa f9e8 	bl	8001bbc <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C1_SCL_Pin I2C1_SDA_Pin */
  GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 80077ec:	4b1c      	ldr	r3, [pc, #112]	; (8007860 <MX_GPIO_Init+0x2a4>)
 80077ee:	f44f 7240 	mov.w	r2, #768	; 0x300
 80077f2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80077f4:	4b1a      	ldr	r3, [pc, #104]	; (8007860 <MX_GPIO_Init+0x2a4>)
 80077f6:	2212      	movs	r2, #18
 80077f8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80077fa:	4b19      	ldr	r3, [pc, #100]	; (8007860 <MX_GPIO_Init+0x2a4>)
 80077fc:	2201      	movs	r2, #1
 80077fe:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007800:	4b17      	ldr	r3, [pc, #92]	; (8007860 <MX_GPIO_Init+0x2a4>)
 8007802:	2203      	movs	r2, #3
 8007804:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8007806:	4b16      	ldr	r3, [pc, #88]	; (8007860 <MX_GPIO_Init+0x2a4>)
 8007808:	2204      	movs	r2, #4
 800780a:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800780c:	4914      	ldr	r1, [pc, #80]	; (8007860 <MX_GPIO_Init+0x2a4>)
 800780e:	4812      	ldr	r0, [pc, #72]	; (8007858 <MX_GPIO_Init+0x29c>)
 8007810:	f7fa f9d4 	bl	8001bbc <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_CK_Pin */
  GPIO_InitStruct.Pin = I2S3_CK_Pin;
 8007814:	4b12      	ldr	r3, [pc, #72]	; (8007860 <MX_GPIO_Init+0x2a4>)
 8007816:	2208      	movs	r2, #8
 8007818:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800781a:	4b11      	ldr	r3, [pc, #68]	; (8007860 <MX_GPIO_Init+0x2a4>)
 800781c:	2202      	movs	r2, #2
 800781e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007820:	4b0f      	ldr	r3, [pc, #60]	; (8007860 <MX_GPIO_Init+0x2a4>)
 8007822:	2200      	movs	r2, #0
 8007824:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007826:	4b0e      	ldr	r3, [pc, #56]	; (8007860 <MX_GPIO_Init+0x2a4>)
 8007828:	2200      	movs	r2, #0
 800782a:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800782c:	4b0c      	ldr	r3, [pc, #48]	; (8007860 <MX_GPIO_Init+0x2a4>)
 800782e:	2206      	movs	r2, #6
 8007830:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(I2S3_CK_GPIO_Port, &GPIO_InitStruct);
 8007832:	490b      	ldr	r1, [pc, #44]	; (8007860 <MX_GPIO_Init+0x2a4>)
 8007834:	4808      	ldr	r0, [pc, #32]	; (8007858 <MX_GPIO_Init+0x29c>)
 8007836:	f7fa f9c1 	bl	8001bbc <HAL_GPIO_Init>

  /*Configure GPIO pins : uSD_CLK_Pin uSD_D3_Pin uSD_D2_Pin uSD_D1_Pin
                           uSD_D0_Pin */
  GPIO_InitStruct.Pin = uSD_CLK_Pin|uSD_D3_Pin|uSD_D2_Pin|uSD_D1_Pin
 800783a:	4b09      	ldr	r3, [pc, #36]	; (8007860 <MX_GPIO_Init+0x2a4>)
 800783c:	f44f 52f8 	mov.w	r2, #7936	; 0x1f00
 8007840:	601a      	str	r2, [r3, #0]
 8007842:	e011      	b.n	8007868 <MX_GPIO_Init+0x2ac>
 8007844:	40023800 	.word	0x40023800
 8007848:	40021000 	.word	0x40021000
 800784c:	40020c00 	.word	0x40020c00
 8007850:	40022800 	.word	0x40022800
 8007854:	40021800 	.word	0x40021800
 8007858:	40020400 	.word	0x40020400
 800785c:	40020000 	.word	0x40020000
 8007860:	20000360 	.word	0x20000360
 8007864:	40020800 	.word	0x40020800
                          |uSD_D0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007868:	4b9c      	ldr	r3, [pc, #624]	; (8007adc <MX_GPIO_Init+0x520>)
 800786a:	2202      	movs	r2, #2
 800786c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800786e:	4b9b      	ldr	r3, [pc, #620]	; (8007adc <MX_GPIO_Init+0x520>)
 8007870:	2200      	movs	r2, #0
 8007872:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007874:	4b99      	ldr	r3, [pc, #612]	; (8007adc <MX_GPIO_Init+0x520>)
 8007876:	2203      	movs	r2, #3
 8007878:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800787a:	4b98      	ldr	r3, [pc, #608]	; (8007adc <MX_GPIO_Init+0x520>)
 800787c:	220c      	movs	r2, #12
 800787e:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007880:	4996      	ldr	r1, [pc, #600]	; (8007adc <MX_GPIO_Init+0x520>)
 8007882:	4897      	ldr	r0, [pc, #604]	; (8007ae0 <MX_GPIO_Init+0x524>)
 8007884:	f7fa f99a 	bl	8001bbc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS1_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS1_OverCurrent_Pin;
 8007888:	4b94      	ldr	r3, [pc, #592]	; (8007adc <MX_GPIO_Init+0x520>)
 800788a:	2280      	movs	r2, #128	; 0x80
 800788c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800788e:	4b93      	ldr	r3, [pc, #588]	; (8007adc <MX_GPIO_Init+0x520>)
 8007890:	4a94      	ldr	r2, [pc, #592]	; (8007ae4 <MX_GPIO_Init+0x528>)
 8007892:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007894:	4b91      	ldr	r3, [pc, #580]	; (8007adc <MX_GPIO_Init+0x520>)
 8007896:	2200      	movs	r2, #0
 8007898:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(OTG_FS1_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800789a:	4990      	ldr	r1, [pc, #576]	; (8007adc <MX_GPIO_Init+0x520>)
 800789c:	4892      	ldr	r0, [pc, #584]	; (8007ae8 <MX_GPIO_Init+0x52c>)
 800789e:	f7fa f98d 	bl	8001bbc <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_BK1_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin;
 80078a2:	4b8e      	ldr	r3, [pc, #568]	; (8007adc <MX_GPIO_Init+0x520>)
 80078a4:	2240      	movs	r2, #64	; 0x40
 80078a6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80078a8:	4b8c      	ldr	r3, [pc, #560]	; (8007adc <MX_GPIO_Init+0x520>)
 80078aa:	2202      	movs	r2, #2
 80078ac:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078ae:	4b8b      	ldr	r3, [pc, #556]	; (8007adc <MX_GPIO_Init+0x520>)
 80078b0:	2200      	movs	r2, #0
 80078b2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80078b4:	4b89      	ldr	r3, [pc, #548]	; (8007adc <MX_GPIO_Init+0x520>)
 80078b6:	2203      	movs	r2, #3
 80078b8:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF10_QSPI;
 80078ba:	4b88      	ldr	r3, [pc, #544]	; (8007adc <MX_GPIO_Init+0x520>)
 80078bc:	220a      	movs	r2, #10
 80078be:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(QSPI_BK1_NCS_GPIO_Port, &GPIO_InitStruct);
 80078c0:	4986      	ldr	r1, [pc, #536]	; (8007adc <MX_GPIO_Init+0x520>)
 80078c2:	4889      	ldr	r0, [pc, #548]	; (8007ae8 <MX_GPIO_Init+0x52c>)
 80078c4:	f7fa f97a 	bl	8001bbc <HAL_GPIO_Init>

  /*Configure GPIO pins : SDNCAS_Pin SDCLK_Pin A11_Pin A10_Pin
                           PG5 PG4 */
  GPIO_InitStruct.Pin = SDNCAS_Pin|SDCLK_Pin|A11_Pin|A10_Pin
 80078c8:	4b84      	ldr	r3, [pc, #528]	; (8007adc <MX_GPIO_Init+0x520>)
 80078ca:	f248 1233 	movw	r2, #33075	; 0x8133
 80078ce:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80078d0:	4b82      	ldr	r3, [pc, #520]	; (8007adc <MX_GPIO_Init+0x520>)
 80078d2:	2202      	movs	r2, #2
 80078d4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078d6:	4b81      	ldr	r3, [pc, #516]	; (8007adc <MX_GPIO_Init+0x520>)
 80078d8:	2200      	movs	r2, #0
 80078da:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80078dc:	4b7f      	ldr	r3, [pc, #508]	; (8007adc <MX_GPIO_Init+0x520>)
 80078de:	2203      	movs	r2, #3
 80078e0:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80078e2:	4b7e      	ldr	r3, [pc, #504]	; (8007adc <MX_GPIO_Init+0x520>)
 80078e4:	220c      	movs	r2, #12
 80078e6:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80078e8:	497c      	ldr	r1, [pc, #496]	; (8007adc <MX_GPIO_Init+0x520>)
 80078ea:	4880      	ldr	r0, [pc, #512]	; (8007aec <MX_GPIO_Init+0x530>)
 80078ec:	f7fa f966 	bl	8001bbc <HAL_GPIO_Init>

  /*Configure GPIO pin : MIC_DATA_Pin */
  GPIO_InitStruct.Pin = MIC_DATA_Pin;
 80078f0:	4b7a      	ldr	r3, [pc, #488]	; (8007adc <MX_GPIO_Init+0x520>)
 80078f2:	2240      	movs	r2, #64	; 0x40
 80078f4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80078f6:	4b79      	ldr	r3, [pc, #484]	; (8007adc <MX_GPIO_Init+0x520>)
 80078f8:	2202      	movs	r2, #2
 80078fa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078fc:	4b77      	ldr	r3, [pc, #476]	; (8007adc <MX_GPIO_Init+0x520>)
 80078fe:	2200      	movs	r2, #0
 8007900:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007902:	4b76      	ldr	r3, [pc, #472]	; (8007adc <MX_GPIO_Init+0x520>)
 8007904:	2200      	movs	r2, #0
 8007906:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8007908:	4b74      	ldr	r3, [pc, #464]	; (8007adc <MX_GPIO_Init+0x520>)
 800790a:	2206      	movs	r2, #6
 800790c:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(MIC_DATA_GPIO_Port, &GPIO_InitStruct);
 800790e:	4973      	ldr	r1, [pc, #460]	; (8007adc <MX_GPIO_Init+0x520>)
 8007910:	4877      	ldr	r0, [pc, #476]	; (8007af0 <MX_GPIO_Init+0x534>)
 8007912:	f7fa f953 	bl	8001bbc <HAL_GPIO_Init>

  /*Configure GPIO pins : D2_Pin D3_Pin D1_Pin D15_Pin
                           D0_Pin D14_Pin D13_Pin */
  GPIO_InitStruct.Pin = D2_Pin|D3_Pin|D1_Pin|D15_Pin
 8007916:	4b71      	ldr	r3, [pc, #452]	; (8007adc <MX_GPIO_Init+0x520>)
 8007918:	f24c 7203 	movw	r2, #50947	; 0xc703
 800791c:	601a      	str	r2, [r3, #0]
                          |D0_Pin|D14_Pin|D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800791e:	4b6f      	ldr	r3, [pc, #444]	; (8007adc <MX_GPIO_Init+0x520>)
 8007920:	2202      	movs	r2, #2
 8007922:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007924:	4b6d      	ldr	r3, [pc, #436]	; (8007adc <MX_GPIO_Init+0x520>)
 8007926:	2200      	movs	r2, #0
 8007928:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800792a:	4b6c      	ldr	r3, [pc, #432]	; (8007adc <MX_GPIO_Init+0x520>)
 800792c:	2203      	movs	r2, #3
 800792e:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8007930:	4b6a      	ldr	r3, [pc, #424]	; (8007adc <MX_GPIO_Init+0x520>)
 8007932:	220c      	movs	r2, #12
 8007934:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007936:	4969      	ldr	r1, [pc, #420]	; (8007adc <MX_GPIO_Init+0x520>)
 8007938:	486d      	ldr	r0, [pc, #436]	; (8007af0 <MX_GPIO_Init+0x534>)
 800793a:	f7fa f93f 	bl	8001bbc <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS1_P_Pin USB_FS1_N_Pin USB_FS1_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS1_P_Pin|USB_FS1_N_Pin|USB_FS1_ID_Pin;
 800793e:	4b67      	ldr	r3, [pc, #412]	; (8007adc <MX_GPIO_Init+0x520>)
 8007940:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 8007944:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007946:	4b65      	ldr	r3, [pc, #404]	; (8007adc <MX_GPIO_Init+0x520>)
 8007948:	2202      	movs	r2, #2
 800794a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800794c:	4b63      	ldr	r3, [pc, #396]	; (8007adc <MX_GPIO_Init+0x520>)
 800794e:	2200      	movs	r2, #0
 8007950:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007952:	4b62      	ldr	r3, [pc, #392]	; (8007adc <MX_GPIO_Init+0x520>)
 8007954:	2203      	movs	r2, #3
 8007956:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007958:	4b60      	ldr	r3, [pc, #384]	; (8007adc <MX_GPIO_Init+0x520>)
 800795a:	220a      	movs	r2, #10
 800795c:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800795e:	495f      	ldr	r1, [pc, #380]	; (8007adc <MX_GPIO_Init+0x520>)
 8007960:	4864      	ldr	r0, [pc, #400]	; (8007af4 <MX_GPIO_Init+0x538>)
 8007962:	f7fa f92b 	bl	8001bbc <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_NBL2_Pin D27_Pin D26_Pin FMC_NBL3_Pin
                           D29_Pin D31_Pin D28_Pin D25_Pin
                           D30_Pin D24_Pin */
  GPIO_InitStruct.Pin = FMC_NBL2_Pin|D27_Pin|D26_Pin|FMC_NBL3_Pin
 8007966:	4b5d      	ldr	r3, [pc, #372]	; (8007adc <MX_GPIO_Init+0x520>)
 8007968:	f240 62ff 	movw	r2, #1791	; 0x6ff
 800796c:	601a      	str	r2, [r3, #0]
                          |D29_Pin|D31_Pin|D28_Pin|D25_Pin
                          |D30_Pin|D24_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800796e:	4b5b      	ldr	r3, [pc, #364]	; (8007adc <MX_GPIO_Init+0x520>)
 8007970:	2202      	movs	r2, #2
 8007972:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007974:	4b59      	ldr	r3, [pc, #356]	; (8007adc <MX_GPIO_Init+0x520>)
 8007976:	2200      	movs	r2, #0
 8007978:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800797a:	4b58      	ldr	r3, [pc, #352]	; (8007adc <MX_GPIO_Init+0x520>)
 800797c:	2203      	movs	r2, #3
 800797e:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8007980:	4b56      	ldr	r3, [pc, #344]	; (8007adc <MX_GPIO_Init+0x520>)
 8007982:	220c      	movs	r2, #12
 8007984:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8007986:	4955      	ldr	r1, [pc, #340]	; (8007adc <MX_GPIO_Init+0x520>)
 8007988:	485b      	ldr	r0, [pc, #364]	; (8007af8 <MX_GPIO_Init+0x53c>)
 800798a:	f7fa f917 	bl	8001bbc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED3_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED2_Pin;
 800798e:	4b53      	ldr	r3, [pc, #332]	; (8007adc <MX_GPIO_Init+0x520>)
 8007990:	2230      	movs	r2, #48	; 0x30
 8007992:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8007994:	4b51      	ldr	r3, [pc, #324]	; (8007adc <MX_GPIO_Init+0x520>)
 8007996:	2211      	movs	r2, #17
 8007998:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800799a:	4b50      	ldr	r3, [pc, #320]	; (8007adc <MX_GPIO_Init+0x520>)
 800799c:	2200      	movs	r2, #0
 800799e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80079a0:	4b4e      	ldr	r3, [pc, #312]	; (8007adc <MX_GPIO_Init+0x520>)
 80079a2:	2200      	movs	r2, #0
 80079a4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80079a6:	494d      	ldr	r1, [pc, #308]	; (8007adc <MX_GPIO_Init+0x520>)
 80079a8:	4851      	ldr	r0, [pc, #324]	; (8007af0 <MX_GPIO_Init+0x534>)
 80079aa:	f7fa f907 	bl	8001bbc <HAL_GPIO_Init>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
                           A4_Pin A5_Pin A6_Pin A9_Pin
                           A7_Pin A8_Pin SDNMT48LC4M32B2B5_6A_RAS_RAS___Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 80079ae:	4b4b      	ldr	r3, [pc, #300]	; (8007adc <MX_GPIO_Init+0x520>)
 80079b0:	f64f 023f 	movw	r2, #63551	; 0xf83f
 80079b4:	601a      	str	r2, [r3, #0]
                          |A4_Pin|A5_Pin|A6_Pin|A9_Pin
                          |A7_Pin|A8_Pin|SDNMT48LC4M32B2B5_6A_RAS_RAS___Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80079b6:	4b49      	ldr	r3, [pc, #292]	; (8007adc <MX_GPIO_Init+0x520>)
 80079b8:	2202      	movs	r2, #2
 80079ba:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80079bc:	4b47      	ldr	r3, [pc, #284]	; (8007adc <MX_GPIO_Init+0x520>)
 80079be:	2200      	movs	r2, #0
 80079c0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80079c2:	4b46      	ldr	r3, [pc, #280]	; (8007adc <MX_GPIO_Init+0x520>)
 80079c4:	2203      	movs	r2, #3
 80079c6:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80079c8:	4b44      	ldr	r3, [pc, #272]	; (8007adc <MX_GPIO_Init+0x520>)
 80079ca:	220c      	movs	r2, #12
 80079cc:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80079ce:	4943      	ldr	r1, [pc, #268]	; (8007adc <MX_GPIO_Init+0x520>)
 80079d0:	484a      	ldr	r0, [pc, #296]	; (8007afc <MX_GPIO_Init+0x540>)
 80079d2:	f7fa f8f3 	bl	8001bbc <HAL_GPIO_Init>

  /*Configure GPIO pin : LED4_Pin */
  GPIO_InitStruct.Pin = LED4_Pin;
 80079d6:	4b41      	ldr	r3, [pc, #260]	; (8007adc <MX_GPIO_Init+0x520>)
 80079d8:	2208      	movs	r2, #8
 80079da:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80079dc:	4b3f      	ldr	r3, [pc, #252]	; (8007adc <MX_GPIO_Init+0x520>)
 80079de:	2211      	movs	r2, #17
 80079e0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80079e2:	4b3e      	ldr	r3, [pc, #248]	; (8007adc <MX_GPIO_Init+0x520>)
 80079e4:	2200      	movs	r2, #0
 80079e6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80079e8:	4b3c      	ldr	r3, [pc, #240]	; (8007adc <MX_GPIO_Init+0x520>)
 80079ea:	2200      	movs	r2, #0
 80079ec:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED4_GPIO_Port, &GPIO_InitStruct);
 80079ee:	493b      	ldr	r1, [pc, #236]	; (8007adc <MX_GPIO_Init+0x520>)
 80079f0:	4843      	ldr	r0, [pc, #268]	; (8007b00 <MX_GPIO_Init+0x544>)
 80079f2:	f7fa f8e3 	bl	8001bbc <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_CMD_Pin */
  GPIO_InitStruct.Pin = uSD_CMD_Pin;
 80079f6:	4b39      	ldr	r3, [pc, #228]	; (8007adc <MX_GPIO_Init+0x520>)
 80079f8:	2204      	movs	r2, #4
 80079fa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80079fc:	4b37      	ldr	r3, [pc, #220]	; (8007adc <MX_GPIO_Init+0x520>)
 80079fe:	2202      	movs	r2, #2
 8007a00:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a02:	4b36      	ldr	r3, [pc, #216]	; (8007adc <MX_GPIO_Init+0x520>)
 8007a04:	2200      	movs	r2, #0
 8007a06:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007a08:	4b34      	ldr	r3, [pc, #208]	; (8007adc <MX_GPIO_Init+0x520>)
 8007a0a:	2203      	movs	r2, #3
 8007a0c:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8007a0e:	4b33      	ldr	r3, [pc, #204]	; (8007adc <MX_GPIO_Init+0x520>)
 8007a10:	220c      	movs	r2, #12
 8007a12:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(uSD_CMD_GPIO_Port, &GPIO_InitStruct);
 8007a14:	4931      	ldr	r1, [pc, #196]	; (8007adc <MX_GPIO_Init+0x520>)
 8007a16:	4836      	ldr	r0, [pc, #216]	; (8007af0 <MX_GPIO_Init+0x534>)
 8007a18:	f7fa f8d0 	bl	8001bbc <HAL_GPIO_Init>

  /*Configure GPIO pins : D23_Pin D21_Pin D22_Pin SDNE0_Pin
                           SDCKE0_Pin D20_Pin D17_Pin D19_Pin
                           D16_Pin D18_Pin */
  GPIO_InitStruct.Pin = D23_Pin|D21_Pin|D22_Pin|SDNE0_Pin
 8007a1c:	4b2f      	ldr	r3, [pc, #188]	; (8007adc <MX_GPIO_Init+0x520>)
 8007a1e:	f64f 720c 	movw	r2, #65292	; 0xff0c
 8007a22:	601a      	str	r2, [r3, #0]
                          |SDCKE0_Pin|D20_Pin|D17_Pin|D19_Pin
                          |D16_Pin|D18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a24:	4b2d      	ldr	r3, [pc, #180]	; (8007adc <MX_GPIO_Init+0x520>)
 8007a26:	2202      	movs	r2, #2
 8007a28:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a2a:	4b2c      	ldr	r3, [pc, #176]	; (8007adc <MX_GPIO_Init+0x520>)
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007a30:	4b2a      	ldr	r3, [pc, #168]	; (8007adc <MX_GPIO_Init+0x520>)
 8007a32:	2203      	movs	r2, #3
 8007a34:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8007a36:	4b29      	ldr	r3, [pc, #164]	; (8007adc <MX_GPIO_Init+0x520>)
 8007a38:	220c      	movs	r2, #12
 8007a3a:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8007a3c:	4927      	ldr	r1, [pc, #156]	; (8007adc <MX_GPIO_Init+0x520>)
 8007a3e:	4831      	ldr	r0, [pc, #196]	; (8007b04 <MX_GPIO_Init+0x548>)
 8007a40:	f7fa f8bc 	bl	8001bbc <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS1_Pin */
  GPIO_InitStruct.Pin = VBUS_FS1_Pin;
 8007a44:	4b25      	ldr	r3, [pc, #148]	; (8007adc <MX_GPIO_Init+0x520>)
 8007a46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007a4a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a4c:	4b23      	ldr	r3, [pc, #140]	; (8007adc <MX_GPIO_Init+0x520>)
 8007a4e:	2202      	movs	r2, #2
 8007a50:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a52:	4b22      	ldr	r3, [pc, #136]	; (8007adc <MX_GPIO_Init+0x520>)
 8007a54:	2200      	movs	r2, #0
 8007a56:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(VBUS_FS1_GPIO_Port, &GPIO_InitStruct);
 8007a58:	4920      	ldr	r1, [pc, #128]	; (8007adc <MX_GPIO_Init+0x520>)
 8007a5a:	4826      	ldr	r0, [pc, #152]	; (8007af4 <MX_GPIO_Init+0x538>)
 8007a5c:	f7fa f8ae 	bl	8001bbc <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C2_SCL_Pin I2C2_SDA_Pin */
  GPIO_InitStruct.Pin = I2C2_SCL_Pin|I2C2_SDA_Pin;
 8007a60:	4b1e      	ldr	r3, [pc, #120]	; (8007adc <MX_GPIO_Init+0x520>)
 8007a62:	2230      	movs	r2, #48	; 0x30
 8007a64:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007a66:	4b1d      	ldr	r3, [pc, #116]	; (8007adc <MX_GPIO_Init+0x520>)
 8007a68:	2212      	movs	r2, #18
 8007a6a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007a6c:	4b1b      	ldr	r3, [pc, #108]	; (8007adc <MX_GPIO_Init+0x520>)
 8007a6e:	2201      	movs	r2, #1
 8007a70:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007a72:	4b1a      	ldr	r3, [pc, #104]	; (8007adc <MX_GPIO_Init+0x520>)
 8007a74:	2203      	movs	r2, #3
 8007a76:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8007a78:	4b18      	ldr	r3, [pc, #96]	; (8007adc <MX_GPIO_Init+0x520>)
 8007a7a:	2204      	movs	r2, #4
 8007a7c:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8007a7e:	4917      	ldr	r1, [pc, #92]	; (8007adc <MX_GPIO_Init+0x520>)
 8007a80:	4820      	ldr	r0, [pc, #128]	; (8007b04 <MX_GPIO_Init+0x548>)
 8007a82:	f7fa f89b 	bl	8001bbc <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI1_MCLKA_Pin */
  GPIO_InitStruct.Pin = SAI1_MCLKA_Pin;
 8007a86:	4b15      	ldr	r3, [pc, #84]	; (8007adc <MX_GPIO_Init+0x520>)
 8007a88:	2280      	movs	r2, #128	; 0x80
 8007a8a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a8c:	4b13      	ldr	r3, [pc, #76]	; (8007adc <MX_GPIO_Init+0x520>)
 8007a8e:	2202      	movs	r2, #2
 8007a90:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a92:	4b12      	ldr	r3, [pc, #72]	; (8007adc <MX_GPIO_Init+0x520>)
 8007a94:	2200      	movs	r2, #0
 8007a96:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007a98:	4b10      	ldr	r3, [pc, #64]	; (8007adc <MX_GPIO_Init+0x520>)
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8007a9e:	4b0f      	ldr	r3, [pc, #60]	; (8007adc <MX_GPIO_Init+0x520>)
 8007aa0:	2206      	movs	r2, #6
 8007aa2:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(SAI1_MCLKA_GPIO_Port, &GPIO_InitStruct);
 8007aa4:	490d      	ldr	r1, [pc, #52]	; (8007adc <MX_GPIO_Init+0x520>)
 8007aa6:	4811      	ldr	r0, [pc, #68]	; (8007aec <MX_GPIO_Init+0x530>)
 8007aa8:	f7fa f888 	bl	8001bbc <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8007aac:	4b0b      	ldr	r3, [pc, #44]	; (8007adc <MX_GPIO_Init+0x520>)
 8007aae:	2240      	movs	r2, #64	; 0x40
 8007ab0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8007ab2:	4b0a      	ldr	r3, [pc, #40]	; (8007adc <MX_GPIO_Init+0x520>)
 8007ab4:	2211      	movs	r2, #17
 8007ab6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ab8:	4b08      	ldr	r3, [pc, #32]	; (8007adc <MX_GPIO_Init+0x520>)
 8007aba:	2200      	movs	r2, #0
 8007abc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007abe:	4b07      	ldr	r3, [pc, #28]	; (8007adc <MX_GPIO_Init+0x520>)
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8007ac4:	4905      	ldr	r1, [pc, #20]	; (8007adc <MX_GPIO_Init+0x520>)
 8007ac6:	4809      	ldr	r0, [pc, #36]	; (8007aec <MX_GPIO_Init+0x530>)
 8007ac8:	f7fa f878 	bl	8001bbc <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_BK1_IO2_Pin QSPI_BK1_IO3_Pin QSPI_CLK_Pin */
  GPIO_InitStruct.Pin = QSPI_BK1_IO2_Pin|QSPI_BK1_IO3_Pin|QSPI_CLK_Pin;
 8007acc:	4b03      	ldr	r3, [pc, #12]	; (8007adc <MX_GPIO_Init+0x520>)
 8007ace:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8007ad2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007ad4:	4b01      	ldr	r3, [pc, #4]	; (8007adc <MX_GPIO_Init+0x520>)
 8007ad6:	2202      	movs	r2, #2
 8007ad8:	605a      	str	r2, [r3, #4]
 8007ada:	e015      	b.n	8007b08 <MX_GPIO_Init+0x54c>
 8007adc:	20000360 	.word	0x20000360
 8007ae0:	40020800 	.word	0x40020800
 8007ae4:	10110000 	.word	0x10110000
 8007ae8:	40020400 	.word	0x40020400
 8007aec:	40021800 	.word	0x40021800
 8007af0:	40020c00 	.word	0x40020c00
 8007af4:	40020000 	.word	0x40020000
 8007af8:	40022000 	.word	0x40022000
 8007afc:	40021400 	.word	0x40021400
 8007b00:	40022800 	.word	0x40022800
 8007b04:	40021c00 	.word	0x40021c00
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b08:	4b52      	ldr	r3, [pc, #328]	; (8007c54 <MX_GPIO_Init+0x698>)
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007b0e:	4b51      	ldr	r3, [pc, #324]	; (8007c54 <MX_GPIO_Init+0x698>)
 8007b10:	2203      	movs	r2, #3
 8007b12:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8007b14:	4b4f      	ldr	r3, [pc, #316]	; (8007c54 <MX_GPIO_Init+0x698>)
 8007b16:	2209      	movs	r2, #9
 8007b18:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8007b1a:	494e      	ldr	r1, [pc, #312]	; (8007c54 <MX_GPIO_Init+0x698>)
 8007b1c:	484e      	ldr	r0, [pc, #312]	; (8007c58 <MX_GPIO_Init+0x69c>)
 8007b1e:	f7fa f84d 	bl	8001bbc <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_BK1_IO1_Pin QSPI_BK1_IO0_Pin */
  GPIO_InitStruct.Pin = QSPI_BK1_IO1_Pin|QSPI_BK1_IO0_Pin;
 8007b22:	4b4c      	ldr	r3, [pc, #304]	; (8007c54 <MX_GPIO_Init+0x698>)
 8007b24:	f44f 7240 	mov.w	r2, #768	; 0x300
 8007b28:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b2a:	4b4a      	ldr	r3, [pc, #296]	; (8007c54 <MX_GPIO_Init+0x698>)
 8007b2c:	2202      	movs	r2, #2
 8007b2e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b30:	4b48      	ldr	r3, [pc, #288]	; (8007c54 <MX_GPIO_Init+0x698>)
 8007b32:	2200      	movs	r2, #0
 8007b34:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007b36:	4b47      	ldr	r3, [pc, #284]	; (8007c54 <MX_GPIO_Init+0x698>)
 8007b38:	2203      	movs	r2, #3
 8007b3a:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF10_QSPI;
 8007b3c:	4b45      	ldr	r3, [pc, #276]	; (8007c54 <MX_GPIO_Init+0x698>)
 8007b3e:	220a      	movs	r2, #10
 8007b40:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8007b42:	4944      	ldr	r1, [pc, #272]	; (8007c54 <MX_GPIO_Init+0x698>)
 8007b44:	4844      	ldr	r0, [pc, #272]	; (8007c58 <MX_GPIO_Init+0x69c>)
 8007b46:	f7fa f839 	bl	8001bbc <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8007b4a:	4b42      	ldr	r3, [pc, #264]	; (8007c54 <MX_GPIO_Init+0x698>)
 8007b4c:	2201      	movs	r2, #1
 8007b4e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b50:	4b40      	ldr	r3, [pc, #256]	; (8007c54 <MX_GPIO_Init+0x698>)
 8007b52:	2202      	movs	r2, #2
 8007b54:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b56:	4b3f      	ldr	r3, [pc, #252]	; (8007c54 <MX_GPIO_Init+0x698>)
 8007b58:	2200      	movs	r2, #0
 8007b5a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007b5c:	4b3d      	ldr	r3, [pc, #244]	; (8007c54 <MX_GPIO_Init+0x698>)
 8007b5e:	2203      	movs	r2, #3
 8007b60:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8007b62:	4b3c      	ldr	r3, [pc, #240]	; (8007c54 <MX_GPIO_Init+0x698>)
 8007b64:	220c      	movs	r2, #12
 8007b66:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8007b68:	493a      	ldr	r1, [pc, #232]	; (8007c54 <MX_GPIO_Init+0x698>)
 8007b6a:	483c      	ldr	r0, [pc, #240]	; (8007c5c <MX_GPIO_Init+0x6a0>)
 8007b6c:	f7fa f826 	bl	8001bbc <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS1_PowerSwitchOn_Pin EXT_RESET_Pin */
  GPIO_InitStruct.Pin = OTG_FS1_PowerSwitchOn_Pin|EXT_RESET_Pin;
 8007b70:	4b38      	ldr	r3, [pc, #224]	; (8007c54 <MX_GPIO_Init+0x698>)
 8007b72:	2205      	movs	r2, #5
 8007b74:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007b76:	4b37      	ldr	r3, [pc, #220]	; (8007c54 <MX_GPIO_Init+0x698>)
 8007b78:	2201      	movs	r2, #1
 8007b7a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b7c:	4b35      	ldr	r3, [pc, #212]	; (8007c54 <MX_GPIO_Init+0x698>)
 8007b7e:	2200      	movs	r2, #0
 8007b80:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007b82:	4b34      	ldr	r3, [pc, #208]	; (8007c54 <MX_GPIO_Init+0x698>)
 8007b84:	2200      	movs	r2, #0
 8007b86:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007b88:	4932      	ldr	r1, [pc, #200]	; (8007c54 <MX_GPIO_Init+0x698>)
 8007b8a:	4835      	ldr	r0, [pc, #212]	; (8007c60 <MX_GPIO_Init+0x6a4>)
 8007b8c:	f7fa f816 	bl	8001bbc <HAL_GPIO_Init>

  /*Configure GPIO pin : MIC_CK_Pin */
  GPIO_InitStruct.Pin = MIC_CK_Pin;
 8007b90:	4b30      	ldr	r3, [pc, #192]	; (8007c54 <MX_GPIO_Init+0x698>)
 8007b92:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007b96:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b98:	4b2e      	ldr	r3, [pc, #184]	; (8007c54 <MX_GPIO_Init+0x698>)
 8007b9a:	2202      	movs	r2, #2
 8007b9c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b9e:	4b2d      	ldr	r3, [pc, #180]	; (8007c54 <MX_GPIO_Init+0x698>)
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007ba4:	4b2b      	ldr	r3, [pc, #172]	; (8007c54 <MX_GPIO_Init+0x698>)
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8007baa:	4b2a      	ldr	r3, [pc, #168]	; (8007c54 <MX_GPIO_Init+0x698>)
 8007bac:	2202      	movs	r2, #2
 8007bae:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(MIC_CK_GPIO_Port, &GPIO_InitStruct);
 8007bb0:	4928      	ldr	r1, [pc, #160]	; (8007c54 <MX_GPIO_Init+0x698>)
 8007bb2:	482c      	ldr	r0, [pc, #176]	; (8007c64 <MX_GPIO_Init+0x6a8>)
 8007bb4:	f7fa f802 	bl	8001bbc <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8007bb8:	4b26      	ldr	r3, [pc, #152]	; (8007c54 <MX_GPIO_Init+0x698>)
 8007bba:	2204      	movs	r2, #4
 8007bbc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007bbe:	4b25      	ldr	r3, [pc, #148]	; (8007c54 <MX_GPIO_Init+0x698>)
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007bc4:	4b23      	ldr	r3, [pc, #140]	; (8007c54 <MX_GPIO_Init+0x698>)
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8007bca:	4922      	ldr	r1, [pc, #136]	; (8007c54 <MX_GPIO_Init+0x698>)
 8007bcc:	4826      	ldr	r0, [pc, #152]	; (8007c68 <MX_GPIO_Init+0x6ac>)
 8007bce:	f7f9 fff5 	bl	8001bbc <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8007bd2:	4b20      	ldr	r3, [pc, #128]	; (8007c54 <MX_GPIO_Init+0x698>)
 8007bd4:	2220      	movs	r2, #32
 8007bd6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8007bd8:	4b1e      	ldr	r3, [pc, #120]	; (8007c54 <MX_GPIO_Init+0x698>)
 8007bda:	4a24      	ldr	r2, [pc, #144]	; (8007c6c <MX_GPIO_Init+0x6b0>)
 8007bdc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007bde:	4b1d      	ldr	r3, [pc, #116]	; (8007c54 <MX_GPIO_Init+0x698>)
 8007be0:	2200      	movs	r2, #0
 8007be2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8007be4:	491b      	ldr	r1, [pc, #108]	; (8007c54 <MX_GPIO_Init+0x698>)
 8007be6:	4822      	ldr	r0, [pc, #136]	; (8007c70 <MX_GPIO_Init+0x6b4>)
 8007be8:	f7f9 ffe8 	bl	8001bbc <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8007bec:	4b19      	ldr	r3, [pc, #100]	; (8007c54 <MX_GPIO_Init+0x698>)
 8007bee:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8007bf2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007bf4:	4b17      	ldr	r3, [pc, #92]	; (8007c54 <MX_GPIO_Init+0x698>)
 8007bf6:	2202      	movs	r2, #2
 8007bf8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007bfa:	4b16      	ldr	r3, [pc, #88]	; (8007c54 <MX_GPIO_Init+0x698>)
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007c00:	4b14      	ldr	r3, [pc, #80]	; (8007c54 <MX_GPIO_Init+0x698>)
 8007c02:	2203      	movs	r2, #3
 8007c04:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8007c06:	4b13      	ldr	r3, [pc, #76]	; (8007c54 <MX_GPIO_Init+0x698>)
 8007c08:	2207      	movs	r2, #7
 8007c0a:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007c0c:	4911      	ldr	r1, [pc, #68]	; (8007c54 <MX_GPIO_Init+0x698>)
 8007c0e:	4814      	ldr	r0, [pc, #80]	; (8007c60 <MX_GPIO_Init+0x6a4>)
 8007c10:	f7f9 ffd4 	bl	8001bbc <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8007c14:	4b0f      	ldr	r3, [pc, #60]	; (8007c54 <MX_GPIO_Init+0x698>)
 8007c16:	2208      	movs	r2, #8
 8007c18:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007c1a:	4b0e      	ldr	r3, [pc, #56]	; (8007c54 <MX_GPIO_Init+0x698>)
 8007c1c:	2201      	movs	r2, #1
 8007c1e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c20:	4b0c      	ldr	r3, [pc, #48]	; (8007c54 <MX_GPIO_Init+0x698>)
 8007c22:	2200      	movs	r2, #0
 8007c24:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007c26:	4b0b      	ldr	r3, [pc, #44]	; (8007c54 <MX_GPIO_Init+0x698>)
 8007c28:	2200      	movs	r2, #0
 8007c2a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8007c2c:	4909      	ldr	r1, [pc, #36]	; (8007c54 <MX_GPIO_Init+0x698>)
 8007c2e:	4811      	ldr	r0, [pc, #68]	; (8007c74 <MX_GPIO_Init+0x6b8>)
 8007c30:	f7f9 ffc4 	bl	8001bbc <HAL_GPIO_Init>

  BSP_LED_Off(LED_GREEN);
 8007c34:	2000      	movs	r0, #0
 8007c36:	f7fd ff8b 	bl	8005b50 <BSP_LED_Off>
  BSP_LED_Off(LED_RED);
 8007c3a:	2002      	movs	r0, #2
 8007c3c:	f7fd ff88 	bl	8005b50 <BSP_LED_Off>
  BSP_LED_Off(LED_ORANGE);
 8007c40:	2001      	movs	r0, #1
 8007c42:	f7fd ff85 	bl	8005b50 <BSP_LED_Off>
  BSP_LED_Off(LED_BLUE);
 8007c46:	2003      	movs	r0, #3
 8007c48:	f7fd ff82 	bl	8005b50 <BSP_LED_Off>

}
 8007c4c:	bf00      	nop
 8007c4e:	3730      	adds	r7, #48	; 0x30
 8007c50:	46bd      	mov	sp, r7
 8007c52:	bd80      	pop	{r7, pc}
 8007c54:	20000360 	.word	0x20000360
 8007c58:	40021400 	.word	0x40021400
 8007c5c:	40020800 	.word	0x40020800
 8007c60:	40020400 	.word	0x40020400
 8007c64:	40020c00 	.word	0x40020c00
 8007c68:	40021800 	.word	0x40021800
 8007c6c:	10110000 	.word	0x10110000
 8007c70:	40022400 	.word	0x40022400
 8007c74:	40020000 	.word	0x40020000

08007c78 <MX_NVIC_Init>:

static void MX_NVIC_Init(void)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	af00      	add	r7, sp, #0
  /* USART6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	2100      	movs	r1, #0
 8007c80:	2047      	movs	r0, #71	; 0x47
 8007c82:	f7f8 fda4 	bl	80007ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART6_IRQn);
 8007c86:	2047      	movs	r0, #71	; 0x47
 8007c88:	f7f8 fdbd 	bl	8000806 <HAL_NVIC_EnableIRQ>
}
 8007c8c:	bf00      	nop
 8007c8e:	bd80      	pop	{r7, pc}

08007c90 <UART_Init>:

static void UART_Init(void)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b082      	sub	sp, #8
 8007c94:	af00      	add	r7, sp, #0
	__HAL_RCC_USART6_CLK_ENABLE();
 8007c96:	2300      	movs	r3, #0
 8007c98:	607b      	str	r3, [r7, #4]
 8007c9a:	4b18      	ldr	r3, [pc, #96]	; (8007cfc <UART_Init+0x6c>)
 8007c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c9e:	4a17      	ldr	r2, [pc, #92]	; (8007cfc <UART_Init+0x6c>)
 8007ca0:	f043 0320 	orr.w	r3, r3, #32
 8007ca4:	6453      	str	r3, [r2, #68]	; 0x44
 8007ca6:	4b15      	ldr	r3, [pc, #84]	; (8007cfc <UART_Init+0x6c>)
 8007ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007caa:	f003 0320 	and.w	r3, r3, #32
 8007cae:	607b      	str	r3, [r7, #4]
 8007cb0:	687b      	ldr	r3, [r7, #4]

	huart6.Instance = USART6;
 8007cb2:	4b13      	ldr	r3, [pc, #76]	; (8007d00 <UART_Init+0x70>)
 8007cb4:	4a13      	ldr	r2, [pc, #76]	; (8007d04 <UART_Init+0x74>)
 8007cb6:	601a      	str	r2, [r3, #0]
	huart6.Init.BaudRate = 9600;
 8007cb8:	4b11      	ldr	r3, [pc, #68]	; (8007d00 <UART_Init+0x70>)
 8007cba:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8007cbe:	605a      	str	r2, [r3, #4]
	huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8007cc0:	4b0f      	ldr	r3, [pc, #60]	; (8007d00 <UART_Init+0x70>)
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	609a      	str	r2, [r3, #8]
	huart6.Init.StopBits = UART_STOPBITS_1;
 8007cc6:	4b0e      	ldr	r3, [pc, #56]	; (8007d00 <UART_Init+0x70>)
 8007cc8:	2200      	movs	r2, #0
 8007cca:	60da      	str	r2, [r3, #12]
	huart6.Init.Parity = UART_PARITY_NONE;
 8007ccc:	4b0c      	ldr	r3, [pc, #48]	; (8007d00 <UART_Init+0x70>)
 8007cce:	2200      	movs	r2, #0
 8007cd0:	611a      	str	r2, [r3, #16]
	huart6.Init.Mode = UART_MODE_TX_RX;
 8007cd2:	4b0b      	ldr	r3, [pc, #44]	; (8007d00 <UART_Init+0x70>)
 8007cd4:	220c      	movs	r2, #12
 8007cd6:	615a      	str	r2, [r3, #20]
	huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007cd8:	4b09      	ldr	r3, [pc, #36]	; (8007d00 <UART_Init+0x70>)
 8007cda:	2200      	movs	r2, #0
 8007cdc:	619a      	str	r2, [r3, #24]
	huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8007cde:	4b08      	ldr	r3, [pc, #32]	; (8007d00 <UART_Init+0x70>)
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart6) != HAL_OK)
 8007ce4:	4806      	ldr	r0, [pc, #24]	; (8007d00 <UART_Init+0x70>)
 8007ce6:	f7fc fc7a 	bl	80045de <HAL_UART_Init>
 8007cea:	4603      	mov	r3, r0
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d001      	beq.n	8007cf4 <UART_Init+0x64>
	{
	  Error_Handler();
 8007cf0:	f000 f80a 	bl	8007d08 <Error_Handler>
	}
}
 8007cf4:	bf00      	nop
 8007cf6:	3708      	adds	r7, #8
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	bd80      	pop	{r7, pc}
 8007cfc:	40023800 	.word	0x40023800
 8007d00:	20000490 	.word	0x20000490
 8007d04:	40011400 	.word	0x40011400

08007d08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	while (1)
	{
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_5);
 8007d0c:	2120      	movs	r1, #32
 8007d0e:	4803      	ldr	r0, [pc, #12]	; (8007d1c <Error_Handler+0x14>)
 8007d10:	f7fa fa25 	bl	800215e <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8007d14:	2064      	movs	r0, #100	; 0x64
 8007d16:	f7f8 fc5b 	bl	80005d0 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_5);
 8007d1a:	e7f7      	b.n	8007d0c <Error_Handler+0x4>
 8007d1c:	40020c00 	.word	0x40020c00

08007d20 <HAL_UART_RxCpltCallback>:

}


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b082      	sub	sp, #8
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart6, &databyte, 1, 100);
 8007d28:	2364      	movs	r3, #100	; 0x64
 8007d2a:	2201      	movs	r2, #1
 8007d2c:	4909      	ldr	r1, [pc, #36]	; (8007d54 <HAL_UART_RxCpltCallback+0x34>)
 8007d2e:	480a      	ldr	r0, [pc, #40]	; (8007d58 <HAL_UART_RxCpltCallback+0x38>)
 8007d30:	f7fc fcac 	bl	800468c <HAL_UART_Transmit>
	BSP_LED_On(LED_GREEN);
 8007d34:	2000      	movs	r0, #0
 8007d36:	f7fd feed 	bl	8005b14 <BSP_LED_On>
	HAL_UART_Receive_IT(&huart6, &databyte, 1);
 8007d3a:	2201      	movs	r2, #1
 8007d3c:	4905      	ldr	r1, [pc, #20]	; (8007d54 <HAL_UART_RxCpltCallback+0x34>)
 8007d3e:	4806      	ldr	r0, [pc, #24]	; (8007d58 <HAL_UART_RxCpltCallback+0x38>)
 8007d40:	f7fc fd3d 	bl	80047be <HAL_UART_Receive_IT>
	BSP_LED_Off(LED_GREEN);
 8007d44:	2000      	movs	r0, #0
 8007d46:	f7fd ff03 	bl	8005b50 <BSP_LED_Off>
}
 8007d4a:	bf00      	nop
 8007d4c:	3708      	adds	r7, #8
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	bd80      	pop	{r7, pc}
 8007d52:	bf00      	nop
 8007d54:	20000384 	.word	0x20000384
 8007d58:	20000490 	.word	0x20000490

08007d5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007d5c:	b480      	push	{r7}
 8007d5e:	b083      	sub	sp, #12
 8007d60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007d62:	2300      	movs	r3, #0
 8007d64:	607b      	str	r3, [r7, #4]
 8007d66:	4b10      	ldr	r3, [pc, #64]	; (8007da8 <HAL_MspInit+0x4c>)
 8007d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d6a:	4a0f      	ldr	r2, [pc, #60]	; (8007da8 <HAL_MspInit+0x4c>)
 8007d6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007d70:	6453      	str	r3, [r2, #68]	; 0x44
 8007d72:	4b0d      	ldr	r3, [pc, #52]	; (8007da8 <HAL_MspInit+0x4c>)
 8007d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007d7a:	607b      	str	r3, [r7, #4]
 8007d7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007d7e:	2300      	movs	r3, #0
 8007d80:	603b      	str	r3, [r7, #0]
 8007d82:	4b09      	ldr	r3, [pc, #36]	; (8007da8 <HAL_MspInit+0x4c>)
 8007d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d86:	4a08      	ldr	r2, [pc, #32]	; (8007da8 <HAL_MspInit+0x4c>)
 8007d88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d8c:	6413      	str	r3, [r2, #64]	; 0x40
 8007d8e:	4b06      	ldr	r3, [pc, #24]	; (8007da8 <HAL_MspInit+0x4c>)
 8007d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d96:	603b      	str	r3, [r7, #0]
 8007d98:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007d9a:	bf00      	nop
 8007d9c:	370c      	adds	r7, #12
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da4:	4770      	bx	lr
 8007da6:	bf00      	nop
 8007da8:	40023800 	.word	0x40023800

08007dac <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b08a      	sub	sp, #40	; 0x28
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007db4:	f107 0314 	add.w	r3, r7, #20
 8007db8:	2200      	movs	r2, #0
 8007dba:	601a      	str	r2, [r3, #0]
 8007dbc:	605a      	str	r2, [r3, #4]
 8007dbe:	609a      	str	r2, [r3, #8]
 8007dc0:	60da      	str	r2, [r3, #12]
 8007dc2:	611a      	str	r2, [r3, #16]
  if(hdsi->Instance==DSI)
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	4a19      	ldr	r2, [pc, #100]	; (8007e30 <HAL_DSI_MspInit+0x84>)
 8007dca:	4293      	cmp	r3, r2
 8007dcc:	d12b      	bne.n	8007e26 <HAL_DSI_MspInit+0x7a>
  {
  /* USER CODE BEGIN DSI_MspInit 0 */

  /* USER CODE END DSI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 8007dce:	2300      	movs	r3, #0
 8007dd0:	613b      	str	r3, [r7, #16]
 8007dd2:	4b18      	ldr	r3, [pc, #96]	; (8007e34 <HAL_DSI_MspInit+0x88>)
 8007dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007dd6:	4a17      	ldr	r2, [pc, #92]	; (8007e34 <HAL_DSI_MspInit+0x88>)
 8007dd8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007ddc:	6453      	str	r3, [r2, #68]	; 0x44
 8007dde:	4b15      	ldr	r3, [pc, #84]	; (8007e34 <HAL_DSI_MspInit+0x88>)
 8007de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007de2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007de6:	613b      	str	r3, [r7, #16]
 8007de8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8007dea:	2300      	movs	r3, #0
 8007dec:	60fb      	str	r3, [r7, #12]
 8007dee:	4b11      	ldr	r3, [pc, #68]	; (8007e34 <HAL_DSI_MspInit+0x88>)
 8007df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007df2:	4a10      	ldr	r2, [pc, #64]	; (8007e34 <HAL_DSI_MspInit+0x88>)
 8007df4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007df8:	6313      	str	r3, [r2, #48]	; 0x30
 8007dfa:	4b0e      	ldr	r3, [pc, #56]	; (8007e34 <HAL_DSI_MspInit+0x88>)
 8007dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dfe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007e02:	60fb      	str	r3, [r7, #12]
 8007e04:	68fb      	ldr	r3, [r7, #12]
    /**DSIHOST GPIO Configuration
    PJ2     ------> DSIHOST_TE
    */
    GPIO_InitStruct.Pin = DSI_TE_Pin;
 8007e06:	2304      	movs	r3, #4
 8007e08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007e0a:	2302      	movs	r3, #2
 8007e0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e0e:	2300      	movs	r3, #0
 8007e10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007e12:	2300      	movs	r3, #0
 8007e14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 8007e16:	230d      	movs	r3, #13
 8007e18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DSI_TE_GPIO_Port, &GPIO_InitStruct);
 8007e1a:	f107 0314 	add.w	r3, r7, #20
 8007e1e:	4619      	mov	r1, r3
 8007e20:	4805      	ldr	r0, [pc, #20]	; (8007e38 <HAL_DSI_MspInit+0x8c>)
 8007e22:	f7f9 fecb 	bl	8001bbc <HAL_GPIO_Init>
  /* USER CODE BEGIN DSI_MspInit 1 */

  /* USER CODE END DSI_MspInit 1 */
  }

}
 8007e26:	bf00      	nop
 8007e28:	3728      	adds	r7, #40	; 0x28
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	bd80      	pop	{r7, pc}
 8007e2e:	bf00      	nop
 8007e30:	40016c00 	.word	0x40016c00
 8007e34:	40023800 	.word	0x40023800
 8007e38:	40022400 	.word	0x40022400

08007e3c <HAL_DSI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspDeInit(DSI_HandleTypeDef* hdsi)
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b082      	sub	sp, #8
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
  if(hdsi->Instance==DSI)
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	4a08      	ldr	r2, [pc, #32]	; (8007e6c <HAL_DSI_MspDeInit+0x30>)
 8007e4a:	4293      	cmp	r3, r2
 8007e4c:	d109      	bne.n	8007e62 <HAL_DSI_MspDeInit+0x26>
  {
  /* USER CODE BEGIN DSI_MspDeInit 0 */

  /* USER CODE END DSI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_DSI_CLK_DISABLE();
 8007e4e:	4b08      	ldr	r3, [pc, #32]	; (8007e70 <HAL_DSI_MspDeInit+0x34>)
 8007e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e52:	4a07      	ldr	r2, [pc, #28]	; (8007e70 <HAL_DSI_MspDeInit+0x34>)
 8007e54:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8007e58:	6453      	str	r3, [r2, #68]	; 0x44

    /**DSIHOST GPIO Configuration
    PJ2     ------> DSIHOST_TE
    */
    HAL_GPIO_DeInit(DSI_TE_GPIO_Port, DSI_TE_Pin);
 8007e5a:	2104      	movs	r1, #4
 8007e5c:	4805      	ldr	r0, [pc, #20]	; (8007e74 <HAL_DSI_MspDeInit+0x38>)
 8007e5e:	f7fa f859 	bl	8001f14 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN DSI_MspDeInit 1 */

  /* USER CODE END DSI_MspDeInit 1 */
  }

}
 8007e62:	bf00      	nop
 8007e64:	3708      	adds	r7, #8
 8007e66:	46bd      	mov	sp, r7
 8007e68:	bd80      	pop	{r7, pc}
 8007e6a:	bf00      	nop
 8007e6c:	40016c00 	.word	0x40016c00
 8007e70:	40023800 	.word	0x40023800
 8007e74:	40022400 	.word	0x40022400

08007e78 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8007e78:	b480      	push	{r7}
 8007e7a:	b085      	sub	sp, #20
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
  if(hltdc->Instance==LTDC)
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	4a0b      	ldr	r2, [pc, #44]	; (8007eb4 <HAL_LTDC_MspInit+0x3c>)
 8007e86:	4293      	cmp	r3, r2
 8007e88:	d10d      	bne.n	8007ea6 <HAL_LTDC_MspInit+0x2e>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	60fb      	str	r3, [r7, #12]
 8007e8e:	4b0a      	ldr	r3, [pc, #40]	; (8007eb8 <HAL_LTDC_MspInit+0x40>)
 8007e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e92:	4a09      	ldr	r2, [pc, #36]	; (8007eb8 <HAL_LTDC_MspInit+0x40>)
 8007e94:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007e98:	6453      	str	r3, [r2, #68]	; 0x44
 8007e9a:	4b07      	ldr	r3, [pc, #28]	; (8007eb8 <HAL_LTDC_MspInit+0x40>)
 8007e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e9e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007ea2:	60fb      	str	r3, [r7, #12]
 8007ea4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8007ea6:	bf00      	nop
 8007ea8:	3714      	adds	r7, #20
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb0:	4770      	bx	lr
 8007eb2:	bf00      	nop
 8007eb4:	40016800 	.word	0x40016800
 8007eb8:	40023800 	.word	0x40023800

08007ebc <SysTick_Handler>:
  * @brief  This function handles SysTick Handler, but only if no RTOS defines it.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8007ec0:	f7f8 fb66 	bl	8000590 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 8007ec4:	f7f8 fcb9 	bl	800083a <HAL_SYSTICK_IRQHandler>
#ifdef USE_RTOS_SYSTICK
	osSystickHandler();
#endif
}
 8007ec8:	bf00      	nop
 8007eca:	bd80      	pop	{r7, pc}

08007ecc <USART6_IRQHandler>:

void USART6_IRQHandler(void)
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	af00      	add	r7, sp, #0

  HAL_UART_IRQHandler(&huart6);
 8007ed0:	4802      	ldr	r0, [pc, #8]	; (8007edc <USART6_IRQHandler+0x10>)
 8007ed2:	f7fc fcc9 	bl	8004868 <HAL_UART_IRQHandler>

}
 8007ed6:	bf00      	nop
 8007ed8:	bd80      	pop	{r7, pc}
 8007eda:	bf00      	nop
 8007edc:	20000490 	.word	0x20000490

08007ee0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007ee0:	b480      	push	{r7}
 8007ee2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007ee4:	4b16      	ldr	r3, [pc, #88]	; (8007f40 <SystemInit+0x60>)
 8007ee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007eea:	4a15      	ldr	r2, [pc, #84]	; (8007f40 <SystemInit+0x60>)
 8007eec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007ef0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8007ef4:	4b13      	ldr	r3, [pc, #76]	; (8007f44 <SystemInit+0x64>)
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	4a12      	ldr	r2, [pc, #72]	; (8007f44 <SystemInit+0x64>)
 8007efa:	f043 0301 	orr.w	r3, r3, #1
 8007efe:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8007f00:	4b10      	ldr	r3, [pc, #64]	; (8007f44 <SystemInit+0x64>)
 8007f02:	2200      	movs	r2, #0
 8007f04:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8007f06:	4b0f      	ldr	r3, [pc, #60]	; (8007f44 <SystemInit+0x64>)
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	4a0e      	ldr	r2, [pc, #56]	; (8007f44 <SystemInit+0x64>)
 8007f0c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8007f10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007f14:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8007f16:	4b0b      	ldr	r3, [pc, #44]	; (8007f44 <SystemInit+0x64>)
 8007f18:	4a0b      	ldr	r2, [pc, #44]	; (8007f48 <SystemInit+0x68>)
 8007f1a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8007f1c:	4b09      	ldr	r3, [pc, #36]	; (8007f44 <SystemInit+0x64>)
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	4a08      	ldr	r2, [pc, #32]	; (8007f44 <SystemInit+0x64>)
 8007f22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007f26:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8007f28:	4b06      	ldr	r3, [pc, #24]	; (8007f44 <SystemInit+0x64>)
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007f2e:	4b04      	ldr	r3, [pc, #16]	; (8007f40 <SystemInit+0x60>)
 8007f30:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007f34:	609a      	str	r2, [r3, #8]
#endif
}
 8007f36:	bf00      	nop
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3e:	4770      	bx	lr
 8007f40:	e000ed00 	.word	0xe000ed00
 8007f44:	40023800 	.word	0x40023800
 8007f48:	24003010 	.word	0x24003010

08007f4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8007f4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007f84 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8007f50:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8007f52:	e003      	b.n	8007f5c <LoopCopyDataInit>

08007f54 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8007f54:	4b0c      	ldr	r3, [pc, #48]	; (8007f88 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8007f56:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8007f58:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8007f5a:	3104      	adds	r1, #4

08007f5c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8007f5c:	480b      	ldr	r0, [pc, #44]	; (8007f8c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8007f5e:	4b0c      	ldr	r3, [pc, #48]	; (8007f90 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8007f60:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8007f62:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8007f64:	d3f6      	bcc.n	8007f54 <CopyDataInit>
  ldr  r2, =_sbss
 8007f66:	4a0b      	ldr	r2, [pc, #44]	; (8007f94 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8007f68:	e002      	b.n	8007f70 <LoopFillZerobss>

08007f6a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8007f6a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8007f6c:	f842 3b04 	str.w	r3, [r2], #4

08007f70 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8007f70:	4b09      	ldr	r3, [pc, #36]	; (8007f98 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8007f72:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8007f74:	d3f9      	bcc.n	8007f6a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8007f76:	f7ff ffb3 	bl	8007ee0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007f7a:	f000 f811 	bl	8007fa0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007f7e:	f7ff f9fb 	bl	8007378 <main>
  bx  lr    
 8007f82:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8007f84:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8007f88:	080a1f28 	.word	0x080a1f28
  ldr  r0, =_sdata
 8007f8c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8007f90:	2000008c 	.word	0x2000008c
  ldr  r2, =_sbss
 8007f94:	2000008c 	.word	0x2000008c
  ldr  r3, = _ebss
 8007f98:	200004d0 	.word	0x200004d0

08007f9c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007f9c:	e7fe      	b.n	8007f9c <ADC_IRQHandler>
	...

08007fa0 <__libc_init_array>:
 8007fa0:	b570      	push	{r4, r5, r6, lr}
 8007fa2:	4d0d      	ldr	r5, [pc, #52]	; (8007fd8 <__libc_init_array+0x38>)
 8007fa4:	4c0d      	ldr	r4, [pc, #52]	; (8007fdc <__libc_init_array+0x3c>)
 8007fa6:	1b64      	subs	r4, r4, r5
 8007fa8:	10a4      	asrs	r4, r4, #2
 8007faa:	2600      	movs	r6, #0
 8007fac:	42a6      	cmp	r6, r4
 8007fae:	d109      	bne.n	8007fc4 <__libc_init_array+0x24>
 8007fb0:	4d0b      	ldr	r5, [pc, #44]	; (8007fe0 <__libc_init_array+0x40>)
 8007fb2:	4c0c      	ldr	r4, [pc, #48]	; (8007fe4 <__libc_init_array+0x44>)
 8007fb4:	f000 f818 	bl	8007fe8 <_init>
 8007fb8:	1b64      	subs	r4, r4, r5
 8007fba:	10a4      	asrs	r4, r4, #2
 8007fbc:	2600      	movs	r6, #0
 8007fbe:	42a6      	cmp	r6, r4
 8007fc0:	d105      	bne.n	8007fce <__libc_init_array+0x2e>
 8007fc2:	bd70      	pop	{r4, r5, r6, pc}
 8007fc4:	f855 3b04 	ldr.w	r3, [r5], #4
 8007fc8:	4798      	blx	r3
 8007fca:	3601      	adds	r6, #1
 8007fcc:	e7ee      	b.n	8007fac <__libc_init_array+0xc>
 8007fce:	f855 3b04 	ldr.w	r3, [r5], #4
 8007fd2:	4798      	blx	r3
 8007fd4:	3601      	adds	r6, #1
 8007fd6:	e7f2      	b.n	8007fbe <__libc_init_array+0x1e>
 8007fd8:	080a1f20 	.word	0x080a1f20
 8007fdc:	080a1f20 	.word	0x080a1f20
 8007fe0:	080a1f20 	.word	0x080a1f20
 8007fe4:	080a1f24 	.word	0x080a1f24

08007fe8 <_init>:
 8007fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fea:	bf00      	nop
 8007fec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fee:	bc08      	pop	{r3}
 8007ff0:	469e      	mov	lr, r3
 8007ff2:	4770      	bx	lr

08007ff4 <_fini>:
 8007ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ff6:	bf00      	nop
 8007ff8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ffa:	bc08      	pop	{r3}
 8007ffc:	469e      	mov	lr, r3
 8007ffe:	4770      	bx	lr
